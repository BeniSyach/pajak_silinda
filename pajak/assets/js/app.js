/*! For license information please see app.js.LICENSE.txt */
(() => {
    var t,
        e = {
            927: (t, e, i) => {
                "use strict";
                var a;
                function r(t, e) {
                    var i = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var a = Object.getOwnPropertySymbols(t);
                        e &&
                            (a = a.filter(function (e) {
                                return Object.getOwnPropertyDescriptor(
                                    t,
                                    e
                                ).enumerable;
                            })),
                            i.push.apply(i, a);
                    }
                    return i;
                }
                function s(t) {
                    for (var e = 1; e < arguments.length; e++) {
                        var i = null != arguments[e] ? arguments[e] : {};
                        e % 2
                            ? r(Object(i), !0).forEach(function (e) {
                                  h(t, e, i[e]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(
                                  t,
                                  Object.getOwnPropertyDescriptors(i)
                              )
                            : r(Object(i)).forEach(function (e) {
                                  Object.defineProperty(
                                      t,
                                      e,
                                      Object.getOwnPropertyDescriptor(i, e)
                                  );
                              });
                    }
                    return t;
                }
                function n(t) {
                    return (
                        (n =
                            "function" == typeof Symbol &&
                            "symbol" == typeof Symbol.iterator
                                ? function (t) {
                                      return typeof t;
                                  }
                                : function (t) {
                                      return t &&
                                          "function" == typeof Symbol &&
                                          t.constructor === Symbol &&
                                          t !== Symbol.prototype
                                          ? "symbol"
                                          : typeof t;
                                  }),
                        n(t)
                    );
                }
                function o(t, e) {
                    if (!(t instanceof e))
                        throw new TypeError(
                            "Cannot call a class as a function"
                        );
                }
                function l(t, e) {
                    for (var i = 0; i < e.length; i++) {
                        var a = e[i];
                        (a.enumerable = a.enumerable || !1),
                            (a.configurable = !0),
                            "value" in a && (a.writable = !0),
                            Object.defineProperty(t, a.key, a);
                    }
                }
                function c(t, e, i) {
                    return e && l(t.prototype, e), i && l(t, i), t;
                }
                function h(t, e, i) {
                    return (
                        e in t
                            ? Object.defineProperty(t, e, {
                                  value: i,
                                  enumerable: !0,
                                  configurable: !0,
                                  writable: !0,
                              })
                            : (t[e] = i),
                        t
                    );
                }
                function d(t, e) {
                    if ("function" != typeof e && null !== e)
                        throw new TypeError(
                            "Super expression must either be null or a function"
                        );
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: {
                            value: t,
                            writable: !0,
                            configurable: !0,
                        },
                    })),
                        e && f(t, e);
                }
                function u(t) {
                    return (
                        (u = Object.setPrototypeOf
                            ? Object.getPrototypeOf
                            : function (t) {
                                  return (
                                      t.__proto__ || Object.getPrototypeOf(t)
                                  );
                              }),
                        u(t)
                    );
                }
                function f(t, e) {
                    return (
                        (f =
                            Object.setPrototypeOf ||
                            function (t, e) {
                                return (t.__proto__ = e), t;
                            }),
                        f(t, e)
                    );
                }
                function g(t) {
                    var e = (function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct)
                            return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return (
                                Boolean.prototype.valueOf.call(
                                    Reflect.construct(
                                        Boolean,
                                        [],
                                        function () {}
                                    )
                                ),
                                !0
                            );
                        } catch (t) {
                            return !1;
                        }
                    })();
                    return function () {
                        var i,
                            a = u(t);
                        if (e) {
                            var r = u(this).constructor;
                            i = Reflect.construct(a, arguments, r);
                        } else i = a.apply(this, arguments);
                        return (function (t, e) {
                            if (
                                e &&
                                ("object" == typeof e || "function" == typeof e)
                            )
                                return e;
                            if (void 0 !== e)
                                throw new TypeError(
                                    "Derived constructors may only return object or undefined"
                                );
                            return (function (t) {
                                if (void 0 === t)
                                    throw new ReferenceError(
                                        "this hasn't been initialised - super() hasn't been called"
                                    );
                                return t;
                            })(t);
                        })(this, i);
                    };
                }
                function p(t, e) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return t;
                        })(t) ||
                        (function (t, e) {
                            var i =
                                null == t
                                    ? null
                                    : ("undefined" != typeof Symbol &&
                                          t[Symbol.iterator]) ||
                                      t["@@iterator"];
                            if (null != i) {
                                var a,
                                    r,
                                    s = [],
                                    n = !0,
                                    o = !1;
                                try {
                                    for (
                                        i = i.call(t);
                                        !(n = (a = i.next()).done) &&
                                        (s.push(a.value), !e || s.length !== e);
                                        n = !0
                                    );
                                } catch (t) {
                                    (o = !0), (r = t);
                                } finally {
                                    try {
                                        n || null == i.return || i.return();
                                    } finally {
                                        if (o) throw r;
                                    }
                                }
                                return s;
                            }
                        })(t, e) ||
                        m(t, e) ||
                        (function () {
                            throw new TypeError(
                                "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                            );
                        })()
                    );
                }
                function x(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return b(t);
                        })(t) ||
                        (function (t) {
                            if (
                                ("undefined" != typeof Symbol &&
                                    null != t[Symbol.iterator]) ||
                                null != t["@@iterator"]
                            )
                                return Array.from(t);
                        })(t) ||
                        m(t) ||
                        (function () {
                            throw new TypeError(
                                "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                            );
                        })()
                    );
                }
                function m(t, e) {
                    if (t) {
                        if ("string" == typeof t) return b(t, e);
                        var i = Object.prototype.toString.call(t).slice(8, -1);
                        return (
                            "Object" === i &&
                                t.constructor &&
                                (i = t.constructor.name),
                            "Map" === i || "Set" === i
                                ? Array.from(t)
                                : "Arguments" === i ||
                                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(
                                      i
                                  )
                                ? b(t, e)
                                : void 0
                        );
                    }
                }
                function b(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var i = 0, a = new Array(e); i < e; i++) a[i] = t[i];
                    return a;
                }
                var v = (function () {
                        function t() {
                            o(this, t);
                        }
                        return (
                            c(
                                t,
                                [
                                    {
                                        key: "shadeRGBColor",
                                        value: function (t, e) {
                                            var i = e.split(","),
                                                a = t < 0 ? 0 : 255,
                                                r = t < 0 ? -1 * t : t,
                                                s = parseInt(i[0].slice(4), 10),
                                                n = parseInt(i[1], 10),
                                                o = parseInt(i[2], 10);
                                            return (
                                                "rgb(" +
                                                (Math.round((a - s) * r) + s) +
                                                "," +
                                                (Math.round((a - n) * r) + n) +
                                                "," +
                                                (Math.round((a - o) * r) + o) +
                                                ")"
                                            );
                                        },
                                    },
                                    {
                                        key: "shadeHexColor",
                                        value: function (t, e) {
                                            var i = parseInt(e.slice(1), 16),
                                                a = t < 0 ? 0 : 255,
                                                r = t < 0 ? -1 * t : t,
                                                s = i >> 16,
                                                n = (i >> 8) & 255,
                                                o = 255 & i;
                                            return (
                                                "#" +
                                                (
                                                    16777216 +
                                                    65536 *
                                                        (Math.round(
                                                            (a - s) * r
                                                        ) +
                                                            s) +
                                                    256 *
                                                        (Math.round(
                                                            (a - n) * r
                                                        ) +
                                                            n) +
                                                    (Math.round((a - o) * r) +
                                                        o)
                                                )
                                                    .toString(16)
                                                    .slice(1)
                                            );
                                        },
                                    },
                                    {
                                        key: "shadeColor",
                                        value: function (e, i) {
                                            return t.isColorHex(i)
                                                ? this.shadeHexColor(e, i)
                                                : this.shadeRGBColor(e, i);
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "bind",
                                        value: function (t, e) {
                                            return function () {
                                                return t.apply(e, arguments);
                                            };
                                        },
                                    },
                                    {
                                        key: "isObject",
                                        value: function (t) {
                                            return (
                                                t &&
                                                "object" === n(t) &&
                                                !Array.isArray(t) &&
                                                null != t
                                            );
                                        },
                                    },
                                    {
                                        key: "is",
                                        value: function (t, e) {
                                            return (
                                                Object.prototype.toString.call(
                                                    e
                                                ) ===
                                                "[object " + t + "]"
                                            );
                                        },
                                    },
                                    {
                                        key: "listToArray",
                                        value: function (t) {
                                            var e,
                                                i = [];
                                            for (e = 0; e < t.length; e++)
                                                i[e] = t[e];
                                            return i;
                                        },
                                    },
                                    {
                                        key: "extend",
                                        value: function (t, e) {
                                            var i = this;
                                            "function" !=
                                                typeof Object.assign &&
                                                (Object.assign = function (t) {
                                                    if (null == t)
                                                        throw new TypeError(
                                                            "Cannot convert undefined or null to object"
                                                        );
                                                    for (
                                                        var e = Object(t),
                                                            i = 1;
                                                        i < arguments.length;
                                                        i++
                                                    ) {
                                                        var a = arguments[i];
                                                        if (null != a)
                                                            for (var r in a)
                                                                a.hasOwnProperty(
                                                                    r
                                                                ) &&
                                                                    (e[r] =
                                                                        a[r]);
                                                    }
                                                    return e;
                                                });
                                            var a = Object.assign({}, t);
                                            return (
                                                this.isObject(t) &&
                                                    this.isObject(e) &&
                                                    Object.keys(e).forEach(
                                                        function (r) {
                                                            i.isObject(e[r]) &&
                                                            r in t
                                                                ? (a[r] =
                                                                      i.extend(
                                                                          t[r],
                                                                          e[r]
                                                                      ))
                                                                : Object.assign(
                                                                      a,
                                                                      h(
                                                                          {},
                                                                          r,
                                                                          e[r]
                                                                      )
                                                                  );
                                                        }
                                                    ),
                                                a
                                            );
                                        },
                                    },
                                    {
                                        key: "extendArray",
                                        value: function (e, i) {
                                            var a = [];
                                            return (
                                                e.map(function (e) {
                                                    a.push(t.extend(i, e));
                                                }),
                                                a
                                            );
                                        },
                                    },
                                    {
                                        key: "monthMod",
                                        value: function (t) {
                                            return t % 12;
                                        },
                                    },
                                    {
                                        key: "clone",
                                        value: function (e) {
                                            if (t.is("Array", e)) {
                                                for (
                                                    var i = [], a = 0;
                                                    a < e.length;
                                                    a++
                                                )
                                                    i[a] = this.clone(e[a]);
                                                return i;
                                            }
                                            if (t.is("Null", e)) return null;
                                            if (t.is("Date", e)) return e;
                                            if ("object" === n(e)) {
                                                var r = {};
                                                for (var s in e)
                                                    e.hasOwnProperty(s) &&
                                                        (r[s] = this.clone(
                                                            e[s]
                                                        ));
                                                return r;
                                            }
                                            return e;
                                        },
                                    },
                                    {
                                        key: "log10",
                                        value: function (t) {
                                            return Math.log(t) / Math.LN10;
                                        },
                                    },
                                    {
                                        key: "roundToBase10",
                                        value: function (t) {
                                            return Math.pow(
                                                10,
                                                Math.floor(Math.log10(t))
                                            );
                                        },
                                    },
                                    {
                                        key: "roundToBase",
                                        value: function (t, e) {
                                            return Math.pow(
                                                e,
                                                Math.floor(
                                                    Math.log(t) / Math.log(e)
                                                )
                                            );
                                        },
                                    },
                                    {
                                        key: "parseNumber",
                                        value: function (t) {
                                            return null === t
                                                ? t
                                                : parseFloat(t);
                                        },
                                    },
                                    {
                                        key: "randomId",
                                        value: function () {
                                            return (Math.random() + 1)
                                                .toString(36)
                                                .substring(4);
                                        },
                                    },
                                    {
                                        key: "noExponents",
                                        value: function (t) {
                                            var e = String(t).split(/[eE]/);
                                            if (1 === e.length) return e[0];
                                            var i = "",
                                                a = t < 0 ? "-" : "",
                                                r = e[0].replace(".", ""),
                                                s = Number(e[1]) + 1;
                                            if (s < 0) {
                                                for (i = a + "0."; s++; )
                                                    i += "0";
                                                return i + r.replace(/^-/, "");
                                            }
                                            for (s -= r.length; s--; ) i += "0";
                                            return r + i;
                                        },
                                    },
                                    {
                                        key: "getDimensions",
                                        value: function (t) {
                                            var e = getComputedStyle(t, null),
                                                i = t.clientHeight,
                                                a = t.clientWidth;
                                            return (
                                                (i -=
                                                    parseFloat(e.paddingTop) +
                                                    parseFloat(
                                                        e.paddingBottom
                                                    )),
                                                [
                                                    (a -=
                                                        parseFloat(
                                                            e.paddingLeft
                                                        ) +
                                                        parseFloat(
                                                            e.paddingRight
                                                        )),
                                                    i,
                                                ]
                                            );
                                        },
                                    },
                                    {
                                        key: "getBoundingClientRect",
                                        value: function (t) {
                                            var e = t.getBoundingClientRect();
                                            return {
                                                top: e.top,
                                                right: e.right,
                                                bottom: e.bottom,
                                                left: e.left,
                                                width: t.clientWidth,
                                                height: t.clientHeight,
                                                x: e.left,
                                                y: e.top,
                                            };
                                        },
                                    },
                                    {
                                        key: "getLargestStringFromArr",
                                        value: function (t) {
                                            return t.reduce(function (t, e) {
                                                return (
                                                    Array.isArray(e) &&
                                                        (e = e.reduce(function (
                                                            t,
                                                            e
                                                        ) {
                                                            return t.length >
                                                                e.length
                                                                ? t
                                                                : e;
                                                        })),
                                                    t.length > e.length ? t : e
                                                );
                                            }, 0);
                                        },
                                    },
                                    {
                                        key: "hexToRgba",
                                        value: function () {
                                            var t =
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                        ? arguments[0]
                                                        : "#999999",
                                                e =
                                                    arguments.length > 1 &&
                                                    void 0 !== arguments[1]
                                                        ? arguments[1]
                                                        : 0.6;
                                            "#" !== t.substring(0, 1) &&
                                                (t = "#999999");
                                            var i = t.replace("#", "");
                                            i = i.match(
                                                new RegExp(
                                                    "(.{" + i.length / 3 + "})",
                                                    "g"
                                                )
                                            );
                                            for (var a = 0; a < i.length; a++)
                                                i[a] = parseInt(
                                                    1 === i[a].length
                                                        ? i[a] + i[a]
                                                        : i[a],
                                                    16
                                                );
                                            return (
                                                void 0 !== e && i.push(e),
                                                "rgba(" + i.join(",") + ")"
                                            );
                                        },
                                    },
                                    {
                                        key: "getOpacityFromRGBA",
                                        value: function (t) {
                                            return parseFloat(
                                                t.replace(/^.*,(.+)\)/, "$1")
                                            );
                                        },
                                    },
                                    {
                                        key: "rgb2hex",
                                        value: function (t) {
                                            return (t = t.match(
                                                /^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i
                                            )) && 4 === t.length
                                                ? "#" +
                                                      (
                                                          "0" +
                                                          parseInt(
                                                              t[1],
                                                              10
                                                          ).toString(16)
                                                      ).slice(-2) +
                                                      (
                                                          "0" +
                                                          parseInt(
                                                              t[2],
                                                              10
                                                          ).toString(16)
                                                      ).slice(-2) +
                                                      (
                                                          "0" +
                                                          parseInt(
                                                              t[3],
                                                              10
                                                          ).toString(16)
                                                      ).slice(-2)
                                                : "";
                                        },
                                    },
                                    {
                                        key: "isColorHex",
                                        value: function (t) {
                                            return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(
                                                t
                                            );
                                        },
                                    },
                                    {
                                        key: "getPolygonPos",
                                        value: function (t, e) {
                                            for (
                                                var i = [],
                                                    a = (2 * Math.PI) / e,
                                                    r = 0;
                                                r < e;
                                                r++
                                            ) {
                                                var s = {};
                                                (s.x = t * Math.sin(r * a)),
                                                    (s.y =
                                                        -t * Math.cos(r * a)),
                                                    i.push(s);
                                            }
                                            return i;
                                        },
                                    },
                                    {
                                        key: "polarToCartesian",
                                        value: function (t, e, i, a) {
                                            var r = ((a - 90) * Math.PI) / 180;
                                            return {
                                                x: t + i * Math.cos(r),
                                                y: e + i * Math.sin(r),
                                            };
                                        },
                                    },
                                    {
                                        key: "escapeString",
                                        value: function (t) {
                                            var e =
                                                    arguments.length > 1 &&
                                                    void 0 !== arguments[1]
                                                        ? arguments[1]
                                                        : "x",
                                                i = t.toString().slice();
                                            return i.replace(
                                                /[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi,
                                                e
                                            );
                                        },
                                    },
                                    {
                                        key: "negToZero",
                                        value: function (t) {
                                            return t < 0 ? 0 : t;
                                        },
                                    },
                                    {
                                        key: "moveIndexInArray",
                                        value: function (t, e, i) {
                                            if (i >= t.length)
                                                for (
                                                    var a = i - t.length + 1;
                                                    a--;

                                                )
                                                    t.push(void 0);
                                            return (
                                                t.splice(
                                                    i,
                                                    0,
                                                    t.splice(e, 1)[0]
                                                ),
                                                t
                                            );
                                        },
                                    },
                                    {
                                        key: "extractNumber",
                                        value: function (t) {
                                            return parseFloat(
                                                t.replace(/[^\d.]*/g, "")
                                            );
                                        },
                                    },
                                    {
                                        key: "findAncestor",
                                        value: function (t, e) {
                                            for (
                                                ;
                                                (t = t.parentElement) &&
                                                !t.classList.contains(e);

                                            );
                                            return t;
                                        },
                                    },
                                    {
                                        key: "setELstyles",
                                        value: function (t, e) {
                                            for (var i in e)
                                                e.hasOwnProperty(i) &&
                                                    (t.style.key = e[i]);
                                        },
                                    },
                                    {
                                        key: "isNumber",
                                        value: function (t) {
                                            return (
                                                !isNaN(t) &&
                                                parseFloat(Number(t)) === t &&
                                                !isNaN(parseInt(t, 10))
                                            );
                                        },
                                    },
                                    {
                                        key: "isFloat",
                                        value: function (t) {
                                            return (
                                                Number(t) === t && t % 1 != 0
                                            );
                                        },
                                    },
                                    {
                                        key: "isSafari",
                                        value: function () {
                                            return /^((?!chrome|android).)*safari/i.test(
                                                navigator.userAgent
                                            );
                                        },
                                    },
                                    {
                                        key: "isFirefox",
                                        value: function () {
                                            return (
                                                navigator.userAgent
                                                    .toLowerCase()
                                                    .indexOf("firefox") > -1
                                            );
                                        },
                                    },
                                    {
                                        key: "isIE11",
                                        value: function () {
                                            if (
                                                -1 !==
                                                    window.navigator.userAgent.indexOf(
                                                        "MSIE"
                                                    ) ||
                                                window.navigator.appVersion.indexOf(
                                                    "Trident/"
                                                ) > -1
                                            )
                                                return !0;
                                        },
                                    },
                                    {
                                        key: "isIE",
                                        value: function () {
                                            var t = window.navigator.userAgent,
                                                e = t.indexOf("MSIE ");
                                            if (e > 0)
                                                return parseInt(
                                                    t.substring(
                                                        e + 5,
                                                        t.indexOf(".", e)
                                                    ),
                                                    10
                                                );
                                            if (t.indexOf("Trident/") > 0) {
                                                var i = t.indexOf("rv:");
                                                return parseInt(
                                                    t.substring(
                                                        i + 3,
                                                        t.indexOf(".", i)
                                                    ),
                                                    10
                                                );
                                            }
                                            var a = t.indexOf("Edge/");
                                            return (
                                                a > 0 &&
                                                parseInt(
                                                    t.substring(
                                                        a + 5,
                                                        t.indexOf(".", a)
                                                    ),
                                                    10
                                                )
                                            );
                                        },
                                    },
                                ]
                            ),
                            t
                        );
                    })(),
                    y = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                this.setEasingFunctions();
                        }
                        return (
                            c(t, [
                                {
                                    key: "setEasingFunctions",
                                    value: function () {
                                        var t;
                                        if (!this.w.globals.easing) {
                                            switch (
                                                this.w.config.chart.animations
                                                    .easing
                                            ) {
                                                case "linear":
                                                    t = "-";
                                                    break;
                                                case "easein":
                                                    t = "<";
                                                    break;
                                                case "easeout":
                                                    t = ">";
                                                    break;
                                                case "easeinout":
                                                default:
                                                    t = "<>";
                                                    break;
                                                case "swing":
                                                    t = function (t) {
                                                        var e = 1.70158;
                                                        return (
                                                            (t -= 1) *
                                                                t *
                                                                ((e + 1) * t +
                                                                    e) +
                                                            1
                                                        );
                                                    };
                                                    break;
                                                case "bounce":
                                                    t = function (t) {
                                                        return t < 1 / 2.75
                                                            ? 7.5625 * t * t
                                                            : t < 2 / 2.75
                                                            ? 7.5625 *
                                                                  (t -=
                                                                      1.5 /
                                                                      2.75) *
                                                                  t +
                                                              0.75
                                                            : t < 2.5 / 2.75
                                                            ? 7.5625 *
                                                                  (t -=
                                                                      2.25 /
                                                                      2.75) *
                                                                  t +
                                                              0.9375
                                                            : 7.5625 *
                                                                  (t -=
                                                                      2.625 /
                                                                      2.75) *
                                                                  t +
                                                              0.984375;
                                                    };
                                                    break;
                                                case "elastic":
                                                    t = function (t) {
                                                        return t === !!t
                                                            ? t
                                                            : Math.pow(
                                                                  2,
                                                                  -10 * t
                                                              ) *
                                                                  Math.sin(
                                                                      ((t -
                                                                          0.075) *
                                                                          (2 *
                                                                              Math.PI)) /
                                                                          0.3
                                                                  ) +
                                                                  1;
                                                    };
                                            }
                                            this.w.globals.easing = t;
                                        }
                                    },
                                },
                                {
                                    key: "animateLine",
                                    value: function (t, e, i, a) {
                                        t.attr(e).animate(a).attr(i);
                                    },
                                },
                                {
                                    key: "animateMarker",
                                    value: function (t, e, i, a, r, s) {
                                        e || (e = 0),
                                            t
                                                .attr({
                                                    r: e,
                                                    width: e,
                                                    height: e,
                                                })
                                                .animate(a, r)
                                                .attr({
                                                    r: i,
                                                    width: i.width,
                                                    height: i.height,
                                                })
                                                .afterAll(function () {
                                                    s();
                                                });
                                    },
                                },
                                {
                                    key: "animateCircle",
                                    value: function (t, e, i, a, r) {
                                        t.attr({ r: e.r, cx: e.cx, cy: e.cy })
                                            .animate(a, r)
                                            .attr({
                                                r: i.r,
                                                cx: i.cx,
                                                cy: i.cy,
                                            });
                                    },
                                },
                                {
                                    key: "animateRect",
                                    value: function (t, e, i, a, r) {
                                        t.attr(e)
                                            .animate(a)
                                            .attr(i)
                                            .afterAll(function () {
                                                return r();
                                            });
                                    },
                                },
                                {
                                    key: "animatePathsGradually",
                                    value: function (t) {
                                        var e = t.el,
                                            i = t.realIndex,
                                            a = t.j,
                                            r = t.fill,
                                            s = t.pathFrom,
                                            n = t.pathTo,
                                            o = t.speed,
                                            l = t.delay,
                                            c = this.w,
                                            h = 0;
                                        c.config.chart.animations
                                            .animateGradually.enabled &&
                                            (h =
                                                c.config.chart.animations
                                                    .animateGradually.delay),
                                            c.config.chart.animations
                                                .dynamicAnimation.enabled &&
                                                c.globals.dataChanged &&
                                                "bar" !== c.config.chart.type &&
                                                (h = 0),
                                            this.morphSVG(
                                                e,
                                                i,
                                                a,
                                                "line" !==
                                                    c.config.chart.type ||
                                                    c.globals.comboCharts
                                                    ? r
                                                    : "stroke",
                                                s,
                                                n,
                                                o,
                                                l * h
                                            );
                                    },
                                },
                                {
                                    key: "showDelayedElements",
                                    value: function () {
                                        this.w.globals.delayedElements.forEach(
                                            function (t) {
                                                var e = t.el;
                                                e.classList.remove(
                                                    "apexcharts-element-hidden"
                                                ),
                                                    e.classList.add(
                                                        "apexcharts-hidden-element-shown"
                                                    );
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "animationCompleted",
                                    value: function (t) {
                                        var e = this.w;
                                        e.globals.animationEnded ||
                                            ((e.globals.animationEnded = !0),
                                            this.showDelayedElements(),
                                            "function" ==
                                                typeof e.config.chart.events
                                                    .animationEnd &&
                                                e.config.chart.events.animationEnd(
                                                    this.ctx,
                                                    { el: t, w: e }
                                                ));
                                    },
                                },
                                {
                                    key: "morphSVG",
                                    value: function (t, e, i, a, r, s, n, o) {
                                        var l = this,
                                            c = this.w;
                                        r || (r = t.attr("pathFrom")),
                                            s || (s = t.attr("pathTo"));
                                        var h = function (t) {
                                            return (
                                                "radar" ===
                                                    c.config.chart.type &&
                                                    (n = 1),
                                                "M 0 ".concat(
                                                    c.globals.gridHeight
                                                )
                                            );
                                        };
                                        (!r ||
                                            r.indexOf("undefined") > -1 ||
                                            r.indexOf("NaN") > -1) &&
                                            (r = h()),
                                            (!s ||
                                                s.indexOf("undefined") > -1 ||
                                                s.indexOf("NaN") > -1) &&
                                                (s = h()),
                                            c.globals.shouldAnimate || (n = 1),
                                            t
                                                .plot(r)
                                                .animate(1, c.globals.easing, o)
                                                .plot(r)
                                                .animate(n, c.globals.easing, o)
                                                .plot(s)
                                                .afterAll(function () {
                                                    v.isNumber(i)
                                                        ? i ===
                                                              c.globals.series[
                                                                  c.globals
                                                                      .maxValsInArrayIndex
                                                              ].length -
                                                                  2 &&
                                                          c.globals
                                                              .shouldAnimate &&
                                                          l.animationCompleted(
                                                              t
                                                          )
                                                        : "none" !== a &&
                                                          c.globals
                                                              .shouldAnimate &&
                                                          ((!c.globals
                                                              .comboCharts &&
                                                              e ===
                                                                  c.globals
                                                                      .series
                                                                      .length -
                                                                      1) ||
                                                              c.globals
                                                                  .comboCharts) &&
                                                          l.animationCompleted(
                                                              t
                                                          ),
                                                        l.showDelayedElements();
                                                });
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    w = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "getDefaultFilter",
                                    value: function (t, e) {
                                        var i = this.w;
                                        t.unfilter(!0),
                                            new window.SVG.Filter().size(
                                                "120%",
                                                "180%",
                                                "-5%",
                                                "-40%"
                                            ),
                                            "none" !==
                                            i.config.states.normal.filter
                                                ? this.applyFilter(
                                                      t,
                                                      e,
                                                      i.config.states.normal
                                                          .filter.type,
                                                      i.config.states.normal
                                                          .filter.value
                                                  )
                                                : i.config.chart.dropShadow
                                                      .enabled &&
                                                  this.dropShadow(
                                                      t,
                                                      i.config.chart.dropShadow,
                                                      e
                                                  );
                                    },
                                },
                                {
                                    key: "addNormalFilter",
                                    value: function (t, e) {
                                        var i = this.w;
                                        i.config.chart.dropShadow.enabled &&
                                            !t.node.classList.contains(
                                                "apexcharts-marker"
                                            ) &&
                                            this.dropShadow(
                                                t,
                                                i.config.chart.dropShadow,
                                                e
                                            );
                                    },
                                },
                                {
                                    key: "addLightenFilter",
                                    value: function (t, e, i) {
                                        var a = this,
                                            r = this.w,
                                            s = i.intensity;
                                        t.unfilter(!0),
                                            new window.SVG.Filter(),
                                            t.filter(function (t) {
                                                var i =
                                                    r.config.chart.dropShadow;
                                                (i.enabled
                                                    ? a.addShadow(t, e, i)
                                                    : t
                                                ).componentTransfer({
                                                    rgb: {
                                                        type: "linear",
                                                        slope: 1.5,
                                                        intercept: s,
                                                    },
                                                });
                                            }),
                                            t.filterer.node.setAttribute(
                                                "filterUnits",
                                                "userSpaceOnUse"
                                            ),
                                            this._scaleFilterSize(
                                                t.filterer.node
                                            );
                                    },
                                },
                                {
                                    key: "addDarkenFilter",
                                    value: function (t, e, i) {
                                        var a = this,
                                            r = this.w,
                                            s = i.intensity;
                                        t.unfilter(!0),
                                            new window.SVG.Filter(),
                                            t.filter(function (t) {
                                                var i =
                                                    r.config.chart.dropShadow;
                                                (i.enabled
                                                    ? a.addShadow(t, e, i)
                                                    : t
                                                ).componentTransfer({
                                                    rgb: {
                                                        type: "linear",
                                                        slope: s,
                                                    },
                                                });
                                            }),
                                            t.filterer.node.setAttribute(
                                                "filterUnits",
                                                "userSpaceOnUse"
                                            ),
                                            this._scaleFilterSize(
                                                t.filterer.node
                                            );
                                    },
                                },
                                {
                                    key: "applyFilter",
                                    value: function (t, e, i) {
                                        var a =
                                            arguments.length > 3 &&
                                            void 0 !== arguments[3]
                                                ? arguments[3]
                                                : 0.5;
                                        switch (i) {
                                            case "none":
                                                this.addNormalFilter(t, e);
                                                break;
                                            case "lighten":
                                                this.addLightenFilter(t, e, {
                                                    intensity: a,
                                                });
                                                break;
                                            case "darken":
                                                this.addDarkenFilter(t, e, {
                                                    intensity: a,
                                                });
                                        }
                                    },
                                },
                                {
                                    key: "addShadow",
                                    value: function (t, e, i) {
                                        var a = i.blur,
                                            r = i.top,
                                            s = i.left,
                                            n = i.color,
                                            o = i.opacity,
                                            l = t
                                                .flood(
                                                    Array.isArray(n) ? n[e] : n,
                                                    o
                                                )
                                                .composite(t.sourceAlpha, "in")
                                                .offset(s, r)
                                                .gaussianBlur(a)
                                                .merge(t.source);
                                        return t.blend(t.source, l);
                                    },
                                },
                                {
                                    key: "dropShadow",
                                    value: function (t, e) {
                                        var i =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : 0,
                                            a = e.top,
                                            r = e.left,
                                            s = e.blur,
                                            n = e.color,
                                            o = e.opacity,
                                            l = e.noUserSpaceOnUse,
                                            c = this.w;
                                        return (
                                            t.unfilter(!0),
                                            (v.isIE() &&
                                                "radialBar" ===
                                                    c.config.chart.type) ||
                                                ((n = Array.isArray(n)
                                                    ? n[i]
                                                    : n),
                                                t.filter(function (t) {
                                                    var e;
                                                    (e =
                                                        v.isSafari() ||
                                                        v.isFirefox() ||
                                                        v.isIE()
                                                            ? t
                                                                  .flood(n, o)
                                                                  .composite(
                                                                      t.sourceAlpha,
                                                                      "in"
                                                                  )
                                                                  .offset(r, a)
                                                                  .gaussianBlur(
                                                                      s
                                                                  )
                                                            : t
                                                                  .flood(n, o)
                                                                  .composite(
                                                                      t.sourceAlpha,
                                                                      "in"
                                                                  )
                                                                  .offset(r, a)
                                                                  .gaussianBlur(
                                                                      s
                                                                  )
                                                                  .merge(
                                                                      t.source
                                                                  )),
                                                        t.blend(t.source, e);
                                                }),
                                                l ||
                                                    t.filterer.node.setAttribute(
                                                        "filterUnits",
                                                        "userSpaceOnUse"
                                                    ),
                                                this._scaleFilterSize(
                                                    t.filterer.node
                                                )),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "setSelectionFilter",
                                    value: function (t, e, i) {
                                        var a = this.w;
                                        if (
                                            void 0 !==
                                                a.globals.selectedDataPoints[
                                                    e
                                                ] &&
                                            a.globals.selectedDataPoints[
                                                e
                                            ].indexOf(i) > -1
                                        ) {
                                            t.node.setAttribute("selected", !0);
                                            var r =
                                                a.config.states.active.filter;
                                            "none" !== r &&
                                                this.applyFilter(
                                                    t,
                                                    e,
                                                    r.type,
                                                    r.value
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "_scaleFilterSize",
                                    value: function (t) {
                                        !(function (e) {
                                            for (var i in e)
                                                e.hasOwnProperty(i) &&
                                                    t.setAttribute(i, e[i]);
                                        })({
                                            width: "200%",
                                            height: "200%",
                                            x: "-50%",
                                            y: "-50%",
                                        });
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    k = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(
                                t,
                                [
                                    {
                                        key: "roundPathCorners",
                                        value: function (t, e) {
                                            function i(t, e, i) {
                                                var r = e.x - t.x,
                                                    s = e.y - t.y,
                                                    n = Math.sqrt(
                                                        r * r + s * s
                                                    );
                                                return a(
                                                    t,
                                                    e,
                                                    Math.min(1, i / n)
                                                );
                                            }
                                            function a(t, e, i) {
                                                return {
                                                    x: t.x + (e.x - t.x) * i,
                                                    y: t.y + (e.y - t.y) * i,
                                                };
                                            }
                                            function r(t, e) {
                                                t.length > 2 &&
                                                    ((t[t.length - 2] = e.x),
                                                    (t[t.length - 1] = e.y));
                                            }
                                            function s(t) {
                                                return {
                                                    x: parseFloat(
                                                        t[t.length - 2]
                                                    ),
                                                    y: parseFloat(
                                                        t[t.length - 1]
                                                    ),
                                                };
                                            }
                                            t.indexOf("NaN") > -1 && (t = "");
                                            var n = t
                                                    .split(/[,\s]/)
                                                    .reduce(function (t, e) {
                                                        var i =
                                                            e.match(
                                                                "([a-zA-Z])(.+)"
                                                            );
                                                        return (
                                                            i
                                                                ? (t.push(i[1]),
                                                                  t.push(i[2]))
                                                                : t.push(e),
                                                            t
                                                        );
                                                    }, [])
                                                    .reduce(function (t, e) {
                                                        return (
                                                            parseFloat(e) ==
                                                                e && t.length
                                                                ? t[
                                                                      t.length -
                                                                          1
                                                                  ].push(e)
                                                                : t.push([e]),
                                                            t
                                                        );
                                                    }, []),
                                                o = [];
                                            if (n.length > 1) {
                                                var l = s(n[0]),
                                                    c = null;
                                                "Z" == n[n.length - 1][0] &&
                                                    n[0].length > 2 &&
                                                    ((c = ["L", l.x, l.y]),
                                                    (n[n.length - 1] = c)),
                                                    o.push(n[0]);
                                                for (
                                                    var h = 1;
                                                    h < n.length;
                                                    h++
                                                ) {
                                                    var d = o[o.length - 1],
                                                        u = n[h],
                                                        f =
                                                            u == c
                                                                ? n[1]
                                                                : n[h + 1];
                                                    if (
                                                        f &&
                                                        d &&
                                                        d.length > 2 &&
                                                        "L" == u[0] &&
                                                        f.length > 2 &&
                                                        "L" == f[0]
                                                    ) {
                                                        var g,
                                                            p,
                                                            x = s(d),
                                                            m = s(u),
                                                            b = s(f);
                                                        (g = i(m, x, e)),
                                                            (p = i(m, b, e)),
                                                            r(u, g),
                                                            (u.origPoint = m),
                                                            o.push(u);
                                                        var v = a(g, m, 0.5),
                                                            y = a(m, p, 0.5),
                                                            w = [
                                                                "C",
                                                                v.x,
                                                                v.y,
                                                                y.x,
                                                                y.y,
                                                                p.x,
                                                                p.y,
                                                            ];
                                                        (w.origPoint = m),
                                                            o.push(w);
                                                    } else o.push(u);
                                                }
                                                if (c) {
                                                    var k = s(o[o.length - 1]);
                                                    o.push(["Z"]), r(o[0], k);
                                                }
                                            } else o = n;
                                            return o.reduce(function (t, e) {
                                                return t + e.join(" ") + " ";
                                            }, "");
                                        },
                                    },
                                    {
                                        key: "drawLine",
                                        value: function (t, e, i, a) {
                                            var r =
                                                    arguments.length > 4 &&
                                                    void 0 !== arguments[4]
                                                        ? arguments[4]
                                                        : "#a8a8a8",
                                                s =
                                                    arguments.length > 5 &&
                                                    void 0 !== arguments[5]
                                                        ? arguments[5]
                                                        : 0,
                                                n =
                                                    arguments.length > 6 &&
                                                    void 0 !== arguments[6]
                                                        ? arguments[6]
                                                        : null,
                                                o =
                                                    arguments.length > 7 &&
                                                    void 0 !== arguments[7]
                                                        ? arguments[7]
                                                        : "butt";
                                            return this.w.globals.dom.Paper.line().attr(
                                                {
                                                    x1: t,
                                                    y1: e,
                                                    x2: i,
                                                    y2: a,
                                                    stroke: r,
                                                    "stroke-dasharray": s,
                                                    "stroke-width": n,
                                                    "stroke-linecap": o,
                                                }
                                            );
                                        },
                                    },
                                    {
                                        key: "drawRect",
                                        value: function () {
                                            var t =
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                        ? arguments[0]
                                                        : 0,
                                                e =
                                                    arguments.length > 1 &&
                                                    void 0 !== arguments[1]
                                                        ? arguments[1]
                                                        : 0,
                                                i =
                                                    arguments.length > 2 &&
                                                    void 0 !== arguments[2]
                                                        ? arguments[2]
                                                        : 0,
                                                a =
                                                    arguments.length > 3 &&
                                                    void 0 !== arguments[3]
                                                        ? arguments[3]
                                                        : 0,
                                                r =
                                                    arguments.length > 4 &&
                                                    void 0 !== arguments[4]
                                                        ? arguments[4]
                                                        : 0,
                                                s =
                                                    arguments.length > 5 &&
                                                    void 0 !== arguments[5]
                                                        ? arguments[5]
                                                        : "#fefefe",
                                                n =
                                                    arguments.length > 6 &&
                                                    void 0 !== arguments[6]
                                                        ? arguments[6]
                                                        : 1,
                                                o =
                                                    arguments.length > 7 &&
                                                    void 0 !== arguments[7]
                                                        ? arguments[7]
                                                        : null,
                                                l =
                                                    arguments.length > 8 &&
                                                    void 0 !== arguments[8]
                                                        ? arguments[8]
                                                        : null,
                                                c =
                                                    arguments.length > 9 &&
                                                    void 0 !== arguments[9]
                                                        ? arguments[9]
                                                        : 0,
                                                h =
                                                    this.w.globals.dom.Paper.rect();
                                            return (
                                                h.attr({
                                                    x: t,
                                                    y: e,
                                                    width: i > 0 ? i : 0,
                                                    height: a > 0 ? a : 0,
                                                    rx: r,
                                                    ry: r,
                                                    opacity: n,
                                                    "stroke-width":
                                                        null !== o ? o : 0,
                                                    stroke:
                                                        null !== l ? l : "none",
                                                    "stroke-dasharray": c,
                                                }),
                                                h.node.setAttribute("fill", s),
                                                h
                                            );
                                        },
                                    },
                                    {
                                        key: "drawPolygon",
                                        value: function (t) {
                                            var e =
                                                    arguments.length > 1 &&
                                                    void 0 !== arguments[1]
                                                        ? arguments[1]
                                                        : "#e1e1e1",
                                                i =
                                                    arguments.length > 2 &&
                                                    void 0 !== arguments[2]
                                                        ? arguments[2]
                                                        : 1,
                                                a =
                                                    arguments.length > 3 &&
                                                    void 0 !== arguments[3]
                                                        ? arguments[3]
                                                        : "none";
                                            return this.w.globals.dom.Paper.polygon(
                                                t
                                            ).attr({
                                                fill: a,
                                                stroke: e,
                                                "stroke-width": i,
                                            });
                                        },
                                    },
                                    {
                                        key: "drawCircle",
                                        value: function (t) {
                                            var e =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : null;
                                            t < 0 && (t = 0);
                                            var i =
                                                this.w.globals.dom.Paper.circle(
                                                    2 * t
                                                );
                                            return null !== e && i.attr(e), i;
                                        },
                                    },
                                    {
                                        key: "drawPath",
                                        value: function (t) {
                                            var e = t.d,
                                                i = void 0 === e ? "" : e,
                                                a = t.stroke,
                                                r =
                                                    void 0 === a
                                                        ? "#a8a8a8"
                                                        : a,
                                                s = t.strokeWidth,
                                                n = void 0 === s ? 1 : s,
                                                o = t.fill,
                                                l = t.fillOpacity,
                                                c = void 0 === l ? 1 : l,
                                                h = t.strokeOpacity,
                                                d = void 0 === h ? 1 : h,
                                                u = t.classes,
                                                f = t.strokeLinecap,
                                                g = void 0 === f ? null : f,
                                                p = t.strokeDashArray,
                                                x = void 0 === p ? 0 : p,
                                                m = this.w;
                                            return (
                                                null === g &&
                                                    (g =
                                                        m.config.stroke
                                                            .lineCap),
                                                (i.indexOf("undefined") > -1 ||
                                                    i.indexOf("NaN") > -1) &&
                                                    (i = "M 0 ".concat(
                                                        m.globals.gridHeight
                                                    )),
                                                m.globals.dom.Paper.path(
                                                    i
                                                ).attr({
                                                    fill: o,
                                                    "fill-opacity": c,
                                                    stroke: r,
                                                    "stroke-opacity": d,
                                                    "stroke-linecap": g,
                                                    "stroke-width": n,
                                                    "stroke-dasharray": x,
                                                    class: u,
                                                })
                                            );
                                        },
                                    },
                                    {
                                        key: "group",
                                        value: function () {
                                            var t =
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                        ? arguments[0]
                                                        : null,
                                                e =
                                                    this.w.globals.dom.Paper.group();
                                            return null !== t && e.attr(t), e;
                                        },
                                    },
                                    {
                                        key: "move",
                                        value: function (t, e) {
                                            return ["M", t, e].join(" ");
                                        },
                                    },
                                    {
                                        key: "line",
                                        value: function (t, e) {
                                            var i =
                                                    arguments.length > 2 &&
                                                    void 0 !== arguments[2]
                                                        ? arguments[2]
                                                        : null,
                                                a = null;
                                            return (
                                                null === i
                                                    ? (a = [" L", t, e].join(
                                                          " "
                                                      ))
                                                    : "H" === i
                                                    ? (a = [" H", t].join(" "))
                                                    : "V" === i &&
                                                      (a = [" V", e].join(" ")),
                                                a
                                            );
                                        },
                                    },
                                    {
                                        key: "curve",
                                        value: function (t, e, i, a, r, s) {
                                            return ["C", t, e, i, a, r, s].join(
                                                " "
                                            );
                                        },
                                    },
                                    {
                                        key: "quadraticCurve",
                                        value: function (t, e, i, a) {
                                            return ["Q", t, e, i, a].join(" ");
                                        },
                                    },
                                    {
                                        key: "arc",
                                        value: function (t, e, i, a, r, s, n) {
                                            var o = "A";
                                            return (
                                                arguments.length > 7 &&
                                                    void 0 !== arguments[7] &&
                                                    arguments[7] &&
                                                    (o = "a"),
                                                [o, t, e, i, a, r, s, n].join(
                                                    " "
                                                )
                                            );
                                        },
                                    },
                                    {
                                        key: "renderPaths",
                                        value: function (t) {
                                            var e,
                                                i = t.j,
                                                a = t.realIndex,
                                                r = t.pathFrom,
                                                n = t.pathTo,
                                                o = t.stroke,
                                                l = t.strokeWidth,
                                                c = t.strokeLinecap,
                                                h = t.fill,
                                                d = t.animationDelay,
                                                u = t.initialSpeed,
                                                f = t.dataChangeSpeed,
                                                g = t.className,
                                                p = t.shouldClipToGrid,
                                                x = void 0 === p || p,
                                                m = t.bindEventsOnPaths,
                                                b = void 0 === m || m,
                                                v = t.drawShadow,
                                                k = void 0 === v || v,
                                                A = this.w,
                                                S = new w(this.ctx),
                                                C = new y(this.ctx),
                                                P =
                                                    this.w.config.chart
                                                        .animations.enabled,
                                                L =
                                                    P &&
                                                    this.w.config.chart
                                                        .animations
                                                        .dynamicAnimation
                                                        .enabled,
                                                T = !!(
                                                    (P && !A.globals.resized) ||
                                                    (L &&
                                                        A.globals.dataChanged &&
                                                        A.globals.shouldAnimate)
                                                );
                                            T
                                                ? (e = r)
                                                : ((e = n),
                                                  (A.globals.animationEnded =
                                                      !0));
                                            var M,
                                                E = A.config.stroke.dashArray;
                                            M = Array.isArray(E)
                                                ? E[a]
                                                : A.config.stroke.dashArray;
                                            var I = this.drawPath({
                                                d: e,
                                                stroke: o,
                                                strokeWidth: l,
                                                fill: h,
                                                fillOpacity: 1,
                                                classes: g,
                                                strokeLinecap: c,
                                                strokeDashArray: M,
                                            });
                                            if (
                                                (I.attr("index", a),
                                                x &&
                                                    I.attr({
                                                        "clip-path":
                                                            "url(#gridRectMask".concat(
                                                                A.globals.cuid,
                                                                ")"
                                                            ),
                                                    }),
                                                "none" !==
                                                    A.config.states.normal
                                                        .filter.type)
                                            )
                                                S.getDefaultFilter(I, a);
                                            else if (
                                                A.config.chart.dropShadow
                                                    .enabled &&
                                                k &&
                                                (!A.config.chart.dropShadow
                                                    .enabledOnSeries ||
                                                    (A.config.chart.dropShadow
                                                        .enabledOnSeries &&
                                                        -1 !==
                                                            A.config.chart.dropShadow.enabledOnSeries.indexOf(
                                                                a
                                                            )))
                                            ) {
                                                var O =
                                                    A.config.chart.dropShadow;
                                                S.dropShadow(I, O, a);
                                            }
                                            b &&
                                                (I.node.addEventListener(
                                                    "mouseenter",
                                                    this.pathMouseEnter.bind(
                                                        this,
                                                        I
                                                    )
                                                ),
                                                I.node.addEventListener(
                                                    "mouseleave",
                                                    this.pathMouseLeave.bind(
                                                        this,
                                                        I
                                                    )
                                                ),
                                                I.node.addEventListener(
                                                    "mousedown",
                                                    this.pathMouseDown.bind(
                                                        this,
                                                        I
                                                    )
                                                )),
                                                I.attr({
                                                    pathTo: n,
                                                    pathFrom: r,
                                                });
                                            var z = {
                                                el: I,
                                                j: i,
                                                realIndex: a,
                                                pathFrom: r,
                                                pathTo: n,
                                                fill: h,
                                                strokeWidth: l,
                                                delay: d,
                                            };
                                            return (
                                                !P ||
                                                A.globals.resized ||
                                                A.globals.dataChanged
                                                    ? (!A.globals.resized &&
                                                          A.globals
                                                              .dataChanged) ||
                                                      C.showDelayedElements()
                                                    : C.animatePathsGradually(
                                                          s(
                                                              s({}, z),
                                                              {},
                                                              { speed: u }
                                                          )
                                                      ),
                                                A.globals.dataChanged &&
                                                    L &&
                                                    T &&
                                                    C.animatePathsGradually(
                                                        s(
                                                            s({}, z),
                                                            {},
                                                            { speed: f }
                                                        )
                                                    ),
                                                I
                                            );
                                        },
                                    },
                                    {
                                        key: "drawPattern",
                                        value: function (t, e, i) {
                                            var a =
                                                    arguments.length > 3 &&
                                                    void 0 !== arguments[3]
                                                        ? arguments[3]
                                                        : "#a8a8a8",
                                                r =
                                                    arguments.length > 4 &&
                                                    void 0 !== arguments[4]
                                                        ? arguments[4]
                                                        : 0;
                                            return this.w.globals.dom.Paper.pattern(
                                                e,
                                                i,
                                                function (s) {
                                                    "horizontalLines" === t
                                                        ? s
                                                              .line(0, 0, i, 0)
                                                              .stroke({
                                                                  color: a,
                                                                  width: r + 1,
                                                              })
                                                        : "verticalLines" === t
                                                        ? s
                                                              .line(0, 0, 0, e)
                                                              .stroke({
                                                                  color: a,
                                                                  width: r + 1,
                                                              })
                                                        : "slantedLines" === t
                                                        ? s
                                                              .line(0, 0, e, i)
                                                              .stroke({
                                                                  color: a,
                                                                  width: r,
                                                              })
                                                        : "squares" === t
                                                        ? s
                                                              .rect(e, i)
                                                              .fill("none")
                                                              .stroke({
                                                                  color: a,
                                                                  width: r,
                                                              })
                                                        : "circles" === t &&
                                                          s
                                                              .circle(e)
                                                              .fill("none")
                                                              .stroke({
                                                                  color: a,
                                                                  width: r,
                                                              });
                                                }
                                            );
                                        },
                                    },
                                    {
                                        key: "drawGradient",
                                        value: function (t, e, i, a, r) {
                                            var s,
                                                n =
                                                    arguments.length > 5 &&
                                                    void 0 !== arguments[5]
                                                        ? arguments[5]
                                                        : null,
                                                o =
                                                    arguments.length > 6 &&
                                                    void 0 !== arguments[6]
                                                        ? arguments[6]
                                                        : null,
                                                l =
                                                    arguments.length > 7 &&
                                                    void 0 !== arguments[7]
                                                        ? arguments[7]
                                                        : null,
                                                c =
                                                    arguments.length > 8 &&
                                                    void 0 !== arguments[8]
                                                        ? arguments[8]
                                                        : 0,
                                                h = this.w;
                                            e.length < 9 &&
                                                0 === e.indexOf("#") &&
                                                (e = v.hexToRgba(e, a)),
                                                i.length < 9 &&
                                                    0 === i.indexOf("#") &&
                                                    (i = v.hexToRgba(i, r));
                                            var d = 0,
                                                u = 1,
                                                f = 1,
                                                g = null;
                                            null !== o &&
                                                ((d =
                                                    void 0 !== o[0]
                                                        ? o[0] / 100
                                                        : 0),
                                                (u =
                                                    void 0 !== o[1]
                                                        ? o[1] / 100
                                                        : 1),
                                                (f =
                                                    void 0 !== o[2]
                                                        ? o[2] / 100
                                                        : 1),
                                                (g =
                                                    void 0 !== o[3]
                                                        ? o[3] / 100
                                                        : null));
                                            var p = !(
                                                "donut" !==
                                                    h.config.chart.type &&
                                                "pie" !== h.config.chart.type &&
                                                "polarArea" !==
                                                    h.config.chart.type &&
                                                "bubble" !== h.config.chart.type
                                            );
                                            if (
                                                ((s =
                                                    null === l || 0 === l.length
                                                        ? h.globals.dom.Paper.gradient(
                                                              p
                                                                  ? "radial"
                                                                  : "linear",
                                                              function (t) {
                                                                  t.at(d, e, a),
                                                                      t.at(
                                                                          u,
                                                                          i,
                                                                          r
                                                                      ),
                                                                      t.at(
                                                                          f,
                                                                          i,
                                                                          r
                                                                      ),
                                                                      null !==
                                                                          g &&
                                                                          t.at(
                                                                              g,
                                                                              e,
                                                                              a
                                                                          );
                                                              }
                                                          )
                                                        : h.globals.dom.Paper.gradient(
                                                              p
                                                                  ? "radial"
                                                                  : "linear",
                                                              function (t) {
                                                                  (Array.isArray(
                                                                      l[c]
                                                                  )
                                                                      ? l[c]
                                                                      : l
                                                                  ).forEach(
                                                                      function (
                                                                          e
                                                                      ) {
                                                                          t.at(
                                                                              e.offset /
                                                                                  100,
                                                                              e.color,
                                                                              e.opacity
                                                                          );
                                                                      }
                                                                  );
                                                              }
                                                          )),
                                                p)
                                            ) {
                                                var x = h.globals.gridWidth / 2,
                                                    m =
                                                        h.globals.gridHeight /
                                                        2;
                                                "bubble" !== h.config.chart.type
                                                    ? s.attr({
                                                          gradientUnits:
                                                              "userSpaceOnUse",
                                                          cx: x,
                                                          cy: m,
                                                          r: n,
                                                      })
                                                    : s.attr({
                                                          cx: 0.5,
                                                          cy: 0.5,
                                                          r: 0.8,
                                                          fx: 0.2,
                                                          fy: 0.2,
                                                      });
                                            } else
                                                "vertical" === t
                                                    ? s.from(0, 0).to(0, 1)
                                                    : "diagonal" === t
                                                    ? s.from(0, 0).to(1, 1)
                                                    : "horizontal" === t
                                                    ? s.from(0, 1).to(1, 1)
                                                    : "diagonal2" === t &&
                                                      s.from(1, 0).to(0, 1);
                                            return s;
                                        },
                                    },
                                    {
                                        key: "getTextBasedOnMaxWidth",
                                        value: function (t) {
                                            var e = t.text,
                                                i = t.maxWidth,
                                                a = t.fontSize,
                                                r = t.fontFamily,
                                                s = this.getTextRects(e, a, r),
                                                n = s.width / e.length,
                                                o = Math.floor(i / n);
                                            return i < s.width
                                                ? e.slice(0, o - 3) + "..."
                                                : e;
                                        },
                                    },
                                    {
                                        key: "drawText",
                                        value: function (t) {
                                            var e = this,
                                                i = t.x,
                                                a = t.y,
                                                r = t.text,
                                                n = t.textAnchor,
                                                o = t.fontSize,
                                                l = t.fontFamily,
                                                c = t.fontWeight,
                                                h = t.foreColor,
                                                d = t.opacity,
                                                u = t.maxWidth,
                                                f = t.cssClass,
                                                g = void 0 === f ? "" : f,
                                                p = t.isPlainText,
                                                x = void 0 === p || p,
                                                m = this.w;
                                            void 0 === r && (r = "");
                                            var b = r;
                                            n || (n = "start"),
                                                (h && h.length) ||
                                                    (h =
                                                        m.config.chart
                                                            .foreColor),
                                                (l =
                                                    l ||
                                                    m.config.chart.fontFamily),
                                                (c = c || "regular");
                                            var v,
                                                y = {
                                                    maxWidth: u,
                                                    fontSize: (o = o || "11px"),
                                                    fontFamily: l,
                                                };
                                            return (
                                                Array.isArray(r)
                                                    ? (v =
                                                          m.globals.dom.Paper.text(
                                                              function (t) {
                                                                  for (
                                                                      var i = 0;
                                                                      i <
                                                                      r.length;
                                                                      i++
                                                                  )
                                                                      (b =
                                                                          r[i]),
                                                                          u &&
                                                                              (b =
                                                                                  e.getTextBasedOnMaxWidth(
                                                                                      s(
                                                                                          {
                                                                                              text: r[
                                                                                                  i
                                                                                              ],
                                                                                          },
                                                                                          y
                                                                                      )
                                                                                  )),
                                                                          0 ===
                                                                          i
                                                                              ? t.tspan(
                                                                                    b
                                                                                )
                                                                              : t
                                                                                    .tspan(
                                                                                        b
                                                                                    )
                                                                                    .newLine();
                                                              }
                                                          ))
                                                    : (u &&
                                                          (b =
                                                              this.getTextBasedOnMaxWidth(
                                                                  s(
                                                                      {
                                                                          text: r,
                                                                      },
                                                                      y
                                                                  )
                                                              )),
                                                      (v = x
                                                          ? m.globals.dom.Paper.plain(
                                                                r
                                                            )
                                                          : m.globals.dom.Paper.text(
                                                                function (t) {
                                                                    return t.tspan(
                                                                        b
                                                                    );
                                                                }
                                                            ))),
                                                v.attr({
                                                    x: i,
                                                    y: a,
                                                    "text-anchor": n,
                                                    "dominant-baseline": "auto",
                                                    "font-size": o,
                                                    "font-family": l,
                                                    "font-weight": c,
                                                    fill: h,
                                                    class:
                                                        "apexcharts-text " + g,
                                                }),
                                                (v.node.style.fontFamily = l),
                                                (v.node.style.opacity = d),
                                                v
                                            );
                                        },
                                    },
                                    {
                                        key: "drawMarker",
                                        value: function (t, e, i) {
                                            t = t || 0;
                                            var a = i.pSize || 0,
                                                r = null;
                                            if (
                                                "square" === i.shape ||
                                                "rect" === i.shape
                                            ) {
                                                var s =
                                                    void 0 === i.pRadius
                                                        ? a / 2
                                                        : i.pRadius;
                                                (null !== e && a) ||
                                                    ((a = 0), (s = 0));
                                                var n = 1.2 * a + s,
                                                    o = this.drawRect(
                                                        n,
                                                        n,
                                                        n,
                                                        n,
                                                        s
                                                    );
                                                o.attr({
                                                    x: t - n / 2,
                                                    y: e - n / 2,
                                                    cx: t,
                                                    cy: e,
                                                    class: i.class
                                                        ? i.class
                                                        : "",
                                                    fill: i.pointFillColor,
                                                    "fill-opacity":
                                                        i.pointFillOpacity
                                                            ? i.pointFillOpacity
                                                            : 1,
                                                    stroke: i.pointStrokeColor,
                                                    "stroke-width":
                                                        i.pointStrokeWidth
                                                            ? i.pointStrokeWidth
                                                            : 0,
                                                    "stroke-opacity":
                                                        i.pointStrokeOpacity
                                                            ? i.pointStrokeOpacity
                                                            : 1,
                                                }),
                                                    (r = o);
                                            } else
                                                ("circle" !== i.shape &&
                                                    i.shape) ||
                                                    (v.isNumber(e) ||
                                                        ((a = 0), (e = 0)),
                                                    (r = this.drawCircle(a, {
                                                        cx: t,
                                                        cy: e,
                                                        class: i.class
                                                            ? i.class
                                                            : "",
                                                        stroke: i.pointStrokeColor,
                                                        fill: i.pointFillColor,
                                                        "fill-opacity":
                                                            i.pointFillOpacity
                                                                ? i.pointFillOpacity
                                                                : 1,
                                                        "stroke-width":
                                                            i.pointStrokeWidth
                                                                ? i.pointStrokeWidth
                                                                : 0,
                                                        "stroke-opacity":
                                                            i.pointStrokeOpacity
                                                                ? i.pointStrokeOpacity
                                                                : 1,
                                                    })));
                                            return r;
                                        },
                                    },
                                    {
                                        key: "pathMouseEnter",
                                        value: function (t, e) {
                                            var i = this.w,
                                                a = new w(this.ctx),
                                                r = parseInt(
                                                    t.node.getAttribute(
                                                        "index"
                                                    ),
                                                    10
                                                ),
                                                s = parseInt(
                                                    t.node.getAttribute("j"),
                                                    10
                                                );
                                            if (
                                                ("function" ==
                                                    typeof i.config.chart.events
                                                        .dataPointMouseEnter &&
                                                    i.config.chart.events.dataPointMouseEnter(
                                                        e,
                                                        this.ctx,
                                                        {
                                                            seriesIndex: r,
                                                            dataPointIndex: s,
                                                            w: i,
                                                        }
                                                    ),
                                                this.ctx.events.fireEvent(
                                                    "dataPointMouseEnter",
                                                    [
                                                        e,
                                                        this.ctx,
                                                        {
                                                            seriesIndex: r,
                                                            dataPointIndex: s,
                                                            w: i,
                                                        },
                                                    ]
                                                ),
                                                ("none" ===
                                                    i.config.states.active
                                                        .filter.type ||
                                                    "true" !==
                                                        t.node.getAttribute(
                                                            "selected"
                                                        )) &&
                                                    "none" !==
                                                        i.config.states.hover
                                                            .filter.type &&
                                                    !i.globals.isTouchDevice)
                                            ) {
                                                var n =
                                                    i.config.states.hover
                                                        .filter;
                                                a.applyFilter(
                                                    t,
                                                    r,
                                                    n.type,
                                                    n.value
                                                );
                                            }
                                        },
                                    },
                                    {
                                        key: "pathMouseLeave",
                                        value: function (t, e) {
                                            var i = this.w,
                                                a = new w(this.ctx),
                                                r = parseInt(
                                                    t.node.getAttribute(
                                                        "index"
                                                    ),
                                                    10
                                                ),
                                                s = parseInt(
                                                    t.node.getAttribute("j"),
                                                    10
                                                );
                                            "function" ==
                                                typeof i.config.chart.events
                                                    .dataPointMouseLeave &&
                                                i.config.chart.events.dataPointMouseLeave(
                                                    e,
                                                    this.ctx,
                                                    {
                                                        seriesIndex: r,
                                                        dataPointIndex: s,
                                                        w: i,
                                                    }
                                                ),
                                                this.ctx.events.fireEvent(
                                                    "dataPointMouseLeave",
                                                    [
                                                        e,
                                                        this.ctx,
                                                        {
                                                            seriesIndex: r,
                                                            dataPointIndex: s,
                                                            w: i,
                                                        },
                                                    ]
                                                ),
                                                ("none" !==
                                                    i.config.states.active
                                                        .filter.type &&
                                                    "true" ===
                                                        t.node.getAttribute(
                                                            "selected"
                                                        )) ||
                                                    ("none" !==
                                                        i.config.states.hover
                                                            .filter.type &&
                                                        a.getDefaultFilter(
                                                            t,
                                                            r
                                                        ));
                                        },
                                    },
                                    {
                                        key: "pathMouseDown",
                                        value: function (t, e) {
                                            var i = this.w,
                                                a = new w(this.ctx),
                                                r = parseInt(
                                                    t.node.getAttribute(
                                                        "index"
                                                    ),
                                                    10
                                                ),
                                                s = parseInt(
                                                    t.node.getAttribute("j"),
                                                    10
                                                ),
                                                n = "false";
                                            if (
                                                "true" ===
                                                t.node.getAttribute("selected")
                                            ) {
                                                if (
                                                    (t.node.setAttribute(
                                                        "selected",
                                                        "false"
                                                    ),
                                                    i.globals.selectedDataPoints[
                                                        r
                                                    ].indexOf(s) > -1)
                                                ) {
                                                    var o =
                                                        i.globals.selectedDataPoints[
                                                            r
                                                        ].indexOf(s);
                                                    i.globals.selectedDataPoints[
                                                        r
                                                    ].splice(o, 1);
                                                }
                                            } else {
                                                if (
                                                    !i.config.states.active
                                                        .allowMultipleDataPointsSelection &&
                                                    i.globals.selectedDataPoints
                                                        .length > 0
                                                ) {
                                                    i.globals.selectedDataPoints =
                                                        [];
                                                    var l =
                                                            i.globals.dom.Paper.select(
                                                                ".apexcharts-series path"
                                                            ).members,
                                                        c =
                                                            i.globals.dom.Paper.select(
                                                                ".apexcharts-series circle, .apexcharts-series rect"
                                                            ).members,
                                                        h = function (t) {
                                                            Array.prototype.forEach.call(
                                                                t,
                                                                function (t) {
                                                                    t.node.setAttribute(
                                                                        "selected",
                                                                        "false"
                                                                    ),
                                                                        a.getDefaultFilter(
                                                                            t,
                                                                            r
                                                                        );
                                                                }
                                                            );
                                                        };
                                                    h(l), h(c);
                                                }
                                                t.node.setAttribute(
                                                    "selected",
                                                    "true"
                                                ),
                                                    (n = "true"),
                                                    void 0 ===
                                                        i.globals
                                                            .selectedDataPoints[
                                                            r
                                                        ] &&
                                                        (i.globals.selectedDataPoints[
                                                            r
                                                        ] = []),
                                                    i.globals.selectedDataPoints[
                                                        r
                                                    ].push(s);
                                            }
                                            if ("true" === n) {
                                                var d =
                                                    i.config.states.active
                                                        .filter;
                                                if ("none" !== d)
                                                    a.applyFilter(
                                                        t,
                                                        r,
                                                        d.type,
                                                        d.value
                                                    );
                                                else if (
                                                    "none" !==
                                                        i.config.states.hover
                                                            .filter &&
                                                    !i.globals.isTouchDevice
                                                ) {
                                                    var u =
                                                        i.config.states.hover
                                                            .filter;
                                                    a.applyFilter(
                                                        t,
                                                        r,
                                                        u.type,
                                                        u.value
                                                    );
                                                }
                                            } else
                                                "none" !==
                                                    i.config.states.active
                                                        .filter.type &&
                                                    ("none" ===
                                                        i.config.states.hover
                                                            .filter.type ||
                                                    i.globals.isTouchDevice
                                                        ? a.getDefaultFilter(
                                                              t,
                                                              r
                                                          )
                                                        : ((u =
                                                              i.config.states
                                                                  .hover
                                                                  .filter),
                                                          a.applyFilter(
                                                              t,
                                                              r,
                                                              u.type,
                                                              u.value
                                                          )));
                                            "function" ==
                                                typeof i.config.chart.events
                                                    .dataPointSelection &&
                                                i.config.chart.events.dataPointSelection(
                                                    e,
                                                    this.ctx,
                                                    {
                                                        selectedDataPoints:
                                                            i.globals
                                                                .selectedDataPoints,
                                                        seriesIndex: r,
                                                        dataPointIndex: s,
                                                        w: i,
                                                    }
                                                ),
                                                e &&
                                                    this.ctx.events.fireEvent(
                                                        "dataPointSelection",
                                                        [
                                                            e,
                                                            this.ctx,
                                                            {
                                                                selectedDataPoints:
                                                                    i.globals
                                                                        .selectedDataPoints,
                                                                seriesIndex: r,
                                                                dataPointIndex:
                                                                    s,
                                                                w: i,
                                                            },
                                                        ]
                                                    );
                                        },
                                    },
                                    {
                                        key: "rotateAroundCenter",
                                        value: function (t) {
                                            var e = {};
                                            return (
                                                t &&
                                                    "function" ==
                                                        typeof t.getBBox &&
                                                    (e = t.getBBox()),
                                                {
                                                    x: e.x + e.width / 2,
                                                    y: e.y + e.height / 2,
                                                }
                                            );
                                        },
                                    },
                                    {
                                        key: "getTextRects",
                                        value: function (t, e, i, a) {
                                            var r =
                                                    !(
                                                        arguments.length > 4 &&
                                                        void 0 !== arguments[4]
                                                    ) || arguments[4],
                                                s = this.w,
                                                n = this.drawText({
                                                    x: -200,
                                                    y: -200,
                                                    text: t,
                                                    textAnchor: "start",
                                                    fontSize: e,
                                                    fontFamily: i,
                                                    foreColor: "#fff",
                                                    opacity: 0,
                                                });
                                            a && n.attr("transform", a),
                                                s.globals.dom.Paper.add(n);
                                            var o = n.bbox();
                                            return (
                                                r ||
                                                    (o =
                                                        n.node.getBoundingClientRect()),
                                                n.remove(),
                                                {
                                                    width: o.width,
                                                    height: o.height,
                                                }
                                            );
                                        },
                                    },
                                    {
                                        key: "placeTextWithEllipsis",
                                        value: function (t, e, i) {
                                            if (
                                                "function" ==
                                                    typeof t.getComputedTextLength &&
                                                ((t.textContent = e),
                                                e.length > 0 &&
                                                    t.getComputedTextLength() >=
                                                        i / 1.1)
                                            ) {
                                                for (
                                                    var a = e.length - 3;
                                                    a > 0;
                                                    a -= 3
                                                )
                                                    if (
                                                        t.getSubStringLength(
                                                            0,
                                                            a
                                                        ) <=
                                                        i / 1.1
                                                    )
                                                        return void (t.textContent =
                                                            e.substring(0, a) +
                                                            "...");
                                                t.textContent = ".";
                                            }
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "setAttrs",
                                        value: function (t, e) {
                                            for (var i in e)
                                                e.hasOwnProperty(i) &&
                                                    t.setAttribute(i, e[i]);
                                        },
                                    },
                                ]
                            ),
                            t
                        );
                    })(),
                    A = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(
                                t,
                                [
                                    {
                                        key: "getStackedSeriesTotals",
                                        value: function () {
                                            var t =
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                        ? arguments[0]
                                                        : [],
                                                e = this.w,
                                                i = [];
                                            if (0 === e.globals.series.length)
                                                return i;
                                            for (
                                                var a = 0;
                                                a <
                                                e.globals.series[
                                                    e.globals
                                                        .maxValsInArrayIndex
                                                ].length;
                                                a++
                                            ) {
                                                for (
                                                    var r = 0, s = 0;
                                                    s < e.globals.series.length;
                                                    s++
                                                )
                                                    void 0 !==
                                                        e.globals.series[s][
                                                            a
                                                        ] &&
                                                        -1 === t.indexOf(s) &&
                                                        (r +=
                                                            e.globals.series[s][
                                                                a
                                                            ]);
                                                i.push(r);
                                            }
                                            return i;
                                        },
                                    },
                                    {
                                        key: "getSeriesTotalByIndex",
                                        value: function () {
                                            var t =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : null;
                                            return null === t
                                                ? this.w.config.series.reduce(
                                                      function (t, e) {
                                                          return t + e;
                                                      },
                                                      0
                                                  )
                                                : this.w.globals.series[
                                                      t
                                                  ].reduce(function (t, e) {
                                                      return t + e;
                                                  }, 0);
                                        },
                                    },
                                    {
                                        key: "isSeriesNull",
                                        value: function () {
                                            var t =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : null;
                                            return (
                                                0 ===
                                                (null === t
                                                    ? this.w.config.series.filter(
                                                          function (t) {
                                                              return null !== t;
                                                          }
                                                      )
                                                    : this.w.config.series[
                                                          t
                                                      ].data.filter(function (
                                                          t
                                                      ) {
                                                          return null !== t;
                                                      })
                                                ).length
                                            );
                                        },
                                    },
                                    {
                                        key: "seriesHaveSameValues",
                                        value: function (t) {
                                            return this.w.globals.series[
                                                t
                                            ].every(function (t, e, i) {
                                                return t === i[0];
                                            });
                                        },
                                    },
                                    {
                                        key: "getCategoryLabels",
                                        value: function (t) {
                                            var e = this.w,
                                                i = t.slice();
                                            return (
                                                e.config.xaxis
                                                    .convertedCatToNumeric &&
                                                    (i = t.map(function (t, i) {
                                                        return e.config.xaxis.labels.formatter(
                                                            t -
                                                                e.globals.minX +
                                                                1
                                                        );
                                                    })),
                                                i
                                            );
                                        },
                                    },
                                    {
                                        key: "getLargestSeries",
                                        value: function () {
                                            var t = this.w;
                                            t.globals.maxValsInArrayIndex =
                                                t.globals.series
                                                    .map(function (t) {
                                                        return t.length;
                                                    })
                                                    .indexOf(
                                                        Math.max.apply(
                                                            Math,
                                                            t.globals.series.map(
                                                                function (t) {
                                                                    return t.length;
                                                                }
                                                            )
                                                        )
                                                    );
                                        },
                                    },
                                    {
                                        key: "getLargestMarkerSize",
                                        value: function () {
                                            var t = this.w,
                                                e = 0;
                                            return (
                                                t.globals.markers.size.forEach(
                                                    function (t) {
                                                        e = Math.max(e, t);
                                                    }
                                                ),
                                                t.config.markers.discrete &&
                                                    t.config.markers.discrete
                                                        .length &&
                                                    t.config.markers.discrete.forEach(
                                                        function (t) {
                                                            e = Math.max(
                                                                e,
                                                                t.size
                                                            );
                                                        }
                                                    ),
                                                e > 0 &&
                                                    (e +=
                                                        t.config.markers.hover
                                                            .sizeOffset + 1),
                                                (t.globals.markers.largestSize =
                                                    e),
                                                e
                                            );
                                        },
                                    },
                                    {
                                        key: "getSeriesTotals",
                                        value: function () {
                                            var t = this.w;
                                            t.globals.seriesTotals =
                                                t.globals.series.map(function (
                                                    t,
                                                    e
                                                ) {
                                                    var i = 0;
                                                    if (Array.isArray(t))
                                                        for (
                                                            var a = 0;
                                                            a < t.length;
                                                            a++
                                                        )
                                                            i += t[a];
                                                    else i += t;
                                                    return i;
                                                });
                                        },
                                    },
                                    {
                                        key: "getSeriesTotalsXRange",
                                        value: function (t, e) {
                                            var i = this.w;
                                            return i.globals.series.map(
                                                function (a, r) {
                                                    for (
                                                        var s = 0, n = 0;
                                                        n < a.length;
                                                        n++
                                                    )
                                                        i.globals.seriesX[r][
                                                            n
                                                        ] > t &&
                                                            i.globals.seriesX[
                                                                r
                                                            ][n] < e &&
                                                            (s += a[n]);
                                                    return s;
                                                }
                                            );
                                        },
                                    },
                                    {
                                        key: "getPercentSeries",
                                        value: function () {
                                            var t = this.w;
                                            t.globals.seriesPercent =
                                                t.globals.series.map(function (
                                                    e,
                                                    i
                                                ) {
                                                    var a = [];
                                                    if (Array.isArray(e))
                                                        for (
                                                            var r = 0;
                                                            r < e.length;
                                                            r++
                                                        ) {
                                                            var s =
                                                                    t.globals
                                                                        .stackedSeriesTotals[
                                                                        r
                                                                    ],
                                                                n = 0;
                                                            s &&
                                                                (n =
                                                                    (100 *
                                                                        e[r]) /
                                                                    s),
                                                                a.push(n);
                                                        }
                                                    else {
                                                        var o =
                                                            (100 * e) /
                                                            t.globals.seriesTotals.reduce(
                                                                function (
                                                                    t,
                                                                    e
                                                                ) {
                                                                    return (
                                                                        t + e
                                                                    );
                                                                },
                                                                0
                                                            );
                                                        a.push(o);
                                                    }
                                                    return a;
                                                });
                                        },
                                    },
                                    {
                                        key: "getCalculatedRatios",
                                        value: function () {
                                            var t,
                                                e,
                                                i,
                                                a,
                                                r = this.w.globals,
                                                s = [],
                                                n = 0,
                                                o = [],
                                                l = 0.1,
                                                c = 0;
                                            if (
                                                ((r.yRange = []),
                                                r.isMultipleYAxis)
                                            )
                                                for (
                                                    var h = 0;
                                                    h < r.minYArr.length;
                                                    h++
                                                )
                                                    r.yRange.push(
                                                        Math.abs(
                                                            r.minYArr[h] -
                                                                r.maxYArr[h]
                                                        )
                                                    ),
                                                        o.push(0);
                                            else
                                                r.yRange.push(
                                                    Math.abs(r.minY - r.maxY)
                                                );
                                            (r.xRange = Math.abs(
                                                r.maxX - r.minX
                                            )),
                                                (r.zRange = Math.abs(
                                                    r.maxZ - r.minZ
                                                ));
                                            for (
                                                var d = 0;
                                                d < r.yRange.length;
                                                d++
                                            )
                                                s.push(
                                                    r.yRange[d] / r.gridHeight
                                                );
                                            if (
                                                ((e = r.xRange / r.gridWidth),
                                                (i =
                                                    Math.abs(
                                                        r.initialMaxX -
                                                            r.initialMinX
                                                    ) / r.gridWidth),
                                                (t = r.yRange / r.gridWidth),
                                                (a = r.xRange / r.gridHeight),
                                                (n =
                                                    (r.zRange / r.gridHeight) *
                                                    16) || (n = 1),
                                                r.minY !== Number.MIN_VALUE &&
                                                    0 !== Math.abs(r.minY) &&
                                                    (r.hasNegs = !0),
                                                r.isMultipleYAxis)
                                            ) {
                                                o = [];
                                                for (
                                                    var u = 0;
                                                    u < s.length;
                                                    u++
                                                )
                                                    o.push(
                                                        -r.minYArr[u] / s[u]
                                                    );
                                            } else
                                                o.push(-r.minY / s[0]),
                                                    r.minY !==
                                                        Number.MIN_VALUE &&
                                                        0 !==
                                                            Math.abs(r.minY) &&
                                                        ((l = -r.minY / t),
                                                        (c = r.minX / e));
                                            return {
                                                yRatio: s,
                                                invertedYRatio: t,
                                                zRatio: n,
                                                xRatio: e,
                                                initialXRatio: i,
                                                invertedXRatio: a,
                                                baseLineInvertedY: l,
                                                baseLineY: o,
                                                baseLineX: c,
                                            };
                                        },
                                    },
                                    {
                                        key: "getLogSeries",
                                        value: function (t) {
                                            var e = this,
                                                i = this.w;
                                            return (
                                                (i.globals.seriesLog = t.map(
                                                    function (t, a) {
                                                        return i.config.yaxis[
                                                            a
                                                        ] &&
                                                            i.config.yaxis[a]
                                                                .logarithmic
                                                            ? t.map(function (
                                                                  t
                                                              ) {
                                                                  return null ===
                                                                      t
                                                                      ? null
                                                                      : e.getLogVal(
                                                                            i
                                                                                .config
                                                                                .yaxis[
                                                                                a
                                                                            ]
                                                                                .logBase,
                                                                            t,
                                                                            a
                                                                        );
                                                              })
                                                            : t;
                                                    }
                                                )),
                                                i.globals.invalidLogScale
                                                    ? t
                                                    : i.globals.seriesLog
                                            );
                                        },
                                    },
                                    {
                                        key: "getBaseLog",
                                        value: function (t, e) {
                                            return Math.log(e) / Math.log(t);
                                        },
                                    },
                                    {
                                        key: "getLogVal",
                                        value: function (t, e, i) {
                                            if (0 === e) return 0;
                                            var a = this.w,
                                                r =
                                                    0 === a.globals.minYArr[i]
                                                        ? -1
                                                        : this.getBaseLog(
                                                              t,
                                                              a.globals.minYArr[
                                                                  i
                                                              ]
                                                          ),
                                                s =
                                                    (0 === a.globals.maxYArr[i]
                                                        ? 0
                                                        : this.getBaseLog(
                                                              t,
                                                              a.globals.maxYArr[
                                                                  i
                                                              ]
                                                          )) - r;
                                            return e < 1
                                                ? e / s
                                                : (this.getBaseLog(t, e) - r) /
                                                      s;
                                        },
                                    },
                                    {
                                        key: "getLogYRatios",
                                        value: function (t) {
                                            var e = this,
                                                i = this.w,
                                                a = this.w.globals;
                                            return (
                                                (a.yLogRatio = t.slice()),
                                                (a.logYRange = a.yRange.map(
                                                    function (t, r) {
                                                        if (
                                                            i.config.yaxis[r] &&
                                                            e.w.config.yaxis[r]
                                                                .logarithmic
                                                        ) {
                                                            var s,
                                                                n =
                                                                    -Number.MAX_VALUE,
                                                                o =
                                                                    Number.MIN_VALUE;
                                                            return (
                                                                a.seriesLog.forEach(
                                                                    function (
                                                                        t,
                                                                        e
                                                                    ) {
                                                                        t.forEach(
                                                                            function (
                                                                                t
                                                                            ) {
                                                                                i
                                                                                    .config
                                                                                    .yaxis[
                                                                                    e
                                                                                ] &&
                                                                                    i
                                                                                        .config
                                                                                        .yaxis[
                                                                                        e
                                                                                    ]
                                                                                        .logarithmic &&
                                                                                    ((n =
                                                                                        Math.max(
                                                                                            t,
                                                                                            n
                                                                                        )),
                                                                                    (o =
                                                                                        Math.min(
                                                                                            t,
                                                                                            o
                                                                                        )));
                                                                            }
                                                                        );
                                                                    }
                                                                ),
                                                                (s = Math.pow(
                                                                    a.yRange[r],
                                                                    Math.abs(
                                                                        o - n
                                                                    ) /
                                                                        a
                                                                            .yRange[
                                                                            r
                                                                        ]
                                                                )),
                                                                (a.yLogRatio[
                                                                    r
                                                                ] =
                                                                    s /
                                                                    a.gridHeight),
                                                                s
                                                            );
                                                        }
                                                    }
                                                )),
                                                a.invalidLogScale
                                                    ? t.slice()
                                                    : a.yLogRatio
                                            );
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "checkComboSeries",
                                        value: function (t) {
                                            var e = !1,
                                                i = 0,
                                                a = 0;
                                            return (
                                                t.length &&
                                                    void 0 !== t[0].type &&
                                                    t.forEach(function (t) {
                                                        ("bar" !== t.type &&
                                                            "column" !==
                                                                t.type &&
                                                            "candlestick" !==
                                                                t.type &&
                                                            "boxPlot" !==
                                                                t.type) ||
                                                            i++,
                                                            void 0 !== t.type &&
                                                                a++;
                                                    }),
                                                a > 0 && (e = !0),
                                                {
                                                    comboBarCount: i,
                                                    comboCharts: e,
                                                }
                                            );
                                        },
                                    },
                                    {
                                        key: "extendArrayProps",
                                        value: function (t, e, i) {
                                            return (
                                                e.yaxis &&
                                                    (e = t.extendYAxis(e, i)),
                                                e.annotations &&
                                                    (e.annotations.yaxis &&
                                                        (e =
                                                            t.extendYAxisAnnotations(
                                                                e
                                                            )),
                                                    e.annotations.xaxis &&
                                                        (e =
                                                            t.extendXAxisAnnotations(
                                                                e
                                                            )),
                                                    e.annotations.points &&
                                                        (e =
                                                            t.extendPointAnnotations(
                                                                e
                                                            ))),
                                                e
                                            );
                                        },
                                    },
                                ]
                            ),
                            t
                        );
                    })(),
                    S = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w), (this.annoCtx = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "setOrientations",
                                    value: function (t) {
                                        var e =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : null,
                                            i = this.w;
                                        if (
                                            "vertical" === t.label.orientation
                                        ) {
                                            var a = null !== e ? e : 0,
                                                r =
                                                    i.globals.dom.baseEl.querySelector(
                                                        ".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(
                                                            a,
                                                            "']"
                                                        )
                                                    );
                                            if (null !== r) {
                                                var s =
                                                    r.getBoundingClientRect();
                                                r.setAttribute(
                                                    "x",
                                                    parseFloat(
                                                        r.getAttribute("x")
                                                    ) -
                                                        s.height +
                                                        4
                                                ),
                                                    "top" === t.label.position
                                                        ? r.setAttribute(
                                                              "y",
                                                              parseFloat(
                                                                  r.getAttribute(
                                                                      "y"
                                                                  )
                                                              ) + s.width
                                                          )
                                                        : r.setAttribute(
                                                              "y",
                                                              parseFloat(
                                                                  r.getAttribute(
                                                                      "y"
                                                                  )
                                                              ) - s.width
                                                          );
                                                var n =
                                                        this.annoCtx.graphics.rotateAroundCenter(
                                                            r
                                                        ),
                                                    o = n.x,
                                                    l = n.y;
                                                r.setAttribute(
                                                    "transform",
                                                    "rotate(-90 "
                                                        .concat(o, " ")
                                                        .concat(l, ")")
                                                );
                                            }
                                        }
                                    },
                                },
                                {
                                    key: "addBackgroundToAnno",
                                    value: function (t, e) {
                                        var i = this.w;
                                        if (
                                            !t ||
                                            void 0 === e.label.text ||
                                            (void 0 !== e.label.text &&
                                                !String(e.label.text).trim())
                                        )
                                            return null;
                                        var a = i.globals.dom.baseEl
                                                .querySelector(
                                                    ".apexcharts-grid"
                                                )
                                                .getBoundingClientRect(),
                                            r = t.getBoundingClientRect(),
                                            s = e.label.style.padding.left,
                                            n = e.label.style.padding.right,
                                            o = e.label.style.padding.top,
                                            l = e.label.style.padding.bottom;
                                        "vertical" === e.label.orientation &&
                                            ((o = e.label.style.padding.left),
                                            (l = e.label.style.padding.right),
                                            (s = e.label.style.padding.top),
                                            (n = e.label.style.padding.bottom));
                                        var c = r.left - a.left - s,
                                            h = r.top - a.top - o,
                                            d = this.annoCtx.graphics.drawRect(
                                                c -
                                                    i.globals
                                                        .barPadForNumericAxis,
                                                h,
                                                r.width + s + n,
                                                r.height + o + l,
                                                e.label.borderRadius,
                                                e.label.style.background,
                                                1,
                                                e.label.borderWidth,
                                                e.label.borderColor,
                                                0
                                            );
                                        return (
                                            e.id && d.node.classList.add(e.id),
                                            d
                                        );
                                    },
                                },
                                {
                                    key: "annotationsBackground",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = function (i, a, r) {
                                                var s =
                                                    e.globals.dom.baseEl.querySelector(
                                                        ".apexcharts-"
                                                            .concat(
                                                                r,
                                                                "-annotations .apexcharts-"
                                                            )
                                                            .concat(
                                                                r,
                                                                "-annotation-label[rel='"
                                                            )
                                                            .concat(a, "']")
                                                    );
                                                if (s) {
                                                    var n = s.parentNode,
                                                        o =
                                                            t.addBackgroundToAnno(
                                                                s,
                                                                i
                                                            );
                                                    o &&
                                                        (n.insertBefore(
                                                            o.node,
                                                            s
                                                        ),
                                                        i.label.mouseEnter &&
                                                            o.node.addEventListener(
                                                                "mouseenter",
                                                                i.label.mouseEnter.bind(
                                                                    t,
                                                                    i
                                                                )
                                                            ),
                                                        i.label.mouseLeave &&
                                                            o.node.addEventListener(
                                                                "mouseleave",
                                                                i.label.mouseLeave.bind(
                                                                    t,
                                                                    i
                                                                )
                                                            ),
                                                        i.label.click &&
                                                            o.node.addEventListener(
                                                                "click",
                                                                i.label.click.bind(
                                                                    t,
                                                                    i
                                                                )
                                                            ));
                                                }
                                            };
                                        e.config.annotations.xaxis.map(
                                            function (t, e) {
                                                i(t, e, "xaxis");
                                            }
                                        ),
                                            e.config.annotations.yaxis.map(
                                                function (t, e) {
                                                    i(t, e, "yaxis");
                                                }
                                            ),
                                            e.config.annotations.points.map(
                                                function (t, e) {
                                                    i(t, e, "point");
                                                }
                                            );
                                    },
                                },
                                {
                                    key: "getY1Y2",
                                    value: function (t, e) {
                                        var i,
                                            a = "y1" === t ? e.y : e.y2,
                                            r = this.w;
                                        if (this.annoCtx.invertAxis) {
                                            var s = r.globals.labels.indexOf(a);
                                            r.config.xaxis
                                                .convertedCatToNumeric &&
                                                (s =
                                                    r.globals.categoryLabels.indexOf(
                                                        a
                                                    ));
                                            var n =
                                                r.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-yaxis-texts-g text:nth-child(" +
                                                        (s + 1) +
                                                        ")"
                                                );
                                            n &&
                                                (i = parseFloat(
                                                    n.getAttribute("y")
                                                ));
                                        } else {
                                            var o;
                                            (o = r.config.yaxis[e.yAxisIndex]
                                                .logarithmic
                                                ? (a = new A(
                                                      this.annoCtx.ctx
                                                  ).getLogVal(
                                                      a,
                                                      e.yAxisIndex
                                                  )) /
                                                  r.globals.yLogRatio[
                                                      e.yAxisIndex
                                                  ]
                                                : (a -
                                                      r.globals.minYArr[
                                                          e.yAxisIndex
                                                      ]) /
                                                  (r.globals.yRange[
                                                      e.yAxisIndex
                                                  ] /
                                                      r.globals.gridHeight)),
                                                (i = r.globals.gridHeight - o),
                                                !e.marker ||
                                                    (void 0 !== e.y &&
                                                        null !== e.y) ||
                                                    (i = 0),
                                                r.config.yaxis[e.yAxisIndex] &&
                                                    r.config.yaxis[e.yAxisIndex]
                                                        .reversed &&
                                                    (i = o);
                                        }
                                        return (
                                            "string" == typeof a &&
                                                a.indexOf("px") > -1 &&
                                                (i = parseFloat(a)),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "getX1X2",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = this.annoCtx.invertAxis
                                                ? i.globals.minY
                                                : i.globals.minX,
                                            r = this.annoCtx.invertAxis
                                                ? i.globals.maxY
                                                : i.globals.maxX,
                                            s = this.annoCtx.invertAxis
                                                ? i.globals.yRange[0]
                                                : i.globals.xRange,
                                            n =
                                                (e.x - a) /
                                                (s / i.globals.gridWidth);
                                        this.annoCtx.inversedReversedAxis &&
                                            (n =
                                                (r - e.x) /
                                                (s / i.globals.gridWidth)),
                                            ("category" !==
                                                i.config.xaxis.type &&
                                                !i.config.xaxis
                                                    .convertedCatToNumeric) ||
                                                this.annoCtx.invertAxis ||
                                                i.globals.dataFormatXNumeric ||
                                                (n = this.getStringX(e.x));
                                        var o =
                                            (e.x2 - a) /
                                            (s / i.globals.gridWidth);
                                        return (
                                            this.annoCtx.inversedReversedAxis &&
                                                (o =
                                                    (r - e.x2) /
                                                    (s / i.globals.gridWidth)),
                                            ("category" !==
                                                i.config.xaxis.type &&
                                                !i.config.xaxis
                                                    .convertedCatToNumeric) ||
                                                this.annoCtx.invertAxis ||
                                                i.globals.dataFormatXNumeric ||
                                                (o = this.getStringX(e.x2)),
                                            (void 0 !== e.x && null !== e.x) ||
                                                !e.marker ||
                                                (n = i.globals.gridWidth),
                                            "x1" === t &&
                                                "string" == typeof e.x &&
                                                e.x.indexOf("px") > -1 &&
                                                (n = parseFloat(e.x)),
                                            "x2" === t &&
                                                "string" == typeof e.x2 &&
                                                e.x2.indexOf("px") > -1 &&
                                                (o = parseFloat(e.x2)),
                                            "x1" === t ? n : o
                                        );
                                    },
                                },
                                {
                                    key: "getStringX",
                                    value: function (t) {
                                        var e = this.w,
                                            i = t;
                                        e.config.xaxis.convertedCatToNumeric &&
                                            e.globals.categoryLabels.length &&
                                            (t =
                                                e.globals.categoryLabels.indexOf(
                                                    t
                                                ) + 1);
                                        var a = e.globals.labels.indexOf(t),
                                            r =
                                                e.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-xaxis-texts-g text:nth-child(" +
                                                        (a + 1) +
                                                        ")"
                                                );
                                        return (
                                            r &&
                                                (i = parseFloat(
                                                    r.getAttribute("x")
                                                )),
                                            i
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    C = (function () {
                        function t(e) {
                            o(this, t),
                                (this.w = e.w),
                                (this.annoCtx = e),
                                (this.invertAxis = this.annoCtx.invertAxis),
                                (this.helpers = new S(this.annoCtx));
                        }
                        return (
                            c(t, [
                                {
                                    key: "addXaxisAnnotation",
                                    value: function (t, e, i) {
                                        var a,
                                            r = this.w,
                                            s = this.helpers.getX1X2("x1", t),
                                            n = t.label.text,
                                            o = t.strokeDashArray;
                                        if (v.isNumber(s)) {
                                            if (
                                                null === t.x2 ||
                                                void 0 === t.x2
                                            ) {
                                                var l =
                                                    this.annoCtx.graphics.drawLine(
                                                        s + t.offsetX,
                                                        0 + t.offsetY,
                                                        s + t.offsetX,
                                                        r.globals.gridHeight +
                                                            t.offsetY,
                                                        t.borderColor,
                                                        o,
                                                        t.borderWidth
                                                    );
                                                e.appendChild(l.node),
                                                    t.id &&
                                                        l.node.classList.add(
                                                            t.id
                                                        );
                                            } else {
                                                if (
                                                    (a = this.helpers.getX1X2(
                                                        "x2",
                                                        t
                                                    )) < s
                                                ) {
                                                    var c = s;
                                                    (s = a), (a = c);
                                                }
                                                var h =
                                                    this.annoCtx.graphics.drawRect(
                                                        s + t.offsetX,
                                                        0 + t.offsetY,
                                                        a - s,
                                                        r.globals.gridHeight +
                                                            t.offsetY,
                                                        0,
                                                        t.fillColor,
                                                        t.opacity,
                                                        1,
                                                        t.borderColor,
                                                        o
                                                    );
                                                h.node.classList.add(
                                                    "apexcharts-annotation-rect"
                                                ),
                                                    h.attr(
                                                        "clip-path",
                                                        "url(#gridRectMask".concat(
                                                            r.globals.cuid,
                                                            ")"
                                                        )
                                                    ),
                                                    e.appendChild(h.node),
                                                    t.id &&
                                                        h.node.classList.add(
                                                            t.id
                                                        );
                                            }
                                            var d =
                                                    this.annoCtx.graphics.getTextRects(
                                                        n,
                                                        parseFloat(
                                                            t.label.style
                                                                .fontSize
                                                        )
                                                    ),
                                                u =
                                                    "top" === t.label.position
                                                        ? 4
                                                        : "center" ===
                                                          t.label.position
                                                        ? r.globals.gridHeight /
                                                              2 +
                                                          ("vertical" ===
                                                          t.label.orientation
                                                              ? d.width / 2
                                                              : 0)
                                                        : r.globals.gridHeight,
                                                f =
                                                    this.annoCtx.graphics.drawText(
                                                        {
                                                            x:
                                                                s +
                                                                t.label.offsetX,
                                                            y:
                                                                u +
                                                                t.label
                                                                    .offsetY -
                                                                ("vertical" ===
                                                                t.label
                                                                    .orientation
                                                                    ? "top" ===
                                                                      t.label
                                                                          .position
                                                                        ? d.width /
                                                                              2 -
                                                                          12
                                                                        : -d.width /
                                                                          2
                                                                    : 0),
                                                            text: n,
                                                            textAnchor:
                                                                t.label
                                                                    .textAnchor,
                                                            fontSize:
                                                                t.label.style
                                                                    .fontSize,
                                                            fontFamily:
                                                                t.label.style
                                                                    .fontFamily,
                                                            fontWeight:
                                                                t.label.style
                                                                    .fontWeight,
                                                            foreColor:
                                                                t.label.style
                                                                    .color,
                                                            cssClass:
                                                                "apexcharts-xaxis-annotation-label "
                                                                    .concat(
                                                                        t.label
                                                                            .style
                                                                            .cssClass,
                                                                        " "
                                                                    )
                                                                    .concat(
                                                                        t.id
                                                                            ? t.id
                                                                            : ""
                                                                    ),
                                                        }
                                                    );
                                            f.attr({ rel: i }),
                                                e.appendChild(f.node),
                                                this.annoCtx.helpers.setOrientations(
                                                    t,
                                                    i
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "drawXAxisAnnotations",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = this.annoCtx.graphics.group({
                                                class: "apexcharts-xaxis-annotations",
                                            });
                                        return (
                                            e.config.annotations.xaxis.map(
                                                function (e, a) {
                                                    t.addXaxisAnnotation(
                                                        e,
                                                        i.node,
                                                        a
                                                    );
                                                }
                                            ),
                                            i
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    P = (function () {
                        function t(e) {
                            o(this, t),
                                (this.w = e.w),
                                (this.annoCtx = e),
                                (this.helpers = new S(this.annoCtx));
                        }
                        return (
                            c(t, [
                                {
                                    key: "addYaxisAnnotation",
                                    value: function (t, e, i) {
                                        var a,
                                            r = this.w,
                                            s = t.strokeDashArray,
                                            n = this.helpers.getY1Y2("y1", t),
                                            o = t.label.text;
                                        if (null === t.y2 || void 0 === t.y2) {
                                            var l =
                                                this.annoCtx.graphics.drawLine(
                                                    0 + t.offsetX,
                                                    n + t.offsetY,
                                                    this._getYAxisAnnotationWidth(
                                                        t
                                                    ),
                                                    n + t.offsetY,
                                                    t.borderColor,
                                                    s,
                                                    t.borderWidth
                                                );
                                            e.appendChild(l.node),
                                                t.id &&
                                                    l.node.classList.add(t.id);
                                        } else {
                                            if (
                                                (a = this.helpers.getY1Y2(
                                                    "y2",
                                                    t
                                                )) > n
                                            ) {
                                                var c = n;
                                                (n = a), (a = c);
                                            }
                                            var h =
                                                this.annoCtx.graphics.drawRect(
                                                    0 + t.offsetX,
                                                    a + t.offsetY,
                                                    this._getYAxisAnnotationWidth(
                                                        t
                                                    ),
                                                    n - a,
                                                    0,
                                                    t.fillColor,
                                                    t.opacity,
                                                    1,
                                                    t.borderColor,
                                                    s
                                                );
                                            h.node.classList.add(
                                                "apexcharts-annotation-rect"
                                            ),
                                                h.attr(
                                                    "clip-path",
                                                    "url(#gridRectMask".concat(
                                                        r.globals.cuid,
                                                        ")"
                                                    )
                                                ),
                                                e.appendChild(h.node),
                                                t.id &&
                                                    h.node.classList.add(t.id);
                                        }
                                        var d =
                                                "right" === t.label.position
                                                    ? r.globals.gridWidth
                                                    : "center" ===
                                                      t.label.position
                                                    ? r.globals.gridWidth / 2
                                                    : 0,
                                            u = this.annoCtx.graphics.drawText({
                                                x: d + t.label.offsetX,
                                                y:
                                                    (null != a ? a : n) +
                                                    t.label.offsetY -
                                                    3,
                                                text: o,
                                                textAnchor: t.label.textAnchor,
                                                fontSize:
                                                    t.label.style.fontSize,
                                                fontFamily:
                                                    t.label.style.fontFamily,
                                                fontWeight:
                                                    t.label.style.fontWeight,
                                                foreColor: t.label.style.color,
                                                cssClass:
                                                    "apexcharts-yaxis-annotation-label "
                                                        .concat(
                                                            t.label.style
                                                                .cssClass,
                                                            " "
                                                        )
                                                        .concat(
                                                            t.id ? t.id : ""
                                                        ),
                                            });
                                        u.attr({ rel: i }),
                                            e.appendChild(u.node);
                                    },
                                },
                                {
                                    key: "_getYAxisAnnotationWidth",
                                    value: function (t) {
                                        var e = this.w;
                                        return (
                                            e.globals.gridWidth,
                                            (t.width.indexOf("%") > -1
                                                ? (e.globals.gridWidth *
                                                      parseInt(t.width, 10)) /
                                                  100
                                                : parseInt(t.width, 10)) +
                                                t.offsetX
                                        );
                                    },
                                },
                                {
                                    key: "drawYAxisAnnotations",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = this.annoCtx.graphics.group({
                                                class: "apexcharts-yaxis-annotations",
                                            });
                                        return (
                                            e.config.annotations.yaxis.map(
                                                function (e, a) {
                                                    t.addYaxisAnnotation(
                                                        e,
                                                        i.node,
                                                        a
                                                    );
                                                }
                                            ),
                                            i
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    L = (function () {
                        function t(e) {
                            o(this, t),
                                (this.w = e.w),
                                (this.annoCtx = e),
                                (this.helpers = new S(this.annoCtx));
                        }
                        return (
                            c(t, [
                                {
                                    key: "addPointAnnotation",
                                    value: function (t, e, i) {
                                        this.w;
                                        var a = this.helpers.getX1X2("x1", t),
                                            r = this.helpers.getY1Y2("y1", t);
                                        if (v.isNumber(a)) {
                                            var s = {
                                                    pSize: t.marker.size,
                                                    pointStrokeWidth:
                                                        t.marker.strokeWidth,
                                                    pointFillColor:
                                                        t.marker.fillColor,
                                                    pointStrokeColor:
                                                        t.marker.strokeColor,
                                                    shape: t.marker.shape,
                                                    pRadius: t.marker.radius,
                                                    class: "apexcharts-point-annotation-marker "
                                                        .concat(
                                                            t.marker.cssClass,
                                                            " "
                                                        )
                                                        .concat(
                                                            t.id ? t.id : ""
                                                        ),
                                                },
                                                n =
                                                    this.annoCtx.graphics.drawMarker(
                                                        a + t.marker.offsetX,
                                                        r + t.marker.offsetY,
                                                        s
                                                    );
                                            e.appendChild(n.node);
                                            var o = t.label.text
                                                    ? t.label.text
                                                    : "",
                                                l =
                                                    this.annoCtx.graphics.drawText(
                                                        {
                                                            x:
                                                                a +
                                                                t.label.offsetX,
                                                            y:
                                                                r +
                                                                t.label
                                                                    .offsetY -
                                                                t.marker.size -
                                                                parseFloat(
                                                                    t.label
                                                                        .style
                                                                        .fontSize
                                                                ) /
                                                                    1.6,
                                                            text: o,
                                                            textAnchor:
                                                                t.label
                                                                    .textAnchor,
                                                            fontSize:
                                                                t.label.style
                                                                    .fontSize,
                                                            fontFamily:
                                                                t.label.style
                                                                    .fontFamily,
                                                            fontWeight:
                                                                t.label.style
                                                                    .fontWeight,
                                                            foreColor:
                                                                t.label.style
                                                                    .color,
                                                            cssClass:
                                                                "apexcharts-point-annotation-label "
                                                                    .concat(
                                                                        t.label
                                                                            .style
                                                                            .cssClass,
                                                                        " "
                                                                    )
                                                                    .concat(
                                                                        t.id
                                                                            ? t.id
                                                                            : ""
                                                                    ),
                                                        }
                                                    );
                                            if (
                                                (l.attr({ rel: i }),
                                                e.appendChild(l.node),
                                                t.customSVG.SVG)
                                            ) {
                                                var c =
                                                    this.annoCtx.graphics.group(
                                                        {
                                                            class:
                                                                "apexcharts-point-annotations-custom-svg " +
                                                                t.customSVG
                                                                    .cssClass,
                                                        }
                                                    );
                                                c.attr({
                                                    transform: "translate("
                                                        .concat(
                                                            a +
                                                                t.customSVG
                                                                    .offsetX,
                                                            ", "
                                                        )
                                                        .concat(
                                                            r +
                                                                t.customSVG
                                                                    .offsetY,
                                                            ")"
                                                        ),
                                                }),
                                                    (c.node.innerHTML =
                                                        t.customSVG.SVG),
                                                    e.appendChild(c.node);
                                            }
                                            if (t.image.path) {
                                                var h = t.image.width
                                                        ? t.image.width
                                                        : 20,
                                                    d = t.image.height
                                                        ? t.image.height
                                                        : 20;
                                                n = this.annoCtx.addImage({
                                                    x:
                                                        a +
                                                        t.image.offsetX -
                                                        h / 2,
                                                    y:
                                                        r +
                                                        t.image.offsetY -
                                                        d / 2,
                                                    width: h,
                                                    height: d,
                                                    path: t.image.path,
                                                    appendTo:
                                                        ".apexcharts-point-annotations",
                                                });
                                            }
                                            t.mouseEnter &&
                                                n.node.addEventListener(
                                                    "mouseenter",
                                                    t.mouseEnter.bind(this, t)
                                                ),
                                                t.mouseLeave &&
                                                    n.node.addEventListener(
                                                        "mouseleave",
                                                        t.mouseLeave.bind(
                                                            this,
                                                            t
                                                        )
                                                    ),
                                                t.click &&
                                                    n.node.addEventListener(
                                                        "click",
                                                        t.click.bind(this, t)
                                                    );
                                        }
                                    },
                                },
                                {
                                    key: "drawPointAnnotations",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = this.annoCtx.graphics.group({
                                                class: "apexcharts-point-annotations",
                                            });
                                        return (
                                            e.config.annotations.points.map(
                                                function (e, a) {
                                                    t.addPointAnnotation(
                                                        e,
                                                        i.node,
                                                        a
                                                    );
                                                }
                                            ),
                                            i
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    T = {
                        name: "en",
                        options: {
                            months: [
                                "January",
                                "February",
                                "March",
                                "April",
                                "May",
                                "June",
                                "July",
                                "August",
                                "September",
                                "October",
                                "November",
                                "December",
                            ],
                            shortMonths: [
                                "Jan",
                                "Feb",
                                "Mar",
                                "Apr",
                                "May",
                                "Jun",
                                "Jul",
                                "Aug",
                                "Sep",
                                "Oct",
                                "Nov",
                                "Dec",
                            ],
                            days: [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                            ],
                            shortDays: [
                                "Sun",
                                "Mon",
                                "Tue",
                                "Wed",
                                "Thu",
                                "Fri",
                                "Sat",
                            ],
                            toolbar: {
                                exportToSVG: "Download SVG",
                                exportToPNG: "Download PNG",
                                exportToCSV: "Download CSV",
                                menu: "Menu",
                                selection: "Selection",
                                selectionZoom: "Selection Zoom",
                                zoomIn: "Zoom In",
                                zoomOut: "Zoom Out",
                                pan: "Panning",
                                reset: "Reset Zoom",
                            },
                        },
                    },
                    M = (function () {
                        function t() {
                            o(this, t),
                                (this.yAxis = {
                                    show: !0,
                                    showAlways: !1,
                                    showForNullSeries: !0,
                                    seriesName: void 0,
                                    opposite: !1,
                                    reversed: !1,
                                    logarithmic: !1,
                                    logBase: 10,
                                    tickAmount: void 0,
                                    forceNiceScale: !1,
                                    max: void 0,
                                    min: void 0,
                                    floating: !1,
                                    decimalsInFloat: void 0,
                                    labels: {
                                        show: !0,
                                        minWidth: 0,
                                        maxWidth: 160,
                                        offsetX: 0,
                                        offsetY: 0,
                                        align: void 0,
                                        rotate: 0,
                                        padding: 20,
                                        style: {
                                            colors: [],
                                            fontSize: "11px",
                                            fontWeight: 400,
                                            fontFamily: void 0,
                                            cssClass: "",
                                        },
                                        formatter: void 0,
                                    },
                                    axisBorder: {
                                        show: !1,
                                        color: "#e0e0e0",
                                        width: 1,
                                        offsetX: 0,
                                        offsetY: 0,
                                    },
                                    axisTicks: {
                                        show: !1,
                                        color: "#e0e0e0",
                                        width: 6,
                                        offsetX: 0,
                                        offsetY: 0,
                                    },
                                    title: {
                                        text: void 0,
                                        rotate: -90,
                                        offsetY: 0,
                                        offsetX: 0,
                                        style: {
                                            color: void 0,
                                            fontSize: "11px",
                                            fontWeight: 900,
                                            fontFamily: void 0,
                                            cssClass: "",
                                        },
                                    },
                                    tooltip: { enabled: !1, offsetX: 0 },
                                    crosshairs: {
                                        show: !0,
                                        position: "front",
                                        stroke: {
                                            color: "#b6b6b6",
                                            width: 1,
                                            dashArray: 0,
                                        },
                                    },
                                }),
                                (this.pointAnnotation = {
                                    id: void 0,
                                    x: 0,
                                    y: null,
                                    yAxisIndex: 0,
                                    seriesIndex: 0,
                                    mouseEnter: void 0,
                                    mouseLeave: void 0,
                                    click: void 0,
                                    marker: {
                                        size: 4,
                                        fillColor: "#fff",
                                        strokeWidth: 2,
                                        strokeColor: "#333",
                                        shape: "circle",
                                        offsetX: 0,
                                        offsetY: 0,
                                        radius: 2,
                                        cssClass: "",
                                    },
                                    label: {
                                        borderColor: "#c2c2c2",
                                        borderWidth: 1,
                                        borderRadius: 2,
                                        text: void 0,
                                        textAnchor: "middle",
                                        offsetX: 0,
                                        offsetY: 0,
                                        mouseEnter: void 0,
                                        mouseLeave: void 0,
                                        click: void 0,
                                        style: {
                                            background: "#fff",
                                            color: void 0,
                                            fontSize: "11px",
                                            fontFamily: void 0,
                                            fontWeight: 400,
                                            cssClass: "",
                                            padding: {
                                                left: 5,
                                                right: 5,
                                                top: 2,
                                                bottom: 2,
                                            },
                                        },
                                    },
                                    customSVG: {
                                        SVG: void 0,
                                        cssClass: void 0,
                                        offsetX: 0,
                                        offsetY: 0,
                                    },
                                    image: {
                                        path: void 0,
                                        width: 20,
                                        height: 20,
                                        offsetX: 0,
                                        offsetY: 0,
                                    },
                                }),
                                (this.yAxisAnnotation = {
                                    id: void 0,
                                    y: 0,
                                    y2: null,
                                    strokeDashArray: 1,
                                    fillColor: "#c2c2c2",
                                    borderColor: "#c2c2c2",
                                    borderWidth: 1,
                                    opacity: 0.3,
                                    offsetX: 0,
                                    offsetY: 0,
                                    width: "100%",
                                    yAxisIndex: 0,
                                    label: {
                                        borderColor: "#c2c2c2",
                                        borderWidth: 1,
                                        borderRadius: 2,
                                        text: void 0,
                                        textAnchor: "end",
                                        position: "right",
                                        offsetX: 0,
                                        offsetY: -3,
                                        mouseEnter: void 0,
                                        mouseLeave: void 0,
                                        click: void 0,
                                        style: {
                                            background: "#fff",
                                            color: void 0,
                                            fontSize: "11px",
                                            fontFamily: void 0,
                                            fontWeight: 400,
                                            cssClass: "",
                                            padding: {
                                                left: 5,
                                                right: 5,
                                                top: 2,
                                                bottom: 2,
                                            },
                                        },
                                    },
                                }),
                                (this.xAxisAnnotation = {
                                    id: void 0,
                                    x: 0,
                                    x2: null,
                                    strokeDashArray: 1,
                                    fillColor: "#c2c2c2",
                                    borderColor: "#c2c2c2",
                                    borderWidth: 1,
                                    opacity: 0.3,
                                    offsetX: 0,
                                    offsetY: 0,
                                    label: {
                                        borderColor: "#c2c2c2",
                                        borderWidth: 1,
                                        borderRadius: 2,
                                        text: void 0,
                                        textAnchor: "middle",
                                        orientation: "vertical",
                                        position: "top",
                                        offsetX: 0,
                                        offsetY: 0,
                                        mouseEnter: void 0,
                                        mouseLeave: void 0,
                                        click: void 0,
                                        style: {
                                            background: "#fff",
                                            color: void 0,
                                            fontSize: "11px",
                                            fontFamily: void 0,
                                            fontWeight: 400,
                                            cssClass: "",
                                            padding: {
                                                left: 5,
                                                right: 5,
                                                top: 2,
                                                bottom: 2,
                                            },
                                        },
                                    },
                                }),
                                (this.text = {
                                    x: 0,
                                    y: 0,
                                    text: "",
                                    textAnchor: "start",
                                    foreColor: void 0,
                                    fontSize: "13px",
                                    fontFamily: void 0,
                                    fontWeight: 400,
                                    appendTo: ".apexcharts-annotations",
                                    backgroundColor: "transparent",
                                    borderColor: "#c2c2c2",
                                    borderRadius: 0,
                                    borderWidth: 0,
                                    paddingLeft: 4,
                                    paddingRight: 4,
                                    paddingTop: 2,
                                    paddingBottom: 2,
                                });
                        }
                        return (
                            c(t, [
                                {
                                    key: "init",
                                    value: function () {
                                        return {
                                            annotations: {
                                                yaxis: [this.yAxisAnnotation],
                                                xaxis: [this.xAxisAnnotation],
                                                points: [this.pointAnnotation],
                                                texts: [],
                                                images: [],
                                                shapes: [],
                                            },
                                            chart: {
                                                animations: {
                                                    enabled: !0,
                                                    easing: "easeinout",
                                                    speed: 800,
                                                    animateGradually: {
                                                        delay: 150,
                                                        enabled: !0,
                                                    },
                                                    dynamicAnimation: {
                                                        enabled: !0,
                                                        speed: 350,
                                                    },
                                                },
                                                background: "transparent",
                                                locales: [T],
                                                defaultLocale: "en",
                                                dropShadow: {
                                                    enabled: !1,
                                                    enabledOnSeries: void 0,
                                                    top: 2,
                                                    left: 2,
                                                    blur: 4,
                                                    color: "#000",
                                                    opacity: 0.35,
                                                },
                                                events: {
                                                    animationEnd: void 0,
                                                    beforeMount: void 0,
                                                    mounted: void 0,
                                                    updated: void 0,
                                                    click: void 0,
                                                    mouseMove: void 0,
                                                    mouseLeave: void 0,
                                                    xAxisLabelClick: void 0,
                                                    legendClick: void 0,
                                                    markerClick: void 0,
                                                    selection: void 0,
                                                    dataPointSelection: void 0,
                                                    dataPointMouseEnter: void 0,
                                                    dataPointMouseLeave: void 0,
                                                    beforeZoom: void 0,
                                                    beforeResetZoom: void 0,
                                                    zoomed: void 0,
                                                    scrolled: void 0,
                                                    brushScrolled: void 0,
                                                },
                                                foreColor: "#373d3f",
                                                fontFamily:
                                                    "Helvetica, Arial, sans-serif",
                                                height: "auto",
                                                parentHeightOffset: 15,
                                                redrawOnParentResize: !0,
                                                redrawOnWindowResize: !0,
                                                id: void 0,
                                                group: void 0,
                                                offsetX: 0,
                                                offsetY: 0,
                                                selection: {
                                                    enabled: !1,
                                                    type: "x",
                                                    fill: {
                                                        color: "#24292e",
                                                        opacity: 0.1,
                                                    },
                                                    stroke: {
                                                        width: 1,
                                                        color: "#24292e",
                                                        opacity: 0.4,
                                                        dashArray: 3,
                                                    },
                                                    xaxis: {
                                                        min: void 0,
                                                        max: void 0,
                                                    },
                                                    yaxis: {
                                                        min: void 0,
                                                        max: void 0,
                                                    },
                                                },
                                                sparkline: { enabled: !1 },
                                                brush: {
                                                    enabled: !1,
                                                    autoScaleYaxis: !0,
                                                    target: void 0,
                                                },
                                                stacked: !1,
                                                stackType: "normal",
                                                toolbar: {
                                                    show: !0,
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                    tools: {
                                                        download: !0,
                                                        selection: !0,
                                                        zoom: !0,
                                                        zoomin: !0,
                                                        zoomout: !0,
                                                        pan: !0,
                                                        reset: !0,
                                                        customIcons: [],
                                                    },
                                                    export: {
                                                        csv: {
                                                            filename: void 0,
                                                            columnDelimiter:
                                                                ",",
                                                            headerCategory:
                                                                "category",
                                                            headerValue:
                                                                "value",
                                                            dateFormatter:
                                                                function (t) {
                                                                    return new Date(
                                                                        t
                                                                    ).toDateString();
                                                                },
                                                        },
                                                        png: {
                                                            filename: void 0,
                                                        },
                                                        svg: {
                                                            filename: void 0,
                                                        },
                                                    },
                                                    autoSelected: "zoom",
                                                },
                                                type: "line",
                                                width: "100%",
                                                zoom: {
                                                    enabled: !0,
                                                    type: "x",
                                                    autoScaleYaxis: !1,
                                                    zoomedArea: {
                                                        fill: {
                                                            color: "#90CAF9",
                                                            opacity: 0.4,
                                                        },
                                                        stroke: {
                                                            color: "#0D47A1",
                                                            opacity: 0.4,
                                                            width: 1,
                                                        },
                                                    },
                                                },
                                            },
                                            plotOptions: {
                                                area: { fillTo: "origin" },
                                                bar: {
                                                    horizontal: !1,
                                                    columnWidth: "70%",
                                                    barHeight: "70%",
                                                    distributed: !1,
                                                    borderRadius: 0,
                                                    borderRadiusApplication:
                                                        "around",
                                                    borderRadiusWhenStacked:
                                                        "last",
                                                    rangeBarOverlap: !0,
                                                    rangeBarGroupRows: !1,
                                                    hideZeroBarsWhenGrouped: !1,
                                                    isDumbbell: !1,
                                                    dumbbellColors: void 0,
                                                    isFunnel: !1,
                                                    isFunnel3d: !0,
                                                    colors: {
                                                        ranges: [],
                                                        backgroundBarColors: [],
                                                        backgroundBarOpacity: 1,
                                                        backgroundBarRadius: 0,
                                                    },
                                                    dataLabels: {
                                                        position: "top",
                                                        maxItems: 100,
                                                        hideOverflowingLabels:
                                                            !0,
                                                        orientation:
                                                            "horizontal",
                                                        total: {
                                                            enabled: !1,
                                                            formatter: void 0,
                                                            offsetX: 0,
                                                            offsetY: 0,
                                                            style: {
                                                                color: "#373d3f",
                                                                fontSize:
                                                                    "12px",
                                                                fontFamily:
                                                                    void 0,
                                                                fontWeight: 600,
                                                            },
                                                        },
                                                    },
                                                },
                                                bubble: {
                                                    zScaling: !0,
                                                    minBubbleRadius: void 0,
                                                    maxBubbleRadius: void 0,
                                                },
                                                candlestick: {
                                                    colors: {
                                                        upward: "#00B746",
                                                        downward: "#EF403C",
                                                    },
                                                    wick: { useFillColor: !0 },
                                                },
                                                boxPlot: {
                                                    colors: {
                                                        upper: "#00E396",
                                                        lower: "#008FFB",
                                                    },
                                                },
                                                heatmap: {
                                                    radius: 2,
                                                    enableShades: !0,
                                                    shadeIntensity: 0.5,
                                                    reverseNegativeShade: !1,
                                                    distributed: !1,
                                                    useFillColorAsStroke: !1,
                                                    colorScale: {
                                                        inverse: !1,
                                                        ranges: [],
                                                        min: void 0,
                                                        max: void 0,
                                                    },
                                                },
                                                treemap: {
                                                    enableShades: !0,
                                                    shadeIntensity: 0.5,
                                                    distributed: !1,
                                                    reverseNegativeShade: !1,
                                                    useFillColorAsStroke: !1,
                                                    colorScale: {
                                                        inverse: !1,
                                                        ranges: [],
                                                        min: void 0,
                                                        max: void 0,
                                                    },
                                                },
                                                radialBar: {
                                                    inverseOrder: !1,
                                                    startAngle: 0,
                                                    endAngle: 360,
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                    hollow: {
                                                        margin: 5,
                                                        size: "50%",
                                                        background:
                                                            "transparent",
                                                        image: void 0,
                                                        imageWidth: 150,
                                                        imageHeight: 150,
                                                        imageOffsetX: 0,
                                                        imageOffsetY: 0,
                                                        imageClipped: !0,
                                                        position: "front",
                                                        dropShadow: {
                                                            enabled: !1,
                                                            top: 0,
                                                            left: 0,
                                                            blur: 3,
                                                            color: "#000",
                                                            opacity: 0.5,
                                                        },
                                                    },
                                                    track: {
                                                        show: !0,
                                                        startAngle: void 0,
                                                        endAngle: void 0,
                                                        background: "#f2f2f2",
                                                        strokeWidth: "97%",
                                                        opacity: 1,
                                                        margin: 5,
                                                        dropShadow: {
                                                            enabled: !1,
                                                            top: 0,
                                                            left: 0,
                                                            blur: 3,
                                                            color: "#000",
                                                            opacity: 0.5,
                                                        },
                                                    },
                                                    dataLabels: {
                                                        show: !0,
                                                        name: {
                                                            show: !0,
                                                            fontSize: "16px",
                                                            fontFamily: void 0,
                                                            fontWeight: 600,
                                                            color: void 0,
                                                            offsetY: 0,
                                                            formatter:
                                                                function (t) {
                                                                    return t;
                                                                },
                                                        },
                                                        value: {
                                                            show: !0,
                                                            fontSize: "14px",
                                                            fontFamily: void 0,
                                                            fontWeight: 400,
                                                            color: void 0,
                                                            offsetY: 16,
                                                            formatter:
                                                                function (t) {
                                                                    return (
                                                                        t + "%"
                                                                    );
                                                                },
                                                        },
                                                        total: {
                                                            show: !1,
                                                            label: "Total",
                                                            fontSize: "16px",
                                                            fontWeight: 600,
                                                            fontFamily: void 0,
                                                            color: void 0,
                                                            formatter:
                                                                function (t) {
                                                                    return (
                                                                        t.globals.seriesTotals.reduce(
                                                                            function (
                                                                                t,
                                                                                e
                                                                            ) {
                                                                                return (
                                                                                    t +
                                                                                    e
                                                                                );
                                                                            },
                                                                            0
                                                                        ) /
                                                                            t
                                                                                .globals
                                                                                .series
                                                                                .length +
                                                                        "%"
                                                                    );
                                                                },
                                                        },
                                                    },
                                                },
                                                pie: {
                                                    customScale: 1,
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                    startAngle: 0,
                                                    endAngle: 360,
                                                    expandOnClick: !0,
                                                    dataLabels: {
                                                        offset: 0,
                                                        minAngleToShowLabel: 10,
                                                    },
                                                    donut: {
                                                        size: "65%",
                                                        background:
                                                            "transparent",
                                                        labels: {
                                                            show: !1,
                                                            name: {
                                                                show: !0,
                                                                fontSize:
                                                                    "16px",
                                                                fontFamily:
                                                                    void 0,
                                                                fontWeight: 600,
                                                                color: void 0,
                                                                offsetY: -10,
                                                                formatter:
                                                                    function (
                                                                        t
                                                                    ) {
                                                                        return t;
                                                                    },
                                                            },
                                                            value: {
                                                                show: !0,
                                                                fontSize:
                                                                    "20px",
                                                                fontFamily:
                                                                    void 0,
                                                                fontWeight: 400,
                                                                color: void 0,
                                                                offsetY: 10,
                                                                formatter:
                                                                    function (
                                                                        t
                                                                    ) {
                                                                        return t;
                                                                    },
                                                            },
                                                            total: {
                                                                show: !1,
                                                                showAlways: !1,
                                                                label: "Total",
                                                                fontSize:
                                                                    "16px",
                                                                fontWeight: 400,
                                                                fontFamily:
                                                                    void 0,
                                                                color: void 0,
                                                                formatter:
                                                                    function (
                                                                        t
                                                                    ) {
                                                                        return t.globals.seriesTotals.reduce(
                                                                            function (
                                                                                t,
                                                                                e
                                                                            ) {
                                                                                return (
                                                                                    t +
                                                                                    e
                                                                                );
                                                                            },
                                                                            0
                                                                        );
                                                                    },
                                                            },
                                                        },
                                                    },
                                                },
                                                polarArea: {
                                                    rings: {
                                                        strokeWidth: 1,
                                                        strokeColor: "#e8e8e8",
                                                    },
                                                    spokes: {
                                                        strokeWidth: 1,
                                                        connectorColors:
                                                            "#e8e8e8",
                                                    },
                                                },
                                                radar: {
                                                    size: void 0,
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                    polygons: {
                                                        strokeWidth: 1,
                                                        strokeColors: "#e8e8e8",
                                                        connectorColors:
                                                            "#e8e8e8",
                                                        fill: {
                                                            colors: void 0,
                                                        },
                                                    },
                                                },
                                            },
                                            colors: void 0,
                                            dataLabels: {
                                                enabled: !0,
                                                enabledOnSeries: void 0,
                                                formatter: function (t) {
                                                    return null !== t ? t : "";
                                                },
                                                textAnchor: "middle",
                                                distributed: !1,
                                                offsetX: 0,
                                                offsetY: 0,
                                                style: {
                                                    fontSize: "12px",
                                                    fontFamily: void 0,
                                                    fontWeight: 600,
                                                    colors: void 0,
                                                },
                                                background: {
                                                    enabled: !0,
                                                    foreColor: "#fff",
                                                    borderRadius: 2,
                                                    padding: 4,
                                                    opacity: 0.9,
                                                    borderWidth: 1,
                                                    borderColor: "#fff",
                                                    dropShadow: {
                                                        enabled: !1,
                                                        top: 1,
                                                        left: 1,
                                                        blur: 1,
                                                        color: "#000",
                                                        opacity: 0.45,
                                                    },
                                                },
                                                dropShadow: {
                                                    enabled: !1,
                                                    top: 1,
                                                    left: 1,
                                                    blur: 1,
                                                    color: "#000",
                                                    opacity: 0.45,
                                                },
                                            },
                                            fill: {
                                                type: "solid",
                                                colors: void 0,
                                                opacity: 0.85,
                                                gradient: {
                                                    shade: "dark",
                                                    type: "horizontal",
                                                    shadeIntensity: 0.5,
                                                    gradientToColors: void 0,
                                                    inverseColors: !0,
                                                    opacityFrom: 1,
                                                    opacityTo: 1,
                                                    stops: [0, 50, 100],
                                                    colorStops: [],
                                                },
                                                image: {
                                                    src: [],
                                                    width: void 0,
                                                    height: void 0,
                                                },
                                                pattern: {
                                                    style: "squares",
                                                    width: 6,
                                                    height: 6,
                                                    strokeWidth: 2,
                                                },
                                            },
                                            forecastDataPoints: {
                                                count: 0,
                                                fillOpacity: 0.5,
                                                strokeWidth: void 0,
                                                dashArray: 4,
                                            },
                                            grid: {
                                                show: !0,
                                                borderColor: "#e0e0e0",
                                                strokeDashArray: 0,
                                                position: "back",
                                                xaxis: { lines: { show: !1 } },
                                                yaxis: { lines: { show: !0 } },
                                                row: {
                                                    colors: void 0,
                                                    opacity: 0.5,
                                                },
                                                column: {
                                                    colors: void 0,
                                                    opacity: 0.5,
                                                },
                                                padding: {
                                                    top: 0,
                                                    right: 10,
                                                    bottom: 0,
                                                    left: 12,
                                                },
                                            },
                                            labels: [],
                                            legend: {
                                                show: !0,
                                                showForSingleSeries: !1,
                                                showForNullSeries: !0,
                                                showForZeroSeries: !0,
                                                floating: !1,
                                                position: "bottom",
                                                horizontalAlign: "center",
                                                inverseOrder: !1,
                                                fontSize: "12px",
                                                fontFamily: void 0,
                                                fontWeight: 400,
                                                width: void 0,
                                                height: void 0,
                                                formatter: void 0,
                                                tooltipHoverFormatter: void 0,
                                                offsetX: -20,
                                                offsetY: 4,
                                                customLegendItems: [],
                                                labels: {
                                                    colors: void 0,
                                                    useSeriesColors: !1,
                                                },
                                                markers: {
                                                    width: 12,
                                                    height: 12,
                                                    strokeWidth: 0,
                                                    fillColors: void 0,
                                                    strokeColor: "#fff",
                                                    radius: 12,
                                                    customHTML: void 0,
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                    onClick: void 0,
                                                },
                                                itemMargin: {
                                                    horizontal: 5,
                                                    vertical: 2,
                                                },
                                                onItemClick: {
                                                    toggleDataSeries: !0,
                                                },
                                                onItemHover: {
                                                    highlightDataSeries: !0,
                                                },
                                            },
                                            markers: {
                                                discrete: [],
                                                size: 0,
                                                colors: void 0,
                                                strokeColors: "#fff",
                                                strokeWidth: 2,
                                                strokeOpacity: 0.9,
                                                strokeDashArray: 0,
                                                fillOpacity: 1,
                                                shape: "circle",
                                                width: 8,
                                                height: 8,
                                                radius: 2,
                                                offsetX: 0,
                                                offsetY: 0,
                                                onClick: void 0,
                                                onDblClick: void 0,
                                                showNullDataPoints: !0,
                                                hover: {
                                                    size: void 0,
                                                    sizeOffset: 3,
                                                },
                                            },
                                            noData: {
                                                text: void 0,
                                                align: "center",
                                                verticalAlign: "middle",
                                                offsetX: 0,
                                                offsetY: 0,
                                                style: {
                                                    color: void 0,
                                                    fontSize: "14px",
                                                    fontFamily: void 0,
                                                },
                                            },
                                            responsive: [],
                                            series: void 0,
                                            states: {
                                                normal: {
                                                    filter: {
                                                        type: "none",
                                                        value: 0,
                                                    },
                                                },
                                                hover: {
                                                    filter: {
                                                        type: "lighten",
                                                        value: 0.1,
                                                    },
                                                },
                                                active: {
                                                    allowMultipleDataPointsSelection:
                                                        !1,
                                                    filter: {
                                                        type: "darken",
                                                        value: 0.5,
                                                    },
                                                },
                                            },
                                            title: {
                                                text: void 0,
                                                align: "left",
                                                margin: 5,
                                                offsetX: 0,
                                                offsetY: 0,
                                                floating: !1,
                                                style: {
                                                    fontSize: "14px",
                                                    fontWeight: 900,
                                                    fontFamily: void 0,
                                                    color: void 0,
                                                },
                                            },
                                            subtitle: {
                                                text: void 0,
                                                align: "left",
                                                margin: 5,
                                                offsetX: 0,
                                                offsetY: 30,
                                                floating: !1,
                                                style: {
                                                    fontSize: "12px",
                                                    fontWeight: 400,
                                                    fontFamily: void 0,
                                                    color: void 0,
                                                },
                                            },
                                            stroke: {
                                                show: !0,
                                                curve: "smooth",
                                                lineCap: "butt",
                                                width: 2,
                                                colors: void 0,
                                                dashArray: 0,
                                                fill: {
                                                    type: "solid",
                                                    colors: void 0,
                                                    opacity: 0.85,
                                                    gradient: {
                                                        shade: "dark",
                                                        type: "horizontal",
                                                        shadeIntensity: 0.5,
                                                        gradientToColors:
                                                            void 0,
                                                        inverseColors: !0,
                                                        opacityFrom: 1,
                                                        opacityTo: 1,
                                                        stops: [0, 50, 100],
                                                        colorStops: [],
                                                    },
                                                },
                                            },
                                            tooltip: {
                                                enabled: !0,
                                                enabledOnSeries: void 0,
                                                shared: !0,
                                                followCursor: !1,
                                                intersect: !1,
                                                inverseOrder: !1,
                                                custom: void 0,
                                                fillSeriesColor: !1,
                                                theme: "light",
                                                cssClass: "",
                                                style: {
                                                    fontSize: "12px",
                                                    fontFamily: void 0,
                                                },
                                                onDatasetHover: {
                                                    highlightDataSeries: !1,
                                                },
                                                x: {
                                                    show: !0,
                                                    format: "dd MMM",
                                                    formatter: void 0,
                                                },
                                                y: {
                                                    formatter: void 0,
                                                    title: {
                                                        formatter: function (
                                                            t
                                                        ) {
                                                            return t
                                                                ? t + ": "
                                                                : "";
                                                        },
                                                    },
                                                },
                                                z: {
                                                    formatter: void 0,
                                                    title: "Size: ",
                                                },
                                                marker: {
                                                    show: !0,
                                                    fillColors: void 0,
                                                },
                                                items: { display: "flex" },
                                                fixed: {
                                                    enabled: !1,
                                                    position: "topRight",
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                },
                                            },
                                            xaxis: {
                                                type: "category",
                                                categories: [],
                                                convertedCatToNumeric: !1,
                                                offsetX: 0,
                                                offsetY: 0,
                                                overwriteCategories: void 0,
                                                labels: {
                                                    show: !0,
                                                    rotate: -45,
                                                    rotateAlways: !1,
                                                    hideOverlappingLabels: !0,
                                                    trim: !1,
                                                    minHeight: void 0,
                                                    maxHeight: 120,
                                                    showDuplicates: !0,
                                                    style: {
                                                        colors: [],
                                                        fontSize: "12px",
                                                        fontWeight: 400,
                                                        fontFamily: void 0,
                                                        cssClass: "",
                                                    },
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                    format: void 0,
                                                    formatter: void 0,
                                                    datetimeUTC: !0,
                                                    datetimeFormatter: {
                                                        year: "yyyy",
                                                        month: "MMM 'yy",
                                                        day: "dd MMM",
                                                        hour: "HH:mm",
                                                        minute: "HH:mm:ss",
                                                        second: "HH:mm:ss",
                                                    },
                                                },
                                                group: {
                                                    groups: [],
                                                    style: {
                                                        colors: [],
                                                        fontSize: "12px",
                                                        fontWeight: 400,
                                                        fontFamily: void 0,
                                                        cssClass: "",
                                                    },
                                                },
                                                axisBorder: {
                                                    show: !0,
                                                    color: "#e0e0e0",
                                                    width: "100%",
                                                    height: 1,
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                },
                                                axisTicks: {
                                                    show: !0,
                                                    color: "#e0e0e0",
                                                    height: 6,
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                },
                                                tickAmount: void 0,
                                                tickPlacement: "on",
                                                min: void 0,
                                                max: void 0,
                                                range: void 0,
                                                floating: !1,
                                                decimalsInFloat: void 0,
                                                position: "bottom",
                                                title: {
                                                    text: void 0,
                                                    offsetX: 0,
                                                    offsetY: 0,
                                                    style: {
                                                        color: void 0,
                                                        fontSize: "12px",
                                                        fontWeight: 900,
                                                        fontFamily: void 0,
                                                        cssClass: "",
                                                    },
                                                },
                                                crosshairs: {
                                                    show: !0,
                                                    width: 1,
                                                    position: "back",
                                                    opacity: 0.9,
                                                    stroke: {
                                                        color: "#b6b6b6",
                                                        width: 1,
                                                        dashArray: 3,
                                                    },
                                                    fill: {
                                                        type: "solid",
                                                        color: "#B1B9C4",
                                                        gradient: {
                                                            colorFrom:
                                                                "#D8E3F0",
                                                            colorTo: "#BED1E6",
                                                            stops: [0, 100],
                                                            opacityFrom: 0.4,
                                                            opacityTo: 0.5,
                                                        },
                                                    },
                                                    dropShadow: {
                                                        enabled: !1,
                                                        left: 0,
                                                        top: 0,
                                                        blur: 1,
                                                        opacity: 0.4,
                                                    },
                                                },
                                                tooltip: {
                                                    enabled: !0,
                                                    offsetY: 0,
                                                    formatter: void 0,
                                                    style: {
                                                        fontSize: "12px",
                                                        fontFamily: void 0,
                                                    },
                                                },
                                            },
                                            yaxis: this.yAxis,
                                            theme: {
                                                mode: "light",
                                                palette: "palette1",
                                                monochrome: {
                                                    enabled: !1,
                                                    color: "#008FFB",
                                                    shadeTo: "light",
                                                    shadeIntensity: 0.65,
                                                },
                                            },
                                        };
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    E = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.graphics = new k(this.ctx)),
                                this.w.globals.isBarHorizontal &&
                                    (this.invertAxis = !0),
                                (this.helpers = new S(this)),
                                (this.xAxisAnnotations = new C(this)),
                                (this.yAxisAnnotations = new P(this)),
                                (this.pointsAnnotations = new L(this)),
                                this.w.globals.isBarHorizontal &&
                                    this.w.config.yaxis[0].reversed &&
                                    (this.inversedReversedAxis = !0),
                                (this.xDivision =
                                    this.w.globals.gridWidth /
                                    this.w.globals.dataPoints);
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawAxesAnnotations",
                                    value: function () {
                                        var t = this.w;
                                        if (t.globals.axisCharts) {
                                            for (
                                                var e =
                                                        this.yAxisAnnotations.drawYAxisAnnotations(),
                                                    i =
                                                        this.xAxisAnnotations.drawXAxisAnnotations(),
                                                    a =
                                                        this.pointsAnnotations.drawPointAnnotations(),
                                                    r =
                                                        t.config.chart
                                                            .animations.enabled,
                                                    s = [e, i, a],
                                                    n = [
                                                        i.node,
                                                        e.node,
                                                        a.node,
                                                    ],
                                                    o = 0;
                                                o < 3;
                                                o++
                                            )
                                                t.globals.dom.elGraphical.add(
                                                    s[o]
                                                ),
                                                    !r ||
                                                        t.globals.resized ||
                                                        t.globals.dataChanged ||
                                                        ("scatter" !==
                                                            t.config.chart
                                                                .type &&
                                                            "bubble" !==
                                                                t.config.chart
                                                                    .type &&
                                                            t.globals
                                                                .dataPoints >
                                                                1 &&
                                                            n[o].classList.add(
                                                                "apexcharts-element-hidden"
                                                            )),
                                                    t.globals.delayedElements.push(
                                                        { el: n[o], index: 0 }
                                                    );
                                            this.helpers.annotationsBackground();
                                        }
                                    },
                                },
                                {
                                    key: "drawImageAnnos",
                                    value: function () {
                                        var t = this;
                                        this.w.config.annotations.images.map(
                                            function (e, i) {
                                                t.addImage(e, i);
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawTextAnnos",
                                    value: function () {
                                        var t = this;
                                        this.w.config.annotations.texts.map(
                                            function (e, i) {
                                                t.addText(e, i);
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "addXaxisAnnotation",
                                    value: function (t, e, i) {
                                        this.xAxisAnnotations.addXaxisAnnotation(
                                            t,
                                            e,
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "addYaxisAnnotation",
                                    value: function (t, e, i) {
                                        this.yAxisAnnotations.addYaxisAnnotation(
                                            t,
                                            e,
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "addPointAnnotation",
                                    value: function (t, e, i) {
                                        this.pointsAnnotations.addPointAnnotation(
                                            t,
                                            e,
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "addText",
                                    value: function (t, e) {
                                        var i = t.x,
                                            a = t.y,
                                            r = t.text,
                                            s = t.textAnchor,
                                            n = t.foreColor,
                                            o = t.fontSize,
                                            l = t.fontFamily,
                                            c = t.fontWeight,
                                            h = t.cssClass,
                                            d = t.backgroundColor,
                                            u = t.borderWidth,
                                            f = t.strokeDashArray,
                                            g = t.borderRadius,
                                            p = t.borderColor,
                                            x = t.appendTo,
                                            m =
                                                void 0 === x
                                                    ? ".apexcharts-annotations"
                                                    : x,
                                            b = t.paddingLeft,
                                            v = void 0 === b ? 4 : b,
                                            y = t.paddingRight,
                                            w = void 0 === y ? 4 : y,
                                            k = t.paddingBottom,
                                            A = void 0 === k ? 2 : k,
                                            S = t.paddingTop,
                                            C = void 0 === S ? 2 : S,
                                            P = this.w,
                                            L = this.graphics.drawText({
                                                x: i,
                                                y: a,
                                                text: r,
                                                textAnchor: s || "start",
                                                fontSize: o || "12px",
                                                fontWeight: c || "regular",
                                                fontFamily:
                                                    l ||
                                                    P.config.chart.fontFamily,
                                                foreColor:
                                                    n ||
                                                    P.config.chart.foreColor,
                                                cssClass: h,
                                            }),
                                            T =
                                                P.globals.dom.baseEl.querySelector(
                                                    m
                                                );
                                        T && T.appendChild(L.node);
                                        var M = L.bbox();
                                        if (r) {
                                            var E = this.graphics.drawRect(
                                                M.x - v,
                                                M.y - C,
                                                M.width + v + w,
                                                M.height + A + C,
                                                g,
                                                d || "transparent",
                                                1,
                                                u,
                                                p,
                                                f
                                            );
                                            T.insertBefore(E.node, L.node);
                                        }
                                    },
                                },
                                {
                                    key: "addImage",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = t.path,
                                            r = t.x,
                                            s = void 0 === r ? 0 : r,
                                            n = t.y,
                                            o = void 0 === n ? 0 : n,
                                            l = t.width,
                                            c = void 0 === l ? 20 : l,
                                            h = t.height,
                                            d = void 0 === h ? 20 : h,
                                            u = t.appendTo,
                                            f =
                                                void 0 === u
                                                    ? ".apexcharts-annotations"
                                                    : u,
                                            g = i.globals.dom.Paper.image(a);
                                        g.size(c, d).move(s, o);
                                        var p =
                                            i.globals.dom.baseEl.querySelector(
                                                f
                                            );
                                        return p && p.appendChild(g.node), g;
                                    },
                                },
                                {
                                    key: "addXaxisAnnotationExternal",
                                    value: function (t, e, i) {
                                        return (
                                            this.addAnnotationExternal({
                                                params: t,
                                                pushToMemory: e,
                                                context: i,
                                                type: "xaxis",
                                                contextMethod:
                                                    i.addXaxisAnnotation,
                                            }),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "addYaxisAnnotationExternal",
                                    value: function (t, e, i) {
                                        return (
                                            this.addAnnotationExternal({
                                                params: t,
                                                pushToMemory: e,
                                                context: i,
                                                type: "yaxis",
                                                contextMethod:
                                                    i.addYaxisAnnotation,
                                            }),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "addPointAnnotationExternal",
                                    value: function (t, e, i) {
                                        return (
                                            void 0 === this.invertAxis &&
                                                (this.invertAxis =
                                                    i.w.globals.isBarHorizontal),
                                            this.addAnnotationExternal({
                                                params: t,
                                                pushToMemory: e,
                                                context: i,
                                                type: "point",
                                                contextMethod:
                                                    i.addPointAnnotation,
                                            }),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "addAnnotationExternal",
                                    value: function (t) {
                                        var e = t.params,
                                            i = t.pushToMemory,
                                            a = t.context,
                                            r = t.type,
                                            s = t.contextMethod,
                                            n = a,
                                            o = n.w,
                                            l =
                                                o.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-".concat(
                                                        r,
                                                        "-annotations"
                                                    )
                                                ),
                                            c = l.childNodes.length + 1,
                                            h = new M(),
                                            d = Object.assign(
                                                {},
                                                "xaxis" === r
                                                    ? h.xAxisAnnotation
                                                    : "yaxis" === r
                                                    ? h.yAxisAnnotation
                                                    : h.pointAnnotation
                                            ),
                                            u = v.extend(d, e);
                                        switch (r) {
                                            case "xaxis":
                                                this.addXaxisAnnotation(
                                                    u,
                                                    l,
                                                    c
                                                );
                                                break;
                                            case "yaxis":
                                                this.addYaxisAnnotation(
                                                    u,
                                                    l,
                                                    c
                                                );
                                                break;
                                            case "point":
                                                this.addPointAnnotation(
                                                    u,
                                                    l,
                                                    c
                                                );
                                        }
                                        var f =
                                                o.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-"
                                                        .concat(
                                                            r,
                                                            "-annotations .apexcharts-"
                                                        )
                                                        .concat(
                                                            r,
                                                            "-annotation-label[rel='"
                                                        )
                                                        .concat(c, "']")
                                                ),
                                            g =
                                                this.helpers.addBackgroundToAnno(
                                                    f,
                                                    u
                                                );
                                        return (
                                            g && l.insertBefore(g.node, f),
                                            i &&
                                                o.globals.memory.methodsToExec.push(
                                                    {
                                                        context: n,
                                                        id: u.id
                                                            ? u.id
                                                            : v.randomId(),
                                                        method: s,
                                                        label: "addAnnotation",
                                                        params: e,
                                                    }
                                                ),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "clearAnnotations",
                                    value: function (t) {
                                        var e = t.w,
                                            i =
                                                e.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations"
                                                );
                                        e.globals.memory.methodsToExec.map(
                                            function (t, i) {
                                                ("addText" !== t.label &&
                                                    "addAnnotation" !==
                                                        t.label) ||
                                                    e.globals.memory.methodsToExec.splice(
                                                        i,
                                                        1
                                                    );
                                            }
                                        ),
                                            (i = v.listToArray(i)),
                                            Array.prototype.forEach.call(
                                                i,
                                                function (t) {
                                                    for (; t.firstChild; )
                                                        t.removeChild(
                                                            t.firstChild
                                                        );
                                                }
                                            );
                                    },
                                },
                                {
                                    key: "removeAnnotation",
                                    value: function (t, e) {
                                        var i = t.w,
                                            a =
                                                i.globals.dom.baseEl.querySelectorAll(
                                                    ".".concat(e)
                                                );
                                        a &&
                                            (i.globals.memory.methodsToExec.map(
                                                function (t, a) {
                                                    t.id === e &&
                                                        i.globals.memory.methodsToExec.splice(
                                                            a,
                                                            1
                                                        );
                                                }
                                            ),
                                            Array.prototype.forEach.call(
                                                a,
                                                function (t) {
                                                    t.parentElement.removeChild(
                                                        t
                                                    );
                                                }
                                            ));
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    I = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.months31 = [1, 3, 5, 7, 8, 10, 12]),
                                (this.months30 = [2, 4, 6, 9, 11]),
                                (this.daysCntOfYear = [
                                    0, 31, 59, 90, 120, 151, 181, 212, 243, 273,
                                    304, 334,
                                ]);
                        }
                        return (
                            c(t, [
                                {
                                    key: "isValidDate",
                                    value: function (t) {
                                        return !isNaN(this.parseDate(t));
                                    },
                                },
                                {
                                    key: "getTimeStamp",
                                    value: function (t) {
                                        return Date.parse(t)
                                            ? this.w.config.xaxis.labels
                                                  .datetimeUTC
                                                ? new Date(
                                                      new Date(t)
                                                          .toISOString()
                                                          .substr(0, 25)
                                                  ).getTime()
                                                : new Date(t).getTime()
                                            : t;
                                    },
                                },
                                {
                                    key: "getDate",
                                    value: function (t) {
                                        return this.w.config.xaxis.labels
                                            .datetimeUTC
                                            ? new Date(
                                                  new Date(t).toUTCString()
                                              )
                                            : new Date(t);
                                    },
                                },
                                {
                                    key: "parseDate",
                                    value: function (t) {
                                        var e = Date.parse(t);
                                        if (!isNaN(e))
                                            return this.getTimeStamp(t);
                                        var i = Date.parse(
                                            t
                                                .replace(/-/g, "/")
                                                .replace(/[a-z]+/gi, " ")
                                        );
                                        return this.getTimeStamp(i);
                                    },
                                },
                                {
                                    key: "parseDateWithTimezone",
                                    value: function (t) {
                                        return Date.parse(
                                            t
                                                .replace(/-/g, "/")
                                                .replace(/[a-z]+/gi, " ")
                                        );
                                    },
                                },
                                {
                                    key: "formatDate",
                                    value: function (t, e) {
                                        var i = this.w.globals.locale,
                                            a =
                                                this.w.config.xaxis.labels
                                                    .datetimeUTC,
                                            r = ["\0"].concat(x(i.months)),
                                            s = [""].concat(x(i.shortMonths)),
                                            n = [""].concat(x(i.days)),
                                            o = [""].concat(x(i.shortDays));
                                        function l(t, e) {
                                            var i = t + "";
                                            for (e = e || 2; i.length < e; )
                                                i = "0" + i;
                                            return i;
                                        }
                                        var c = a
                                            ? t.getUTCFullYear()
                                            : t.getFullYear();
                                        e = (e = (e = e.replace(
                                            /(^|[^\\])yyyy+/g,
                                            "$1" + c
                                        )).replace(
                                            /(^|[^\\])yy/g,
                                            "$1" + c.toString().substr(2, 2)
                                        )).replace(/(^|[^\\])y/g, "$1" + c);
                                        var h =
                                            (a
                                                ? t.getUTCMonth()
                                                : t.getMonth()) + 1;
                                        e = (e = (e = (e = e.replace(
                                            /(^|[^\\])MMMM+/g,
                                            "$1" + r[0]
                                        )).replace(
                                            /(^|[^\\])MMM/g,
                                            "$1" + s[0]
                                        )).replace(
                                            /(^|[^\\])MM/g,
                                            "$1" + l(h)
                                        )).replace(/(^|[^\\])M/g, "$1" + h);
                                        var d = a
                                            ? t.getUTCDate()
                                            : t.getDate();
                                        e = (e = (e = (e = e.replace(
                                            /(^|[^\\])dddd+/g,
                                            "$1" + n[0]
                                        )).replace(
                                            /(^|[^\\])ddd/g,
                                            "$1" + o[0]
                                        )).replace(
                                            /(^|[^\\])dd/g,
                                            "$1" + l(d)
                                        )).replace(/(^|[^\\])d/g, "$1" + d);
                                        var u = a
                                                ? t.getUTCHours()
                                                : t.getHours(),
                                            f =
                                                u > 12
                                                    ? u - 12
                                                    : 0 === u
                                                    ? 12
                                                    : u;
                                        e = (e = (e = (e = e.replace(
                                            /(^|[^\\])HH+/g,
                                            "$1" + l(u)
                                        )).replace(
                                            /(^|[^\\])H/g,
                                            "$1" + u
                                        )).replace(
                                            /(^|[^\\])hh+/g,
                                            "$1" + l(f)
                                        )).replace(/(^|[^\\])h/g, "$1" + f);
                                        var g = a
                                            ? t.getUTCMinutes()
                                            : t.getMinutes();
                                        e = (e = e.replace(
                                            /(^|[^\\])mm+/g,
                                            "$1" + l(g)
                                        )).replace(/(^|[^\\])m/g, "$1" + g);
                                        var p = a
                                            ? t.getUTCSeconds()
                                            : t.getSeconds();
                                        e = (e = e.replace(
                                            /(^|[^\\])ss+/g,
                                            "$1" + l(p)
                                        )).replace(/(^|[^\\])s/g, "$1" + p);
                                        var m = a
                                            ? t.getUTCMilliseconds()
                                            : t.getMilliseconds();
                                        (e = e.replace(
                                            /(^|[^\\])fff+/g,
                                            "$1" + l(m, 3)
                                        )),
                                            (m = Math.round(m / 10)),
                                            (e = e.replace(
                                                /(^|[^\\])ff/g,
                                                "$1" + l(m)
                                            )),
                                            (m = Math.round(m / 10));
                                        var b = u < 12 ? "AM" : "PM";
                                        e = (e = (e = e.replace(
                                            /(^|[^\\])f/g,
                                            "$1" + m
                                        )).replace(
                                            /(^|[^\\])TT+/g,
                                            "$1" + b
                                        )).replace(
                                            /(^|[^\\])T/g,
                                            "$1" + b.charAt(0)
                                        );
                                        var v = b.toLowerCase();
                                        e = (e = e.replace(
                                            /(^|[^\\])tt+/g,
                                            "$1" + v
                                        )).replace(
                                            /(^|[^\\])t/g,
                                            "$1" + v.charAt(0)
                                        );
                                        var y = -t.getTimezoneOffset(),
                                            w =
                                                a || !y
                                                    ? "Z"
                                                    : y > 0
                                                    ? "+"
                                                    : "-";
                                        if (!a) {
                                            var k = (y = Math.abs(y)) % 60;
                                            w +=
                                                l(Math.floor(y / 60)) +
                                                ":" +
                                                l(k);
                                        }
                                        e = e.replace(/(^|[^\\])K/g, "$1" + w);
                                        var A =
                                            (a ? t.getUTCDay() : t.getDay()) +
                                            1;
                                        return (e = (e = (e = (e = e.replace(
                                            new RegExp(n[0], "g"),
                                            n[A]
                                        )).replace(
                                            new RegExp(o[0], "g"),
                                            o[A]
                                        )).replace(
                                            new RegExp(r[0], "g"),
                                            r[h]
                                        )).replace(
                                            new RegExp(s[0], "g"),
                                            s[h]
                                        )).replace(/\\(.)/g, "$1");
                                    },
                                },
                                {
                                    key: "getTimeUnitsfromTimestamp",
                                    value: function (t, e, i) {
                                        var a = this.w;
                                        void 0 !== a.config.xaxis.min &&
                                            (t = a.config.xaxis.min),
                                            void 0 !== a.config.xaxis.max &&
                                                (e = a.config.xaxis.max);
                                        var r = this.getDate(t),
                                            s = this.getDate(e),
                                            n = this.formatDate(
                                                r,
                                                "yyyy MM dd HH mm ss fff"
                                            ).split(" "),
                                            o = this.formatDate(
                                                s,
                                                "yyyy MM dd HH mm ss fff"
                                            ).split(" ");
                                        return {
                                            minMillisecond: parseInt(n[6], 10),
                                            maxMillisecond: parseInt(o[6], 10),
                                            minSecond: parseInt(n[5], 10),
                                            maxSecond: parseInt(o[5], 10),
                                            minMinute: parseInt(n[4], 10),
                                            maxMinute: parseInt(o[4], 10),
                                            minHour: parseInt(n[3], 10),
                                            maxHour: parseInt(o[3], 10),
                                            minDate: parseInt(n[2], 10),
                                            maxDate: parseInt(o[2], 10),
                                            minMonth: parseInt(n[1], 10) - 1,
                                            maxMonth: parseInt(o[1], 10) - 1,
                                            minYear: parseInt(n[0], 10),
                                            maxYear: parseInt(o[0], 10),
                                        };
                                    },
                                },
                                {
                                    key: "isLeapYear",
                                    value: function (t) {
                                        return (
                                            (t % 4 == 0 && t % 100 != 0) ||
                                            t % 400 == 0
                                        );
                                    },
                                },
                                {
                                    key: "calculcateLastDaysOfMonth",
                                    value: function (t, e, i) {
                                        return (
                                            this.determineDaysOfMonths(t, e) - i
                                        );
                                    },
                                },
                                {
                                    key: "determineDaysOfYear",
                                    value: function (t) {
                                        var e = 365;
                                        return (
                                            this.isLeapYear(t) && (e = 366), e
                                        );
                                    },
                                },
                                {
                                    key: "determineRemainingDaysOfYear",
                                    value: function (t, e, i) {
                                        var a = this.daysCntOfYear[e] + i;
                                        return (
                                            e > 1 && this.isLeapYear() && a++, a
                                        );
                                    },
                                },
                                {
                                    key: "determineDaysOfMonths",
                                    value: function (t, e) {
                                        var i = 30;
                                        switch (((t = v.monthMod(t)), !0)) {
                                            case this.months30.indexOf(t) > -1:
                                                2 === t &&
                                                    (i = this.isLeapYear(e)
                                                        ? 29
                                                        : 28);
                                                break;
                                            case this.months31.indexOf(t) > -1:
                                            default:
                                                i = 31;
                                        }
                                        return i;
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    O = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.tooltipKeyFormat = "dd MMM");
                        }
                        return (
                            c(t, [
                                {
                                    key: "xLabelFormat",
                                    value: function (t, e, i, a) {
                                        var r = this.w;
                                        if (
                                            "datetime" ===
                                                r.config.xaxis.type &&
                                            void 0 ===
                                                r.config.xaxis.labels
                                                    .formatter &&
                                            void 0 ===
                                                r.config.tooltip.x.formatter
                                        ) {
                                            var s = new I(this.ctx);
                                            return s.formatDate(
                                                s.getDate(e),
                                                r.config.tooltip.x.format
                                            );
                                        }
                                        return t(e, i, a);
                                    },
                                },
                                {
                                    key: "defaultGeneralFormatter",
                                    value: function (t) {
                                        return Array.isArray(t)
                                            ? t.map(function (t) {
                                                  return t;
                                              })
                                            : t;
                                    },
                                },
                                {
                                    key: "defaultYFormatter",
                                    value: function (t, e, i) {
                                        var a = this.w;
                                        return (
                                            v.isNumber(t) &&
                                                (t =
                                                    0 !==
                                                    a.globals.yValueDecimal
                                                        ? t.toFixed(
                                                              void 0 !==
                                                                  e.decimalsInFloat
                                                                  ? e.decimalsInFloat
                                                                  : a.globals
                                                                        .yValueDecimal
                                                          )
                                                        : a.globals.maxYArr[i] -
                                                              a.globals.minYArr[
                                                                  i
                                                              ] <
                                                          5
                                                        ? t.toFixed(1)
                                                        : t.toFixed(0)),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "setLabelFormatters",
                                    value: function () {
                                        var t = this,
                                            e = this.w;
                                        return (
                                            (e.globals.xaxisTooltipFormatter =
                                                function (e) {
                                                    return t.defaultGeneralFormatter(
                                                        e
                                                    );
                                                }),
                                            (e.globals.ttKeyFormatter =
                                                function (e) {
                                                    return t.defaultGeneralFormatter(
                                                        e
                                                    );
                                                }),
                                            (e.globals.ttZFormatter = function (
                                                t
                                            ) {
                                                return t;
                                            }),
                                            (e.globals.legendFormatter =
                                                function (e) {
                                                    return t.defaultGeneralFormatter(
                                                        e
                                                    );
                                                }),
                                            void 0 !==
                                            e.config.xaxis.labels.formatter
                                                ? (e.globals.xLabelFormatter =
                                                      e.config.xaxis.labels.formatter)
                                                : (e.globals.xLabelFormatter =
                                                      function (t) {
                                                          if (v.isNumber(t)) {
                                                              if (
                                                                  !e.config
                                                                      .xaxis
                                                                      .convertedCatToNumeric &&
                                                                  "numeric" ===
                                                                      e.config
                                                                          .xaxis
                                                                          .type
                                                              ) {
                                                                  if (
                                                                      v.isNumber(
                                                                          e
                                                                              .config
                                                                              .xaxis
                                                                              .decimalsInFloat
                                                                      )
                                                                  )
                                                                      return t.toFixed(
                                                                          e
                                                                              .config
                                                                              .xaxis
                                                                              .decimalsInFloat
                                                                      );
                                                                  var i =
                                                                      e.globals
                                                                          .maxX -
                                                                      e.globals
                                                                          .minX;
                                                                  return i >
                                                                      0 &&
                                                                      i < 100
                                                                      ? t.toFixed(
                                                                            1
                                                                        )
                                                                      : t.toFixed(
                                                                            0
                                                                        );
                                                              }
                                                              return e.globals
                                                                  .isBarHorizontal &&
                                                                  e.globals
                                                                      .maxY -
                                                                      e.globals
                                                                          .minYArr <
                                                                      4
                                                                  ? t.toFixed(1)
                                                                  : t.toFixed(
                                                                        0
                                                                    );
                                                          }
                                                          return t;
                                                      }),
                                            "function" ==
                                            typeof e.config.tooltip.x.formatter
                                                ? (e.globals.ttKeyFormatter =
                                                      e.config.tooltip.x.formatter)
                                                : (e.globals.ttKeyFormatter =
                                                      e.globals.xLabelFormatter),
                                            "function" ==
                                                typeof e.config.xaxis.tooltip
                                                    .formatter &&
                                                (e.globals.xaxisTooltipFormatter =
                                                    e.config.xaxis.tooltip.formatter),
                                            (Array.isArray(
                                                e.config.tooltip.y
                                            ) ||
                                                void 0 !==
                                                    e.config.tooltip.y
                                                        .formatter) &&
                                                (e.globals.ttVal =
                                                    e.config.tooltip.y),
                                            void 0 !==
                                                e.config.tooltip.z.formatter &&
                                                (e.globals.ttZFormatter =
                                                    e.config.tooltip.z.formatter),
                                            void 0 !==
                                                e.config.legend.formatter &&
                                                (e.globals.legendFormatter =
                                                    e.config.legend.formatter),
                                            e.config.yaxis.forEach(function (
                                                i,
                                                a
                                            ) {
                                                void 0 !== i.labels.formatter
                                                    ? (e.globals.yLabelFormatters[
                                                          a
                                                      ] = i.labels.formatter)
                                                    : (e.globals.yLabelFormatters[
                                                          a
                                                      ] = function (r) {
                                                          return e.globals
                                                              .xyCharts
                                                              ? Array.isArray(r)
                                                                  ? r.map(
                                                                        function (
                                                                            e
                                                                        ) {
                                                                            return t.defaultYFormatter(
                                                                                e,
                                                                                i,
                                                                                a
                                                                            );
                                                                        }
                                                                    )
                                                                  : t.defaultYFormatter(
                                                                        r,
                                                                        i,
                                                                        a
                                                                    )
                                                              : r;
                                                      });
                                            }),
                                            e.globals
                                        );
                                    },
                                },
                                {
                                    key: "heatmapLabelFormatters",
                                    value: function () {
                                        var t = this.w;
                                        if ("heatmap" === t.config.chart.type) {
                                            t.globals.yAxisScale[0].result =
                                                t.globals.seriesNames.slice();
                                            var e =
                                                t.globals.seriesNames.reduce(
                                                    function (t, e) {
                                                        return t.length >
                                                            e.length
                                                            ? t
                                                            : e;
                                                    },
                                                    0
                                                );
                                            (t.globals.yAxisScale[0].niceMax =
                                                e),
                                                (t.globals.yAxisScale[0].niceMin =
                                                    e);
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    z = function (t) {
                        var e,
                            i = t.isTimeline,
                            a = t.ctx,
                            r = t.seriesIndex,
                            s = t.dataPointIndex,
                            n = t.y1,
                            o = t.y2,
                            l = t.w,
                            c = l.globals.seriesRangeStart[r][s],
                            h = l.globals.seriesRangeEnd[r][s],
                            d = l.globals.labels[s],
                            u = l.config.series[r].name
                                ? l.config.series[r].name
                                : "",
                            f = l.globals.ttKeyFormatter,
                            g = l.config.tooltip.y.title.formatter,
                            p = {
                                w: l,
                                seriesIndex: r,
                                dataPointIndex: s,
                                start: c,
                                end: h,
                            };
                        "function" == typeof g && (u = g(u, p)),
                            null !== (e = l.config.series[r].data[s]) &&
                                void 0 !== e &&
                                e.x &&
                                (d = l.config.series[r].data[s].x),
                            i ||
                                ("datetime" === l.config.xaxis.type &&
                                    (d = new O(a).xLabelFormat(
                                        l.globals.ttKeyFormatter,
                                        d,
                                        d,
                                        {
                                            i: void 0,
                                            dateFormatter: new I(a).formatDate,
                                            w: l,
                                        }
                                    ))),
                            "function" == typeof f && (d = f(d, p)),
                            Number.isFinite(n) &&
                                Number.isFinite(o) &&
                                ((c = n), (h = o));
                        var x = "",
                            m = "",
                            b = l.globals.colors[r];
                        if (void 0 === l.config.tooltip.x.formatter)
                            if ("datetime" === l.config.xaxis.type) {
                                var v = new I(a);
                                (x = v.formatDate(
                                    v.getDate(c),
                                    l.config.tooltip.x.format
                                )),
                                    (m = v.formatDate(
                                        v.getDate(h),
                                        l.config.tooltip.x.format
                                    ));
                            } else (x = c), (m = h);
                        else
                            (x = l.config.tooltip.x.formatter(c)),
                                (m = l.config.tooltip.x.formatter(h));
                        return {
                            start: c,
                            end: h,
                            startVal: x,
                            endVal: m,
                            ylabel: d,
                            color: b,
                            seriesName: u,
                        };
                    },
                    F = function (t) {
                        var e = t.color,
                            i = t.seriesName,
                            a = t.ylabel,
                            r = t.start,
                            s = t.end,
                            n = t.seriesIndex,
                            o = t.dataPointIndex,
                            l = t.ctx.tooltip.tooltipLabels.getFormatters(n);
                        (r = l.yLbFormatter(r)), (s = l.yLbFormatter(s));
                        var c = l.yLbFormatter(t.w.globals.series[n][o]),
                            h = '<span class="value start-value">\n  '
                                .concat(
                                    r,
                                    '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  '
                                )
                                .concat(s, "\n  </span>");
                        return (
                            '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' +
                            e +
                            '">' +
                            (i || "") +
                            '</span></div><div> <span class="category">' +
                            a +
                            ": </span> " +
                            (t.w.globals.comboCharts
                                ? "rangeArea" === t.w.config.series[n].type ||
                                  "rangeBar" === t.w.config.series[n].type
                                    ? h
                                    : "<span>".concat(c, "</span>")
                                : h) +
                            " </div></div>"
                        );
                    },
                    D = (function () {
                        function t(e) {
                            o(this, t), (this.opts = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "hideYAxis",
                                    value: function () {
                                        (this.opts.yaxis[0].show = !1),
                                            (this.opts.yaxis[0].title.text =
                                                ""),
                                            (this.opts.yaxis[0].axisBorder.show =
                                                !1),
                                            (this.opts.yaxis[0].axisTicks.show =
                                                !1),
                                            (this.opts.yaxis[0].floating = !0);
                                    },
                                },
                                {
                                    key: "line",
                                    value: function () {
                                        return {
                                            chart: {
                                                animations: { easing: "swing" },
                                            },
                                            dataLabels: { enabled: !1 },
                                            stroke: {
                                                width: 5,
                                                curve: "straight",
                                            },
                                            markers: {
                                                size: 0,
                                                hover: { sizeOffset: 6 },
                                            },
                                            xaxis: { crosshairs: { width: 1 } },
                                        };
                                    },
                                },
                                {
                                    key: "sparkline",
                                    value: function (t) {
                                        return (
                                            this.hideYAxis(),
                                            v.extend(t, {
                                                grid: {
                                                    show: !1,
                                                    padding: {
                                                        left: 0,
                                                        right: 0,
                                                        top: 0,
                                                        bottom: 0,
                                                    },
                                                },
                                                legend: { show: !1 },
                                                xaxis: {
                                                    labels: { show: !1 },
                                                    tooltip: { enabled: !1 },
                                                    axisBorder: { show: !1 },
                                                    axisTicks: { show: !1 },
                                                },
                                                chart: {
                                                    toolbar: { show: !1 },
                                                    zoom: { enabled: !1 },
                                                },
                                                dataLabels: { enabled: !1 },
                                            })
                                        );
                                    },
                                },
                                {
                                    key: "bar",
                                    value: function () {
                                        return {
                                            chart: {
                                                stacked: !1,
                                                animations: { easing: "swing" },
                                            },
                                            plotOptions: {
                                                bar: {
                                                    dataLabels: {
                                                        position: "center",
                                                    },
                                                },
                                            },
                                            dataLabels: {
                                                style: { colors: ["#fff"] },
                                                background: { enabled: !1 },
                                            },
                                            stroke: {
                                                width: 0,
                                                lineCap: "round",
                                            },
                                            fill: { opacity: 0.85 },
                                            legend: {
                                                markers: {
                                                    shape: "square",
                                                    radius: 2,
                                                    size: 8,
                                                },
                                            },
                                            tooltip: {
                                                shared: !1,
                                                intersect: !0,
                                            },
                                            xaxis: {
                                                tooltip: { enabled: !1 },
                                                tickPlacement: "between",
                                                crosshairs: {
                                                    width: "barWidth",
                                                    position: "back",
                                                    fill: { type: "gradient" },
                                                    dropShadow: { enabled: !1 },
                                                    stroke: { width: 0 },
                                                },
                                            },
                                        };
                                    },
                                },
                                {
                                    key: "funnel",
                                    value: function () {
                                        return (
                                            this.hideYAxis(),
                                            s(
                                                s({}, this.bar()),
                                                {},
                                                {
                                                    chart: {
                                                        animations: {
                                                            easing: "linear",
                                                            speed: 800,
                                                            animateGradually: {
                                                                enabled: !1,
                                                            },
                                                        },
                                                    },
                                                    plotOptions: {
                                                        bar: {
                                                            horizontal: !0,
                                                            borderRadiusApplication:
                                                                "around",
                                                            borderRadius: 0,
                                                            dataLabels: {
                                                                position:
                                                                    "center",
                                                            },
                                                        },
                                                    },
                                                    grid: {
                                                        show: !1,
                                                        padding: {
                                                            left: 0,
                                                            right: 0,
                                                        },
                                                    },
                                                    xaxis: {
                                                        labels: { show: !1 },
                                                        tooltip: {
                                                            enabled: !1,
                                                        },
                                                        axisBorder: {
                                                            show: !1,
                                                        },
                                                        axisTicks: { show: !1 },
                                                    },
                                                }
                                            )
                                        );
                                    },
                                },
                                {
                                    key: "candlestick",
                                    value: function () {
                                        var t = this;
                                        return {
                                            stroke: {
                                                width: 1,
                                                colors: ["#333"],
                                            },
                                            fill: { opacity: 1 },
                                            dataLabels: { enabled: !1 },
                                            tooltip: {
                                                shared: !0,
                                                custom: function (e) {
                                                    var i = e.seriesIndex,
                                                        a = e.dataPointIndex,
                                                        r = e.w;
                                                    return t._getBoxTooltip(
                                                        r,
                                                        i,
                                                        a,
                                                        [
                                                            "Open",
                                                            "High",
                                                            "",
                                                            "Low",
                                                            "Close",
                                                        ],
                                                        "candlestick"
                                                    );
                                                },
                                            },
                                            states: {
                                                active: {
                                                    filter: { type: "none" },
                                                },
                                            },
                                            xaxis: { crosshairs: { width: 1 } },
                                        };
                                    },
                                },
                                {
                                    key: "boxPlot",
                                    value: function () {
                                        var t = this;
                                        return {
                                            chart: {
                                                animations: {
                                                    dynamicAnimation: {
                                                        enabled: !1,
                                                    },
                                                },
                                            },
                                            stroke: {
                                                width: 1,
                                                colors: ["#24292e"],
                                            },
                                            dataLabels: { enabled: !1 },
                                            tooltip: {
                                                shared: !0,
                                                custom: function (e) {
                                                    var i = e.seriesIndex,
                                                        a = e.dataPointIndex,
                                                        r = e.w;
                                                    return t._getBoxTooltip(
                                                        r,
                                                        i,
                                                        a,
                                                        [
                                                            "Minimum",
                                                            "Q1",
                                                            "Median",
                                                            "Q3",
                                                            "Maximum",
                                                        ],
                                                        "boxPlot"
                                                    );
                                                },
                                            },
                                            markers: {
                                                size: 5,
                                                strokeWidth: 1,
                                                strokeColors: "#111",
                                            },
                                            xaxis: { crosshairs: { width: 1 } },
                                        };
                                    },
                                },
                                {
                                    key: "rangeBar",
                                    value: function () {
                                        return {
                                            chart: {
                                                animations: {
                                                    animateGradually: !1,
                                                },
                                            },
                                            stroke: {
                                                width: 0,
                                                lineCap: "square",
                                            },
                                            plotOptions: {
                                                bar: {
                                                    borderRadius: 0,
                                                    dataLabels: {
                                                        position: "center",
                                                    },
                                                },
                                            },
                                            dataLabels: {
                                                enabled: !1,
                                                formatter: function (t, e) {
                                                    e.ctx;
                                                    var i = e.seriesIndex,
                                                        a = e.dataPointIndex,
                                                        r = e.w,
                                                        s = function () {
                                                            var t =
                                                                r.globals
                                                                    .seriesRangeStart[
                                                                    i
                                                                ][a];
                                                            return (
                                                                r.globals
                                                                    .seriesRangeEnd[
                                                                    i
                                                                ][a] - t
                                                            );
                                                        };
                                                    return r.globals.comboCharts
                                                        ? "rangeBar" ===
                                                              r.config.series[i]
                                                                  .type ||
                                                          "rangeArea" ===
                                                              r.config.series[i]
                                                                  .type
                                                            ? s()
                                                            : t
                                                        : s();
                                                },
                                                background: { enabled: !1 },
                                                style: { colors: ["#fff"] },
                                            },
                                            markers: { size: 10 },
                                            tooltip: {
                                                shared: !1,
                                                followCursor: !0,
                                                custom: function (t) {
                                                    return t.w.config
                                                        .plotOptions &&
                                                        t.w.config.plotOptions
                                                            .bar &&
                                                        t.w.config.plotOptions
                                                            .bar.horizontal
                                                        ? (function (t) {
                                                              var e = z(
                                                                      s(
                                                                          s(
                                                                              {},
                                                                              t
                                                                          ),
                                                                          {},
                                                                          {
                                                                              isTimeline:
                                                                                  !0,
                                                                          }
                                                                      )
                                                                  ),
                                                                  i = e.color,
                                                                  a =
                                                                      e.seriesName,
                                                                  r = e.ylabel,
                                                                  n =
                                                                      e.startVal,
                                                                  o = e.endVal;
                                                              return F(
                                                                  s(
                                                                      s({}, t),
                                                                      {},
                                                                      {
                                                                          color: i,
                                                                          seriesName:
                                                                              a,
                                                                          ylabel: r,
                                                                          start: n,
                                                                          end: o,
                                                                      }
                                                                  )
                                                              );
                                                          })(t)
                                                        : (function (t) {
                                                              var e = z(t),
                                                                  i = e.color,
                                                                  a =
                                                                      e.seriesName,
                                                                  r = e.ylabel,
                                                                  n = e.start,
                                                                  o = e.end;
                                                              return F(
                                                                  s(
                                                                      s({}, t),
                                                                      {},
                                                                      {
                                                                          color: i,
                                                                          seriesName:
                                                                              a,
                                                                          ylabel: r,
                                                                          start: n,
                                                                          end: o,
                                                                      }
                                                                  )
                                                              );
                                                          })(t);
                                                },
                                            },
                                            xaxis: {
                                                tickPlacement: "between",
                                                tooltip: { enabled: !1 },
                                                crosshairs: {
                                                    stroke: { width: 0 },
                                                },
                                            },
                                        };
                                    },
                                },
                                {
                                    key: "dumbbell",
                                    value: function (t) {
                                        var e, i;
                                        return (
                                            (null !== (e = t.plotOptions.bar) &&
                                                void 0 !== e &&
                                                e.barHeight) ||
                                                (t.plotOptions.bar.barHeight = 2),
                                            (null !== (i = t.plotOptions.bar) &&
                                                void 0 !== i &&
                                                i.columnWidth) ||
                                                (t.plotOptions.bar.columnWidth = 2),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "area",
                                    value: function () {
                                        return {
                                            stroke: {
                                                width: 4,
                                                fill: {
                                                    type: "solid",
                                                    gradient: {
                                                        inverseColors: !1,
                                                        shade: "light",
                                                        type: "vertical",
                                                        opacityFrom: 0.65,
                                                        opacityTo: 0.5,
                                                        stops: [0, 100, 100],
                                                    },
                                                },
                                            },
                                            fill: {
                                                type: "gradient",
                                                gradient: {
                                                    inverseColors: !1,
                                                    shade: "light",
                                                    type: "vertical",
                                                    opacityFrom: 0.65,
                                                    opacityTo: 0.5,
                                                    stops: [0, 100, 100],
                                                },
                                            },
                                            markers: {
                                                size: 0,
                                                hover: { sizeOffset: 6 },
                                            },
                                            tooltip: { followCursor: !1 },
                                        };
                                    },
                                },
                                {
                                    key: "rangeArea",
                                    value: function () {
                                        return {
                                            stroke: {
                                                curve: "straight",
                                                width: 0,
                                            },
                                            fill: {
                                                type: "solid",
                                                opacity: 0.6,
                                            },
                                            markers: { size: 0 },
                                            states: {
                                                hover: {
                                                    filter: { type: "none" },
                                                },
                                                active: {
                                                    filter: { type: "none" },
                                                },
                                            },
                                            tooltip: {
                                                intersect: !1,
                                                shared: !0,
                                                followCursor: !0,
                                                custom: function (t) {
                                                    return (function (t) {
                                                        var e = z(t),
                                                            i = e.color,
                                                            a = e.seriesName,
                                                            r = e.ylabel,
                                                            n = e.start,
                                                            o = e.end;
                                                        return F(
                                                            s(
                                                                s({}, t),
                                                                {},
                                                                {
                                                                    color: i,
                                                                    seriesName:
                                                                        a,
                                                                    ylabel: r,
                                                                    start: n,
                                                                    end: o,
                                                                }
                                                            )
                                                        );
                                                    })(t);
                                                },
                                            },
                                        };
                                    },
                                },
                                {
                                    key: "brush",
                                    value: function (t) {
                                        return v.extend(t, {
                                            chart: {
                                                toolbar: {
                                                    autoSelected: "selection",
                                                    show: !1,
                                                },
                                                zoom: { enabled: !1 },
                                            },
                                            dataLabels: { enabled: !1 },
                                            stroke: { width: 1 },
                                            tooltip: { enabled: !1 },
                                            xaxis: { tooltip: { enabled: !1 } },
                                        });
                                    },
                                },
                                {
                                    key: "stacked100",
                                    value: function (t) {
                                        (t.dataLabels = t.dataLabels || {}),
                                            (t.dataLabels.formatter =
                                                t.dataLabels.formatter ||
                                                void 0);
                                        var e = t.dataLabels.formatter;
                                        return (
                                            t.yaxis.forEach(function (e, i) {
                                                (t.yaxis[i].min = 0),
                                                    (t.yaxis[i].max = 100);
                                            }),
                                            "bar" === t.chart.type &&
                                                (t.dataLabels.formatter =
                                                    e ||
                                                    function (t) {
                                                        return "number" ==
                                                            typeof t && t
                                                            ? t.toFixed(0) + "%"
                                                            : t;
                                                    }),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "stackedBars",
                                    value: function () {
                                        var t = this.bar();
                                        return s(
                                            s({}, t),
                                            {},
                                            {
                                                plotOptions: s(
                                                    s({}, t.plotOptions),
                                                    {},
                                                    {
                                                        bar: s(
                                                            s(
                                                                {},
                                                                t.plotOptions
                                                                    .bar
                                                            ),
                                                            {},
                                                            {
                                                                borderRadiusApplication:
                                                                    "end",
                                                                borderRadiusWhenStacked:
                                                                    "last",
                                                            }
                                                        ),
                                                    }
                                                ),
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "convertCatToNumeric",
                                    value: function (t) {
                                        return (
                                            (t.xaxis.convertedCatToNumeric =
                                                !0),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "convertCatToNumericXaxis",
                                    value: function (t, e, i) {
                                        (t.xaxis.type = "numeric"),
                                            (t.xaxis.labels =
                                                t.xaxis.labels || {}),
                                            (t.xaxis.labels.formatter =
                                                t.xaxis.labels.formatter ||
                                                function (t) {
                                                    return v.isNumber(t)
                                                        ? Math.floor(t)
                                                        : t;
                                                });
                                        var a = t.xaxis.labels.formatter,
                                            r =
                                                t.xaxis.categories &&
                                                t.xaxis.categories.length
                                                    ? t.xaxis.categories
                                                    : t.labels;
                                        return (
                                            i &&
                                                i.length &&
                                                (r = i.map(function (t) {
                                                    return Array.isArray(t)
                                                        ? t
                                                        : String(t);
                                                })),
                                            r &&
                                                r.length &&
                                                (t.xaxis.labels.formatter =
                                                    function (t) {
                                                        return v.isNumber(t)
                                                            ? a(
                                                                  r[
                                                                      Math.floor(
                                                                          t
                                                                      ) - 1
                                                                  ]
                                                              )
                                                            : a(t);
                                                    }),
                                            (t.xaxis.categories = []),
                                            (t.labels = []),
                                            (t.xaxis.tickAmount =
                                                t.xaxis.tickAmount ||
                                                "dataPoints"),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "bubble",
                                    value: function () {
                                        return {
                                            dataLabels: {
                                                style: { colors: ["#fff"] },
                                            },
                                            tooltip: {
                                                shared: !1,
                                                intersect: !0,
                                            },
                                            xaxis: { crosshairs: { width: 0 } },
                                            fill: {
                                                type: "solid",
                                                gradient: {
                                                    shade: "light",
                                                    inverse: !0,
                                                    shadeIntensity: 0.55,
                                                    opacityFrom: 0.4,
                                                    opacityTo: 0.8,
                                                },
                                            },
                                        };
                                    },
                                },
                                {
                                    key: "scatter",
                                    value: function () {
                                        return {
                                            dataLabels: { enabled: !1 },
                                            tooltip: {
                                                shared: !1,
                                                intersect: !0,
                                            },
                                            markers: {
                                                size: 6,
                                                strokeWidth: 1,
                                                hover: { sizeOffset: 2 },
                                            },
                                        };
                                    },
                                },
                                {
                                    key: "heatmap",
                                    value: function () {
                                        return {
                                            chart: { stacked: !1 },
                                            fill: { opacity: 1 },
                                            dataLabels: {
                                                style: { colors: ["#fff"] },
                                            },
                                            stroke: { colors: ["#fff"] },
                                            tooltip: {
                                                followCursor: !0,
                                                marker: { show: !1 },
                                                x: { show: !1 },
                                            },
                                            legend: {
                                                position: "top",
                                                markers: {
                                                    shape: "square",
                                                    size: 10,
                                                    offsetY: 2,
                                                },
                                            },
                                            grid: { padding: { right: 20 } },
                                        };
                                    },
                                },
                                {
                                    key: "treemap",
                                    value: function () {
                                        return {
                                            chart: { zoom: { enabled: !1 } },
                                            dataLabels: {
                                                style: {
                                                    fontSize: 14,
                                                    fontWeight: 600,
                                                    colors: ["#fff"],
                                                },
                                            },
                                            stroke: {
                                                show: !0,
                                                width: 2,
                                                colors: ["#fff"],
                                            },
                                            legend: { show: !1 },
                                            fill: {
                                                gradient: { stops: [0, 100] },
                                            },
                                            tooltip: {
                                                followCursor: !0,
                                                x: { show: !1 },
                                            },
                                            grid: {
                                                padding: { left: 0, right: 0 },
                                            },
                                            xaxis: {
                                                crosshairs: { show: !1 },
                                                tooltip: { enabled: !1 },
                                            },
                                        };
                                    },
                                },
                                {
                                    key: "pie",
                                    value: function () {
                                        return {
                                            chart: { toolbar: { show: !1 } },
                                            plotOptions: {
                                                pie: {
                                                    donut: {
                                                        labels: { show: !1 },
                                                    },
                                                },
                                            },
                                            dataLabels: {
                                                formatter: function (t) {
                                                    return t.toFixed(1) + "%";
                                                },
                                                style: { colors: ["#fff"] },
                                                background: { enabled: !1 },
                                                dropShadow: { enabled: !0 },
                                            },
                                            stroke: { colors: ["#fff"] },
                                            fill: {
                                                opacity: 1,
                                                gradient: {
                                                    shade: "light",
                                                    stops: [0, 100],
                                                },
                                            },
                                            tooltip: {
                                                theme: "dark",
                                                fillSeriesColor: !0,
                                            },
                                            legend: { position: "right" },
                                        };
                                    },
                                },
                                {
                                    key: "donut",
                                    value: function () {
                                        return {
                                            chart: { toolbar: { show: !1 } },
                                            dataLabels: {
                                                formatter: function (t) {
                                                    return t.toFixed(1) + "%";
                                                },
                                                style: { colors: ["#fff"] },
                                                background: { enabled: !1 },
                                                dropShadow: { enabled: !0 },
                                            },
                                            stroke: { colors: ["#fff"] },
                                            fill: {
                                                opacity: 1,
                                                gradient: {
                                                    shade: "light",
                                                    shadeIntensity: 0.35,
                                                    stops: [80, 100],
                                                    opacityFrom: 1,
                                                    opacityTo: 1,
                                                },
                                            },
                                            tooltip: {
                                                theme: "dark",
                                                fillSeriesColor: !0,
                                            },
                                            legend: { position: "right" },
                                        };
                                    },
                                },
                                {
                                    key: "polarArea",
                                    value: function () {
                                        return (
                                            (this.opts.yaxis[0].tickAmount =
                                                this.opts.yaxis[0].tickAmount
                                                    ? this.opts.yaxis[0]
                                                          .tickAmount
                                                    : 6),
                                            {
                                                chart: {
                                                    toolbar: { show: !1 },
                                                },
                                                dataLabels: {
                                                    formatter: function (t) {
                                                        return (
                                                            t.toFixed(1) + "%"
                                                        );
                                                    },
                                                    enabled: !1,
                                                },
                                                stroke: { show: !0, width: 2 },
                                                fill: { opacity: 0.7 },
                                                tooltip: {
                                                    theme: "dark",
                                                    fillSeriesColor: !0,
                                                },
                                                legend: { position: "right" },
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "radar",
                                    value: function () {
                                        return (
                                            (this.opts.yaxis[0].labels.offsetY =
                                                this.opts.yaxis[0].labels
                                                    .offsetY
                                                    ? this.opts.yaxis[0].labels
                                                          .offsetY
                                                    : 6),
                                            {
                                                dataLabels: {
                                                    enabled: !1,
                                                    style: { fontSize: "11px" },
                                                },
                                                stroke: { width: 2 },
                                                markers: {
                                                    size: 3,
                                                    strokeWidth: 1,
                                                    strokeOpacity: 1,
                                                },
                                                fill: { opacity: 0.2 },
                                                tooltip: {
                                                    shared: !1,
                                                    intersect: !0,
                                                    followCursor: !0,
                                                },
                                                grid: { show: !1 },
                                                xaxis: {
                                                    labels: {
                                                        formatter: function (
                                                            t
                                                        ) {
                                                            return t;
                                                        },
                                                        style: {
                                                            colors: ["#a8a8a8"],
                                                            fontSize: "11px",
                                                        },
                                                    },
                                                    tooltip: { enabled: !1 },
                                                    crosshairs: { show: !1 },
                                                },
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "radialBar",
                                    value: function () {
                                        return {
                                            chart: {
                                                animations: {
                                                    dynamicAnimation: {
                                                        enabled: !0,
                                                        speed: 800,
                                                    },
                                                },
                                                toolbar: { show: !1 },
                                            },
                                            fill: {
                                                gradient: {
                                                    shade: "dark",
                                                    shadeIntensity: 0.4,
                                                    inverseColors: !1,
                                                    type: "diagonal2",
                                                    opacityFrom: 1,
                                                    opacityTo: 1,
                                                    stops: [70, 98, 100],
                                                },
                                            },
                                            legend: {
                                                show: !1,
                                                position: "right",
                                            },
                                            tooltip: {
                                                enabled: !1,
                                                fillSeriesColor: !0,
                                            },
                                        };
                                    },
                                },
                                {
                                    key: "_getBoxTooltip",
                                    value: function (t, e, i, a, r) {
                                        var s = t.globals.seriesCandleO[e][i],
                                            n = t.globals.seriesCandleH[e][i],
                                            o = t.globals.seriesCandleM[e][i],
                                            l = t.globals.seriesCandleL[e][i],
                                            c = t.globals.seriesCandleC[e][i];
                                        return t.config.series[e].type &&
                                            t.config.series[e].type !== r
                                            ? '<div class="apexcharts-custom-tooltip">\n          '
                                                  .concat(
                                                      t.config.series[e].name
                                                          ? t.config.series[e]
                                                                .name
                                                          : "series-" + (e + 1),
                                                      ": <strong>"
                                                  )
                                                  .concat(
                                                      t.globals.series[e][i],
                                                      "</strong>\n        </div>"
                                                  )
                                            : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(
                                                  t.config.chart.type,
                                                  '">'
                                              ) +
                                                  "<div>".concat(
                                                      a[0],
                                                      ': <span class="value">'
                                                  ) +
                                                  s +
                                                  "</span></div>" +
                                                  "<div>".concat(
                                                      a[1],
                                                      ': <span class="value">'
                                                  ) +
                                                  n +
                                                  "</span></div>" +
                                                  (o
                                                      ? "<div>".concat(
                                                            a[2],
                                                            ': <span class="value">'
                                                        ) +
                                                        o +
                                                        "</span></div>"
                                                      : "") +
                                                  "<div>".concat(
                                                      a[3],
                                                      ': <span class="value">'
                                                  ) +
                                                  l +
                                                  "</span></div>" +
                                                  "<div>".concat(
                                                      a[4],
                                                      ': <span class="value">'
                                                  ) +
                                                  c +
                                                  "</span></div></div>";
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    N = (function () {
                        function t(e) {
                            o(this, t), (this.opts = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "init",
                                    value: function (t) {
                                        var e = t.responsiveOverride,
                                            i = this.opts,
                                            a = new M(),
                                            r = new D(i);
                                        (this.chartType = i.chart.type),
                                            (i = this.extendYAxis(i)),
                                            (i = this.extendAnnotations(i));
                                        var s = a.init(),
                                            o = {};
                                        if (i && "object" === n(i)) {
                                            var l,
                                                c,
                                                h,
                                                d,
                                                u,
                                                f,
                                                g,
                                                p,
                                                x = {};
                                            (x =
                                                -1 !==
                                                [
                                                    "line",
                                                    "area",
                                                    "bar",
                                                    "candlestick",
                                                    "boxPlot",
                                                    "rangeBar",
                                                    "rangeArea",
                                                    "bubble",
                                                    "scatter",
                                                    "heatmap",
                                                    "treemap",
                                                    "pie",
                                                    "polarArea",
                                                    "donut",
                                                    "radar",
                                                    "radialBar",
                                                ].indexOf(i.chart.type)
                                                    ? r[i.chart.type]()
                                                    : r.line()),
                                                null !== (l = i.plotOptions) &&
                                                    void 0 !== l &&
                                                    null !== (c = l.bar) &&
                                                    void 0 !== c &&
                                                    c.isFunnel &&
                                                    (x = r.funnel()),
                                                i.chart.stacked &&
                                                    "bar" === i.chart.type &&
                                                    (x = r.stackedBars()),
                                                null !== (h = i.chart.brush) &&
                                                    void 0 !== h &&
                                                    h.enabled &&
                                                    (x = r.brush(x)),
                                                i.chart.stacked &&
                                                    "100%" ===
                                                        i.chart.stackType &&
                                                    (i = r.stacked100(i)),
                                                null !== (d = i.plotOptions) &&
                                                    void 0 !== d &&
                                                    null !== (u = d.bar) &&
                                                    void 0 !== u &&
                                                    u.isDumbbell &&
                                                    (i = r.dumbbell(i)),
                                                this.checkForDarkTheme(
                                                    window.Apex
                                                ),
                                                this.checkForDarkTheme(i),
                                                (i.xaxis =
                                                    i.xaxis ||
                                                    window.Apex.xaxis ||
                                                    {}),
                                                e ||
                                                    (i.xaxis.convertedCatToNumeric =
                                                        !1),
                                                ((null !==
                                                    (f = (i =
                                                        this.checkForCatToNumericXAxis(
                                                            this.chartType,
                                                            x,
                                                            i
                                                        )).chart.sparkline) &&
                                                    void 0 !== f &&
                                                    f.enabled) ||
                                                    (null !==
                                                        (g =
                                                            window.Apex
                                                                .chart) &&
                                                        void 0 !== g &&
                                                        null !==
                                                            (p = g.sparkline) &&
                                                        void 0 !== p &&
                                                        p.enabled)) &&
                                                    (x = r.sparkline(x)),
                                                (o = v.extend(s, x));
                                        }
                                        var m = v.extend(o, window.Apex);
                                        return (
                                            (s = v.extend(m, i)),
                                            this.handleUserInputErrors(s)
                                        );
                                    },
                                },
                                {
                                    key: "checkForCatToNumericXAxis",
                                    value: function (t, e, i) {
                                        var a,
                                            r,
                                            s = new D(i),
                                            n =
                                                ("bar" === t ||
                                                    "boxPlot" === t) &&
                                                (null === (a = i.plotOptions) ||
                                                void 0 === a ||
                                                null === (r = a.bar) ||
                                                void 0 === r
                                                    ? void 0
                                                    : r.horizontal),
                                            o =
                                                "pie" === t ||
                                                "polarArea" === t ||
                                                "donut" === t ||
                                                "radar" === t ||
                                                "radialBar" === t ||
                                                "heatmap" === t,
                                            l =
                                                "datetime" !== i.xaxis.type &&
                                                "numeric" !== i.xaxis.type,
                                            c = i.xaxis.tickPlacement
                                                ? i.xaxis.tickPlacement
                                                : e.xaxis &&
                                                  e.xaxis.tickPlacement;
                                        return (
                                            n ||
                                                o ||
                                                !l ||
                                                "between" === c ||
                                                (i = s.convertCatToNumeric(i)),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "extendYAxis",
                                    value: function (t, e) {
                                        var i = new M();
                                        (void 0 === t.yaxis ||
                                            !t.yaxis ||
                                            (Array.isArray(t.yaxis) &&
                                                0 === t.yaxis.length)) &&
                                            (t.yaxis = {}),
                                            t.yaxis.constructor !== Array &&
                                                window.Apex.yaxis &&
                                                window.Apex.yaxis
                                                    .constructor !== Array &&
                                                (t.yaxis = v.extend(
                                                    t.yaxis,
                                                    window.Apex.yaxis
                                                )),
                                            t.yaxis.constructor !== Array
                                                ? (t.yaxis = [
                                                      v.extend(
                                                          i.yAxis,
                                                          t.yaxis
                                                      ),
                                                  ])
                                                : (t.yaxis = v.extendArray(
                                                      t.yaxis,
                                                      i.yAxis
                                                  ));
                                        var a = !1;
                                        t.yaxis.forEach(function (t) {
                                            t.logarithmic && (a = !0);
                                        });
                                        var r = t.series;
                                        return (
                                            e && !r && (r = e.config.series),
                                            a &&
                                                r.length !== t.yaxis.length &&
                                                r.length &&
                                                (t.yaxis = r.map(function (
                                                    e,
                                                    a
                                                ) {
                                                    if (
                                                        (e.name ||
                                                            (r[a].name =
                                                                "series-".concat(
                                                                    a + 1
                                                                )),
                                                        t.yaxis[a])
                                                    )
                                                        return (
                                                            (t.yaxis[
                                                                a
                                                            ].seriesName =
                                                                r[a].name),
                                                            t.yaxis[a]
                                                        );
                                                    var s = v.extend(
                                                        i.yAxis,
                                                        t.yaxis[0]
                                                    );
                                                    return (s.show = !1), s;
                                                })),
                                            a &&
                                                r.length > 1 &&
                                                r.length !== t.yaxis.length &&
                                                console.warn(
                                                    "A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."
                                                ),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "extendAnnotations",
                                    value: function (t) {
                                        return (
                                            void 0 === t.annotations &&
                                                ((t.annotations = {}),
                                                (t.annotations.yaxis = []),
                                                (t.annotations.xaxis = []),
                                                (t.annotations.points = [])),
                                            (t =
                                                this.extendYAxisAnnotations(t)),
                                            (t =
                                                this.extendXAxisAnnotations(t)),
                                            this.extendPointAnnotations(t)
                                        );
                                    },
                                },
                                {
                                    key: "extendYAxisAnnotations",
                                    value: function (t) {
                                        var e = new M();
                                        return (
                                            (t.annotations.yaxis =
                                                v.extendArray(
                                                    void 0 !==
                                                        t.annotations.yaxis
                                                        ? t.annotations.yaxis
                                                        : [],
                                                    e.yAxisAnnotation
                                                )),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "extendXAxisAnnotations",
                                    value: function (t) {
                                        var e = new M();
                                        return (
                                            (t.annotations.xaxis =
                                                v.extendArray(
                                                    void 0 !==
                                                        t.annotations.xaxis
                                                        ? t.annotations.xaxis
                                                        : [],
                                                    e.xAxisAnnotation
                                                )),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "extendPointAnnotations",
                                    value: function (t) {
                                        var e = new M();
                                        return (
                                            (t.annotations.points =
                                                v.extendArray(
                                                    void 0 !==
                                                        t.annotations.points
                                                        ? t.annotations.points
                                                        : [],
                                                    e.pointAnnotation
                                                )),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "checkForDarkTheme",
                                    value: function (t) {
                                        t.theme &&
                                            "dark" === t.theme.mode &&
                                            (t.tooltip || (t.tooltip = {}),
                                            "light" !== t.tooltip.theme &&
                                                (t.tooltip.theme = "dark"),
                                            t.chart.foreColor ||
                                                (t.chart.foreColor = "#f6f7f8"),
                                            t.chart.background ||
                                                (t.chart.background =
                                                    "#424242"),
                                            t.theme.palette ||
                                                (t.theme.palette = "palette4"));
                                    },
                                },
                                {
                                    key: "handleUserInputErrors",
                                    value: function (t) {
                                        var e = t;
                                        if (
                                            e.tooltip.shared &&
                                            e.tooltip.intersect
                                        )
                                            throw new Error(
                                                "tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false."
                                            );
                                        if (
                                            "bar" === e.chart.type &&
                                            e.plotOptions.bar.horizontal
                                        ) {
                                            if (e.yaxis.length > 1)
                                                throw new Error(
                                                    "Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false"
                                                );
                                            e.yaxis[0].reversed &&
                                                (e.yaxis[0].opposite = !0),
                                                (e.xaxis.tooltip.enabled = !1),
                                                (e.yaxis[0].tooltip.enabled =
                                                    !1),
                                                (e.chart.zoom.enabled = !1);
                                        }
                                        return (
                                            ("bar" !== e.chart.type &&
                                                "rangeBar" !== e.chart.type) ||
                                                (e.tooltip.shared &&
                                                    "barWidth" ===
                                                        e.xaxis.crosshairs
                                                            .width &&
                                                    e.series.length > 1 &&
                                                    (e.xaxis.crosshairs.width =
                                                        "tickWidth")),
                                            ("candlestick" !== e.chart.type &&
                                                "boxPlot" !== e.chart.type) ||
                                                (e.yaxis[0].reversed &&
                                                    (console.warn(
                                                        "Reversed y-axis in ".concat(
                                                            e.chart.type,
                                                            " chart is not supported."
                                                        )
                                                    ),
                                                    (e.yaxis[0].reversed =
                                                        !1))),
                                            e
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    X = (function () {
                        function t() {
                            o(this, t);
                        }
                        return (
                            c(t, [
                                {
                                    key: "initGlobalVars",
                                    value: function (t) {
                                        (t.series = []),
                                            (t.seriesCandleO = []),
                                            (t.seriesCandleH = []),
                                            (t.seriesCandleM = []),
                                            (t.seriesCandleL = []),
                                            (t.seriesCandleC = []),
                                            (t.seriesRangeStart = []),
                                            (t.seriesRangeEnd = []),
                                            (t.seriesRange = []),
                                            (t.seriesPercent = []),
                                            (t.seriesGoals = []),
                                            (t.seriesX = []),
                                            (t.seriesZ = []),
                                            (t.seriesNames = []),
                                            (t.seriesTotals = []),
                                            (t.seriesLog = []),
                                            (t.seriesColors = []),
                                            (t.stackedSeriesTotals = []),
                                            (t.seriesXvalues = []),
                                            (t.seriesYvalues = []),
                                            (t.labels = []),
                                            (t.hasXaxisGroups = !1),
                                            (t.groups = []),
                                            (t.hasSeriesGroups = !1),
                                            (t.seriesGroups = []),
                                            (t.categoryLabels = []),
                                            (t.timescaleLabels = []),
                                            (t.noLabelsProvided = !1),
                                            (t.resizeTimer = null),
                                            (t.selectionResizeTimer = null),
                                            (t.delayedElements = []),
                                            (t.pointsArray = []),
                                            (t.dataLabelsRects = []),
                                            (t.isXNumeric = !1),
                                            (t.skipLastTimelinelabel = !1),
                                            (t.skipFirstTimelinelabel = !1),
                                            (t.isDataXYZ = !1),
                                            (t.isMultiLineX = !1),
                                            (t.isMultipleYAxis = !1),
                                            (t.maxY = -Number.MAX_VALUE),
                                            (t.minY = Number.MIN_VALUE),
                                            (t.minYArr = []),
                                            (t.maxYArr = []),
                                            (t.maxX = -Number.MAX_VALUE),
                                            (t.minX = Number.MAX_VALUE),
                                            (t.initialMaxX = -Number.MAX_VALUE),
                                            (t.initialMinX = Number.MAX_VALUE),
                                            (t.maxDate = 0),
                                            (t.minDate = Number.MAX_VALUE),
                                            (t.minZ = Number.MAX_VALUE),
                                            (t.maxZ = -Number.MAX_VALUE),
                                            (t.minXDiff = Number.MAX_VALUE),
                                            (t.yAxisScale = []),
                                            (t.xAxisScale = null),
                                            (t.xAxisTicksPositions = []),
                                            (t.yLabelsCoords = []),
                                            (t.yTitleCoords = []),
                                            (t.barPadForNumericAxis = 0),
                                            (t.padHorizontal = 0),
                                            (t.xRange = 0),
                                            (t.yRange = []),
                                            (t.zRange = 0),
                                            (t.dataPoints = 0),
                                            (t.xTickAmount = 0);
                                    },
                                },
                                {
                                    key: "globalVars",
                                    value: function (t) {
                                        return {
                                            chartID: null,
                                            cuid: null,
                                            events: {
                                                beforeMount: [],
                                                mounted: [],
                                                updated: [],
                                                clicked: [],
                                                selection: [],
                                                dataPointSelection: [],
                                                zoomed: [],
                                                scrolled: [],
                                            },
                                            colors: [],
                                            clientX: null,
                                            clientY: null,
                                            fill: { colors: [] },
                                            stroke: { colors: [] },
                                            dataLabels: {
                                                style: { colors: [] },
                                            },
                                            radarPolygons: {
                                                fill: { colors: [] },
                                            },
                                            markers: {
                                                colors: [],
                                                size: t.markers.size,
                                                largestSize: 0,
                                            },
                                            animationEnded: !1,
                                            isTouchDevice:
                                                "ontouchstart" in window ||
                                                navigator.msMaxTouchPoints,
                                            isDirty: !1,
                                            isExecCalled: !1,
                                            initialConfig: null,
                                            initialSeries: [],
                                            lastXAxis: [],
                                            lastYAxis: [],
                                            columnSeries: null,
                                            labels: [],
                                            timescaleLabels: [],
                                            noLabelsProvided: !1,
                                            allSeriesCollapsed: !1,
                                            collapsedSeries: [],
                                            collapsedSeriesIndices: [],
                                            ancillaryCollapsedSeries: [],
                                            ancillaryCollapsedSeriesIndices: [],
                                            risingSeries: [],
                                            dataFormatXNumeric: !1,
                                            capturedSeriesIndex: -1,
                                            capturedDataPointIndex: -1,
                                            selectedDataPoints: [],
                                            goldenPadding: 35,
                                            invalidLogScale: !1,
                                            ignoreYAxisIndexes: [],
                                            yAxisSameScaleIndices: [],
                                            maxValsInArrayIndex: 0,
                                            radialSize: 0,
                                            selection: void 0,
                                            zoomEnabled:
                                                "zoom" ===
                                                    t.chart.toolbar
                                                        .autoSelected &&
                                                t.chart.toolbar.tools.zoom &&
                                                t.chart.zoom.enabled,
                                            panEnabled:
                                                "pan" ===
                                                    t.chart.toolbar
                                                        .autoSelected &&
                                                t.chart.toolbar.tools.pan,
                                            selectionEnabled:
                                                "selection" ===
                                                    t.chart.toolbar
                                                        .autoSelected &&
                                                t.chart.toolbar.tools.selection,
                                            yaxis: null,
                                            mousedown: !1,
                                            lastClientPosition: {},
                                            visibleXRange: void 0,
                                            yValueDecimal: 0,
                                            total: 0,
                                            SVGNS: "http://www.w3.org/2000/svg",
                                            svgWidth: 0,
                                            svgHeight: 0,
                                            noData: !1,
                                            locale: {},
                                            dom: {},
                                            memory: { methodsToExec: [] },
                                            shouldAnimate: !0,
                                            skipLastTimelinelabel: !1,
                                            skipFirstTimelinelabel: !1,
                                            delayedElements: [],
                                            axisCharts: !0,
                                            isDataXYZ: !1,
                                            resized: !1,
                                            resizeTimer: null,
                                            comboCharts: !1,
                                            dataChanged: !1,
                                            previousPaths: [],
                                            allSeriesHasEqualX: !0,
                                            pointsArray: [],
                                            dataLabelsRects: [],
                                            lastDrawnDataLabelsIndexes: [],
                                            hasNullValues: !1,
                                            easing: null,
                                            zoomed: !1,
                                            gridWidth: 0,
                                            gridHeight: 0,
                                            rotateXLabels: !1,
                                            defaultLabels: !1,
                                            xLabelFormatter: void 0,
                                            yLabelFormatters: [],
                                            xaxisTooltipFormatter: void 0,
                                            ttKeyFormatter: void 0,
                                            ttVal: void 0,
                                            ttZFormatter: void 0,
                                            LINE_HEIGHT_RATIO: 1.618,
                                            xAxisLabelsHeight: 0,
                                            xAxisGroupLabelsHeight: 0,
                                            xAxisLabelsWidth: 0,
                                            yAxisLabelsWidth: 0,
                                            scaleX: 1,
                                            scaleY: 1,
                                            translateX: 0,
                                            translateY: 0,
                                            translateYAxisX: [],
                                            yAxisWidths: [],
                                            translateXAxisY: 0,
                                            translateXAxisX: 0,
                                            tooltip: null,
                                        };
                                    },
                                },
                                {
                                    key: "init",
                                    value: function (t) {
                                        var e = this.globalVars(t);
                                        return (
                                            this.initGlobalVars(e),
                                            (e.initialConfig = v.extend({}, t)),
                                            (e.initialSeries = v.clone(
                                                t.series
                                            )),
                                            (e.lastXAxis = v.clone(
                                                e.initialConfig.xaxis
                                            )),
                                            (e.lastYAxis = v.clone(
                                                e.initialConfig.yaxis
                                            )),
                                            e
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    R = (function () {
                        function t(e) {
                            o(this, t), (this.opts = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "init",
                                    value: function () {
                                        var t = new N(this.opts).init({
                                            responsiveOverride: !1,
                                        });
                                        return {
                                            config: t,
                                            globals: new X().init(t),
                                        };
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Y = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.opts = null),
                                (this.seriesIndex = 0);
                        }
                        return (
                            c(t, [
                                {
                                    key: "clippedImgArea",
                                    value: function (t) {
                                        var e = this.w,
                                            i = e.config,
                                            a = parseInt(
                                                e.globals.gridWidth,
                                                10
                                            ),
                                            r = parseInt(
                                                e.globals.gridHeight,
                                                10
                                            ),
                                            s = a > r ? a : r,
                                            n = t.image,
                                            o = 0,
                                            l = 0;
                                        void 0 === t.width &&
                                        void 0 === t.height
                                            ? void 0 !== i.fill.image.width &&
                                              void 0 !== i.fill.image.height
                                                ? ((o = i.fill.image.width + 1),
                                                  (l = i.fill.image.height))
                                                : ((o = s + 1), (l = s))
                                            : ((o = t.width), (l = t.height));
                                        var c = document.createElementNS(
                                            e.globals.SVGNS,
                                            "pattern"
                                        );
                                        k.setAttrs(c, {
                                            id: t.patternID,
                                            patternUnits: t.patternUnits
                                                ? t.patternUnits
                                                : "userSpaceOnUse",
                                            width: o + "px",
                                            height: l + "px",
                                        });
                                        var h = document.createElementNS(
                                            e.globals.SVGNS,
                                            "image"
                                        );
                                        c.appendChild(h),
                                            h.setAttributeNS(
                                                window.SVG.xlink,
                                                "href",
                                                n
                                            ),
                                            k.setAttrs(h, {
                                                x: 0,
                                                y: 0,
                                                preserveAspectRatio: "none",
                                                width: o + "px",
                                                height: l + "px",
                                            }),
                                            (h.style.opacity = t.opacity),
                                            e.globals.dom.elDefs.node.appendChild(
                                                c
                                            );
                                    },
                                },
                                {
                                    key: "getSeriesIndex",
                                    value: function (t) {
                                        var e = this.w,
                                            i = e.config.chart.type;
                                        return (
                                            (("bar" === i ||
                                                "rangeBar" === i) &&
                                                e.config.plotOptions.bar
                                                    .distributed) ||
                                            "heatmap" === i ||
                                            "treemap" === i
                                                ? (this.seriesIndex =
                                                      t.seriesNumber)
                                                : (this.seriesIndex =
                                                      t.seriesNumber %
                                                      e.globals.series.length),
                                            this.seriesIndex
                                        );
                                    },
                                },
                                {
                                    key: "fillPath",
                                    value: function (t) {
                                        var e = this.w;
                                        this.opts = t;
                                        var i,
                                            a,
                                            r,
                                            s = this.w.config;
                                        this.seriesIndex =
                                            this.getSeriesIndex(t);
                                        var n =
                                            this.getFillColors()[
                                                this.seriesIndex
                                            ];
                                        void 0 !==
                                            e.globals.seriesColors[
                                                this.seriesIndex
                                            ] &&
                                            (n =
                                                e.globals.seriesColors[
                                                    this.seriesIndex
                                                ]),
                                            "function" == typeof n &&
                                                (n = n({
                                                    seriesIndex:
                                                        this.seriesIndex,
                                                    dataPointIndex:
                                                        t.dataPointIndex,
                                                    value: t.value,
                                                    w: e,
                                                }));
                                        var o = t.fillType
                                                ? t.fillType
                                                : this.getFillType(
                                                      this.seriesIndex
                                                  ),
                                            l = Array.isArray(s.fill.opacity)
                                                ? s.fill.opacity[
                                                      this.seriesIndex
                                                  ]
                                                : s.fill.opacity;
                                        t.color && (n = t.color);
                                        var c = n;
                                        if (
                                            (-1 === n.indexOf("rgb")
                                                ? n.length < 9 &&
                                                  (c = v.hexToRgba(n, l))
                                                : n.indexOf("rgba") > -1 &&
                                                  (l = v.getOpacityFromRGBA(n)),
                                            t.opacity && (l = t.opacity),
                                            "pattern" === o &&
                                                (a = this.handlePatternFill({
                                                    fillConfig: t.fillConfig,
                                                    patternFill: a,
                                                    fillColor: n,
                                                    fillOpacity: l,
                                                    defaultColor: c,
                                                })),
                                            "gradient" === o &&
                                                (r = this.handleGradientFill({
                                                    fillConfig: t.fillConfig,
                                                    fillColor: n,
                                                    fillOpacity: l,
                                                    i: this.seriesIndex,
                                                })),
                                            "image" === o)
                                        ) {
                                            var h = s.fill.image.src,
                                                d = t.patternID
                                                    ? t.patternID
                                                    : "";
                                            this.clippedImgArea({
                                                opacity: l,
                                                image: Array.isArray(h)
                                                    ? t.seriesNumber < h.length
                                                        ? h[t.seriesNumber]
                                                        : h[0]
                                                    : h,
                                                width: t.width
                                                    ? t.width
                                                    : void 0,
                                                height: t.height
                                                    ? t.height
                                                    : void 0,
                                                patternUnits: t.patternUnits,
                                                patternID: "pattern"
                                                    .concat(e.globals.cuid)
                                                    .concat(t.seriesNumber + 1)
                                                    .concat(d),
                                            }),
                                                (i = "url(#pattern"
                                                    .concat(e.globals.cuid)
                                                    .concat(t.seriesNumber + 1)
                                                    .concat(d, ")"));
                                        } else
                                            i =
                                                "gradient" === o
                                                    ? r
                                                    : "pattern" === o
                                                    ? a
                                                    : c;
                                        return t.solid && (i = c), i;
                                    },
                                },
                                {
                                    key: "getFillType",
                                    value: function (t) {
                                        var e = this.w;
                                        return Array.isArray(e.config.fill.type)
                                            ? e.config.fill.type[t]
                                            : e.config.fill.type;
                                    },
                                },
                                {
                                    key: "getFillColors",
                                    value: function () {
                                        var t = this.w,
                                            e = t.config,
                                            i = this.opts,
                                            a = [];
                                        return (
                                            t.globals.comboCharts
                                                ? "line" ===
                                                  t.config.series[
                                                      this.seriesIndex
                                                  ].type
                                                    ? Array.isArray(
                                                          t.globals.stroke
                                                              .colors
                                                      )
                                                        ? (a =
                                                              t.globals.stroke
                                                                  .colors)
                                                        : a.push(
                                                              t.globals.stroke
                                                                  .colors
                                                          )
                                                    : Array.isArray(
                                                          t.globals.fill.colors
                                                      )
                                                    ? (a =
                                                          t.globals.fill.colors)
                                                    : a.push(
                                                          t.globals.fill.colors
                                                      )
                                                : "line" === e.chart.type
                                                ? Array.isArray(
                                                      t.globals.stroke.colors
                                                  )
                                                    ? (a =
                                                          t.globals.stroke
                                                              .colors)
                                                    : a.push(
                                                          t.globals.stroke
                                                              .colors
                                                      )
                                                : Array.isArray(
                                                      t.globals.fill.colors
                                                  )
                                                ? (a = t.globals.fill.colors)
                                                : a.push(t.globals.fill.colors),
                                            void 0 !== i.fillColors &&
                                                ((a = []),
                                                Array.isArray(i.fillColors)
                                                    ? (a = i.fillColors.slice())
                                                    : a.push(i.fillColors)),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "handlePatternFill",
                                    value: function (t) {
                                        var e = t.fillConfig,
                                            i = (t.patternFill, t.fillColor),
                                            a = t.fillOpacity,
                                            r = t.defaultColor,
                                            s = this.w.config.fill;
                                        e && (s = e);
                                        var n = this.opts,
                                            o = new k(this.ctx),
                                            l = Array.isArray(
                                                s.pattern.strokeWidth
                                            )
                                                ? s.pattern.strokeWidth[
                                                      this.seriesIndex
                                                  ]
                                                : s.pattern.strokeWidth,
                                            c = i;
                                        return Array.isArray(s.pattern.style)
                                            ? void 0 !==
                                              s.pattern.style[n.seriesNumber]
                                                ? o.drawPattern(
                                                      s.pattern.style[
                                                          n.seriesNumber
                                                      ],
                                                      s.pattern.width,
                                                      s.pattern.height,
                                                      c,
                                                      l,
                                                      a
                                                  )
                                                : r
                                            : o.drawPattern(
                                                  s.pattern.style,
                                                  s.pattern.width,
                                                  s.pattern.height,
                                                  c,
                                                  l,
                                                  a
                                              );
                                    },
                                },
                                {
                                    key: "handleGradientFill",
                                    value: function (t) {
                                        var e = t.fillColor,
                                            i = t.fillOpacity,
                                            a = t.fillConfig,
                                            r = t.i,
                                            n = this.w.config.fill;
                                        a && (n = s(s({}, n), a));
                                        var o,
                                            l = this.opts,
                                            c = new k(this.ctx),
                                            h = new v(),
                                            d = n.gradient.type,
                                            u = e,
                                            f =
                                                void 0 ===
                                                n.gradient.opacityFrom
                                                    ? i
                                                    : Array.isArray(
                                                          n.gradient.opacityFrom
                                                      )
                                                    ? n.gradient.opacityFrom[r]
                                                    : n.gradient.opacityFrom;
                                        u.indexOf("rgba") > -1 &&
                                            (f = v.getOpacityFromRGBA(u));
                                        var g =
                                            void 0 === n.gradient.opacityTo
                                                ? i
                                                : Array.isArray(
                                                      n.gradient.opacityTo
                                                  )
                                                ? n.gradient.opacityTo[r]
                                                : n.gradient.opacityTo;
                                        if (
                                            void 0 ===
                                                n.gradient.gradientToColors ||
                                            0 ===
                                                n.gradient.gradientToColors
                                                    .length
                                        )
                                            o =
                                                "dark" === n.gradient.shade
                                                    ? h.shadeColor(
                                                          -1 *
                                                              parseFloat(
                                                                  n.gradient
                                                                      .shadeIntensity
                                                              ),
                                                          e.indexOf("rgb") > -1
                                                              ? v.rgb2hex(e)
                                                              : e
                                                      )
                                                    : h.shadeColor(
                                                          parseFloat(
                                                              n.gradient
                                                                  .shadeIntensity
                                                          ),
                                                          e.indexOf("rgb") > -1
                                                              ? v.rgb2hex(e)
                                                              : e
                                                      );
                                        else if (
                                            n.gradient.gradientToColors[
                                                l.seriesNumber
                                            ]
                                        ) {
                                            var p =
                                                n.gradient.gradientToColors[
                                                    l.seriesNumber
                                                ];
                                            (o = p),
                                                p.indexOf("rgba") > -1 &&
                                                    (g =
                                                        v.getOpacityFromRGBA(
                                                            p
                                                        ));
                                        } else o = e;
                                        if (
                                            (n.gradient.gradientFrom &&
                                                (u = n.gradient.gradientFrom),
                                            n.gradient.gradientTo &&
                                                (o = n.gradient.gradientTo),
                                            n.gradient.inverseColors)
                                        ) {
                                            var x = u;
                                            (u = o), (o = x);
                                        }
                                        return (
                                            u.indexOf("rgb") > -1 &&
                                                (u = v.rgb2hex(u)),
                                            o.indexOf("rgb") > -1 &&
                                                (o = v.rgb2hex(o)),
                                            c.drawGradient(
                                                d,
                                                u,
                                                o,
                                                f,
                                                g,
                                                l.size,
                                                n.gradient.stops,
                                                n.gradient.colorStops,
                                                r
                                            )
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    H = (function () {
                        function t(e, i) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "setGlobalMarkerSize",
                                    value: function () {
                                        var t = this.w;
                                        if (
                                            ((t.globals.markers.size =
                                                Array.isArray(
                                                    t.config.markers.size
                                                )
                                                    ? t.config.markers.size
                                                    : [t.config.markers.size]),
                                            t.globals.markers.size.length > 0)
                                        ) {
                                            if (
                                                t.globals.markers.size.length <
                                                t.globals.series.length + 1
                                            )
                                                for (
                                                    var e = 0;
                                                    e <=
                                                    t.globals.series.length;
                                                    e++
                                                )
                                                    void 0 ===
                                                        t.globals.markers.size[
                                                            e
                                                        ] &&
                                                        t.globals.markers.size.push(
                                                            t.globals.markers
                                                                .size[0]
                                                        );
                                        } else
                                            t.globals.markers.size =
                                                t.config.series.map(function (
                                                    e
                                                ) {
                                                    return t.config.markers
                                                        .size;
                                                });
                                    },
                                },
                                {
                                    key: "plotChartMarkers",
                                    value: function (t, e, i, a) {
                                        var r,
                                            s =
                                                arguments.length > 4 &&
                                                void 0 !== arguments[4] &&
                                                arguments[4],
                                            n = this.w,
                                            o = e,
                                            l = t,
                                            c = null,
                                            h = new k(this.ctx),
                                            d =
                                                n.config.markers.discrete &&
                                                n.config.markers.discrete
                                                    .length;
                                        if (
                                            ((n.globals.markers.size[e] > 0 ||
                                                s ||
                                                d) &&
                                                (c = h.group({
                                                    class:
                                                        s || d
                                                            ? ""
                                                            : "apexcharts-series-markers",
                                                })).attr(
                                                    "clip-path",
                                                    "url(#gridRectMarkerMask".concat(
                                                        n.globals.cuid,
                                                        ")"
                                                    )
                                                ),
                                            Array.isArray(l.x))
                                        )
                                            for (
                                                var u = 0;
                                                u < l.x.length;
                                                u++
                                            ) {
                                                var f = i;
                                                1 === i && 0 === u && (f = 0),
                                                    1 === i &&
                                                        1 === u &&
                                                        (f = 1);
                                                var g = "apexcharts-marker";
                                                if (
                                                    (("line" !==
                                                        n.config.chart.type &&
                                                        "area" !==
                                                            n.config.chart
                                                                .type) ||
                                                        n.globals.comboCharts ||
                                                        n.config.tooltip
                                                            .intersect ||
                                                        (g +=
                                                            " no-pointer-events"),
                                                    (Array.isArray(
                                                        n.config.markers.size
                                                    )
                                                        ? n.globals.markers
                                                              .size[e] > 0
                                                        : n.config.markers
                                                              .size > 0) ||
                                                        s ||
                                                        d)
                                                ) {
                                                    v.isNumber(l.y[u])
                                                        ? (g += " w".concat(
                                                              v.randomId()
                                                          ))
                                                        : (g =
                                                              "apexcharts-nullpoint");
                                                    var p =
                                                        this.getMarkerConfig({
                                                            cssClass: g,
                                                            seriesIndex: e,
                                                            dataPointIndex: f,
                                                        });
                                                    n.config.series[o].data[
                                                        f
                                                    ] &&
                                                        (n.config.series[o]
                                                            .data[f]
                                                            .fillColor &&
                                                            (p.pointFillColor =
                                                                n.config.series[
                                                                    o
                                                                ].data[
                                                                    f
                                                                ].fillColor),
                                                        n.config.series[o].data[
                                                            f
                                                        ].strokeColor &&
                                                            (p.pointStrokeColor =
                                                                n.config.series[
                                                                    o
                                                                ].data[
                                                                    f
                                                                ].strokeColor)),
                                                        a && (p.pSize = a),
                                                        (l.x[u] < 0 ||
                                                            l.x[u] >
                                                                n.globals
                                                                    .gridWidth ||
                                                            l.y[u] < 0 ||
                                                            l.y[u] >
                                                                n.globals
                                                                    .gridHeight) &&
                                                            (p.pSize = 0),
                                                        (r = h.drawMarker(
                                                            l.x[u],
                                                            l.y[u],
                                                            p
                                                        )).attr("rel", f),
                                                        r.attr("j", f),
                                                        r.attr("index", e),
                                                        r.node.setAttribute(
                                                            "default-marker-size",
                                                            p.pSize
                                                        ),
                                                        new w(
                                                            this.ctx
                                                        ).setSelectionFilter(
                                                            r,
                                                            e,
                                                            f
                                                        ),
                                                        this.addEvents(r),
                                                        c && c.add(r);
                                                } else
                                                    void 0 ===
                                                        n.globals.pointsArray[
                                                            e
                                                        ] &&
                                                        (n.globals.pointsArray[
                                                            e
                                                        ] = []),
                                                        n.globals.pointsArray[
                                                            e
                                                        ].push([
                                                            l.x[u],
                                                            l.y[u],
                                                        ]);
                                            }
                                        return c;
                                    },
                                },
                                {
                                    key: "getMarkerConfig",
                                    value: function (t) {
                                        var e = t.cssClass,
                                            i = t.seriesIndex,
                                            a = t.dataPointIndex,
                                            r = void 0 === a ? null : a,
                                            s = t.finishRadius,
                                            n = void 0 === s ? null : s,
                                            o = this.w,
                                            l = this.getMarkerStyle(i),
                                            c = o.globals.markers.size[i],
                                            h = o.config.markers;
                                        return (
                                            null !== r &&
                                                h.discrete.length &&
                                                h.discrete.map(function (t) {
                                                    t.seriesIndex === i &&
                                                        t.dataPointIndex ===
                                                            r &&
                                                        ((l.pointStrokeColor =
                                                            t.strokeColor),
                                                        (l.pointFillColor =
                                                            t.fillColor),
                                                        (c = t.size),
                                                        (l.pointShape =
                                                            t.shape));
                                                }),
                                            {
                                                pSize: null === n ? c : n,
                                                pRadius: h.radius,
                                                width: Array.isArray(h.width)
                                                    ? h.width[i]
                                                    : h.width,
                                                height: Array.isArray(h.height)
                                                    ? h.height[i]
                                                    : h.height,
                                                pointStrokeWidth: Array.isArray(
                                                    h.strokeWidth
                                                )
                                                    ? h.strokeWidth[i]
                                                    : h.strokeWidth,
                                                pointStrokeColor:
                                                    l.pointStrokeColor,
                                                pointFillColor:
                                                    l.pointFillColor,
                                                shape:
                                                    l.pointShape ||
                                                    (Array.isArray(h.shape)
                                                        ? h.shape[i]
                                                        : h.shape),
                                                class: e,
                                                pointStrokeOpacity:
                                                    Array.isArray(
                                                        h.strokeOpacity
                                                    )
                                                        ? h.strokeOpacity[i]
                                                        : h.strokeOpacity,
                                                pointStrokeDashArray:
                                                    Array.isArray(
                                                        h.strokeDashArray
                                                    )
                                                        ? h.strokeDashArray[i]
                                                        : h.strokeDashArray,
                                                pointFillOpacity: Array.isArray(
                                                    h.fillOpacity
                                                )
                                                    ? h.fillOpacity[i]
                                                    : h.fillOpacity,
                                                seriesIndex: i,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "addEvents",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new k(this.ctx);
                                        t.node.addEventListener(
                                            "mouseenter",
                                            i.pathMouseEnter.bind(this.ctx, t)
                                        ),
                                            t.node.addEventListener(
                                                "mouseleave",
                                                i.pathMouseLeave.bind(
                                                    this.ctx,
                                                    t
                                                )
                                            ),
                                            t.node.addEventListener(
                                                "mousedown",
                                                i.pathMouseDown.bind(
                                                    this.ctx,
                                                    t
                                                )
                                            ),
                                            t.node.addEventListener(
                                                "click",
                                                e.config.markers.onClick
                                            ),
                                            t.node.addEventListener(
                                                "dblclick",
                                                e.config.markers.onDblClick
                                            ),
                                            t.node.addEventListener(
                                                "touchstart",
                                                i.pathMouseDown.bind(
                                                    this.ctx,
                                                    t
                                                ),
                                                { passive: !0 }
                                            );
                                    },
                                },
                                {
                                    key: "getMarkerStyle",
                                    value: function (t) {
                                        var e = this.w,
                                            i = e.globals.markers.colors,
                                            a =
                                                e.config.markers.strokeColor ||
                                                e.config.markers.strokeColors;
                                        return {
                                            pointStrokeColor: Array.isArray(a)
                                                ? a[t]
                                                : a,
                                            pointFillColor: Array.isArray(i)
                                                ? i[t]
                                                : i,
                                        };
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    W = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.initialAnim =
                                    this.w.config.chart.animations.enabled),
                                (this.dynamicAnim =
                                    this.initialAnim &&
                                    this.w.config.chart.animations
                                        .dynamicAnimation.enabled);
                        }
                        return (
                            c(t, [
                                {
                                    key: "draw",
                                    value: function (t, e, i) {
                                        var a = this.w,
                                            r = new k(this.ctx),
                                            s = i.realIndex,
                                            n = i.pointsPos,
                                            o = i.zRatio,
                                            l = i.elParent,
                                            c = r.group({
                                                class: "apexcharts-series-markers apexcharts-series-".concat(
                                                    a.config.chart.type
                                                ),
                                            });
                                        if (
                                            (c.attr(
                                                "clip-path",
                                                "url(#gridRectMarkerMask".concat(
                                                    a.globals.cuid,
                                                    ")"
                                                )
                                            ),
                                            Array.isArray(n.x))
                                        )
                                            for (
                                                var h = 0;
                                                h < n.x.length;
                                                h++
                                            ) {
                                                var d = e + 1,
                                                    u = !0;
                                                0 === e && 0 === h && (d = 0),
                                                    0 === e &&
                                                        1 === h &&
                                                        (d = 1);
                                                var f = 0,
                                                    g =
                                                        a.globals.markers.size[
                                                            s
                                                        ];
                                                if (o !== 1 / 0) {
                                                    var p =
                                                        a.config.plotOptions
                                                            .bubble;
                                                    (g =
                                                        a.globals.seriesZ[s][
                                                            d
                                                        ]),
                                                        p.zScaling && (g /= o),
                                                        p.minBubbleRadius &&
                                                            g <
                                                                p.minBubbleRadius &&
                                                            (g =
                                                                p.minBubbleRadius),
                                                        p.maxBubbleRadius &&
                                                            g >
                                                                p.maxBubbleRadius &&
                                                            (g =
                                                                p.maxBubbleRadius);
                                                }
                                                a.config.chart.animations
                                                    .enabled || (f = g);
                                                var x = n.x[h],
                                                    m = n.y[h];
                                                if (
                                                    ((f = f || 0),
                                                    (null !== m &&
                                                        void 0 !==
                                                            a.globals.series[s][
                                                                d
                                                            ]) ||
                                                        (u = !1),
                                                    u)
                                                ) {
                                                    var b = this.drawPoint(
                                                        x,
                                                        m,
                                                        f,
                                                        g,
                                                        s,
                                                        d,
                                                        e
                                                    );
                                                    c.add(b);
                                                }
                                                l.add(c);
                                            }
                                    },
                                },
                                {
                                    key: "drawPoint",
                                    value: function (t, e, i, a, r, s, n) {
                                        var o = this.w,
                                            l = r,
                                            c = new y(this.ctx),
                                            h = new w(this.ctx),
                                            d = new Y(this.ctx),
                                            u = new H(this.ctx),
                                            f = new k(this.ctx),
                                            g = u.getMarkerConfig({
                                                cssClass: "apexcharts-marker",
                                                seriesIndex: l,
                                                dataPointIndex: s,
                                                finishRadius:
                                                    "bubble" ===
                                                        o.config.chart.type ||
                                                    (o.globals.comboCharts &&
                                                        o.config.series[r] &&
                                                        "bubble" ===
                                                            o.config.series[r]
                                                                .type)
                                                        ? a
                                                        : null,
                                            });
                                        a = g.pSize;
                                        var p,
                                            x = d.fillPath({
                                                seriesNumber: r,
                                                dataPointIndex: s,
                                                color: g.pointFillColor,
                                                patternUnits:
                                                    "objectBoundingBox",
                                                value: o.globals.series[r][n],
                                            });
                                        if (
                                            ("circle" === g.shape
                                                ? (p = f.drawCircle(i))
                                                : ("square" !== g.shape &&
                                                      "rect" !== g.shape) ||
                                                  (p = f.drawRect(
                                                      0,
                                                      0,
                                                      g.width -
                                                          g.pointStrokeWidth /
                                                              2,
                                                      g.height -
                                                          g.pointStrokeWidth /
                                                              2,
                                                      g.pRadius
                                                  )),
                                            o.config.series[l].data[s] &&
                                                o.config.series[l].data[s]
                                                    .fillColor &&
                                                (x =
                                                    o.config.series[l].data[s]
                                                        .fillColor),
                                            p.attr({
                                                x:
                                                    t -
                                                    g.width / 2 -
                                                    g.pointStrokeWidth / 2,
                                                y:
                                                    e -
                                                    g.height / 2 -
                                                    g.pointStrokeWidth / 2,
                                                cx: t,
                                                cy: e,
                                                fill: x,
                                                "fill-opacity":
                                                    g.pointFillOpacity,
                                                stroke: g.pointStrokeColor,
                                                r: a,
                                                "stroke-width":
                                                    g.pointStrokeWidth,
                                                "stroke-dasharray":
                                                    g.pointStrokeDashArray,
                                                "stroke-opacity":
                                                    g.pointStrokeOpacity,
                                            }),
                                            o.config.chart.dropShadow.enabled)
                                        ) {
                                            var m = o.config.chart.dropShadow;
                                            h.dropShadow(p, m, r);
                                        }
                                        if (
                                            !this.initialAnim ||
                                            o.globals.dataChanged ||
                                            o.globals.resized
                                        )
                                            o.globals.animationEnded = !0;
                                        else {
                                            var b =
                                                o.config.chart.animations.speed;
                                            c.animateMarker(
                                                p,
                                                0,
                                                "circle" === g.shape
                                                    ? a
                                                    : {
                                                          width: g.width,
                                                          height: g.height,
                                                      },
                                                b,
                                                o.globals.easing,
                                                function () {
                                                    window.setTimeout(
                                                        function () {
                                                            c.animationCompleted(
                                                                p
                                                            );
                                                        },
                                                        100
                                                    );
                                                }
                                            );
                                        }
                                        if (
                                            o.globals.dataChanged &&
                                            "circle" === g.shape
                                        )
                                            if (this.dynamicAnim) {
                                                var v,
                                                    A,
                                                    S,
                                                    C,
                                                    P =
                                                        o.config.chart
                                                            .animations
                                                            .dynamicAnimation
                                                            .speed;
                                                null !=
                                                    (C =
                                                        o.globals.previousPaths[
                                                            r
                                                        ] &&
                                                        o.globals.previousPaths[
                                                            r
                                                        ][n]) &&
                                                    ((v = C.x),
                                                    (A = C.y),
                                                    (S =
                                                        void 0 !== C.r
                                                            ? C.r
                                                            : a));
                                                for (
                                                    var L = 0;
                                                    L <
                                                    o.globals.collapsedSeries
                                                        .length;
                                                    L++
                                                )
                                                    o.globals.collapsedSeries[L]
                                                        .index === r &&
                                                        ((P = 1), (a = 0));
                                                0 === t && 0 === e && (a = 0),
                                                    c.animateCircle(
                                                        p,
                                                        { cx: v, cy: A, r: S },
                                                        { cx: t, cy: e, r: a },
                                                        P,
                                                        o.globals.easing
                                                    );
                                            } else p.attr({ r: a });
                                        return (
                                            p.attr({
                                                rel: s,
                                                j: s,
                                                index: r,
                                                "default-marker-size": a,
                                            }),
                                            h.setSelectionFilter(p, r, s),
                                            u.addEvents(p),
                                            p.node.classList.add(
                                                "apexcharts-marker"
                                            ),
                                            p
                                        );
                                    },
                                },
                                {
                                    key: "centerTextInBubble",
                                    value: function (t) {
                                        var e = this.w;
                                        return {
                                            y: (t +=
                                                parseInt(
                                                    e.config.dataLabels.style
                                                        .fontSize,
                                                    10
                                                ) / 4),
                                        };
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    B = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "dataLabelsCorrection",
                                    value: function (t, e, i, a, r, s, n) {
                                        var o = this.w,
                                            l = !1,
                                            c = new k(this.ctx).getTextRects(
                                                i,
                                                n
                                            ),
                                            h = c.width,
                                            d = c.height;
                                        e < 0 && (e = 0),
                                            e > o.globals.gridHeight + d &&
                                                (e =
                                                    o.globals.gridHeight +
                                                    d / 2),
                                            void 0 ===
                                                o.globals.dataLabelsRects[a] &&
                                                (o.globals.dataLabelsRects[a] =
                                                    []),
                                            o.globals.dataLabelsRects[a].push({
                                                x: t,
                                                y: e,
                                                width: h,
                                                height: d,
                                            });
                                        var u =
                                                o.globals.dataLabelsRects[a]
                                                    .length - 2,
                                            f =
                                                void 0 !==
                                                o.globals
                                                    .lastDrawnDataLabelsIndexes[
                                                    a
                                                ]
                                                    ? o.globals
                                                          .lastDrawnDataLabelsIndexes[
                                                          a
                                                      ][
                                                          o.globals
                                                              .lastDrawnDataLabelsIndexes[
                                                              a
                                                          ].length - 1
                                                      ]
                                                    : 0;
                                        if (
                                            void 0 !==
                                            o.globals.dataLabelsRects[a][u]
                                        ) {
                                            var g =
                                                o.globals.dataLabelsRects[a][f];
                                            (t > g.x + g.width + 2 ||
                                                e > g.y + g.height + 2 ||
                                                t + h < g.x) &&
                                                (l = !0);
                                        }
                                        return (
                                            (0 === r || s) && (l = !0),
                                            {
                                                x: t,
                                                y: e,
                                                textRects: c,
                                                drawnextLabel: l,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawDataLabel",
                                    value: function (t) {
                                        var e = this,
                                            i = t.type,
                                            a = t.pos,
                                            r = t.i,
                                            s = t.j,
                                            n = t.isRangeStart,
                                            o = t.strokeWidth,
                                            l = void 0 === o ? 2 : o,
                                            c = this.w,
                                            h = new k(this.ctx),
                                            d = c.config.dataLabels,
                                            u = 0,
                                            f = 0,
                                            g = s,
                                            p = null;
                                        if (!d.enabled || !Array.isArray(a.x))
                                            return p;
                                        p = h.group({
                                            class: "apexcharts-data-labels",
                                        });
                                        for (var x = 0; x < a.x.length; x++)
                                            if (
                                                ((u = a.x[x] + d.offsetX),
                                                (f = a.y[x] + d.offsetY + l),
                                                !isNaN(u))
                                            ) {
                                                1 === s && 0 === x && (g = 0),
                                                    1 === s &&
                                                        1 === x &&
                                                        (g = 1);
                                                var m = c.globals.series[r][g];
                                                "rangeArea" === i &&
                                                    (m = n
                                                        ? c.globals
                                                              .seriesRangeStart[
                                                              r
                                                          ][g]
                                                        : c.globals
                                                              .seriesRangeEnd[
                                                              r
                                                          ][g]);
                                                var b = "",
                                                    v = function (t) {
                                                        return c.config.dataLabels.formatter(
                                                            t,
                                                            {
                                                                ctx: e.ctx,
                                                                seriesIndex: r,
                                                                dataPointIndex:
                                                                    g,
                                                                w: c,
                                                            }
                                                        );
                                                    };
                                                "bubble" === c.config.chart.type
                                                    ? ((b = v(
                                                          (m =
                                                              c.globals.seriesZ[
                                                                  r
                                                              ][g])
                                                      )),
                                                      (f = a.y[x]),
                                                      (f = new W(
                                                          this.ctx
                                                      ).centerTextInBubble(
                                                          f,
                                                          r,
                                                          g
                                                      ).y))
                                                    : void 0 !== m &&
                                                      (b = v(m)),
                                                    this.plotDataLabelsText({
                                                        x: u,
                                                        y: f,
                                                        text: b,
                                                        i: r,
                                                        j: g,
                                                        parent: p,
                                                        offsetCorrection: !0,
                                                        dataLabelsConfig:
                                                            c.config.dataLabels,
                                                    });
                                            }
                                        return p;
                                    },
                                },
                                {
                                    key: "plotDataLabelsText",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new k(this.ctx),
                                            a = t.x,
                                            r = t.y,
                                            s = t.i,
                                            n = t.j,
                                            o = t.text,
                                            l = t.textAnchor,
                                            c = t.fontSize,
                                            h = t.parent,
                                            d = t.dataLabelsConfig,
                                            u = t.color,
                                            f = t.alwaysDrawDataLabel,
                                            g = t.offsetCorrection;
                                        if (
                                            !(
                                                Array.isArray(
                                                    e.config.dataLabels
                                                        .enabledOnSeries
                                                ) &&
                                                e.config.dataLabels.enabledOnSeries.indexOf(
                                                    s
                                                ) < 0
                                            )
                                        ) {
                                            var p = {
                                                x: a,
                                                y: r,
                                                drawnextLabel: !0,
                                                textRects: null,
                                            };
                                            g &&
                                                (p = this.dataLabelsCorrection(
                                                    a,
                                                    r,
                                                    o,
                                                    s,
                                                    n,
                                                    f,
                                                    parseInt(
                                                        d.style.fontSize,
                                                        10
                                                    )
                                                )),
                                                e.globals.zoomed ||
                                                    ((a = p.x), (r = p.y)),
                                                p.textRects &&
                                                    (a <
                                                        -10 -
                                                            p.textRects.width ||
                                                        a >
                                                            e.globals
                                                                .gridWidth +
                                                                p.textRects
                                                                    .width +
                                                                10) &&
                                                    (o = "");
                                            var x =
                                                e.globals.dataLabels.style
                                                    .colors[s];
                                            ((("bar" === e.config.chart.type ||
                                                "rangeBar" ===
                                                    e.config.chart.type) &&
                                                e.config.plotOptions.bar
                                                    .distributed) ||
                                                e.config.dataLabels
                                                    .distributed) &&
                                                (x =
                                                    e.globals.dataLabels.style
                                                        .colors[n]),
                                                "function" == typeof x &&
                                                    (x = x({
                                                        series: e.globals
                                                            .series,
                                                        seriesIndex: s,
                                                        dataPointIndex: n,
                                                        w: e,
                                                    })),
                                                u && (x = u);
                                            var m = d.offsetX,
                                                b = d.offsetY;
                                            if (
                                                (("bar" !==
                                                    e.config.chart.type &&
                                                    "rangeBar" !==
                                                        e.config.chart.type) ||
                                                    ((m = 0), (b = 0)),
                                                p.drawnextLabel)
                                            ) {
                                                var v = i.drawText({
                                                    width: 100,
                                                    height: parseInt(
                                                        d.style.fontSize,
                                                        10
                                                    ),
                                                    x: a + m,
                                                    y: r + b,
                                                    foreColor: x,
                                                    textAnchor:
                                                        l || d.textAnchor,
                                                    text: o,
                                                    fontSize:
                                                        c || d.style.fontSize,
                                                    fontFamily:
                                                        d.style.fontFamily,
                                                    fontWeight:
                                                        d.style.fontWeight ||
                                                        "normal",
                                                });
                                                if (
                                                    (v.attr({
                                                        class: "apexcharts-datalabel",
                                                        cx: a,
                                                        cy: r,
                                                    }),
                                                    d.dropShadow.enabled)
                                                ) {
                                                    var y = d.dropShadow;
                                                    new w(this.ctx).dropShadow(
                                                        v,
                                                        y
                                                    );
                                                }
                                                h.add(v),
                                                    void 0 ===
                                                        e.globals
                                                            .lastDrawnDataLabelsIndexes[
                                                            s
                                                        ] &&
                                                        (e.globals.lastDrawnDataLabelsIndexes[
                                                            s
                                                        ] = []),
                                                    e.globals.lastDrawnDataLabelsIndexes[
                                                        s
                                                    ].push(n);
                                            }
                                        }
                                    },
                                },
                                {
                                    key: "addBackgroundToDataLabel",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = i.config.dataLabels.background,
                                            r = a.padding,
                                            s = a.padding / 2,
                                            n = e.width,
                                            o = e.height,
                                            l = new k(this.ctx).drawRect(
                                                e.x - r,
                                                e.y - s / 2,
                                                n + 2 * r,
                                                o + s,
                                                a.borderRadius,
                                                "transparent" ===
                                                    i.config.chart.background
                                                    ? "#fff"
                                                    : i.config.chart.background,
                                                a.opacity,
                                                a.borderWidth,
                                                a.borderColor
                                            );
                                        return (
                                            a.dropShadow.enabled &&
                                                new w(this.ctx).dropShadow(
                                                    l,
                                                    a.dropShadow
                                                ),
                                            l
                                        );
                                    },
                                },
                                {
                                    key: "dataLabelsBackground",
                                    value: function () {
                                        var t = this.w;
                                        if ("bubble" !== t.config.chart.type)
                                            for (
                                                var e =
                                                        t.globals.dom.baseEl.querySelectorAll(
                                                            ".apexcharts-datalabels text"
                                                        ),
                                                    i = 0;
                                                i < e.length;
                                                i++
                                            ) {
                                                var a = e[i],
                                                    r = a.getBBox(),
                                                    s = null;
                                                if (
                                                    (r.width &&
                                                        r.height &&
                                                        (s =
                                                            this.addBackgroundToDataLabel(
                                                                a,
                                                                r
                                                            )),
                                                    s)
                                                ) {
                                                    a.parentNode.insertBefore(
                                                        s.node,
                                                        a
                                                    );
                                                    var n =
                                                        a.getAttribute("fill");
                                                    !t.config.chart.animations
                                                        .enabled ||
                                                    t.globals.resized ||
                                                    t.globals.dataChanged
                                                        ? s.attr({ fill: n })
                                                        : s
                                                              .animate()
                                                              .attr({
                                                                  fill: n,
                                                              }),
                                                        a.setAttribute(
                                                            "fill",
                                                            t.config.dataLabels
                                                                .background
                                                                .foreColor
                                                        );
                                                }
                                            }
                                    },
                                },
                                {
                                    key: "bringForward",
                                    value: function () {
                                        for (
                                            var t = this.w,
                                                e =
                                                    t.globals.dom.baseEl.querySelectorAll(
                                                        ".apexcharts-datalabels"
                                                    ),
                                                i =
                                                    t.globals.dom.baseEl.querySelector(
                                                        ".apexcharts-plot-series:last-child"
                                                    ),
                                                a = 0;
                                            a < e.length;
                                            a++
                                        )
                                            i &&
                                                i.insertBefore(
                                                    e[a],
                                                    i.nextSibling
                                                );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    V = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.legendInactiveClass =
                                    "legend-mouseover-inactive");
                        }
                        return (
                            c(t, [
                                {
                                    key: "getAllSeriesEls",
                                    value: function () {
                                        return this.w.globals.dom.baseEl.getElementsByClassName(
                                            "apexcharts-series"
                                        );
                                    },
                                },
                                {
                                    key: "getSeriesByName",
                                    value: function (t) {
                                        return this.w.globals.dom.baseEl.querySelector(
                                            ".apexcharts-inner .apexcharts-series[seriesName='".concat(
                                                v.escapeString(t),
                                                "']"
                                            )
                                        );
                                    },
                                },
                                {
                                    key: "isSeriesHidden",
                                    value: function (t) {
                                        var e = this.getSeriesByName(t),
                                            i = parseInt(
                                                e.getAttribute(
                                                    "data:realIndex"
                                                ),
                                                10
                                            );
                                        return {
                                            isHidden: e.classList.contains(
                                                "apexcharts-series-collapsed"
                                            ),
                                            realIndex: i,
                                        };
                                    },
                                },
                                {
                                    key: "addCollapsedClassToSeries",
                                    value: function (t, e) {
                                        var i = this.w;
                                        function a(i) {
                                            for (var a = 0; a < i.length; a++)
                                                i[a].index === e &&
                                                    t.node.classList.add(
                                                        "apexcharts-series-collapsed"
                                                    );
                                        }
                                        a(i.globals.collapsedSeries),
                                            a(
                                                i.globals
                                                    .ancillaryCollapsedSeries
                                            );
                                    },
                                },
                                {
                                    key: "toggleSeries",
                                    value: function (t) {
                                        var e = this.isSeriesHidden(t);
                                        return (
                                            this.ctx.legend.legendHelpers.toggleDataSeries(
                                                e.realIndex,
                                                e.isHidden
                                            ),
                                            e.isHidden
                                        );
                                    },
                                },
                                {
                                    key: "showSeries",
                                    value: function (t) {
                                        var e = this.isSeriesHidden(t);
                                        e.isHidden &&
                                            this.ctx.legend.legendHelpers.toggleDataSeries(
                                                e.realIndex,
                                                !0
                                            );
                                    },
                                },
                                {
                                    key: "hideSeries",
                                    value: function (t) {
                                        var e = this.isSeriesHidden(t);
                                        e.isHidden ||
                                            this.ctx.legend.legendHelpers.toggleDataSeries(
                                                e.realIndex,
                                                !1
                                            );
                                    },
                                },
                                {
                                    key: "resetSeries",
                                    value: function () {
                                        var t =
                                                !(
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                ) || arguments[0],
                                            e =
                                                !(
                                                    arguments.length > 1 &&
                                                    void 0 !== arguments[1]
                                                ) || arguments[1],
                                            i =
                                                !(
                                                    arguments.length > 2 &&
                                                    void 0 !== arguments[2]
                                                ) || arguments[2],
                                            a = this.w,
                                            r = v.clone(
                                                a.globals.initialSeries
                                            );
                                        (a.globals.previousPaths = []),
                                            i
                                                ? ((a.globals.collapsedSeries =
                                                      []),
                                                  (a.globals.ancillaryCollapsedSeries =
                                                      []),
                                                  (a.globals.collapsedSeriesIndices =
                                                      []),
                                                  (a.globals.ancillaryCollapsedSeriesIndices =
                                                      []))
                                                : (r =
                                                      this.emptyCollapsedSeries(
                                                          r
                                                      )),
                                            (a.config.series = r),
                                            t &&
                                                (e &&
                                                    ((a.globals.zoomed = !1),
                                                    this.ctx.updateHelpers.revertDefaultAxisMinMax()),
                                                this.ctx.updateHelpers._updateSeries(
                                                    r,
                                                    a.config.chart.animations
                                                        .dynamicAnimation
                                                        .enabled
                                                ));
                                    },
                                },
                                {
                                    key: "emptyCollapsedSeries",
                                    value: function (t) {
                                        for (
                                            var e = this.w, i = 0;
                                            i < t.length;
                                            i++
                                        )
                                            e.globals.collapsedSeriesIndices.indexOf(
                                                i
                                            ) > -1 && (t[i].data = []);
                                        return t;
                                    },
                                },
                                {
                                    key: "toggleSeriesOnHover",
                                    value: function (t, e) {
                                        var i = this.w;
                                        e || (e = t.target);
                                        var a =
                                            i.globals.dom.baseEl.querySelectorAll(
                                                ".apexcharts-series, .apexcharts-datalabels"
                                            );
                                        if ("mousemove" === t.type) {
                                            var r =
                                                    parseInt(
                                                        e.getAttribute("rel"),
                                                        10
                                                    ) - 1,
                                                s = null,
                                                n = null;
                                            i.globals.axisCharts ||
                                            "radialBar" === i.config.chart.type
                                                ? i.globals.axisCharts
                                                    ? ((s =
                                                          i.globals.dom.baseEl.querySelector(
                                                              ".apexcharts-series[data\\:realIndex='".concat(
                                                                  r,
                                                                  "']"
                                                              )
                                                          )),
                                                      (n =
                                                          i.globals.dom.baseEl.querySelector(
                                                              ".apexcharts-datalabels[data\\:realIndex='".concat(
                                                                  r,
                                                                  "']"
                                                              )
                                                          )))
                                                    : (s =
                                                          i.globals.dom.baseEl.querySelector(
                                                              ".apexcharts-series[rel='".concat(
                                                                  r + 1,
                                                                  "']"
                                                              )
                                                          ))
                                                : (s =
                                                      i.globals.dom.baseEl.querySelector(
                                                          ".apexcharts-series[rel='".concat(
                                                              r + 1,
                                                              "'] path"
                                                          )
                                                      ));
                                            for (var o = 0; o < a.length; o++)
                                                a[o].classList.add(
                                                    this.legendInactiveClass
                                                );
                                            null !== s &&
                                                (i.globals.axisCharts ||
                                                    s.parentNode.classList.remove(
                                                        this.legendInactiveClass
                                                    ),
                                                s.classList.remove(
                                                    this.legendInactiveClass
                                                ),
                                                null !== n &&
                                                    n.classList.remove(
                                                        this.legendInactiveClass
                                                    ));
                                        } else if ("mouseout" === t.type)
                                            for (var l = 0; l < a.length; l++)
                                                a[l].classList.remove(
                                                    this.legendInactiveClass
                                                );
                                    },
                                },
                                {
                                    key: "highlightRangeInSeries",
                                    value: function (t, e) {
                                        var i = this,
                                            a = this.w,
                                            r =
                                                a.globals.dom.baseEl.getElementsByClassName(
                                                    "apexcharts-heatmap-rect"
                                                ),
                                            s = function (t) {
                                                for (
                                                    var e = 0;
                                                    e < r.length;
                                                    e++
                                                )
                                                    r[e].classList[t](
                                                        i.legendInactiveClass
                                                    );
                                            };
                                        if ("mousemove" === t.type) {
                                            var n =
                                                parseInt(
                                                    e.getAttribute("rel"),
                                                    10
                                                ) - 1;
                                            s("add"),
                                                (function (t) {
                                                    for (
                                                        var e = 0;
                                                        e < r.length;
                                                        e++
                                                    ) {
                                                        var a = parseInt(
                                                            r[e].getAttribute(
                                                                "val"
                                                            ),
                                                            10
                                                        );
                                                        a >= t.from &&
                                                            a <= t.to &&
                                                            r[
                                                                e
                                                            ].classList.remove(
                                                                i.legendInactiveClass
                                                            );
                                                    }
                                                })(
                                                    a.config.plotOptions.heatmap
                                                        .colorScale.ranges[n]
                                                );
                                        } else
                                            "mouseout" === t.type &&
                                                s("remove");
                                    },
                                },
                                {
                                    key: "getActiveConfigSeriesIndex",
                                    value: function () {
                                        var t =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : "asc",
                                            e =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : [],
                                            i = this.w,
                                            a = 0;
                                        if (i.config.series.length > 1)
                                            for (
                                                var r = i.config.series.map(
                                                        function (t, a) {
                                                            return t.data &&
                                                                t.data.length >
                                                                    0 &&
                                                                -1 ===
                                                                    i.globals.collapsedSeriesIndices.indexOf(
                                                                        a
                                                                    ) &&
                                                                (!i.globals
                                                                    .comboCharts ||
                                                                    0 ===
                                                                        e.length ||
                                                                    (e.length &&
                                                                        e.indexOf(
                                                                            i
                                                                                .config
                                                                                .series[
                                                                                a
                                                                            ]
                                                                                .type
                                                                        ) > -1))
                                                                ? a
                                                                : -1;
                                                        }
                                                    ),
                                                    s =
                                                        "asc" === t
                                                            ? 0
                                                            : r.length - 1;
                                                "asc" === t
                                                    ? s < r.length
                                                    : s >= 0;
                                                "asc" === t ? s++ : s--
                                            )
                                                if (-1 !== r[s]) {
                                                    a = r[s];
                                                    break;
                                                }
                                        return a;
                                    },
                                },
                                {
                                    key: "getBarSeriesIndices",
                                    value: function () {
                                        return this.w.globals.comboCharts
                                            ? this.w.config.series
                                                  .map(function (t, e) {
                                                      return "bar" === t.type ||
                                                          "column" === t.type
                                                          ? e
                                                          : -1;
                                                  })
                                                  .filter(function (t) {
                                                      return -1 !== t;
                                                  })
                                            : this.w.config.series.map(
                                                  function (t, e) {
                                                      return e;
                                                  }
                                              );
                                    },
                                },
                                {
                                    key: "getPreviousPaths",
                                    value: function () {
                                        var t = this.w;
                                        function e(e, i, a) {
                                            for (
                                                var r = e[i].childNodes,
                                                    s = {
                                                        type: a,
                                                        paths: [],
                                                        realIndex:
                                                            e[i].getAttribute(
                                                                "data:realIndex"
                                                            ),
                                                    },
                                                    n = 0;
                                                n < r.length;
                                                n++
                                            )
                                                if (
                                                    r[n].hasAttribute("pathTo")
                                                ) {
                                                    var o =
                                                        r[n].getAttribute(
                                                            "pathTo"
                                                        );
                                                    s.paths.push({ d: o });
                                                }
                                            t.globals.previousPaths.push(s);
                                        }
                                        (t.globals.previousPaths = []),
                                            [
                                                "line",
                                                "area",
                                                "bar",
                                                "rangebar",
                                                "rangeArea",
                                                "candlestick",
                                                "radar",
                                            ].forEach(function (i) {
                                                for (
                                                    var a,
                                                        r =
                                                            ((a = i),
                                                            t.globals.dom.baseEl.querySelectorAll(
                                                                ".apexcharts-".concat(
                                                                    a,
                                                                    "-series .apexcharts-series"
                                                                )
                                                            )),
                                                        s = 0;
                                                    s < r.length;
                                                    s++
                                                )
                                                    e(r, s, i);
                                            }),
                                            this.handlePrevBubbleScatterPaths(
                                                "bubble"
                                            ),
                                            this.handlePrevBubbleScatterPaths(
                                                "scatter"
                                            );
                                        var i =
                                            t.globals.dom.baseEl.querySelectorAll(
                                                ".apexcharts-".concat(
                                                    t.config.chart.type,
                                                    " .apexcharts-series"
                                                )
                                            );
                                        if (i.length > 0)
                                            for (
                                                var a = function (e) {
                                                        for (
                                                            var i =
                                                                    t.globals.dom.baseEl.querySelectorAll(
                                                                        ".apexcharts-"
                                                                            .concat(
                                                                                t
                                                                                    .config
                                                                                    .chart
                                                                                    .type,
                                                                                " .apexcharts-series[data\\:realIndex='"
                                                                            )
                                                                            .concat(
                                                                                e,
                                                                                "'] rect"
                                                                            )
                                                                    ),
                                                                a = [],
                                                                r = function (
                                                                    t
                                                                ) {
                                                                    var e =
                                                                            function (
                                                                                e
                                                                            ) {
                                                                                return i[
                                                                                    t
                                                                                ].getAttribute(
                                                                                    e
                                                                                );
                                                                            },
                                                                        r = {
                                                                            x: parseFloat(
                                                                                e(
                                                                                    "x"
                                                                                )
                                                                            ),
                                                                            y: parseFloat(
                                                                                e(
                                                                                    "y"
                                                                                )
                                                                            ),
                                                                            width: parseFloat(
                                                                                e(
                                                                                    "width"
                                                                                )
                                                                            ),
                                                                            height: parseFloat(
                                                                                e(
                                                                                    "height"
                                                                                )
                                                                            ),
                                                                        };
                                                                    a.push({
                                                                        rect: r,
                                                                        color: i[
                                                                            t
                                                                        ].getAttribute(
                                                                            "color"
                                                                        ),
                                                                    });
                                                                },
                                                                s = 0;
                                                            s < i.length;
                                                            s++
                                                        )
                                                            r(s);
                                                        t.globals.previousPaths.push(
                                                            a
                                                        );
                                                    },
                                                    r = 0;
                                                r < i.length;
                                                r++
                                            )
                                                a(r);
                                        t.globals.axisCharts ||
                                            (t.globals.previousPaths =
                                                t.globals.series);
                                    },
                                },
                                {
                                    key: "handlePrevBubbleScatterPaths",
                                    value: function (t) {
                                        var e = this.w,
                                            i =
                                                e.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-".concat(
                                                        t,
                                                        "-series .apexcharts-series"
                                                    )
                                                );
                                        if (i.length > 0)
                                            for (var a = 0; a < i.length; a++) {
                                                for (
                                                    var r =
                                                            e.globals.dom.baseEl.querySelectorAll(
                                                                ".apexcharts-"
                                                                    .concat(
                                                                        t,
                                                                        "-series .apexcharts-series[data\\:realIndex='"
                                                                    )
                                                                    .concat(
                                                                        a,
                                                                        "'] circle"
                                                                    )
                                                            ),
                                                        s = [],
                                                        n = 0;
                                                    n < r.length;
                                                    n++
                                                )
                                                    s.push({
                                                        x: r[n].getAttribute(
                                                            "cx"
                                                        ),
                                                        y: r[n].getAttribute(
                                                            "cy"
                                                        ),
                                                        r: r[n].getAttribute(
                                                            "r"
                                                        ),
                                                    });
                                                e.globals.previousPaths.push(s);
                                            }
                                    },
                                },
                                {
                                    key: "clearPreviousPaths",
                                    value: function () {
                                        var t = this.w;
                                        (t.globals.previousPaths = []),
                                            (t.globals.allSeriesCollapsed = !1);
                                    },
                                },
                                {
                                    key: "handleNoData",
                                    value: function () {
                                        var t = this.w,
                                            e = t.config.noData,
                                            i = new k(this.ctx),
                                            a = t.globals.svgWidth / 2,
                                            r = t.globals.svgHeight / 2,
                                            s = "middle";
                                        if (
                                            ((t.globals.noData = !0),
                                            (t.globals.animationEnded = !0),
                                            "left" === e.align
                                                ? ((a = 10), (s = "start"))
                                                : "right" === e.align &&
                                                  ((a =
                                                      t.globals.svgWidth - 10),
                                                  (s = "end")),
                                            "top" === e.verticalAlign
                                                ? (r = 50)
                                                : "bottom" ===
                                                      e.verticalAlign &&
                                                  (r =
                                                      t.globals.svgHeight - 50),
                                            (a += e.offsetX),
                                            (r =
                                                r +
                                                parseInt(e.style.fontSize, 10) +
                                                2 +
                                                e.offsetY),
                                            void 0 !== e.text && "" !== e.text)
                                        ) {
                                            var n = i.drawText({
                                                x: a,
                                                y: r,
                                                text: e.text,
                                                textAnchor: s,
                                                fontSize: e.style.fontSize,
                                                fontFamily: e.style.fontFamily,
                                                foreColor: e.style.color,
                                                opacity: 1,
                                                class: "apexcharts-text-nodata",
                                            });
                                            t.globals.dom.Paper.add(n);
                                        }
                                    },
                                },
                                {
                                    key: "setNullSeriesToZeroValues",
                                    value: function (t) {
                                        for (
                                            var e = this.w, i = 0;
                                            i < t.length;
                                            i++
                                        )
                                            if (0 === t[i].length)
                                                for (
                                                    var a = 0;
                                                    a <
                                                    t[
                                                        e.globals
                                                            .maxValsInArrayIndex
                                                    ].length;
                                                    a++
                                                )
                                                    t[i].push(0);
                                        return t;
                                    },
                                },
                                {
                                    key: "hasAllSeriesEqualX",
                                    value: function () {
                                        for (
                                            var t = !0,
                                                e = this.w,
                                                i = this.filteredSeriesX(),
                                                a = 0;
                                            a < i.length - 1;
                                            a++
                                        )
                                            if (i[a][0] !== i[a + 1][0]) {
                                                t = !1;
                                                break;
                                            }
                                        return (
                                            (e.globals.allSeriesHasEqualX = t),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "filteredSeriesX",
                                    value: function () {
                                        return this.w.globals.seriesX.map(
                                            function (t) {
                                                return t.length > 0 ? t : [];
                                            }
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    G = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.twoDSeries = []),
                                (this.threeDSeries = []),
                                (this.twoDSeriesX = []),
                                (this.seriesGoals = []),
                                (this.coreUtils = new A(this.ctx));
                        }
                        return (
                            c(t, [
                                {
                                    key: "isMultiFormat",
                                    value: function () {
                                        return (
                                            this.isFormatXY() ||
                                            this.isFormat2DArray()
                                        );
                                    },
                                },
                                {
                                    key: "isFormatXY",
                                    value: function () {
                                        var t = this.w.config.series.slice(),
                                            e = new V(this.ctx);
                                        if (
                                            ((this.activeSeriesIndex =
                                                e.getActiveConfigSeriesIndex()),
                                            void 0 !==
                                                t[this.activeSeriesIndex]
                                                    .data &&
                                                t[this.activeSeriesIndex].data
                                                    .length > 0 &&
                                                null !==
                                                    t[this.activeSeriesIndex]
                                                        .data[0] &&
                                                void 0 !==
                                                    t[this.activeSeriesIndex]
                                                        .data[0].x &&
                                                null !==
                                                    t[this.activeSeriesIndex]
                                                        .data[0])
                                        )
                                            return !0;
                                    },
                                },
                                {
                                    key: "isFormat2DArray",
                                    value: function () {
                                        var t = this.w.config.series.slice(),
                                            e = new V(this.ctx);
                                        if (
                                            ((this.activeSeriesIndex =
                                                e.getActiveConfigSeriesIndex()),
                                            void 0 !==
                                                t[this.activeSeriesIndex]
                                                    .data &&
                                                t[this.activeSeriesIndex].data
                                                    .length > 0 &&
                                                void 0 !==
                                                    t[this.activeSeriesIndex]
                                                        .data[0] &&
                                                null !==
                                                    t[this.activeSeriesIndex]
                                                        .data[0] &&
                                                t[this.activeSeriesIndex]
                                                    .data[0].constructor ===
                                                    Array)
                                        )
                                            return !0;
                                    },
                                },
                                {
                                    key: "handleFormat2DArray",
                                    value: function (t, e) {
                                        for (
                                            var i = this.w.config,
                                                a = this.w.globals,
                                                r =
                                                    "boxPlot" ===
                                                        i.chart.type ||
                                                    "boxPlot" ===
                                                        i.series[e].type,
                                                s = 0;
                                            s < t[e].data.length;
                                            s++
                                        )
                                            if (
                                                (void 0 !== t[e].data[s][1] &&
                                                    (Array.isArray(
                                                        t[e].data[s][1]
                                                    ) &&
                                                    4 ===
                                                        t[e].data[s][1]
                                                            .length &&
                                                    !r
                                                        ? this.twoDSeries.push(
                                                              v.parseNumber(
                                                                  t[e].data[
                                                                      s
                                                                  ][1][3]
                                                              )
                                                          )
                                                        : t[e].data[s].length >=
                                                          5
                                                        ? this.twoDSeries.push(
                                                              v.parseNumber(
                                                                  t[e].data[
                                                                      s
                                                                  ][4]
                                                              )
                                                          )
                                                        : this.twoDSeries.push(
                                                              v.parseNumber(
                                                                  t[e].data[
                                                                      s
                                                                  ][1]
                                                              )
                                                          ),
                                                    (a.dataFormatXNumeric =
                                                        !0)),
                                                "datetime" === i.xaxis.type)
                                            ) {
                                                var n = new Date(
                                                    t[e].data[s][0]
                                                );
                                                (n = new Date(n).getTime()),
                                                    this.twoDSeriesX.push(n);
                                            } else
                                                this.twoDSeriesX.push(
                                                    t[e].data[s][0]
                                                );
                                        for (
                                            var o = 0;
                                            o < t[e].data.length;
                                            o++
                                        )
                                            void 0 !== t[e].data[o][2] &&
                                                (this.threeDSeries.push(
                                                    t[e].data[o][2]
                                                ),
                                                (a.isDataXYZ = !0));
                                    },
                                },
                                {
                                    key: "handleFormatXY",
                                    value: function (t, e) {
                                        var i = this.w.config,
                                            a = this.w.globals,
                                            r = new I(this.ctx),
                                            s = e;
                                        a.collapsedSeriesIndices.indexOf(e) >
                                            -1 && (s = this.activeSeriesIndex);
                                        for (
                                            var n = 0;
                                            n < t[e].data.length;
                                            n++
                                        )
                                            void 0 !== t[e].data[n].y &&
                                                (Array.isArray(t[e].data[n].y)
                                                    ? this.twoDSeries.push(
                                                          v.parseNumber(
                                                              t[e].data[n].y[
                                                                  t[e].data[n].y
                                                                      .length -
                                                                      1
                                                              ]
                                                          )
                                                      )
                                                    : this.twoDSeries.push(
                                                          v.parseNumber(
                                                              t[e].data[n].y
                                                          )
                                                      )),
                                                void 0 !== t[e].data[n].goals &&
                                                Array.isArray(
                                                    t[e].data[n].goals
                                                )
                                                    ? (void 0 ===
                                                          this.seriesGoals[e] &&
                                                          (this.seriesGoals[e] =
                                                              []),
                                                      this.seriesGoals[e].push(
                                                          t[e].data[n].goals
                                                      ))
                                                    : (void 0 ===
                                                          this.seriesGoals[e] &&
                                                          (this.seriesGoals[e] =
                                                              []),
                                                      this.seriesGoals[e].push(
                                                          null
                                                      ));
                                        for (
                                            var o = 0;
                                            o < t[s].data.length;
                                            o++
                                        ) {
                                            var l =
                                                    "string" ==
                                                    typeof t[s].data[o].x,
                                                c = Array.isArray(
                                                    t[s].data[o].x
                                                ),
                                                h =
                                                    !c &&
                                                    !!r.isValidDate(
                                                        t[s].data[
                                                            o
                                                        ].x.toString()
                                                    );
                                            if (l || h)
                                                if (
                                                    l ||
                                                    i.xaxis
                                                        .convertedCatToNumeric
                                                ) {
                                                    var d =
                                                        a.isBarHorizontal &&
                                                        a.isRangeData;
                                                    "datetime" !==
                                                        i.xaxis.type || d
                                                        ? ((this.fallbackToCategory =
                                                              !0),
                                                          this.twoDSeriesX.push(
                                                              t[s].data[o].x
                                                          ))
                                                        : this.twoDSeriesX.push(
                                                              r.parseDate(
                                                                  t[s].data[o].x
                                                              )
                                                          );
                                                } else
                                                    "datetime" === i.xaxis.type
                                                        ? this.twoDSeriesX.push(
                                                              r.parseDate(
                                                                  t[s].data[
                                                                      o
                                                                  ].x.toString()
                                                              )
                                                          )
                                                        : ((a.dataFormatXNumeric =
                                                              !0),
                                                          (a.isXNumeric = !0),
                                                          this.twoDSeriesX.push(
                                                              parseFloat(
                                                                  t[s].data[o].x
                                                              )
                                                          ));
                                            else
                                                c
                                                    ? ((this.fallbackToCategory =
                                                          !0),
                                                      this.twoDSeriesX.push(
                                                          t[s].data[o].x
                                                      ))
                                                    : ((a.isXNumeric = !0),
                                                      (a.dataFormatXNumeric =
                                                          !0),
                                                      this.twoDSeriesX.push(
                                                          t[s].data[o].x
                                                      ));
                                        }
                                        if (
                                            t[e].data[0] &&
                                            void 0 !== t[e].data[0].z
                                        ) {
                                            for (
                                                var u = 0;
                                                u < t[e].data.length;
                                                u++
                                            )
                                                this.threeDSeries.push(
                                                    t[e].data[u].z
                                                );
                                            a.isDataXYZ = !0;
                                        }
                                    },
                                },
                                {
                                    key: "handleRangeData",
                                    value: function (t, e) {
                                        var i = this.w.globals,
                                            a = {};
                                        return (
                                            this.isFormat2DArray()
                                                ? (a =
                                                      this.handleRangeDataFormat(
                                                          "array",
                                                          t,
                                                          e
                                                      ))
                                                : this.isFormatXY() &&
                                                  (a =
                                                      this.handleRangeDataFormat(
                                                          "xy",
                                                          t,
                                                          e
                                                      )),
                                            i.seriesRangeStart.push(a.start),
                                            i.seriesRangeEnd.push(a.end),
                                            i.seriesRange.push(a.rangeUniques),
                                            i.seriesRange.forEach(function (
                                                t,
                                                e
                                            ) {
                                                t &&
                                                    t.forEach(function (t, e) {
                                                        t.y.forEach(function (
                                                            e,
                                                            i
                                                        ) {
                                                            for (
                                                                var a = 0;
                                                                a < t.y.length;
                                                                a++
                                                            )
                                                                if (i !== a) {
                                                                    var r =
                                                                            e.y1,
                                                                        s =
                                                                            e.y2,
                                                                        n =
                                                                            t.y[
                                                                                a
                                                                            ]
                                                                                .y1;
                                                                    r <=
                                                                        t.y[a]
                                                                            .y2 &&
                                                                        n <=
                                                                            s &&
                                                                        (t.overlaps.indexOf(
                                                                            e.rangeName
                                                                        ) < 0 &&
                                                                            t.overlaps.push(
                                                                                e.rangeName
                                                                            ),
                                                                        t.overlaps.indexOf(
                                                                            t.y[
                                                                                a
                                                                            ]
                                                                                .rangeName
                                                                        ) < 0 &&
                                                                            t.overlaps.push(
                                                                                t
                                                                                    .y[
                                                                                    a
                                                                                ]
                                                                                    .rangeName
                                                                            ));
                                                                }
                                                        });
                                                    });
                                            }),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "handleCandleStickBoxData",
                                    value: function (t, e) {
                                        var i = this.w.globals,
                                            a = {};
                                        return (
                                            this.isFormat2DArray()
                                                ? (a =
                                                      this.handleCandleStickBoxDataFormat(
                                                          "array",
                                                          t,
                                                          e
                                                      ))
                                                : this.isFormatXY() &&
                                                  (a =
                                                      this.handleCandleStickBoxDataFormat(
                                                          "xy",
                                                          t,
                                                          e
                                                      )),
                                            (i.seriesCandleO[e] = a.o),
                                            (i.seriesCandleH[e] = a.h),
                                            (i.seriesCandleM[e] = a.m),
                                            (i.seriesCandleL[e] = a.l),
                                            (i.seriesCandleC[e] = a.c),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "handleRangeDataFormat",
                                    value: function (t, e, i) {
                                        var a = [],
                                            r = [],
                                            s = e[i].data
                                                .filter(function (t, e, i) {
                                                    return (
                                                        e ===
                                                        i.findIndex(function (
                                                            e
                                                        ) {
                                                            return e.x === t.x;
                                                        })
                                                    );
                                                })
                                                .map(function (t, e) {
                                                    return {
                                                        x: t.x,
                                                        overlaps: [],
                                                        y: [],
                                                    };
                                                });
                                        if ("array" === t)
                                            for (
                                                var n = 0;
                                                n < e[i].data.length;
                                                n++
                                            )
                                                Array.isArray(e[i].data[n])
                                                    ? (a.push(
                                                          e[i].data[n][1][0]
                                                      ),
                                                      r.push(
                                                          e[i].data[n][1][1]
                                                      ))
                                                    : (a.push(e[i].data[n]),
                                                      r.push(e[i].data[n]));
                                        else if ("xy" === t)
                                            for (
                                                var o = function (t) {
                                                        var n = Array.isArray(
                                                                e[i].data[t].y
                                                            ),
                                                            o = v.randomId(),
                                                            l = e[i].data[t].x,
                                                            c = {
                                                                y1: n
                                                                    ? e[i].data[
                                                                          t
                                                                      ].y[0]
                                                                    : e[i].data[
                                                                          t
                                                                      ].y,
                                                                y2: n
                                                                    ? e[i].data[
                                                                          t
                                                                      ].y[1]
                                                                    : e[i].data[
                                                                          t
                                                                      ].y,
                                                                rangeName: o,
                                                            };
                                                        e[i].data[t].rangeName =
                                                            o;
                                                        var h = s.findIndex(
                                                            function (t) {
                                                                return (
                                                                    t.x === l
                                                                );
                                                            }
                                                        );
                                                        s[h].y.push(c),
                                                            a.push(c.y1),
                                                            r.push(c.y2);
                                                    },
                                                    l = 0;
                                                l < e[i].data.length;
                                                l++
                                            )
                                                o(l);
                                        return {
                                            start: a,
                                            end: r,
                                            rangeUniques: s,
                                        };
                                    },
                                },
                                {
                                    key: "handleCandleStickBoxDataFormat",
                                    value: function (t, e, i) {
                                        var a = this.w,
                                            r =
                                                "boxPlot" ===
                                                    a.config.chart.type ||
                                                "boxPlot" ===
                                                    a.config.series[i].type,
                                            s = [],
                                            n = [],
                                            o = [],
                                            l = [],
                                            c = [];
                                        if ("array" === t)
                                            if (
                                                (r &&
                                                    6 ===
                                                        e[i].data[0].length) ||
                                                (!r &&
                                                    5 === e[i].data[0].length)
                                            )
                                                for (
                                                    var h = 0;
                                                    h < e[i].data.length;
                                                    h++
                                                )
                                                    s.push(e[i].data[h][1]),
                                                        n.push(e[i].data[h][2]),
                                                        r
                                                            ? (o.push(
                                                                  e[i].data[
                                                                      h
                                                                  ][3]
                                                              ),
                                                              l.push(
                                                                  e[i].data[
                                                                      h
                                                                  ][4]
                                                              ),
                                                              c.push(
                                                                  e[i].data[
                                                                      h
                                                                  ][5]
                                                              ))
                                                            : (l.push(
                                                                  e[i].data[
                                                                      h
                                                                  ][3]
                                                              ),
                                                              c.push(
                                                                  e[i].data[
                                                                      h
                                                                  ][4]
                                                              ));
                                            else
                                                for (
                                                    var d = 0;
                                                    d < e[i].data.length;
                                                    d++
                                                )
                                                    Array.isArray(
                                                        e[i].data[d][1]
                                                    ) &&
                                                        (s.push(
                                                            e[i].data[d][1][0]
                                                        ),
                                                        n.push(
                                                            e[i].data[d][1][1]
                                                        ),
                                                        r
                                                            ? (o.push(
                                                                  e[i].data[
                                                                      d
                                                                  ][1][2]
                                                              ),
                                                              l.push(
                                                                  e[i].data[
                                                                      d
                                                                  ][1][3]
                                                              ),
                                                              c.push(
                                                                  e[i].data[
                                                                      d
                                                                  ][1][4]
                                                              ))
                                                            : (l.push(
                                                                  e[i].data[
                                                                      d
                                                                  ][1][2]
                                                              ),
                                                              c.push(
                                                                  e[i].data[
                                                                      d
                                                                  ][1][3]
                                                              )));
                                        else if ("xy" === t)
                                            for (
                                                var u = 0;
                                                u < e[i].data.length;
                                                u++
                                            )
                                                Array.isArray(e[i].data[u].y) &&
                                                    (s.push(e[i].data[u].y[0]),
                                                    n.push(e[i].data[u].y[1]),
                                                    r
                                                        ? (o.push(
                                                              e[i].data[u].y[2]
                                                          ),
                                                          l.push(
                                                              e[i].data[u].y[3]
                                                          ),
                                                          c.push(
                                                              e[i].data[u].y[4]
                                                          ))
                                                        : (l.push(
                                                              e[i].data[u].y[2]
                                                          ),
                                                          c.push(
                                                              e[i].data[u].y[3]
                                                          )));
                                        return { o: s, h: n, m: o, l, c };
                                    },
                                },
                                {
                                    key: "parseDataAxisCharts",
                                    value: function (t) {
                                        var e,
                                            i = this,
                                            a =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : this.ctx,
                                            r = this.w.config,
                                            s = this.w.globals,
                                            n = new I(a),
                                            o =
                                                r.labels.length > 0
                                                    ? r.labels.slice()
                                                    : r.xaxis.categories.slice();
                                        if (
                                            ((s.isRangeBar =
                                                "rangeBar" === r.chart.type &&
                                                s.isBarHorizontal),
                                            (s.hasXaxisGroups =
                                                "category" === r.xaxis.type &&
                                                r.xaxis.group.groups.length >
                                                    0),
                                            s.hasXaxisGroups &&
                                                (s.groups =
                                                    r.xaxis.group.groups),
                                            (s.hasSeriesGroups =
                                                null === (e = t[0]) ||
                                                void 0 === e
                                                    ? void 0
                                                    : e.group),
                                            s.hasSeriesGroups)
                                        ) {
                                            var l = [],
                                                c = x(
                                                    new Set(
                                                        t.map(function (t) {
                                                            return t.group;
                                                        })
                                                    )
                                                );
                                            t.forEach(function (t, e) {
                                                var i = c.indexOf(t.group);
                                                l[i] || (l[i] = []),
                                                    l[i].push(t.name);
                                            }),
                                                (s.seriesGroups = l);
                                        }
                                        for (
                                            var h = function () {
                                                    for (
                                                        var t = 0;
                                                        t < o.length;
                                                        t++
                                                    )
                                                        if (
                                                            "string" ==
                                                            typeof o[t]
                                                        ) {
                                                            if (
                                                                !n.isValidDate(
                                                                    o[t]
                                                                )
                                                            )
                                                                throw new Error(
                                                                    "You have provided invalid Date format. Please provide a valid JavaScript Date"
                                                                );
                                                            i.twoDSeriesX.push(
                                                                n.parseDate(
                                                                    o[t]
                                                                )
                                                            );
                                                        } else
                                                            i.twoDSeriesX.push(
                                                                o[t]
                                                            );
                                                },
                                                d = 0;
                                            d < t.length;
                                            d++
                                        ) {
                                            if (
                                                ((this.twoDSeries = []),
                                                (this.twoDSeriesX = []),
                                                (this.threeDSeries = []),
                                                void 0 === t[d].data)
                                            )
                                                return void console.error(
                                                    "It is a possibility that you may have not included 'data' property in series."
                                                );
                                            if (
                                                (("rangeBar" !== r.chart.type &&
                                                    "rangeArea" !==
                                                        r.chart.type &&
                                                    "rangeBar" !== t[d].type &&
                                                    "rangeArea" !==
                                                        t[d].type) ||
                                                    ((s.isRangeData = !0),
                                                    s.isComboCharts
                                                        ? ("rangeBar" !==
                                                              t[d].type &&
                                                              "rangeArea" !==
                                                                  t[d].type) ||
                                                          this.handleRangeData(
                                                              t,
                                                              d
                                                          )
                                                        : ("rangeBar" !==
                                                              r.chart.type &&
                                                              "rangeArea" !==
                                                                  r.chart
                                                                      .type) ||
                                                          this.handleRangeData(
                                                              t,
                                                              d
                                                          )),
                                                this.isMultiFormat())
                                            )
                                                this.isFormat2DArray()
                                                    ? this.handleFormat2DArray(
                                                          t,
                                                          d
                                                      )
                                                    : this.isFormatXY() &&
                                                      this.handleFormatXY(t, d),
                                                    ("candlestick" !==
                                                        r.chart.type &&
                                                        "candlestick" !==
                                                            t[d].type &&
                                                        "boxPlot" !==
                                                            r.chart.type &&
                                                        "boxPlot" !==
                                                            t[d].type) ||
                                                        this.handleCandleStickBoxData(
                                                            t,
                                                            d
                                                        ),
                                                    s.series.push(
                                                        this.twoDSeries
                                                    ),
                                                    s.labels.push(
                                                        this.twoDSeriesX
                                                    ),
                                                    s.seriesX.push(
                                                        this.twoDSeriesX
                                                    ),
                                                    (s.seriesGoals =
                                                        this.seriesGoals),
                                                    d !==
                                                        this
                                                            .activeSeriesIndex ||
                                                        this
                                                            .fallbackToCategory ||
                                                        (s.isXNumeric = !0);
                                            else {
                                                "datetime" === r.xaxis.type
                                                    ? ((s.isXNumeric = !0),
                                                      h(),
                                                      s.seriesX.push(
                                                          this.twoDSeriesX
                                                      ))
                                                    : "numeric" ===
                                                          r.xaxis.type &&
                                                      ((s.isXNumeric = !0),
                                                      o.length > 0 &&
                                                          ((this.twoDSeriesX =
                                                              o),
                                                          s.seriesX.push(
                                                              this.twoDSeriesX
                                                          ))),
                                                    s.labels.push(
                                                        this.twoDSeriesX
                                                    );
                                                var u = t[d].data.map(function (
                                                    t
                                                ) {
                                                    return v.parseNumber(t);
                                                });
                                                s.series.push(u);
                                            }
                                            s.seriesZ.push(this.threeDSeries),
                                                void 0 !== t[d].name
                                                    ? s.seriesNames.push(
                                                          t[d].name
                                                      )
                                                    : s.seriesNames.push(
                                                          "series-" +
                                                              parseInt(
                                                                  d + 1,
                                                                  10
                                                              )
                                                      ),
                                                void 0 !== t[d].color
                                                    ? s.seriesColors.push(
                                                          t[d].color
                                                      )
                                                    : s.seriesColors.push(
                                                          void 0
                                                      );
                                        }
                                        return this.w;
                                    },
                                },
                                {
                                    key: "parseDataNonAxisCharts",
                                    value: function (t) {
                                        var e = this.w.globals,
                                            i = this.w.config;
                                        (e.series = t.slice()),
                                            (e.seriesNames = i.labels.slice());
                                        for (
                                            var a = 0;
                                            a < e.series.length;
                                            a++
                                        )
                                            void 0 === e.seriesNames[a] &&
                                                e.seriesNames.push(
                                                    "series-" + (a + 1)
                                                );
                                        return this.w;
                                    },
                                },
                                {
                                    key: "handleExternalLabelsData",
                                    value: function (t) {
                                        var e = this.w.config,
                                            i = this.w.globals;
                                        e.xaxis.categories.length > 0
                                            ? (i.labels = e.xaxis.categories)
                                            : e.labels.length > 0
                                            ? (i.labels = e.labels.slice())
                                            : this.fallbackToCategory
                                            ? ((i.labels = i.labels[0]),
                                              i.seriesRange.length &&
                                                  (i.seriesRange.map(function (
                                                      t
                                                  ) {
                                                      t.forEach(function (t) {
                                                          i.labels.indexOf(
                                                              t.x
                                                          ) < 0 &&
                                                              t.x &&
                                                              i.labels.push(
                                                                  t.x
                                                              );
                                                      });
                                                  }),
                                                  (i.labels = Array.from(
                                                      new Set(
                                                          i.labels.map(
                                                              JSON.stringify
                                                          )
                                                      ),
                                                      JSON.parse
                                                  ))),
                                              e.xaxis.convertedCatToNumeric &&
                                                  (new D(
                                                      e
                                                  ).convertCatToNumericXaxis(
                                                      e,
                                                      this.ctx,
                                                      i.seriesX[0]
                                                  ),
                                                  this._generateExternalLabels(
                                                      t
                                                  )))
                                            : this._generateExternalLabels(t);
                                    },
                                },
                                {
                                    key: "_generateExternalLabels",
                                    value: function (t) {
                                        var e = this.w.globals,
                                            i = this.w.config,
                                            a = [];
                                        if (e.axisCharts) {
                                            if (e.series.length > 0)
                                                if (this.isFormatXY())
                                                    for (
                                                        var r = i.series.map(
                                                                function (
                                                                    t,
                                                                    e
                                                                ) {
                                                                    return t.data.filter(
                                                                        function (
                                                                            t,
                                                                            e,
                                                                            i
                                                                        ) {
                                                                            return (
                                                                                i.findIndex(
                                                                                    function (
                                                                                        e
                                                                                    ) {
                                                                                        return (
                                                                                            e.x ===
                                                                                            t.x
                                                                                        );
                                                                                    }
                                                                                ) ===
                                                                                e
                                                                            );
                                                                        }
                                                                    );
                                                                }
                                                            ),
                                                            s = r.reduce(
                                                                function (
                                                                    t,
                                                                    e,
                                                                    i,
                                                                    a
                                                                ) {
                                                                    return a[t]
                                                                        .length >
                                                                        e.length
                                                                        ? t
                                                                        : i;
                                                                },
                                                                0
                                                            ),
                                                            n = 0;
                                                        n < r[s].length;
                                                        n++
                                                    )
                                                        a.push(n + 1);
                                                else
                                                    for (
                                                        var o = 0;
                                                        o <
                                                        e.series[
                                                            e
                                                                .maxValsInArrayIndex
                                                        ].length;
                                                        o++
                                                    )
                                                        a.push(o + 1);
                                            e.seriesX = [];
                                            for (var l = 0; l < t.length; l++)
                                                e.seriesX.push(a);
                                            e.isXNumeric = !0;
                                        }
                                        if (0 === a.length) {
                                            a = e.axisCharts
                                                ? []
                                                : e.series.map(function (t, e) {
                                                      return e + 1;
                                                  });
                                            for (var c = 0; c < t.length; c++)
                                                e.seriesX.push(a);
                                        }
                                        (e.labels = a),
                                            i.xaxis.convertedCatToNumeric &&
                                                (e.categoryLabels = a.map(
                                                    function (t) {
                                                        return i.xaxis.labels.formatter(
                                                            t
                                                        );
                                                    }
                                                )),
                                            (e.noLabelsProvided = !0);
                                    },
                                },
                                {
                                    key: "parseData",
                                    value: function (t) {
                                        var e = this.w,
                                            i = e.config,
                                            a = e.globals;
                                        if (
                                            (this.excludeCollapsedSeriesInYAxis(),
                                            (this.fallbackToCategory = !1),
                                            this.ctx.core.resetGlobals(),
                                            this.ctx.core.isMultipleY(),
                                            a.axisCharts
                                                ? (this.parseDataAxisCharts(t),
                                                  this.coreUtils.getLargestSeries())
                                                : this.parseDataNonAxisCharts(
                                                      t
                                                  ),
                                            i.chart.stacked)
                                        ) {
                                            var r = new V(this.ctx);
                                            a.series =
                                                r.setNullSeriesToZeroValues(
                                                    a.series
                                                );
                                        }
                                        this.coreUtils.getSeriesTotals(),
                                            a.axisCharts &&
                                                (a.stackedSeriesTotals =
                                                    this.coreUtils.getStackedSeriesTotals()),
                                            this.coreUtils.getPercentSeries(),
                                            a.dataFormatXNumeric ||
                                                (a.isXNumeric &&
                                                    ("numeric" !==
                                                        i.xaxis.type ||
                                                        0 !== i.labels.length ||
                                                        0 !==
                                                            i.xaxis.categories
                                                                .length)) ||
                                                this.handleExternalLabelsData(
                                                    t
                                                );
                                        for (
                                            var s =
                                                    this.coreUtils.getCategoryLabels(
                                                        a.labels
                                                    ),
                                                n = 0;
                                            n < s.length;
                                            n++
                                        )
                                            if (Array.isArray(s[n])) {
                                                a.isMultiLineX = !0;
                                                break;
                                            }
                                    },
                                },
                                {
                                    key: "excludeCollapsedSeriesInYAxis",
                                    value: function () {
                                        var t = this,
                                            e = this.w;
                                        e.globals.ignoreYAxisIndexes =
                                            e.globals.collapsedSeries.map(
                                                function (i, a) {
                                                    if (
                                                        t.w.globals
                                                            .isMultipleYAxis &&
                                                        !e.config.chart.stacked
                                                    )
                                                        return i.index;
                                                }
                                            );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    j = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "getLabel",
                                    value: function (t, e, i, a) {
                                        var r,
                                            s,
                                            n =
                                                arguments.length > 4 &&
                                                void 0 !== arguments[4]
                                                    ? arguments[4]
                                                    : [],
                                            o =
                                                arguments.length > 5 &&
                                                void 0 !== arguments[5]
                                                    ? arguments[5]
                                                    : "12px",
                                            l =
                                                !(
                                                    arguments.length > 6 &&
                                                    void 0 !== arguments[6]
                                                ) || arguments[6],
                                            c = this.w,
                                            h = void 0 === t[a] ? "" : t[a],
                                            d = h,
                                            u = c.globals.xLabelFormatter,
                                            f = c.config.xaxis.labels.formatter,
                                            g = !1,
                                            p = new O(this.ctx),
                                            x = h;
                                        l &&
                                            ((d = p.xLabelFormat(u, h, x, {
                                                i: a,
                                                dateFormatter: new I(this.ctx)
                                                    .formatDate,
                                                w: c,
                                            })),
                                            void 0 !== f &&
                                                (d = f(h, t[a], {
                                                    i: a,
                                                    dateFormatter: new I(
                                                        this.ctx
                                                    ).formatDate,
                                                    w: c,
                                                }))),
                                            e.length > 0
                                                ? ((r = e[a].unit),
                                                  (s = null),
                                                  e.forEach(function (t) {
                                                      "month" === t.unit
                                                          ? (s = "year")
                                                          : "day" === t.unit
                                                          ? (s = "month")
                                                          : "hour" === t.unit
                                                          ? (s = "day")
                                                          : "minute" ===
                                                                t.unit &&
                                                            (s = "hour");
                                                  }),
                                                  (g = s === r),
                                                  (i = e[a].position),
                                                  (d = e[a].value))
                                                : "datetime" ===
                                                      c.config.xaxis.type &&
                                                  void 0 === f &&
                                                  (d = ""),
                                            void 0 === d && (d = ""),
                                            (d = Array.isArray(d)
                                                ? d
                                                : d.toString());
                                        var m,
                                            b = new k(this.ctx);
                                        m =
                                            c.globals.rotateXLabels && l
                                                ? b.getTextRects(
                                                      d,
                                                      parseInt(o, 10),
                                                      null,
                                                      "rotate(".concat(
                                                          c.config.xaxis.labels
                                                              .rotate,
                                                          " 0 0)"
                                                      ),
                                                      !1
                                                  )
                                                : b.getTextRects(
                                                      d,
                                                      parseInt(o, 10)
                                                  );
                                        var v =
                                            !c.config.xaxis.labels
                                                .showDuplicates &&
                                            this.ctx.timeScale;
                                        return (
                                            !Array.isArray(d) &&
                                                (0 === d.indexOf("NaN") ||
                                                    0 ===
                                                        d
                                                            .toLowerCase()
                                                            .indexOf(
                                                                "invalid"
                                                            ) ||
                                                    d
                                                        .toLowerCase()
                                                        .indexOf("infinity") >=
                                                        0 ||
                                                    (n.indexOf(d) >= 0 && v)) &&
                                                (d = ""),
                                            {
                                                x: i,
                                                text: d,
                                                textRect: m,
                                                isBold: g,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "checkLabelBasedOnTickamount",
                                    value: function (t, e, i) {
                                        var a = this.w,
                                            r = a.config.xaxis.tickAmount;
                                        return (
                                            "dataPoints" === r &&
                                                (r = Math.round(
                                                    a.globals.gridWidth / 120
                                                )),
                                            r > i ||
                                                t % Math.round(i / (r + 1)) ==
                                                    0 ||
                                                (e.text = ""),
                                            e
                                        );
                                    },
                                },
                                {
                                    key: "checkForOverflowingLabels",
                                    value: function (t, e, i, a, r) {
                                        var s = this.w;
                                        if (
                                            (0 === t &&
                                                s.globals
                                                    .skipFirstTimelinelabel &&
                                                (e.text = ""),
                                            t === i - 1 &&
                                                s.globals
                                                    .skipLastTimelinelabel &&
                                                (e.text = ""),
                                            s.config.xaxis.labels
                                                .hideOverlappingLabels &&
                                                a.length > 0)
                                        ) {
                                            var n = r[r.length - 1];
                                            e.x <
                                                n.textRect.width /
                                                    (s.globals.rotateXLabels
                                                        ? Math.abs(
                                                              s.config.xaxis
                                                                  .labels.rotate
                                                          ) / 12
                                                        : 1.01) +
                                                    n.x && (e.text = "");
                                        }
                                        return e;
                                    },
                                },
                                {
                                    key: "checkForReversedLabels",
                                    value: function (t, e) {
                                        var i = this.w;
                                        return (
                                            i.config.yaxis[t] &&
                                                i.config.yaxis[t].reversed &&
                                                e.reverse(),
                                            e
                                        );
                                    },
                                },
                                {
                                    key: "isYAxisHidden",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new A(this.ctx);
                                        return (
                                            !e.config.yaxis[t].show ||
                                            (!e.config.yaxis[t]
                                                .showForNullSeries &&
                                                i.isSeriesNull(t) &&
                                                -1 ===
                                                    e.globals.collapsedSeriesIndices.indexOf(
                                                        t
                                                    ))
                                        );
                                    },
                                },
                                {
                                    key: "getYAxisForeColor",
                                    value: function (t, e) {
                                        var i = this.w;
                                        return (
                                            Array.isArray(t) &&
                                                i.globals.yAxisScale[e] &&
                                                this.ctx.theme.pushExtraColors(
                                                    t,
                                                    i.globals.yAxisScale[e]
                                                        .result.length,
                                                    !1
                                                ),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "drawYAxisTicks",
                                    value: function (t, e, i, a, r, s, n) {
                                        var o = this.w,
                                            l = new k(this.ctx),
                                            c = o.globals.translateY;
                                        if (a.show && e > 0) {
                                            !0 === o.config.yaxis[r].opposite &&
                                                (t += a.width);
                                            for (var h = e; h >= 0; h--) {
                                                var d =
                                                    c +
                                                    e / 10 +
                                                    o.config.yaxis[r].labels
                                                        .offsetY -
                                                    1;
                                                o.globals.isBarHorizontal &&
                                                    (d = s * h),
                                                    "heatmap" ===
                                                        o.config.chart.type &&
                                                        (d += s / 2);
                                                var u = l.drawLine(
                                                    t +
                                                        i.offsetX -
                                                        a.width +
                                                        a.offsetX,
                                                    d + a.offsetY,
                                                    t + i.offsetX + a.offsetX,
                                                    d + a.offsetY,
                                                    a.color
                                                );
                                                n.add(u), (c += s);
                                            }
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    _ = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "scaleSvgNode",
                                    value: function (t, e) {
                                        var i = parseFloat(
                                                t.getAttributeNS(null, "width")
                                            ),
                                            a = parseFloat(
                                                t.getAttributeNS(null, "height")
                                            );
                                        t.setAttributeNS(null, "width", i * e),
                                            t.setAttributeNS(
                                                null,
                                                "height",
                                                a * e
                                            ),
                                            t.setAttributeNS(
                                                null,
                                                "viewBox",
                                                "0 0 " + i + " " + a
                                            );
                                    },
                                },
                                {
                                    key: "fixSvgStringForIe11",
                                    value: function (t) {
                                        if (!v.isIE11())
                                            return t.replace(
                                                /&nbsp;/g,
                                                "&#160;"
                                            );
                                        var e = 0,
                                            i = t.replace(
                                                /xmlns="http:\/\/www.w3.org\/2000\/svg"/g,
                                                function (t) {
                                                    return 2 == ++e
                                                        ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"'
                                                        : t;
                                                }
                                            );
                                        return (i = i.replace(
                                            /xmlns:NS\d+=""/g,
                                            ""
                                        )).replace(/NS\d+:(\w+:\w+=")/g, "$1");
                                    },
                                },
                                {
                                    key: "getSvgString",
                                    value: function (t) {
                                        null == t && (t = 1);
                                        var e = this.w.globals.dom.Paper.svg();
                                        if (1 !== t) {
                                            var i =
                                                this.w.globals.dom.Paper.node.cloneNode(
                                                    !0
                                                );
                                            this.scaleSvgNode(i, t),
                                                (e =
                                                    new XMLSerializer().serializeToString(
                                                        i
                                                    ));
                                        }
                                        return this.fixSvgStringForIe11(e);
                                    },
                                },
                                {
                                    key: "cleanup",
                                    value: function () {
                                        var t = this.w,
                                            e =
                                                t.globals.dom.baseEl.getElementsByClassName(
                                                    "apexcharts-xcrosshairs"
                                                ),
                                            i =
                                                t.globals.dom.baseEl.getElementsByClassName(
                                                    "apexcharts-ycrosshairs"
                                                ),
                                            a =
                                                t.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-zoom-rect, .apexcharts-selection-rect"
                                                );
                                        Array.prototype.forEach.call(
                                            a,
                                            function (t) {
                                                t.setAttribute("width", 0);
                                            }
                                        ),
                                            e &&
                                                e[0] &&
                                                (e[0].setAttribute("x", -500),
                                                e[0].setAttribute("x1", -500),
                                                e[0].setAttribute("x2", -500)),
                                            i &&
                                                i[0] &&
                                                (i[0].setAttribute("y", -100),
                                                i[0].setAttribute("y1", -100),
                                                i[0].setAttribute("y2", -100));
                                    },
                                },
                                {
                                    key: "svgUrl",
                                    value: function () {
                                        this.cleanup();
                                        var t = this.getSvgString(),
                                            e = new Blob([t], {
                                                type: "image/svg+xml;charset=utf-8",
                                            });
                                        return URL.createObjectURL(e);
                                    },
                                },
                                {
                                    key: "dataURI",
                                    value: function (t) {
                                        var e = this;
                                        return new Promise(function (i) {
                                            var a = e.w,
                                                r = t
                                                    ? t.scale ||
                                                      t.width /
                                                          a.globals.svgWidth
                                                    : 1;
                                            e.cleanup();
                                            var s =
                                                document.createElement(
                                                    "canvas"
                                                );
                                            (s.width = a.globals.svgWidth * r),
                                                (s.height =
                                                    parseInt(
                                                        a.globals.dom.elWrap
                                                            .style.height,
                                                        10
                                                    ) * r);
                                            var n =
                                                    "transparent" ===
                                                    a.config.chart.background
                                                        ? "#fff"
                                                        : a.config.chart
                                                              .background,
                                                o = s.getContext("2d");
                                            (o.fillStyle = n),
                                                o.fillRect(
                                                    0,
                                                    0,
                                                    s.width * r,
                                                    s.height * r
                                                );
                                            var l = e.getSvgString(r);
                                            if (window.canvg && v.isIE11()) {
                                                var c =
                                                    window.canvg.Canvg.fromString(
                                                        o,
                                                        l,
                                                        {
                                                            ignoreClear: !0,
                                                            ignoreDimensions:
                                                                !0,
                                                        }
                                                    );
                                                c.start();
                                                var h = s.msToBlob();
                                                c.stop(), i({ blob: h });
                                            } else {
                                                var d =
                                                        "data:image/svg+xml," +
                                                        encodeURIComponent(l),
                                                    u = new Image();
                                                (u.crossOrigin = "anonymous"),
                                                    (u.onload = function () {
                                                        if (
                                                            (o.drawImage(
                                                                u,
                                                                0,
                                                                0
                                                            ),
                                                            s.msToBlob)
                                                        ) {
                                                            var t =
                                                                s.msToBlob();
                                                            i({ blob: t });
                                                        } else {
                                                            var e =
                                                                s.toDataURL(
                                                                    "image/png"
                                                                );
                                                            i({ imgURI: e });
                                                        }
                                                    }),
                                                    (u.src = d);
                                            }
                                        });
                                    },
                                },
                                {
                                    key: "exportToSVG",
                                    value: function () {
                                        this.triggerDownload(
                                            this.svgUrl(),
                                            this.w.config.chart.toolbar.export
                                                .svg.filename,
                                            ".svg"
                                        );
                                    },
                                },
                                {
                                    key: "exportToPng",
                                    value: function () {
                                        var t = this;
                                        this.dataURI().then(function (e) {
                                            var i = e.imgURI,
                                                a = e.blob;
                                            a
                                                ? navigator.msSaveOrOpenBlob(
                                                      a,
                                                      t.w.globals.chartID +
                                                          ".png"
                                                  )
                                                : t.triggerDownload(
                                                      i,
                                                      t.w.config.chart.toolbar
                                                          .export.png.filename,
                                                      ".png"
                                                  );
                                        });
                                    },
                                },
                                {
                                    key: "exportToCSV",
                                    value: function (t) {
                                        var e = this,
                                            i = t.series,
                                            a = t.fileName,
                                            r = t.columnDelimiter,
                                            s = void 0 === r ? "," : r,
                                            n = t.lineDelimiter,
                                            o = void 0 === n ? "\n" : n,
                                            l = this.w;
                                        i || (i = l.config.series);
                                        var c = [],
                                            h = [],
                                            d = "",
                                            u = l.globals.series.map(function (
                                                t,
                                                e
                                            ) {
                                                return -1 ===
                                                    l.globals.collapsedSeriesIndices.indexOf(
                                                        e
                                                    )
                                                    ? t
                                                    : [];
                                            }),
                                            f = Math.max.apply(
                                                Math,
                                                x(
                                                    i.map(function (t) {
                                                        return t.data
                                                            ? t.data.length
                                                            : 0;
                                                    })
                                                )
                                            ),
                                            g = new G(this.ctx),
                                            p = new j(this.ctx),
                                            m = function (t) {
                                                var i = "";
                                                if (l.globals.axisCharts) {
                                                    if (
                                                        "category" ===
                                                            l.config.xaxis
                                                                .type ||
                                                        l.config.xaxis
                                                            .convertedCatToNumeric
                                                    )
                                                        if (
                                                            l.globals
                                                                .isBarHorizontal
                                                        ) {
                                                            var a =
                                                                    l.globals
                                                                        .yLabelFormatters[0],
                                                                r = new V(
                                                                    e.ctx
                                                                ).getActiveConfigSeriesIndex();
                                                            i = a(
                                                                l.globals
                                                                    .labels[t],
                                                                {
                                                                    seriesIndex:
                                                                        r,
                                                                    dataPointIndex:
                                                                        t,
                                                                    w: l,
                                                                }
                                                            );
                                                        } else
                                                            i = p.getLabel(
                                                                l.globals
                                                                    .labels,
                                                                l.globals
                                                                    .timescaleLabels,
                                                                0,
                                                                t
                                                            ).text;
                                                    "datetime" ===
                                                        l.config.xaxis.type &&
                                                        (l.config.xaxis
                                                            .categories.length
                                                            ? (i =
                                                                  l.config.xaxis
                                                                      .categories[
                                                                      t
                                                                  ])
                                                            : l.config.labels
                                                                  .length &&
                                                              (i =
                                                                  l.config
                                                                      .labels[
                                                                      t
                                                                  ]));
                                                } else i = l.config.labels[t];
                                                return (
                                                    Array.isArray(i) &&
                                                        (i = i.join(" ")),
                                                    v.isNumber(i)
                                                        ? i
                                                        : i.split(s).join("")
                                                );
                                            };
                                        c.push(
                                            l.config.chart.toolbar.export.csv
                                                .headerCategory
                                        ),
                                            "boxPlot" === l.config.chart.type
                                                ? (c.push("minimum"),
                                                  c.push("q1"),
                                                  c.push("median"),
                                                  c.push("q3"),
                                                  c.push("maximum"))
                                                : "candlestick" ===
                                                  l.config.chart.type
                                                ? (c.push("open"),
                                                  c.push("high"),
                                                  c.push("low"),
                                                  c.push("close"))
                                                : "rangeBar" ===
                                                  l.config.chart.type
                                                ? (c.push("minimum"),
                                                  c.push("maximum"))
                                                : i.map(function (t, e) {
                                                      var i = t.name
                                                          ? t.name
                                                          : "series-".concat(e);
                                                      l.globals.axisCharts &&
                                                          c.push(
                                                              i
                                                                  .split(s)
                                                                  .join("")
                                                                  ? i
                                                                        .split(
                                                                            s
                                                                        )
                                                                        .join(
                                                                            ""
                                                                        )
                                                                  : "series-".concat(
                                                                        e
                                                                    )
                                                          );
                                                  }),
                                            l.globals.axisCharts ||
                                                (c.push(
                                                    l.config.chart.toolbar
                                                        .export.csv.headerValue
                                                ),
                                                h.push(c.join(s))),
                                            i.map(function (t, e) {
                                                l.globals.axisCharts
                                                    ? (function (t, e) {
                                                          if (
                                                              (c.length &&
                                                                  0 === e &&
                                                                  h.push(
                                                                      c.join(s)
                                                                  ),
                                                              t.data)
                                                          ) {
                                                              t.data =
                                                                  (t.data
                                                                      .length &&
                                                                      t.data) ||
                                                                  x(
                                                                      Array(f)
                                                                  ).map(
                                                                      function () {
                                                                          return "";
                                                                      }
                                                                  );
                                                              for (
                                                                  var a = 0;
                                                                  a <
                                                                  t.data.length;
                                                                  a++
                                                              ) {
                                                                  c = [];
                                                                  var r = m(a);
                                                                  if (
                                                                      (r ||
                                                                          (g.isFormatXY()
                                                                              ? (r =
                                                                                    i[
                                                                                        e
                                                                                    ]
                                                                                        .data[
                                                                                        a
                                                                                    ]
                                                                                        .x)
                                                                              : g.isFormat2DArray() &&
                                                                                (r =
                                                                                    i[
                                                                                        e
                                                                                    ]
                                                                                        .data[
                                                                                        a
                                                                                    ]
                                                                                        ? i[
                                                                                              e
                                                                                          ]
                                                                                              .data[
                                                                                              a
                                                                                          ][0]
                                                                                        : "")),
                                                                      0 === e)
                                                                  ) {
                                                                      c.push(
                                                                          ((o =
                                                                              r),
                                                                          "datetime" ===
                                                                              l
                                                                                  .config
                                                                                  .xaxis
                                                                                  .type &&
                                                                          String(
                                                                              o
                                                                          )
                                                                              .length >=
                                                                              10
                                                                              ? l.config.chart.toolbar.export.csv.dateFormatter(
                                                                                    r
                                                                                )
                                                                              : v.isNumber(
                                                                                    r
                                                                                )
                                                                              ? r
                                                                              : r
                                                                                    .split(
                                                                                        s
                                                                                    )
                                                                                    .join(
                                                                                        ""
                                                                                    ))
                                                                      );
                                                                      for (
                                                                          var n = 0;
                                                                          n <
                                                                          l
                                                                              .globals
                                                                              .series
                                                                              .length;
                                                                          n++
                                                                      )
                                                                          g.isFormatXY()
                                                                              ? c.push(
                                                                                    i[
                                                                                        n
                                                                                    ]
                                                                                        .data[
                                                                                        a
                                                                                    ]
                                                                                        .y
                                                                                )
                                                                              : c.push(
                                                                                    u[
                                                                                        n
                                                                                    ][
                                                                                        a
                                                                                    ]
                                                                                );
                                                                  }
                                                                  ("candlestick" ===
                                                                      l.config
                                                                          .chart
                                                                          .type ||
                                                                      (t.type &&
                                                                          "candlestick" ===
                                                                              t.type)) &&
                                                                      (c.pop(),
                                                                      c.push(
                                                                          l
                                                                              .globals
                                                                              .seriesCandleO[
                                                                              e
                                                                          ][a]
                                                                      ),
                                                                      c.push(
                                                                          l
                                                                              .globals
                                                                              .seriesCandleH[
                                                                              e
                                                                          ][a]
                                                                      ),
                                                                      c.push(
                                                                          l
                                                                              .globals
                                                                              .seriesCandleL[
                                                                              e
                                                                          ][a]
                                                                      ),
                                                                      c.push(
                                                                          l
                                                                              .globals
                                                                              .seriesCandleC[
                                                                              e
                                                                          ][a]
                                                                      )),
                                                                      ("boxPlot" ===
                                                                          l
                                                                              .config
                                                                              .chart
                                                                              .type ||
                                                                          (t.type &&
                                                                              "boxPlot" ===
                                                                                  t.type)) &&
                                                                          (c.pop(),
                                                                          c.push(
                                                                              l
                                                                                  .globals
                                                                                  .seriesCandleO[
                                                                                  e
                                                                              ][
                                                                                  a
                                                                              ]
                                                                          ),
                                                                          c.push(
                                                                              l
                                                                                  .globals
                                                                                  .seriesCandleH[
                                                                                  e
                                                                              ][
                                                                                  a
                                                                              ]
                                                                          ),
                                                                          c.push(
                                                                              l
                                                                                  .globals
                                                                                  .seriesCandleM[
                                                                                  e
                                                                              ][
                                                                                  a
                                                                              ]
                                                                          ),
                                                                          c.push(
                                                                              l
                                                                                  .globals
                                                                                  .seriesCandleL[
                                                                                  e
                                                                              ][
                                                                                  a
                                                                              ]
                                                                          ),
                                                                          c.push(
                                                                              l
                                                                                  .globals
                                                                                  .seriesCandleC[
                                                                                  e
                                                                              ][
                                                                                  a
                                                                              ]
                                                                          )),
                                                                      "rangeBar" ===
                                                                          l
                                                                              .config
                                                                              .chart
                                                                              .type &&
                                                                          (c.pop(),
                                                                          c.push(
                                                                              l
                                                                                  .globals
                                                                                  .seriesRangeStart[
                                                                                  e
                                                                              ][
                                                                                  a
                                                                              ]
                                                                          ),
                                                                          c.push(
                                                                              l
                                                                                  .globals
                                                                                  .seriesRangeEnd[
                                                                                  e
                                                                              ][
                                                                                  a
                                                                              ]
                                                                          )),
                                                                      c.length &&
                                                                          h.push(
                                                                              c.join(
                                                                                  s
                                                                              )
                                                                          );
                                                              }
                                                          }
                                                          var o;
                                                      })(t, e)
                                                    : ((c = []).push(
                                                          l.globals.labels[e]
                                                              .split(s)
                                                              .join("")
                                                      ),
                                                      c.push(u[e]),
                                                      h.push(c.join(s)));
                                            }),
                                            (d += h.join(o)),
                                            this.triggerDownload(
                                                "data:text/csv; charset=utf-8," +
                                                    encodeURIComponent(
                                                        "\ufeff" + d
                                                    ),
                                                a ||
                                                    l.config.chart.toolbar
                                                        .export.csv.filename,
                                                ".csv"
                                            );
                                    },
                                },
                                {
                                    key: "triggerDownload",
                                    value: function (t, e, i) {
                                        var a = document.createElement("a");
                                        (a.href = t),
                                            (a.download =
                                                (e || this.w.globals.chartID) +
                                                i),
                                            document.body.appendChild(a),
                                            a.click(),
                                            document.body.removeChild(a);
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    U = (function () {
                        function t(e, i) {
                            o(this, t),
                                (this.ctx = e),
                                (this.elgrid = i),
                                (this.w = e.w);
                            var a = this.w;
                            (this.axesUtils = new j(e)),
                                (this.xaxisLabels = a.globals.labels.slice()),
                                a.globals.timescaleLabels.length > 0 &&
                                    !a.globals.isBarHorizontal &&
                                    (this.xaxisLabels =
                                        a.globals.timescaleLabels.slice()),
                                a.config.xaxis.overwriteCategories &&
                                    (this.xaxisLabels =
                                        a.config.xaxis.overwriteCategories),
                                (this.drawnLabels = []),
                                (this.drawnLabelsRects = []),
                                "top" === a.config.xaxis.position
                                    ? (this.offY = 0)
                                    : (this.offY = a.globals.gridHeight + 1),
                                (this.offY =
                                    this.offY +
                                    a.config.xaxis.axisBorder.offsetY),
                                (this.isCategoryBarHorizontal =
                                    "bar" === a.config.chart.type &&
                                    a.config.plotOptions.bar.horizontal),
                                (this.xaxisFontSize =
                                    a.config.xaxis.labels.style.fontSize),
                                (this.xaxisFontFamily =
                                    a.config.xaxis.labels.style.fontFamily),
                                (this.xaxisForeColors =
                                    a.config.xaxis.labels.style.colors),
                                (this.xaxisBorderWidth =
                                    a.config.xaxis.axisBorder.width),
                                this.isCategoryBarHorizontal &&
                                    (this.xaxisBorderWidth =
                                        a.config.yaxis[0].axisBorder.width.toString()),
                                this.xaxisBorderWidth.indexOf("%") > -1
                                    ? (this.xaxisBorderWidth =
                                          (a.globals.gridWidth *
                                              parseInt(
                                                  this.xaxisBorderWidth,
                                                  10
                                              )) /
                                          100)
                                    : (this.xaxisBorderWidth = parseInt(
                                          this.xaxisBorderWidth,
                                          10
                                      )),
                                (this.xaxisBorderHeight =
                                    a.config.xaxis.axisBorder.height),
                                (this.yaxis = a.config.yaxis[0]);
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawXaxis",
                                    value: function () {
                                        var t = this.w,
                                            e = new k(this.ctx),
                                            i = e.group({
                                                class: "apexcharts-xaxis",
                                                transform: "translate("
                                                    .concat(
                                                        t.config.xaxis.offsetX,
                                                        ", "
                                                    )
                                                    .concat(
                                                        t.config.xaxis.offsetY,
                                                        ")"
                                                    ),
                                            }),
                                            a = e.group({
                                                class: "apexcharts-xaxis-texts-g",
                                                transform: "translate("
                                                    .concat(
                                                        t.globals
                                                            .translateXAxisX,
                                                        ", "
                                                    )
                                                    .concat(
                                                        t.globals
                                                            .translateXAxisY,
                                                        ")"
                                                    ),
                                            });
                                        i.add(a);
                                        for (
                                            var r = [], s = 0;
                                            s < this.xaxisLabels.length;
                                            s++
                                        )
                                            r.push(this.xaxisLabels[s]);
                                        if (
                                            (this.drawXAxisLabelAndGroup(
                                                !0,
                                                e,
                                                a,
                                                r,
                                                t.globals.isXNumeric,
                                                function (t, e) {
                                                    return e;
                                                }
                                            ),
                                            t.globals.hasXaxisGroups)
                                        ) {
                                            var n = t.globals.groups;
                                            r = [];
                                            for (var o = 0; o < n.length; o++)
                                                r.push(n[o].title);
                                            var l = {};
                                            t.config.xaxis.group.style &&
                                                ((l.xaxisFontSize =
                                                    t.config.xaxis.group.style.fontSize),
                                                (l.xaxisFontFamily =
                                                    t.config.xaxis.group.style.fontFamily),
                                                (l.xaxisForeColors =
                                                    t.config.xaxis.group.style.colors),
                                                (l.fontWeight =
                                                    t.config.xaxis.group.style.fontWeight),
                                                (l.cssClass =
                                                    t.config.xaxis.group.style.cssClass)),
                                                this.drawXAxisLabelAndGroup(
                                                    !1,
                                                    e,
                                                    a,
                                                    r,
                                                    !1,
                                                    function (t, e) {
                                                        return n[t].cols * e;
                                                    },
                                                    l
                                                );
                                        }
                                        if (
                                            void 0 !== t.config.xaxis.title.text
                                        ) {
                                            var c = e.group({
                                                    class: "apexcharts-xaxis-title",
                                                }),
                                                h = e.drawText({
                                                    x:
                                                        t.globals.gridWidth /
                                                            2 +
                                                        t.config.xaxis.title
                                                            .offsetX,
                                                    y:
                                                        this.offY +
                                                        parseFloat(
                                                            this.xaxisFontSize
                                                        ) +
                                                        ("bottom" ===
                                                        t.config.xaxis.position
                                                            ? t.globals
                                                                  .xAxisLabelsHeight
                                                            : -t.globals
                                                                  .xAxisLabelsHeight -
                                                              10) +
                                                        t.config.xaxis.title
                                                            .offsetY,
                                                    text: t.config.xaxis.title
                                                        .text,
                                                    textAnchor: "middle",
                                                    fontSize:
                                                        t.config.xaxis.title
                                                            .style.fontSize,
                                                    fontFamily:
                                                        t.config.xaxis.title
                                                            .style.fontFamily,
                                                    fontWeight:
                                                        t.config.xaxis.title
                                                            .style.fontWeight,
                                                    foreColor:
                                                        t.config.xaxis.title
                                                            .style.color,
                                                    cssClass:
                                                        "apexcharts-xaxis-title-text " +
                                                        t.config.xaxis.title
                                                            .style.cssClass,
                                                });
                                            c.add(h), i.add(c);
                                        }
                                        if (t.config.xaxis.axisBorder.show) {
                                            var d =
                                                    t.globals
                                                        .barPadForNumericAxis,
                                                u = e.drawLine(
                                                    t.globals.padHorizontal +
                                                        t.config.xaxis
                                                            .axisBorder
                                                            .offsetX -
                                                        d,
                                                    this.offY,
                                                    this.xaxisBorderWidth + d,
                                                    this.offY,
                                                    t.config.xaxis.axisBorder
                                                        .color,
                                                    0,
                                                    this.xaxisBorderHeight
                                                );
                                            this.elgrid &&
                                            this.elgrid.elGridBorders &&
                                            t.config.grid.show
                                                ? this.elgrid.elGridBorders.add(
                                                      u
                                                  )
                                                : i.add(u);
                                        }
                                        return i;
                                    },
                                },
                                {
                                    key: "drawXAxisLabelAndGroup",
                                    value: function (t, e, i, a, r, s) {
                                        var n,
                                            o = this,
                                            l =
                                                arguments.length > 6 &&
                                                void 0 !== arguments[6]
                                                    ? arguments[6]
                                                    : {},
                                            c = [],
                                            h = [],
                                            d = this.w,
                                            u =
                                                l.xaxisFontSize ||
                                                this.xaxisFontSize,
                                            f =
                                                l.xaxisFontFamily ||
                                                this.xaxisFontFamily,
                                            g =
                                                l.xaxisForeColors ||
                                                this.xaxisForeColors,
                                            p =
                                                l.fontWeight ||
                                                d.config.xaxis.labels.style
                                                    .fontWeight,
                                            x =
                                                l.cssClass ||
                                                d.config.xaxis.labels.style
                                                    .cssClass,
                                            m = d.globals.padHorizontal,
                                            b = a.length,
                                            v =
                                                "category" ===
                                                d.config.xaxis.type
                                                    ? d.globals.dataPoints
                                                    : b;
                                        if ((0 === v && b > v && (v = b), r)) {
                                            var y = v > 1 ? v - 1 : v;
                                            (n = d.globals.gridWidth / y),
                                                (m =
                                                    m +
                                                    s(0, n) / 2 +
                                                    d.config.xaxis.labels
                                                        .offsetX);
                                        } else
                                            (n = d.globals.gridWidth / v),
                                                (m =
                                                    m +
                                                    s(0, n) +
                                                    d.config.xaxis.labels
                                                        .offsetX);
                                        for (
                                            var w = function (r) {
                                                    var l =
                                                        m -
                                                        s(r, n) / 2 +
                                                        d.config.xaxis.labels
                                                            .offsetX;
                                                    0 === r &&
                                                        1 === b &&
                                                        n / 2 === m &&
                                                        1 === v &&
                                                        (l =
                                                            d.globals
                                                                .gridWidth / 2);
                                                    var y =
                                                            o.axesUtils.getLabel(
                                                                a,
                                                                d.globals
                                                                    .timescaleLabels,
                                                                l,
                                                                r,
                                                                c,
                                                                u,
                                                                t
                                                            ),
                                                        w = 28;
                                                    if (
                                                        (d.globals
                                                            .rotateXLabels &&
                                                            t &&
                                                            (w = 22),
                                                        d.config.xaxis.title
                                                            .text &&
                                                            "top" ===
                                                                d.config.xaxis
                                                                    .position &&
                                                            (w +=
                                                                parseFloat(
                                                                    d.config
                                                                        .xaxis
                                                                        .title
                                                                        .style
                                                                        .fontSize
                                                                ) + 2),
                                                        t ||
                                                            (w =
                                                                w +
                                                                parseFloat(u) +
                                                                (d.globals
                                                                    .xAxisLabelsHeight -
                                                                    d.globals
                                                                        .xAxisGroupLabelsHeight) +
                                                                (d.globals
                                                                    .rotateXLabels
                                                                    ? 10
                                                                    : 0)),
                                                        (y =
                                                            void 0 !==
                                                                d.config.xaxis
                                                                    .tickAmount &&
                                                            "dataPoints" !==
                                                                d.config.xaxis
                                                                    .tickAmount &&
                                                            "datetime" !==
                                                                d.config.xaxis
                                                                    .type
                                                                ? o.axesUtils.checkLabelBasedOnTickamount(
                                                                      r,
                                                                      y,
                                                                      b
                                                                  )
                                                                : o.axesUtils.checkForOverflowingLabels(
                                                                      r,
                                                                      y,
                                                                      b,
                                                                      c,
                                                                      h
                                                                  )),
                                                        d.config.xaxis.labels
                                                            .show)
                                                    ) {
                                                        var k = e.drawText({
                                                            x: y.x,
                                                            y:
                                                                o.offY +
                                                                d.config.xaxis
                                                                    .labels
                                                                    .offsetY +
                                                                w -
                                                                ("top" ===
                                                                d.config.xaxis
                                                                    .position
                                                                    ? d.globals
                                                                          .xAxisHeight +
                                                                      d.config
                                                                          .xaxis
                                                                          .axisTicks
                                                                          .height -
                                                                      2
                                                                    : 0),
                                                            text: y.text,
                                                            textAnchor:
                                                                "middle",
                                                            fontWeight: y.isBold
                                                                ? 600
                                                                : p,
                                                            fontSize: u,
                                                            fontFamily: f,
                                                            foreColor:
                                                                Array.isArray(g)
                                                                    ? t &&
                                                                      d.config
                                                                          .xaxis
                                                                          .convertedCatToNumeric
                                                                        ? g[
                                                                              d
                                                                                  .globals
                                                                                  .minX +
                                                                                  r -
                                                                                  1
                                                                          ]
                                                                        : g[r]
                                                                    : g,
                                                            isPlainText: !1,
                                                            cssClass:
                                                                (t
                                                                    ? "apexcharts-xaxis-label "
                                                                    : "apexcharts-xaxis-group-label ") +
                                                                x,
                                                        });
                                                        if (
                                                            (i.add(k),
                                                            k.on(
                                                                "click",
                                                                function (t) {
                                                                    if (
                                                                        "function" ==
                                                                        typeof d
                                                                            .config
                                                                            .chart
                                                                            .events
                                                                            .xAxisLabelClick
                                                                    ) {
                                                                        var e =
                                                                            Object.assign(
                                                                                {},
                                                                                d,
                                                                                {
                                                                                    labelIndex:
                                                                                        r,
                                                                                }
                                                                            );
                                                                        d.config.chart.events.xAxisLabelClick(
                                                                            t,
                                                                            o.ctx,
                                                                            e
                                                                        );
                                                                    }
                                                                }
                                                            ),
                                                            t)
                                                        ) {
                                                            var A =
                                                                document.createElementNS(
                                                                    d.globals
                                                                        .SVGNS,
                                                                    "title"
                                                                );
                                                            (A.textContent =
                                                                Array.isArray(
                                                                    y.text
                                                                )
                                                                    ? y.text.join(
                                                                          " "
                                                                      )
                                                                    : y.text),
                                                                k.node.appendChild(
                                                                    A
                                                                ),
                                                                "" !== y.text &&
                                                                    (c.push(
                                                                        y.text
                                                                    ),
                                                                    h.push(y));
                                                        }
                                                    }
                                                    r < b - 1 &&
                                                        (m += s(r + 1, n));
                                                },
                                                k = 0;
                                            k <= b - 1;
                                            k++
                                        )
                                            w(k);
                                    },
                                },
                                {
                                    key: "drawXaxisInversed",
                                    value: function (t) {
                                        var e,
                                            i,
                                            a = this,
                                            r = this.w,
                                            s = new k(this.ctx),
                                            n = r.config.yaxis[0].opposite
                                                ? r.globals.translateYAxisX[t]
                                                : 0,
                                            o = s.group({
                                                class: "apexcharts-yaxis apexcharts-xaxis-inversed",
                                                rel: t,
                                            }),
                                            l = s.group({
                                                class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
                                                transform:
                                                    "translate(" + n + ", 0)",
                                            });
                                        o.add(l);
                                        var c = [];
                                        if (r.config.yaxis[t].show)
                                            for (
                                                var h = 0;
                                                h < this.xaxisLabels.length;
                                                h++
                                            )
                                                c.push(this.xaxisLabels[h]);
                                        (e = r.globals.gridHeight / c.length),
                                            (i = -e / 2.2);
                                        var d = r.globals.yLabelFormatters[0],
                                            u = r.config.yaxis[0].labels;
                                        if (u.show)
                                            for (
                                                var f = function (n) {
                                                        var o =
                                                            void 0 === c[n]
                                                                ? ""
                                                                : c[n];
                                                        o = d(o, {
                                                            seriesIndex: t,
                                                            dataPointIndex: n,
                                                            w: r,
                                                        });
                                                        var h =
                                                                a.axesUtils.getYAxisForeColor(
                                                                    u.style
                                                                        .colors,
                                                                    t
                                                                ),
                                                            f = 0;
                                                        Array.isArray(o) &&
                                                            (f =
                                                                (o.length / 2) *
                                                                parseInt(
                                                                    u.style
                                                                        .fontSize,
                                                                    10
                                                                ));
                                                        var g = u.offsetX - 15,
                                                            p = "end";
                                                        a.yaxis.opposite &&
                                                            (p = "start"),
                                                            "left" ===
                                                            r.config.yaxis[0]
                                                                .labels.align
                                                                ? ((g =
                                                                      u.offsetX),
                                                                  (p = "start"))
                                                                : "center" ===
                                                                  r.config
                                                                      .yaxis[0]
                                                                      .labels
                                                                      .align
                                                                ? ((g =
                                                                      u.offsetX),
                                                                  (p =
                                                                      "middle"))
                                                                : "right" ===
                                                                      r.config
                                                                          .yaxis[0]
                                                                          .labels
                                                                          .align &&
                                                                  (p = "end");
                                                        var x = s.drawText({
                                                            x: g,
                                                            y:
                                                                i +
                                                                e +
                                                                u.offsetY -
                                                                f,
                                                            text: o,
                                                            textAnchor: p,
                                                            foreColor:
                                                                Array.isArray(h)
                                                                    ? h[n]
                                                                    : h,
                                                            fontSize:
                                                                u.style
                                                                    .fontSize,
                                                            fontFamily:
                                                                u.style
                                                                    .fontFamily,
                                                            fontWeight:
                                                                u.style
                                                                    .fontWeight,
                                                            isPlainText: !1,
                                                            cssClass:
                                                                "apexcharts-yaxis-label " +
                                                                u.style
                                                                    .cssClass,
                                                            maxWidth:
                                                                u.maxWidth,
                                                        });
                                                        l.add(x),
                                                            x.on(
                                                                "click",
                                                                function (t) {
                                                                    if (
                                                                        "function" ==
                                                                        typeof r
                                                                            .config
                                                                            .chart
                                                                            .events
                                                                            .xAxisLabelClick
                                                                    ) {
                                                                        var e =
                                                                            Object.assign(
                                                                                {},
                                                                                r,
                                                                                {
                                                                                    labelIndex:
                                                                                        n,
                                                                                }
                                                                            );
                                                                        r.config.chart.events.xAxisLabelClick(
                                                                            t,
                                                                            a.ctx,
                                                                            e
                                                                        );
                                                                    }
                                                                }
                                                            );
                                                        var m =
                                                            document.createElementNS(
                                                                r.globals.SVGNS,
                                                                "title"
                                                            );
                                                        if (
                                                            ((m.textContent =
                                                                Array.isArray(o)
                                                                    ? o.join(
                                                                          " "
                                                                      )
                                                                    : o),
                                                            x.node.appendChild(
                                                                m
                                                            ),
                                                            0 !==
                                                                r.config.yaxis[
                                                                    t
                                                                ].labels.rotate)
                                                        ) {
                                                            var b =
                                                                s.rotateAroundCenter(
                                                                    x.node
                                                                );
                                                            x.node.setAttribute(
                                                                "transform",
                                                                "rotate("
                                                                    .concat(
                                                                        r.config
                                                                            .yaxis[
                                                                            t
                                                                        ].labels
                                                                            .rotate,
                                                                        " 0 "
                                                                    )
                                                                    .concat(
                                                                        b.y,
                                                                        ")"
                                                                    )
                                                            );
                                                        }
                                                        i += e;
                                                    },
                                                    g = 0;
                                                g <= c.length - 1;
                                                g++
                                            )
                                                f(g);
                                        if (
                                            void 0 !==
                                            r.config.yaxis[0].title.text
                                        ) {
                                            var p = s.group({
                                                    class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
                                                    transform:
                                                        "translate(" +
                                                        n +
                                                        ", 0)",
                                                }),
                                                x = s.drawText({
                                                    x: r.config.yaxis[0].title
                                                        .offsetX,
                                                    y:
                                                        r.globals.gridHeight /
                                                            2 +
                                                        r.config.yaxis[0].title
                                                            .offsetY,
                                                    text: r.config.yaxis[0]
                                                        .title.text,
                                                    textAnchor: "middle",
                                                    foreColor:
                                                        r.config.yaxis[0].title
                                                            .style.color,
                                                    fontSize:
                                                        r.config.yaxis[0].title
                                                            .style.fontSize,
                                                    fontWeight:
                                                        r.config.yaxis[0].title
                                                            .style.fontWeight,
                                                    fontFamily:
                                                        r.config.yaxis[0].title
                                                            .style.fontFamily,
                                                    cssClass:
                                                        "apexcharts-yaxis-title-text " +
                                                        r.config.yaxis[0].title
                                                            .style.cssClass,
                                                });
                                            p.add(x), o.add(p);
                                        }
                                        var m = 0;
                                        this.isCategoryBarHorizontal &&
                                            r.config.yaxis[0].opposite &&
                                            (m = r.globals.gridWidth);
                                        var b = r.config.xaxis.axisBorder;
                                        if (b.show) {
                                            var v = s.drawLine(
                                                r.globals.padHorizontal +
                                                    b.offsetX +
                                                    m,
                                                1 + b.offsetY,
                                                r.globals.padHorizontal +
                                                    b.offsetX +
                                                    m,
                                                r.globals.gridHeight +
                                                    b.offsetY,
                                                b.color,
                                                0
                                            );
                                            this.elgrid &&
                                            this.elgrid.elGridBorders &&
                                            r.config.grid.show
                                                ? this.elgrid.elGridBorders.add(
                                                      v
                                                  )
                                                : o.add(v);
                                        }
                                        return (
                                            r.config.yaxis[0].axisTicks.show &&
                                                this.axesUtils.drawYAxisTicks(
                                                    m,
                                                    c.length,
                                                    r.config.yaxis[0]
                                                        .axisBorder,
                                                    r.config.yaxis[0].axisTicks,
                                                    0,
                                                    e,
                                                    o
                                                ),
                                            o
                                        );
                                    },
                                },
                                {
                                    key: "drawXaxisTicks",
                                    value: function (t, e, i) {
                                        var a = this.w,
                                            r = t;
                                        if (
                                            !(
                                                t < 0 ||
                                                t - 2 > a.globals.gridWidth
                                            )
                                        ) {
                                            var s =
                                                this.offY +
                                                a.config.xaxis.axisTicks
                                                    .offsetY;
                                            if (
                                                ((e =
                                                    e +
                                                    s +
                                                    a.config.xaxis.axisTicks
                                                        .height),
                                                "top" ===
                                                    a.config.xaxis.position &&
                                                    (e =
                                                        s -
                                                        a.config.xaxis.axisTicks
                                                            .height),
                                                a.config.xaxis.axisTicks.show)
                                            ) {
                                                var n = new k(
                                                    this.ctx
                                                ).drawLine(
                                                    t +
                                                        a.config.xaxis.axisTicks
                                                            .offsetX,
                                                    s + a.config.xaxis.offsetY,
                                                    r +
                                                        a.config.xaxis.axisTicks
                                                            .offsetX,
                                                    e + a.config.xaxis.offsetY,
                                                    a.config.xaxis.axisTicks
                                                        .color
                                                );
                                                i.add(n),
                                                    n.node.classList.add(
                                                        "apexcharts-xaxis-tick"
                                                    );
                                            }
                                        }
                                    },
                                },
                                {
                                    key: "getXAxisTicksPositions",
                                    value: function () {
                                        var t = this.w,
                                            e = [],
                                            i = this.xaxisLabels.length,
                                            a = t.globals.padHorizontal;
                                        if (
                                            t.globals.timescaleLabels.length > 0
                                        )
                                            for (var r = 0; r < i; r++)
                                                (a =
                                                    this.xaxisLabels[r]
                                                        .position),
                                                    e.push(a);
                                        else
                                            for (var s = i, n = 0; n < s; n++) {
                                                var o = s;
                                                t.globals.isXNumeric &&
                                                    "bar" !==
                                                        t.config.chart.type &&
                                                    (o -= 1),
                                                    (a +=
                                                        t.globals.gridWidth /
                                                        o),
                                                    e.push(a);
                                            }
                                        return e;
                                    },
                                },
                                {
                                    key: "xAxisLabelCorrections",
                                    value: function () {
                                        var t = this.w,
                                            e = new k(this.ctx),
                                            i =
                                                t.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-xaxis-texts-g"
                                                ),
                                            a =
                                                t.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"
                                                ),
                                            r =
                                                t.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-yaxis-inversed text"
                                                ),
                                            s =
                                                t.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-xaxis-inversed-texts-g text tspan"
                                                );
                                        if (
                                            t.globals.rotateXLabels ||
                                            t.config.xaxis.labels.rotateAlways
                                        )
                                            for (var n = 0; n < a.length; n++) {
                                                var o = e.rotateAroundCenter(
                                                    a[n]
                                                );
                                                (o.y = o.y - 1),
                                                    (o.x = o.x + 1),
                                                    a[n].setAttribute(
                                                        "transform",
                                                        "rotate("
                                                            .concat(
                                                                t.config.xaxis
                                                                    .labels
                                                                    .rotate,
                                                                " "
                                                            )
                                                            .concat(o.x, " ")
                                                            .concat(o.y, ")")
                                                    ),
                                                    a[n].setAttribute(
                                                        "text-anchor",
                                                        "end"
                                                    ),
                                                    i.setAttribute(
                                                        "transform",
                                                        "translate(0, ".concat(
                                                            -10,
                                                            ")"
                                                        )
                                                    );
                                                var l = a[n].childNodes;
                                                t.config.xaxis.labels.trim &&
                                                    Array.prototype.forEach.call(
                                                        l,
                                                        function (i) {
                                                            e.placeTextWithEllipsis(
                                                                i,
                                                                i.textContent,
                                                                t.globals
                                                                    .xAxisLabelsHeight -
                                                                    ("bottom" ===
                                                                    t.config
                                                                        .legend
                                                                        .position
                                                                        ? 20
                                                                        : 10)
                                                            );
                                                        }
                                                    );
                                            }
                                        else
                                            !(function () {
                                                for (
                                                    var i =
                                                            t.globals
                                                                .gridWidth /
                                                            (t.globals.labels
                                                                .length +
                                                                1),
                                                        r = 0;
                                                    r < a.length;
                                                    r++
                                                ) {
                                                    var s = a[r].childNodes;
                                                    t.config.xaxis.labels
                                                        .trim &&
                                                        "datetime" !==
                                                            t.config.xaxis
                                                                .type &&
                                                        Array.prototype.forEach.call(
                                                            s,
                                                            function (t) {
                                                                e.placeTextWithEllipsis(
                                                                    t,
                                                                    t.textContent,
                                                                    i
                                                                );
                                                            }
                                                        );
                                                }
                                            })();
                                        if (r.length > 0) {
                                            var c = r[r.length - 1].getBBox(),
                                                h = r[0].getBBox();
                                            c.x < -20 &&
                                                r[
                                                    r.length - 1
                                                ].parentNode.removeChild(
                                                    r[r.length - 1]
                                                ),
                                                h.x + h.width >
                                                    t.globals.gridWidth &&
                                                    !t.globals
                                                        .isBarHorizontal &&
                                                    r[0].parentNode.removeChild(
                                                        r[0]
                                                    );
                                            for (var d = 0; d < s.length; d++)
                                                e.placeTextWithEllipsis(
                                                    s[d],
                                                    s[d].textContent,
                                                    t.config.yaxis[0].labels
                                                        .maxWidth -
                                                        (t.config.yaxis[0].title
                                                            .text
                                                            ? 2 *
                                                              parseFloat(
                                                                  t.config
                                                                      .yaxis[0]
                                                                      .title
                                                                      .style
                                                                      .fontSize
                                                              )
                                                            : 0) -
                                                        15
                                                );
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    q = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                            var i = this.w;
                            (this.xaxisLabels = i.globals.labels.slice()),
                                (this.axesUtils = new j(e)),
                                (this.isRangeBar =
                                    i.globals.seriesRange.length),
                                i.globals.timescaleLabels.length > 0 &&
                                    (this.xaxisLabels =
                                        i.globals.timescaleLabels.slice());
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawGridArea",
                                    value: function () {
                                        var t =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : null,
                                            e = this.w,
                                            i = new k(this.ctx);
                                        null === t &&
                                            (t = i.group({
                                                class: "apexcharts-grid",
                                            }));
                                        var a = i.drawLine(
                                                e.globals.padHorizontal,
                                                1,
                                                e.globals.padHorizontal,
                                                e.globals.gridHeight,
                                                "transparent"
                                            ),
                                            r = i.drawLine(
                                                e.globals.padHorizontal,
                                                e.globals.gridHeight,
                                                e.globals.gridWidth,
                                                e.globals.gridHeight,
                                                "transparent"
                                            );
                                        return t.add(r), t.add(a), t;
                                    },
                                },
                                {
                                    key: "drawGrid",
                                    value: function () {
                                        var t = null;
                                        return (
                                            this.w.globals.axisCharts &&
                                                ((t = this.renderGrid()),
                                                this.drawGridArea(t.el)),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "createGridMask",
                                    value: function () {
                                        var t = this.w,
                                            e = t.globals,
                                            i = new k(this.ctx),
                                            a = Array.isArray(
                                                t.config.stroke.width
                                            )
                                                ? 0
                                                : t.config.stroke.width;
                                        if (
                                            Array.isArray(t.config.stroke.width)
                                        ) {
                                            var r = 0;
                                            t.config.stroke.width.forEach(
                                                function (t) {
                                                    r = Math.max(r, t);
                                                }
                                            ),
                                                (a = r);
                                        }
                                        (e.dom.elGridRectMask =
                                            document.createElementNS(
                                                e.SVGNS,
                                                "clipPath"
                                            )),
                                            e.dom.elGridRectMask.setAttribute(
                                                "id",
                                                "gridRectMask".concat(e.cuid)
                                            ),
                                            (e.dom.elGridRectMarkerMask =
                                                document.createElementNS(
                                                    e.SVGNS,
                                                    "clipPath"
                                                )),
                                            e.dom.elGridRectMarkerMask.setAttribute(
                                                "id",
                                                "gridRectMarkerMask".concat(
                                                    e.cuid
                                                )
                                            ),
                                            (e.dom.elForecastMask =
                                                document.createElementNS(
                                                    e.SVGNS,
                                                    "clipPath"
                                                )),
                                            e.dom.elForecastMask.setAttribute(
                                                "id",
                                                "forecastMask".concat(e.cuid)
                                            ),
                                            (e.dom.elNonForecastMask =
                                                document.createElementNS(
                                                    e.SVGNS,
                                                    "clipPath"
                                                )),
                                            e.dom.elNonForecastMask.setAttribute(
                                                "id",
                                                "nonForecastMask".concat(e.cuid)
                                            );
                                        var s = t.config.chart.type,
                                            n = 0,
                                            o = 0;
                                        ("bar" === s ||
                                            "rangeBar" === s ||
                                            "candlestick" === s ||
                                            "boxPlot" === s ||
                                            t.globals.comboBarCount > 0) &&
                                            t.globals.isXNumeric &&
                                            !t.globals.isBarHorizontal &&
                                            ((n = t.config.grid.padding.left),
                                            (o = t.config.grid.padding.right),
                                            e.barPadForNumericAxis > n &&
                                                ((n = e.barPadForNumericAxis),
                                                (o = e.barPadForNumericAxis))),
                                            (e.dom.elGridRect = i.drawRect(
                                                -a / 2 - n - 2,
                                                -a / 2,
                                                e.gridWidth + a + o + n + 4,
                                                e.gridHeight + a,
                                                0,
                                                "#fff"
                                            ));
                                        var l =
                                            t.globals.markers.largestSize + 1;
                                        (e.dom.elGridRectMarker = i.drawRect(
                                            2 * -l,
                                            2 * -l,
                                            e.gridWidth + 4 * l,
                                            e.gridHeight + 4 * l,
                                            0,
                                            "#fff"
                                        )),
                                            e.dom.elGridRectMask.appendChild(
                                                e.dom.elGridRect.node
                                            ),
                                            e.dom.elGridRectMarkerMask.appendChild(
                                                e.dom.elGridRectMarker.node
                                            );
                                        var c =
                                            e.dom.baseEl.querySelector("defs");
                                        c.appendChild(e.dom.elGridRectMask),
                                            c.appendChild(e.dom.elForecastMask),
                                            c.appendChild(
                                                e.dom.elNonForecastMask
                                            ),
                                            c.appendChild(
                                                e.dom.elGridRectMarkerMask
                                            );
                                    },
                                },
                                {
                                    key: "_drawGridLines",
                                    value: function (t) {
                                        var e = t.i,
                                            i = t.x1,
                                            a = t.y1,
                                            r = t.x2,
                                            s = t.y2,
                                            n = t.xCount,
                                            o = t.parent,
                                            l = this.w;
                                        if (
                                            !(
                                                (0 === e &&
                                                    l.globals
                                                        .skipFirstTimelinelabel) ||
                                                (e === n - 1 &&
                                                    l.globals
                                                        .skipLastTimelinelabel &&
                                                    !l.config.xaxis.labels
                                                        .formatter) ||
                                                "radar" === l.config.chart.type
                                            )
                                        ) {
                                            l.config.grid.xaxis.lines.show &&
                                                this._drawGridLine({
                                                    i: e,
                                                    x1: i,
                                                    y1: a,
                                                    x2: r,
                                                    y2: s,
                                                    xCount: n,
                                                    parent: o,
                                                });
                                            var c = 0;
                                            if (
                                                l.globals.hasXaxisGroups &&
                                                "between" ===
                                                    l.config.xaxis.tickPlacement
                                            ) {
                                                var h = l.globals.groups;
                                                if (h) {
                                                    for (
                                                        var d = 0, u = 0;
                                                        d < e && u < h.length;
                                                        u++
                                                    )
                                                        d += h[u].cols;
                                                    d === e &&
                                                        (c =
                                                            0.6 *
                                                            l.globals
                                                                .xAxisLabelsHeight);
                                                }
                                            }
                                            new U(this.ctx).drawXaxisTicks(
                                                i,
                                                c,
                                                l.globals.dom.elGraphical
                                            );
                                        }
                                    },
                                },
                                {
                                    key: "_drawGridLine",
                                    value: function (t) {
                                        var e = t.i,
                                            i = t.x1,
                                            a = t.y1,
                                            r = t.x2,
                                            s = t.y2,
                                            n = t.xCount,
                                            o = t.parent,
                                            l = this.w,
                                            c = !1,
                                            h = o.node.classList.contains(
                                                "apexcharts-gridlines-horizontal"
                                            ),
                                            d = l.config.grid.strokeDashArray,
                                            u = l.globals.barPadForNumericAxis;
                                        ((0 === a && 0 === s) ||
                                            (0 === i && 0 === r)) &&
                                            (c = !0),
                                            a === l.globals.gridHeight &&
                                                s === l.globals.gridHeight &&
                                                (c = !0),
                                            !l.globals.isBarHorizontal ||
                                                (0 !== e && e !== n - 1) ||
                                                (c = !0);
                                        var f = new k(this).drawLine(
                                            i - (h ? u : 0),
                                            a,
                                            r + (h ? u : 0),
                                            s,
                                            l.config.grid.borderColor,
                                            d
                                        );
                                        f.node.classList.add(
                                            "apexcharts-gridline"
                                        ),
                                            c && l.config.grid.show
                                                ? this.elGridBorders.add(f)
                                                : o.add(f);
                                    },
                                },
                                {
                                    key: "_drawGridBandRect",
                                    value: function (t) {
                                        var e = t.c,
                                            i = t.x1,
                                            a = t.y1,
                                            r = t.x2,
                                            s = t.y2,
                                            n = t.type,
                                            o = this.w,
                                            l = new k(this.ctx),
                                            c = o.globals.barPadForNumericAxis;
                                        if (
                                            "column" !== n ||
                                            "datetime" !== o.config.xaxis.type
                                        ) {
                                            var h = o.config.grid[n].colors[e],
                                                d = l.drawRect(
                                                    i - ("row" === n ? c : 0),
                                                    a,
                                                    r +
                                                        ("row" === n
                                                            ? 2 * c
                                                            : 0),
                                                    s,
                                                    0,
                                                    h,
                                                    o.config.grid[n].opacity
                                                );
                                            this.elg.add(d),
                                                d.attr(
                                                    "clip-path",
                                                    "url(#gridRectMask".concat(
                                                        o.globals.cuid,
                                                        ")"
                                                    )
                                                ),
                                                d.node.classList.add(
                                                    "apexcharts-grid-".concat(n)
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "_drawXYLines",
                                    value: function (t) {
                                        var e = this,
                                            i = t.xCount,
                                            a = t.tickAmount,
                                            r = this.w;
                                        if (
                                            r.config.grid.xaxis.lines.show ||
                                            r.config.xaxis.axisTicks.show
                                        ) {
                                            var s,
                                                n = r.globals.padHorizontal,
                                                o = r.globals.gridHeight;
                                            r.globals.timescaleLabels.length
                                                ? (function (t) {
                                                      for (
                                                          var a = t.xC,
                                                              r = t.x1,
                                                              s = t.y1,
                                                              n = t.x2,
                                                              o = t.y2,
                                                              l = 0;
                                                          l < a;
                                                          l++
                                                      )
                                                          (r =
                                                              e.xaxisLabels[l]
                                                                  .position),
                                                              (n =
                                                                  e.xaxisLabels[
                                                                      l
                                                                  ].position),
                                                              e._drawGridLines({
                                                                  i: l,
                                                                  x1: r,
                                                                  y1: s,
                                                                  x2: n,
                                                                  y2: o,
                                                                  xCount: i,
                                                                  parent: e.elgridLinesV,
                                                              });
                                                  })({
                                                      xC: i,
                                                      x1: n,
                                                      y1: 0,
                                                      x2: s,
                                                      y2: o,
                                                  })
                                                : (r.globals.isXNumeric &&
                                                      (i =
                                                          r.globals.xAxisScale
                                                              .result.length),
                                                  (function (t) {
                                                      for (
                                                          var a = t.xC,
                                                              s = t.x1,
                                                              n = t.y1,
                                                              o = t.x2,
                                                              l = t.y2,
                                                              c = 0;
                                                          c <
                                                          a +
                                                              (r.globals
                                                                  .isXNumeric
                                                                  ? 0
                                                                  : 1);
                                                          c++
                                                      )
                                                          0 === c &&
                                                              1 === a &&
                                                              1 ===
                                                                  r.globals
                                                                      .dataPoints &&
                                                              (o = s =
                                                                  r.globals
                                                                      .gridWidth /
                                                                  2),
                                                              e._drawGridLines({
                                                                  i: c,
                                                                  x1: s,
                                                                  y1: n,
                                                                  x2: o,
                                                                  y2: l,
                                                                  xCount: i,
                                                                  parent: e.elgridLinesV,
                                                              }),
                                                              (o = s +=
                                                                  r.globals
                                                                      .gridWidth /
                                                                  (r.globals
                                                                      .isXNumeric
                                                                      ? a - 1
                                                                      : a));
                                                  })({
                                                      xC: i,
                                                      x1: n,
                                                      y1: 0,
                                                      x2: s,
                                                      y2: o,
                                                  }));
                                        }
                                        if (r.config.grid.yaxis.lines.show) {
                                            var l = 0,
                                                c = 0,
                                                h = r.globals.gridWidth,
                                                d = a + 1;
                                            this.isRangeBar &&
                                                (d = r.globals.labels.length);
                                            for (
                                                var u = 0;
                                                u <
                                                d + (this.isRangeBar ? 1 : 0);
                                                u++
                                            )
                                                this._drawGridLine({
                                                    i: u,
                                                    xCount:
                                                        d +
                                                        (this.isRangeBar
                                                            ? 1
                                                            : 0),
                                                    x1: 0,
                                                    y1: l,
                                                    x2: h,
                                                    y2: c,
                                                    parent: this.elgridLinesH,
                                                }),
                                                    (c = l +=
                                                        r.globals.gridHeight /
                                                        (this.isRangeBar
                                                            ? d
                                                            : a));
                                        }
                                    },
                                },
                                {
                                    key: "_drawInvertedXYLines",
                                    value: function (t) {
                                        var e = t.xCount,
                                            i = this.w;
                                        if (
                                            i.config.grid.xaxis.lines.show ||
                                            i.config.xaxis.axisTicks.show
                                        )
                                            for (
                                                var a,
                                                    r = i.globals.padHorizontal,
                                                    s = i.globals.gridHeight,
                                                    n = 0;
                                                n < e + 1;
                                                n++
                                            )
                                                i.config.grid.xaxis.lines
                                                    .show &&
                                                    this._drawGridLine({
                                                        i: n,
                                                        xCount: e + 1,
                                                        x1: r,
                                                        y1: 0,
                                                        x2: a,
                                                        y2: s,
                                                        parent: this
                                                            .elgridLinesV,
                                                    }),
                                                    new U(
                                                        this.ctx
                                                    ).drawXaxisTicks(
                                                        r,
                                                        0,
                                                        i.globals.dom
                                                            .elGraphical
                                                    ),
                                                    (a = r =
                                                        r +
                                                        i.globals.gridWidth /
                                                            e +
                                                        0.3);
                                        if (i.config.grid.yaxis.lines.show)
                                            for (
                                                var o = 0,
                                                    l = 0,
                                                    c = i.globals.gridWidth,
                                                    h = 0;
                                                h < i.globals.dataPoints + 1;
                                                h++
                                            )
                                                this._drawGridLine({
                                                    i: h,
                                                    xCount:
                                                        i.globals.dataPoints +
                                                        1,
                                                    x1: 0,
                                                    y1: o,
                                                    x2: c,
                                                    y2: l,
                                                    parent: this.elgridLinesH,
                                                }),
                                                    (l = o +=
                                                        i.globals.gridHeight /
                                                        i.globals.dataPoints);
                                    },
                                },
                                {
                                    key: "renderGrid",
                                    value: function () {
                                        var t = this.w,
                                            e = new k(this.ctx);
                                        (this.elg = e.group({
                                            class: "apexcharts-grid",
                                        })),
                                            (this.elgridLinesH = e.group({
                                                class: "apexcharts-gridlines-horizontal",
                                            })),
                                            (this.elgridLinesV = e.group({
                                                class: "apexcharts-gridlines-vertical",
                                            })),
                                            (this.elGridBorders = e.group({
                                                class: "apexcharts-grid-borders",
                                            })),
                                            this.elg.add(this.elgridLinesH),
                                            this.elg.add(this.elgridLinesV),
                                            t.config.grid.show ||
                                                (this.elgridLinesV.hide(),
                                                this.elgridLinesH.hide(),
                                                this.elGridBorders.hide());
                                        for (
                                            var i,
                                                a = t.globals.yAxisScale.length
                                                    ? t.globals.yAxisScale[0]
                                                          .result.length - 1
                                                    : 5,
                                                r = 0;
                                            r < t.globals.series.length &&
                                            (void 0 !==
                                                t.globals.yAxisScale[r] &&
                                                (a =
                                                    t.globals.yAxisScale[r]
                                                        .result.length - 1),
                                            !(a > 2));
                                            r++
                                        );
                                        return (
                                            !t.globals.isBarHorizontal ||
                                            this.isRangeBar
                                                ? ((i =
                                                      this.xaxisLabels.length),
                                                  this.isRangeBar &&
                                                      t.globals
                                                          .isBarHorizontal &&
                                                      (i--,
                                                      (a =
                                                          t.globals.labels
                                                              .length),
                                                      t.config.xaxis
                                                          .tickAmount &&
                                                          t.config.xaxis.labels
                                                              .formatter &&
                                                          (i =
                                                              t.config.xaxis
                                                                  .tickAmount)),
                                                  this._drawXYLines({
                                                      xCount: i,
                                                      tickAmount: a,
                                                  }))
                                                : ((i = a),
                                                  (a = t.globals.xTickAmount),
                                                  this._drawInvertedXYLines({
                                                      xCount: i,
                                                      tickAmount: a,
                                                  })),
                                            this.drawGridBands(i, a),
                                            {
                                                el: this.elg,
                                                elGridBorders:
                                                    this.elGridBorders,
                                                xAxisTickWidth:
                                                    t.globals.gridWidth / i,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawGridBands",
                                    value: function (t, e) {
                                        var i = this.w;
                                        if (
                                            void 0 !==
                                                i.config.grid.row.colors &&
                                            i.config.grid.row.colors.length > 0
                                        )
                                            for (
                                                var a = 0,
                                                    r =
                                                        i.globals.gridHeight /
                                                        e,
                                                    s = i.globals.gridWidth,
                                                    n = 0,
                                                    o = 0;
                                                n < e;
                                                n++, o++
                                            )
                                                o >=
                                                    i.config.grid.row.colors
                                                        .length && (o = 0),
                                                    this._drawGridBandRect({
                                                        c: o,
                                                        x1: 0,
                                                        y1: a,
                                                        x2: s,
                                                        y2: r,
                                                        type: "row",
                                                    }),
                                                    (a +=
                                                        i.globals.gridHeight /
                                                        e);
                                        if (
                                            void 0 !==
                                                i.config.grid.column.colors &&
                                            i.config.grid.column.colors.length >
                                                0
                                        )
                                            for (
                                                var l =
                                                        i.globals
                                                            .isBarHorizontal ||
                                                        ("category" !==
                                                            i.config.xaxis
                                                                .type &&
                                                            !i.config.xaxis
                                                                .convertedCatToNumeric)
                                                            ? t
                                                            : t - 1,
                                                    c = i.globals.padHorizontal,
                                                    h =
                                                        i.globals
                                                            .padHorizontal +
                                                        i.globals.gridWidth / l,
                                                    d = i.globals.gridHeight,
                                                    u = 0,
                                                    f = 0;
                                                u < t;
                                                u++, f++
                                            )
                                                f >=
                                                    i.config.grid.column.colors
                                                        .length && (f = 0),
                                                    this._drawGridBandRect({
                                                        c: f,
                                                        x1: c,
                                                        y1: 0,
                                                        x2: h,
                                                        y2: d,
                                                        type: "column",
                                                    }),
                                                    (c +=
                                                        i.globals.gridWidth /
                                                        l);
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    $ = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "niceScale",
                                    value: function (t, e) {
                                        var i =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : 10,
                                            a =
                                                arguments.length > 3 &&
                                                void 0 !== arguments[3]
                                                    ? arguments[3]
                                                    : 0,
                                            r =
                                                arguments.length > 4
                                                    ? arguments[4]
                                                    : void 0,
                                            s = this.w,
                                            n = Math.abs(e - t);
                                        if (
                                            ("dataPoints" ===
                                                (i =
                                                    this._adjustTicksForSmallRange(
                                                        i,
                                                        a,
                                                        n
                                                    )) &&
                                                (i = s.globals.dataPoints - 1),
                                            (t === Number.MIN_VALUE &&
                                                0 === e) ||
                                                (!v.isNumber(t) &&
                                                    !v.isNumber(e)) ||
                                                (t === Number.MIN_VALUE &&
                                                    e === -Number.MAX_VALUE))
                                        )
                                            return (
                                                (t = 0),
                                                (e = i),
                                                this.linearScale(t, e, i)
                                            );
                                        t > e
                                            ? (console.warn(
                                                  "axis.min cannot be greater than axis.max"
                                              ),
                                              (e = t + 0.1))
                                            : t === e &&
                                              ((t = 0 === t ? 0 : t - 0.5),
                                              (e = 0 === e ? 2 : e + 0.5));
                                        var o = [];
                                        n < 1 &&
                                            r &&
                                            ("candlestick" ===
                                                s.config.chart.type ||
                                                "candlestick" ===
                                                    s.config.series[a].type ||
                                                "boxPlot" ===
                                                    s.config.chart.type ||
                                                "boxPlot" ===
                                                    s.config.series[a].type ||
                                                s.globals.isRangeData) &&
                                            (e *= 1.01);
                                        var l = i + 1;
                                        l < 2 ? (l = 2) : l > 2 && (l -= 2);
                                        var c = n / l,
                                            h = Math.floor(v.log10(c)),
                                            d = Math.pow(10, h),
                                            u = Math.round(c / d);
                                        u < 1 && (u = 1);
                                        var f = u * d,
                                            g = f * Math.floor(t / f),
                                            p = f * Math.ceil(e / f),
                                            x = g;
                                        if (r && n > 2) {
                                            for (
                                                ;
                                                o.push(x), !((x += f) > p);

                                            );
                                            return {
                                                result: o,
                                                niceMin: o[0],
                                                niceMax: o[o.length - 1],
                                            };
                                        }
                                        var m = t;
                                        (o = []).push(m);
                                        for (
                                            var b = Math.abs(e - t) / i, y = 0;
                                            y <= i;
                                            y++
                                        )
                                            (m += b), o.push(m);
                                        return (
                                            o[o.length - 2] >= e && o.pop(),
                                            {
                                                result: o,
                                                niceMin: o[0],
                                                niceMax: o[o.length - 1],
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "linearScale",
                                    value: function (t, e) {
                                        var i =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : 10,
                                            a =
                                                arguments.length > 3
                                                    ? arguments[3]
                                                    : void 0,
                                            r = Math.abs(e - t);
                                        "dataPoints" ===
                                            (i = this._adjustTicksForSmallRange(
                                                i,
                                                a,
                                                r
                                            )) &&
                                            (i = this.w.globals.dataPoints - 1);
                                        var s = r / i;
                                        i === Number.MAX_VALUE &&
                                            ((i = 10), (s = 1));
                                        for (var n = [], o = t; i >= 0; )
                                            n.push(o), (o += s), (i -= 1);
                                        return {
                                            result: n,
                                            niceMin: n[0],
                                            niceMax: n[n.length - 1],
                                        };
                                    },
                                },
                                {
                                    key: "logarithmicScaleNice",
                                    value: function (t, e, i) {
                                        e <= 0 && (e = Math.max(t, i)),
                                            t <= 0 && (t = Math.min(e, i));
                                        for (
                                            var a = [],
                                                r = Math.ceil(
                                                    Math.log(e) / Math.log(i) +
                                                        1
                                                ),
                                                s = Math.floor(
                                                    Math.log(t) / Math.log(i)
                                                );
                                            s < r;
                                            s++
                                        )
                                            a.push(Math.pow(i, s));
                                        return {
                                            result: a,
                                            niceMin: a[0],
                                            niceMax: a[a.length - 1],
                                        };
                                    },
                                },
                                {
                                    key: "logarithmicScale",
                                    value: function (t, e, i) {
                                        e <= 0 && (e = Math.max(t, i)),
                                            t <= 0 && (t = Math.min(e, i));
                                        for (
                                            var a = [],
                                                r = Math.log(e) / Math.log(i),
                                                s = Math.log(t) / Math.log(i),
                                                n = r - s,
                                                o = Math.round(n),
                                                l = n / o,
                                                c = 0,
                                                h = s;
                                            c < o;
                                            c++, h += l
                                        )
                                            a.push(Math.pow(i, h));
                                        return (
                                            a.push(Math.pow(i, r)),
                                            {
                                                result: a,
                                                niceMin: t,
                                                niceMax: e,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "_adjustTicksForSmallRange",
                                    value: function (t, e, i) {
                                        var a = t;
                                        if (
                                            void 0 !== e &&
                                            this.w.config.yaxis[e].labels
                                                .formatter &&
                                            void 0 ===
                                                this.w.config.yaxis[e]
                                                    .tickAmount
                                        ) {
                                            var r = Number(
                                                this.w.config.yaxis[
                                                    e
                                                ].labels.formatter(1)
                                            );
                                            v.isNumber(r) &&
                                                0 ===
                                                    this.w.globals
                                                        .yValueDecimal &&
                                                (a = Math.ceil(i));
                                        }
                                        return a < t ? a : t;
                                    },
                                },
                                {
                                    key: "setYScaleForIndex",
                                    value: function (t, e, i) {
                                        var a = this.w.globals,
                                            r = this.w.config,
                                            s = a.isBarHorizontal
                                                ? r.xaxis
                                                : r.yaxis[t];
                                        void 0 === a.yAxisScale[t] &&
                                            (a.yAxisScale[t] = []);
                                        var n = Math.abs(i - e);
                                        if (
                                            (s.logarithmic &&
                                                n <= 5 &&
                                                (a.invalidLogScale = !0),
                                            s.logarithmic && n > 5)
                                        )
                                            (a.allSeriesCollapsed = !1),
                                                (a.yAxisScale[t] =
                                                    this.logarithmicScale(
                                                        e,
                                                        i,
                                                        s.logBase
                                                    )),
                                                (a.yAxisScale[t] =
                                                    s.forceNiceScale
                                                        ? this.logarithmicScaleNice(
                                                              e,
                                                              i,
                                                              s.logBase
                                                          )
                                                        : this.logarithmicScale(
                                                              e,
                                                              i,
                                                              s.logBase
                                                          ));
                                        else if (
                                            i !== -Number.MAX_VALUE &&
                                            v.isNumber(i)
                                        )
                                            if (
                                                ((a.allSeriesCollapsed = !1),
                                                (void 0 === s.min &&
                                                    void 0 === s.max) ||
                                                    s.forceNiceScale)
                                            ) {
                                                var o =
                                                    (void 0 ===
                                                        r.yaxis[t].max &&
                                                        void 0 ===
                                                            r.yaxis[t].min) ||
                                                    r.yaxis[t].forceNiceScale;
                                                a.yAxisScale[t] =
                                                    this.niceScale(
                                                        e,
                                                        i,
                                                        s.tickAmount
                                                            ? s.tickAmount
                                                            : n < 5 && n > 1
                                                            ? n + 1
                                                            : 5,
                                                        t,
                                                        o
                                                    );
                                            } else
                                                a.yAxisScale[t] =
                                                    this.linearScale(
                                                        e,
                                                        i,
                                                        s.tickAmount,
                                                        t
                                                    );
                                        else
                                            a.yAxisScale[t] = this.linearScale(
                                                0,
                                                5,
                                                5
                                            );
                                    },
                                },
                                {
                                    key: "setXScale",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = i.globals,
                                            r = i.config.xaxis,
                                            s = Math.abs(e - t);
                                        return (
                                            e !== -Number.MAX_VALUE &&
                                            v.isNumber(e)
                                                ? (a.xAxisScale =
                                                      this.linearScale(
                                                          t,
                                                          e,
                                                          r.tickAmount
                                                              ? r.tickAmount
                                                              : s < 5 && s > 1
                                                              ? s + 1
                                                              : 5,
                                                          0
                                                      ))
                                                : (a.xAxisScale =
                                                      this.linearScale(
                                                          0,
                                                          5,
                                                          5
                                                      )),
                                            a.xAxisScale
                                        );
                                    },
                                },
                                {
                                    key: "setMultipleYScales",
                                    value: function () {
                                        var t = this,
                                            e = this.w.globals,
                                            i = this.w.config,
                                            a = e.minYArr.concat([]),
                                            r = e.maxYArr.concat([]),
                                            s = [];
                                        i.yaxis.forEach(function (e, n) {
                                            var o = n;
                                            i.series.forEach(function (t, i) {
                                                t.name === e.seriesName &&
                                                    ((o = i),
                                                    n !== i
                                                        ? s.push({
                                                              index: i,
                                                              similarIndex: n,
                                                              alreadyExists: !0,
                                                          })
                                                        : s.push({ index: i }));
                                            });
                                            var l = a[o],
                                                c = r[o];
                                            t.setYScaleForIndex(n, l, c);
                                        }),
                                            this.sameScaleInMultipleAxes(
                                                a,
                                                r,
                                                s
                                            );
                                    },
                                },
                                {
                                    key: "sameScaleInMultipleAxes",
                                    value: function (t, e, i) {
                                        var a = this,
                                            r = this.w.config,
                                            s = this.w.globals,
                                            n = [];
                                        i.forEach(function (t) {
                                            t.alreadyExists &&
                                                (void 0 === n[t.index] &&
                                                    (n[t.index] = []),
                                                n[t.index].push(t.index),
                                                n[t.index].push(
                                                    t.similarIndex
                                                ));
                                        }),
                                            (s.yAxisSameScaleIndices = n),
                                            n.forEach(function (t, e) {
                                                n.forEach(function (i, a) {
                                                    var r, s;
                                                    e !== a &&
                                                        ((r = t),
                                                        (s = i),
                                                        r.filter(function (t) {
                                                            return (
                                                                -1 !==
                                                                s.indexOf(t)
                                                            );
                                                        })).length > 0 &&
                                                        (n[e] = n[e].concat(
                                                            n[a]
                                                        ));
                                                });
                                            });
                                        var o = n
                                            .map(function (t) {
                                                return t.filter(function (
                                                    e,
                                                    i
                                                ) {
                                                    return t.indexOf(e) === i;
                                                });
                                            })
                                            .map(function (t) {
                                                return t.sort();
                                            });
                                        n = n.filter(function (t) {
                                            return !!t;
                                        });
                                        var l = o.slice(),
                                            c = l.map(function (t) {
                                                return JSON.stringify(t);
                                            });
                                        l = l.filter(function (t, e) {
                                            return (
                                                c.indexOf(JSON.stringify(t)) ===
                                                e
                                            );
                                        });
                                        var h = [],
                                            d = [];
                                        t.forEach(function (t, i) {
                                            l.forEach(function (a, r) {
                                                a.indexOf(i) > -1 &&
                                                    (void 0 === h[r] &&
                                                        ((h[r] = []),
                                                        (d[r] = [])),
                                                    h[r].push({
                                                        key: i,
                                                        value: t,
                                                    }),
                                                    d[r].push({
                                                        key: i,
                                                        value: e[i],
                                                    }));
                                            });
                                        });
                                        var u = Array.apply(
                                                null,
                                                Array(l.length)
                                            ).map(
                                                Number.prototype.valueOf,
                                                Number.MIN_VALUE
                                            ),
                                            f = Array.apply(
                                                null,
                                                Array(l.length)
                                            ).map(
                                                Number.prototype.valueOf,
                                                -Number.MAX_VALUE
                                            );
                                        h.forEach(function (t, e) {
                                            t.forEach(function (t, i) {
                                                u[e] = Math.min(t.value, u[e]);
                                            });
                                        }),
                                            d.forEach(function (t, e) {
                                                t.forEach(function (t, i) {
                                                    f[e] = Math.max(
                                                        t.value,
                                                        f[e]
                                                    );
                                                });
                                            }),
                                            t.forEach(function (t, e) {
                                                d.forEach(function (t, i) {
                                                    var n = u[i],
                                                        o = f[i];
                                                    r.chart.stacked &&
                                                        ((o = 0),
                                                        t.forEach(function (
                                                            t,
                                                            e
                                                        ) {
                                                            t.value !==
                                                                -Number.MAX_VALUE &&
                                                                (o += t.value),
                                                                n !==
                                                                    Number.MIN_VALUE &&
                                                                    (n +=
                                                                        h[i][e]
                                                                            .value);
                                                        })),
                                                        t.forEach(function (
                                                            i,
                                                            l
                                                        ) {
                                                            t[l].key === e &&
                                                                (void 0 !==
                                                                    r.yaxis[e]
                                                                        .min &&
                                                                    (n =
                                                                        "function" ==
                                                                        typeof r
                                                                            .yaxis[
                                                                            e
                                                                        ].min
                                                                            ? r.yaxis[
                                                                                  e
                                                                              ].min(
                                                                                  s.minY
                                                                              )
                                                                            : r
                                                                                  .yaxis[
                                                                                  e
                                                                              ]
                                                                                  .min),
                                                                void 0 !==
                                                                    r.yaxis[e]
                                                                        .max &&
                                                                    (o =
                                                                        "function" ==
                                                                        typeof r
                                                                            .yaxis[
                                                                            e
                                                                        ].max
                                                                            ? r.yaxis[
                                                                                  e
                                                                              ].max(
                                                                                  s.maxY
                                                                              )
                                                                            : r
                                                                                  .yaxis[
                                                                                  e
                                                                              ]
                                                                                  .max),
                                                                a.setYScaleForIndex(
                                                                    e,
                                                                    n,
                                                                    o
                                                                ));
                                                        });
                                                });
                                            });
                                    },
                                },
                                {
                                    key: "autoScaleY",
                                    value: function (t, e, i) {
                                        t || (t = this);
                                        var a = t.w;
                                        if (
                                            a.globals.isMultipleYAxis ||
                                            a.globals.collapsedSeries.length
                                        )
                                            return (
                                                console.warn(
                                                    "autoScaleYaxis is not supported in a multi-yaxis chart."
                                                ),
                                                e
                                            );
                                        var r = a.globals.seriesX[0],
                                            s = a.config.chart.stacked;
                                        return (
                                            e.forEach(function (t, n) {
                                                for (
                                                    var o = 0, l = 0;
                                                    l < r.length;
                                                    l++
                                                )
                                                    if (r[l] >= i.xaxis.min) {
                                                        o = l;
                                                        break;
                                                    }
                                                var c,
                                                    h,
                                                    d = a.globals.minYArr[n],
                                                    u = a.globals.maxYArr[n],
                                                    f =
                                                        a.globals
                                                            .stackedSeriesTotals;
                                                a.globals.series.forEach(
                                                    function (n, l) {
                                                        var g = n[o];
                                                        s
                                                            ? ((g = f[o]),
                                                              (c = h = g),
                                                              f.forEach(
                                                                  function (
                                                                      t,
                                                                      e
                                                                  ) {
                                                                      r[e] <=
                                                                          i
                                                                              .xaxis
                                                                              .max &&
                                                                          r[
                                                                              e
                                                                          ] >=
                                                                              i
                                                                                  .xaxis
                                                                                  .min &&
                                                                          (t >
                                                                              h &&
                                                                              null !==
                                                                                  t &&
                                                                              (h =
                                                                                  t),
                                                                          n[e] <
                                                                              c &&
                                                                              null !==
                                                                                  n[
                                                                                      e
                                                                                  ] &&
                                                                              (c =
                                                                                  n[
                                                                                      e
                                                                                  ]));
                                                                  }
                                                              ))
                                                            : ((c = h = g),
                                                              n.forEach(
                                                                  function (
                                                                      t,
                                                                      e
                                                                  ) {
                                                                      if (
                                                                          r[
                                                                              e
                                                                          ] <=
                                                                              i
                                                                                  .xaxis
                                                                                  .max &&
                                                                          r[
                                                                              e
                                                                          ] >=
                                                                              i
                                                                                  .xaxis
                                                                                  .min
                                                                      ) {
                                                                          var s =
                                                                                  t,
                                                                              n =
                                                                                  t;
                                                                          a.globals.series.forEach(
                                                                              function (
                                                                                  i,
                                                                                  a
                                                                              ) {
                                                                                  null !==
                                                                                      t &&
                                                                                      ((s =
                                                                                          Math.min(
                                                                                              i[
                                                                                                  e
                                                                                              ],
                                                                                              s
                                                                                          )),
                                                                                      (n =
                                                                                          Math.max(
                                                                                              i[
                                                                                                  e
                                                                                              ],
                                                                                              n
                                                                                          )));
                                                                              }
                                                                          ),
                                                                              n >
                                                                                  h &&
                                                                                  null !==
                                                                                      n &&
                                                                                  (h =
                                                                                      n),
                                                                              s <
                                                                                  c &&
                                                                                  null !==
                                                                                      s &&
                                                                                  (c =
                                                                                      s);
                                                                      }
                                                                  }
                                                              )),
                                                            void 0 === c &&
                                                                void 0 === h &&
                                                                ((c = d),
                                                                (h = u)),
                                                            (h *=
                                                                h < 0
                                                                    ? 0.9
                                                                    : 1.1),
                                                            0 ==
                                                                (c *=
                                                                    c < 0
                                                                        ? 1.1
                                                                        : 0.9) &&
                                                                0 === h &&
                                                                ((c = -1),
                                                                (h = 1)),
                                                            h < 0 &&
                                                                h < u &&
                                                                (h = u),
                                                            c < 0 &&
                                                                c > d &&
                                                                (c = d),
                                                            e.length > 1
                                                                ? ((e[l].min =
                                                                      void 0 ===
                                                                      t.min
                                                                          ? c
                                                                          : t.min),
                                                                  (e[l].max =
                                                                      void 0 ===
                                                                      t.max
                                                                          ? h
                                                                          : t.max))
                                                                : ((e[0].min =
                                                                      void 0 ===
                                                                      t.min
                                                                          ? c
                                                                          : t.min),
                                                                  (e[0].max =
                                                                      void 0 ===
                                                                      t.max
                                                                          ? h
                                                                          : t.max));
                                                    }
                                                );
                                            }),
                                            e
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Z = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.scales = new $(e));
                        }
                        return (
                            c(t, [
                                {
                                    key: "init",
                                    value: function () {
                                        this.setYRange(),
                                            this.setXRange(),
                                            this.setZRange();
                                    },
                                },
                                {
                                    key: "getMinYMaxY",
                                    value: function (t) {
                                        var e =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : Number.MAX_VALUE,
                                            i =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : -Number.MAX_VALUE,
                                            a =
                                                arguments.length > 3 &&
                                                void 0 !== arguments[3]
                                                    ? arguments[3]
                                                    : null,
                                            r = this.w.config,
                                            s = this.w.globals,
                                            n = -Number.MAX_VALUE,
                                            o = Number.MIN_VALUE;
                                        null === a && (a = t + 1);
                                        var l = s.series,
                                            c = l,
                                            h = l;
                                        "candlestick" === r.chart.type
                                            ? ((c = s.seriesCandleL),
                                              (h = s.seriesCandleH))
                                            : "boxPlot" === r.chart.type
                                            ? ((c = s.seriesCandleO),
                                              (h = s.seriesCandleC))
                                            : s.isRangeData &&
                                              ((c = s.seriesRangeStart),
                                              (h = s.seriesRangeEnd));
                                        for (var d = t; d < a; d++) {
                                            (s.dataPoints = Math.max(
                                                s.dataPoints,
                                                l[d].length
                                            )),
                                                s.categoryLabels.length &&
                                                    (s.dataPoints =
                                                        s.categoryLabels.filter(
                                                            function (t) {
                                                                return (
                                                                    void 0 !== t
                                                                );
                                                            }
                                                        ).length),
                                                s.labels.length &&
                                                    (s.dataPoints = Math.max(
                                                        s.dataPoints,
                                                        s.labels.length
                                                    ));
                                            for (
                                                var u = 0;
                                                u < s.series[d].length;
                                                u++
                                            ) {
                                                var f = l[d][u];
                                                null !== f && v.isNumber(f)
                                                    ? (void 0 !== h[d][u] &&
                                                          ((n = Math.max(
                                                              n,
                                                              h[d][u]
                                                          )),
                                                          (e = Math.min(
                                                              e,
                                                              h[d][u]
                                                          ))),
                                                      void 0 !== c[d][u] &&
                                                          ((e = Math.min(
                                                              e,
                                                              c[d][u]
                                                          )),
                                                          (i = Math.max(
                                                              i,
                                                              c[d][u]
                                                          ))),
                                                      ("candlestick" !==
                                                          this.w.config.chart
                                                              .type &&
                                                          "boxPlot" !==
                                                              this.w.config
                                                                  .chart.type &&
                                                          "rangeArea" ===
                                                              this.w.config
                                                                  .chart.type &&
                                                          "rangeBar" ===
                                                              this.w.config
                                                                  .chart
                                                                  .type) ||
                                                          (("candlestick" !==
                                                              this.w.config
                                                                  .chart.type &&
                                                              "boxPlot" !==
                                                                  this.w.config
                                                                      .chart
                                                                      .type) ||
                                                              (void 0 !==
                                                                  s
                                                                      .seriesCandleC[
                                                                      d
                                                                  ][u] &&
                                                                  ((n =
                                                                      Math.max(
                                                                          n,
                                                                          s
                                                                              .seriesCandleO[
                                                                              d
                                                                          ][u]
                                                                      )),
                                                                  (n = Math.max(
                                                                      n,
                                                                      s
                                                                          .seriesCandleH[
                                                                          d
                                                                      ][u]
                                                                  )),
                                                                  (n = Math.max(
                                                                      n,
                                                                      s
                                                                          .seriesCandleL[
                                                                          d
                                                                      ][u]
                                                                  )),
                                                                  (n = Math.max(
                                                                      n,
                                                                      s
                                                                          .seriesCandleC[
                                                                          d
                                                                      ][u]
                                                                  )),
                                                                  "boxPlot" ===
                                                                      this.w
                                                                          .config
                                                                          .chart
                                                                          .type &&
                                                                      (n =
                                                                          Math.max(
                                                                              n,
                                                                              s
                                                                                  .seriesCandleM[
                                                                                  d
                                                                              ][
                                                                                  u
                                                                              ]
                                                                          )))),
                                                          !r.series[d].type ||
                                                              ("candlestick" ===
                                                                  r.series[d]
                                                                      .type &&
                                                                  "boxPlot" ===
                                                                      r.series[
                                                                          d
                                                                      ].type &&
                                                                  "rangeArea" ===
                                                                      r.series[
                                                                          d
                                                                      ].type &&
                                                                  "rangeBar" ===
                                                                      r.series[
                                                                          d
                                                                      ].type) ||
                                                              ((n = Math.max(
                                                                  n,
                                                                  s.series[d][u]
                                                              )),
                                                              (e = Math.min(
                                                                  e,
                                                                  s.series[d][u]
                                                              ))),
                                                          (i = n)),
                                                      s.seriesGoals[d] &&
                                                          s.seriesGoals[d][u] &&
                                                          Array.isArray(
                                                              s.seriesGoals[d][
                                                                  u
                                                              ]
                                                          ) &&
                                                          s.seriesGoals[d][
                                                              u
                                                          ].forEach(function (
                                                              t
                                                          ) {
                                                              o !==
                                                                  Number.MIN_VALUE &&
                                                                  ((o =
                                                                      Math.min(
                                                                          o,
                                                                          t.value
                                                                      )),
                                                                  (e = o)),
                                                                  (n = Math.max(
                                                                      n,
                                                                      t.value
                                                                  )),
                                                                  (i = n);
                                                          }),
                                                      v.isFloat(f) &&
                                                          ((f =
                                                              v.noExponents(f)),
                                                          (s.yValueDecimal =
                                                              Math.max(
                                                                  s.yValueDecimal,
                                                                  f
                                                                      .toString()
                                                                      .split(
                                                                          "."
                                                                      )[1]
                                                                      .length
                                                              ))),
                                                      o > c[d][u] &&
                                                          c[d][u] < 0 &&
                                                          (o = c[d][u]))
                                                    : (s.hasNullValues = !0);
                                            }
                                        }
                                        return (
                                            "rangeBar" === r.chart.type &&
                                                s.seriesRangeStart.length &&
                                                s.isBarHorizontal &&
                                                (o = e),
                                            "bar" === r.chart.type &&
                                                (o < 0 && n < 0 && (n = 0),
                                                o === Number.MIN_VALUE &&
                                                    (o = 0)),
                                            {
                                                minY: o,
                                                maxY: n,
                                                lowestY: e,
                                                highestY: i,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "setYRange",
                                    value: function () {
                                        var t = this.w.globals,
                                            e = this.w.config;
                                        (t.maxY = -Number.MAX_VALUE),
                                            (t.minY = Number.MIN_VALUE);
                                        var i = Number.MAX_VALUE;
                                        if (t.isMultipleYAxis)
                                            for (
                                                var a = 0;
                                                a < t.series.length;
                                                a++
                                            ) {
                                                var r = this.getMinYMaxY(
                                                    a,
                                                    i,
                                                    null,
                                                    a + 1
                                                );
                                                t.minYArr.push(r.minY),
                                                    t.maxYArr.push(r.maxY),
                                                    (i = r.lowestY);
                                            }
                                        var s = this.getMinYMaxY(
                                            0,
                                            i,
                                            null,
                                            t.series.length
                                        );
                                        if (
                                            ((t.minY = s.minY),
                                            (t.maxY = s.maxY),
                                            (i = s.lowestY),
                                            e.chart.stacked &&
                                                this._setStackedMinMax(),
                                            ("line" === e.chart.type ||
                                                "area" === e.chart.type ||
                                                "candlestick" ===
                                                    e.chart.type ||
                                                "boxPlot" === e.chart.type ||
                                                ("rangeBar" === e.chart.type &&
                                                    !t.isBarHorizontal)) &&
                                                t.minY === Number.MIN_VALUE &&
                                                i !== -Number.MAX_VALUE &&
                                                i !== t.maxY)
                                        ) {
                                            var n = t.maxY - i;
                                            ((i >= 0 && i <= 10) ||
                                                void 0 !== e.yaxis[0].min ||
                                                void 0 !== e.yaxis[0].max) &&
                                                (n = 0),
                                                (t.minY = i - (5 * n) / 100),
                                                i > 0 &&
                                                    t.minY < 0 &&
                                                    (t.minY = 0),
                                                (t.maxY =
                                                    t.maxY + (5 * n) / 100);
                                        }
                                        return (
                                            e.yaxis.forEach(function (e, i) {
                                                void 0 !== e.max &&
                                                    ("number" == typeof e.max
                                                        ? (t.maxYArr[i] = e.max)
                                                        : "function" ==
                                                              typeof e.max &&
                                                          (t.maxYArr[i] = e.max(
                                                              t.isMultipleYAxis
                                                                  ? t.maxYArr[i]
                                                                  : t.maxY
                                                          )),
                                                    (t.maxY = t.maxYArr[i])),
                                                    void 0 !== e.min &&
                                                        ("number" ==
                                                        typeof e.min
                                                            ? (t.minYArr[i] =
                                                                  e.min)
                                                            : "function" ==
                                                                  typeof e.min &&
                                                              (t.minYArr[i] =
                                                                  e.min(
                                                                      t.isMultipleYAxis
                                                                          ? t
                                                                                .minYArr[
                                                                                i
                                                                            ] ===
                                                                            Number.MIN_VALUE
                                                                              ? 0
                                                                              : t
                                                                                    .minYArr[
                                                                                    i
                                                                                ]
                                                                          : t.minY
                                                                  )),
                                                        (t.minY =
                                                            t.minYArr[i]));
                                            }),
                                            t.isBarHorizontal &&
                                                ["min", "max"].forEach(
                                                    function (i) {
                                                        void 0 !== e.xaxis[i] &&
                                                            "number" ==
                                                                typeof e.xaxis[
                                                                    i
                                                                ] &&
                                                            ("min" === i
                                                                ? (t.minY =
                                                                      e.xaxis[
                                                                          i
                                                                      ])
                                                                : (t.maxY =
                                                                      e.xaxis[
                                                                          i
                                                                      ]));
                                                    }
                                                ),
                                            t.isMultipleYAxis
                                                ? (this.scales.setMultipleYScales(),
                                                  (t.minY = i),
                                                  t.yAxisScale.forEach(
                                                      function (e, i) {
                                                          (t.minYArr[i] =
                                                              e.niceMin),
                                                              (t.maxYArr[i] =
                                                                  e.niceMax);
                                                      }
                                                  ))
                                                : (this.scales.setYScaleForIndex(
                                                      0,
                                                      t.minY,
                                                      t.maxY
                                                  ),
                                                  (t.minY =
                                                      t.yAxisScale[0].niceMin),
                                                  (t.maxY =
                                                      t.yAxisScale[0].niceMax),
                                                  (t.minYArr[0] =
                                                      t.yAxisScale[0].niceMin),
                                                  (t.maxYArr[0] =
                                                      t.yAxisScale[0].niceMax)),
                                            {
                                                minY: t.minY,
                                                maxY: t.maxY,
                                                minYArr: t.minYArr,
                                                maxYArr: t.maxYArr,
                                                yAxisScale: t.yAxisScale,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "setXRange",
                                    value: function () {
                                        var t = this.w.globals,
                                            e = this.w.config,
                                            i =
                                                "numeric" === e.xaxis.type ||
                                                "datetime" === e.xaxis.type ||
                                                ("category" === e.xaxis.type &&
                                                    !t.noLabelsProvided) ||
                                                t.noLabelsProvided ||
                                                t.isXNumeric;
                                        if (
                                            (t.isXNumeric &&
                                                (function () {
                                                    for (
                                                        var e = 0;
                                                        e < t.series.length;
                                                        e++
                                                    )
                                                        if (t.labels[e])
                                                            for (
                                                                var i = 0;
                                                                i <
                                                                t.labels[e]
                                                                    .length;
                                                                i++
                                                            )
                                                                null !==
                                                                    t.labels[e][
                                                                        i
                                                                    ] &&
                                                                    v.isNumber(
                                                                        t
                                                                            .labels[
                                                                            e
                                                                        ][i]
                                                                    ) &&
                                                                    ((t.maxX =
                                                                        Math.max(
                                                                            t.maxX,
                                                                            t
                                                                                .labels[
                                                                                e
                                                                            ][i]
                                                                        )),
                                                                    (t.initialMaxX =
                                                                        Math.max(
                                                                            t.maxX,
                                                                            t
                                                                                .labels[
                                                                                e
                                                                            ][i]
                                                                        )),
                                                                    (t.minX =
                                                                        Math.min(
                                                                            t.minX,
                                                                            t
                                                                                .labels[
                                                                                e
                                                                            ][i]
                                                                        )),
                                                                    (t.initialMinX =
                                                                        Math.min(
                                                                            t.minX,
                                                                            t
                                                                                .labels[
                                                                                e
                                                                            ][i]
                                                                        )));
                                                })(),
                                            t.noLabelsProvided &&
                                                0 ===
                                                    e.xaxis.categories.length &&
                                                ((t.maxX =
                                                    t.labels[
                                                        t.labels.length - 1
                                                    ]),
                                                (t.initialMaxX =
                                                    t.labels[
                                                        t.labels.length - 1
                                                    ]),
                                                (t.minX = 1),
                                                (t.initialMinX = 1)),
                                            t.isXNumeric ||
                                                t.noLabelsProvided ||
                                                t.dataFormatXNumeric)
                                        ) {
                                            var a;
                                            if (
                                                (void 0 === e.xaxis.tickAmount
                                                    ? ((a = Math.round(
                                                          t.svgWidth / 150
                                                      )),
                                                      "numeric" ===
                                                          e.xaxis.type &&
                                                          t.dataPoints < 30 &&
                                                          (a =
                                                              t.dataPoints - 1),
                                                      a > t.dataPoints &&
                                                          0 !== t.dataPoints &&
                                                          (a =
                                                              t.dataPoints - 1))
                                                    : "dataPoints" ===
                                                      e.xaxis.tickAmount
                                                    ? (t.series.length > 1 &&
                                                          (a =
                                                              t.series[
                                                                  t
                                                                      .maxValsInArrayIndex
                                                              ].length - 1),
                                                      t.isXNumeric &&
                                                          (a =
                                                              t.maxX -
                                                              t.minX -
                                                              1))
                                                    : (a = e.xaxis.tickAmount),
                                                (t.xTickAmount = a),
                                                void 0 !== e.xaxis.max &&
                                                    "number" ==
                                                        typeof e.xaxis.max &&
                                                    (t.maxX = e.xaxis.max),
                                                void 0 !== e.xaxis.min &&
                                                    "number" ==
                                                        typeof e.xaxis.min &&
                                                    (t.minX = e.xaxis.min),
                                                void 0 !== e.xaxis.range &&
                                                    (t.minX =
                                                        t.maxX - e.xaxis.range),
                                                t.minX !== Number.MAX_VALUE &&
                                                    t.maxX !==
                                                        -Number.MAX_VALUE)
                                            )
                                                if (
                                                    e.xaxis
                                                        .convertedCatToNumeric &&
                                                    !t.dataFormatXNumeric
                                                ) {
                                                    for (
                                                        var r = [],
                                                            s = t.minX - 1;
                                                        s < t.maxX;
                                                        s++
                                                    )
                                                        r.push(s + 1);
                                                    t.xAxisScale = {
                                                        result: r,
                                                        niceMin: r[0],
                                                        niceMax:
                                                            r[r.length - 1],
                                                    };
                                                } else
                                                    t.xAxisScale =
                                                        this.scales.setXScale(
                                                            t.minX,
                                                            t.maxX
                                                        );
                                            else
                                                (t.xAxisScale =
                                                    this.scales.linearScale(
                                                        1,
                                                        a,
                                                        a
                                                    )),
                                                    t.noLabelsProvided &&
                                                        t.labels.length > 0 &&
                                                        ((t.xAxisScale =
                                                            this.scales.linearScale(
                                                                1,
                                                                t.labels.length,
                                                                a - 1
                                                            )),
                                                        (t.seriesX =
                                                            t.labels.slice()));
                                            i &&
                                                (t.labels =
                                                    t.xAxisScale.result.slice());
                                        }
                                        return (
                                            t.isBarHorizontal &&
                                                t.labels.length &&
                                                (t.xTickAmount =
                                                    t.labels.length),
                                            this._handleSingleDataPoint(),
                                            this._getMinXDiff(),
                                            { minX: t.minX, maxX: t.maxX }
                                        );
                                    },
                                },
                                {
                                    key: "setZRange",
                                    value: function () {
                                        var t = this.w.globals;
                                        if (t.isDataXYZ)
                                            for (
                                                var e = 0;
                                                e < t.series.length;
                                                e++
                                            )
                                                if (void 0 !== t.seriesZ[e])
                                                    for (
                                                        var i = 0;
                                                        i < t.seriesZ[e].length;
                                                        i++
                                                    )
                                                        null !==
                                                            t.seriesZ[e][i] &&
                                                            v.isNumber(
                                                                t.seriesZ[e][i]
                                                            ) &&
                                                            ((t.maxZ = Math.max(
                                                                t.maxZ,
                                                                t.seriesZ[e][i]
                                                            )),
                                                            (t.minZ = Math.min(
                                                                t.minZ,
                                                                t.seriesZ[e][i]
                                                            )));
                                    },
                                },
                                {
                                    key: "_handleSingleDataPoint",
                                    value: function () {
                                        var t = this.w.globals,
                                            e = this.w.config;
                                        if (t.minX === t.maxX) {
                                            var i = new I(this.ctx);
                                            if ("datetime" === e.xaxis.type) {
                                                var a = i.getDate(t.minX);
                                                e.xaxis.labels.datetimeUTC
                                                    ? a.setUTCDate(
                                                          a.getUTCDate() - 2
                                                      )
                                                    : a.setDate(
                                                          a.getDate() - 2
                                                      ),
                                                    (t.minX = new Date(
                                                        a
                                                    ).getTime());
                                                var r = i.getDate(t.maxX);
                                                e.xaxis.labels.datetimeUTC
                                                    ? r.setUTCDate(
                                                          r.getUTCDate() + 2
                                                      )
                                                    : r.setDate(
                                                          r.getDate() + 2
                                                      ),
                                                    (t.maxX = new Date(
                                                        r
                                                    ).getTime());
                                            } else
                                                ("numeric" === e.xaxis.type ||
                                                    ("category" ===
                                                        e.xaxis.type &&
                                                        !t.noLabelsProvided)) &&
                                                    ((t.minX = t.minX - 2),
                                                    (t.initialMinX = t.minX),
                                                    (t.maxX = t.maxX + 2),
                                                    (t.initialMaxX = t.maxX));
                                        }
                                    },
                                },
                                {
                                    key: "_getMinXDiff",
                                    value: function () {
                                        var t = this.w.globals;
                                        t.isXNumeric &&
                                            t.seriesX.forEach(function (e, i) {
                                                1 === e.length &&
                                                    e.push(
                                                        t.seriesX[
                                                            t
                                                                .maxValsInArrayIndex
                                                        ][
                                                            t.seriesX[
                                                                t
                                                                    .maxValsInArrayIndex
                                                            ].length - 1
                                                        ]
                                                    );
                                                var a = e.slice();
                                                a.sort(function (t, e) {
                                                    return t - e;
                                                }),
                                                    a.forEach(function (e, i) {
                                                        if (i > 0) {
                                                            var r =
                                                                e - a[i - 1];
                                                            r > 0 &&
                                                                (t.minXDiff =
                                                                    Math.min(
                                                                        r,
                                                                        t.minXDiff
                                                                    ));
                                                        }
                                                    }),
                                                    (1 !== t.dataPoints &&
                                                        t.minXDiff !==
                                                            Number.MAX_VALUE) ||
                                                        (t.minXDiff = 0.5);
                                            });
                                    },
                                },
                                {
                                    key: "_setStackedMinMax",
                                    value: function () {
                                        var t = this,
                                            e = this.w.globals;
                                        if (e.series.length) {
                                            var i = e.seriesGroups;
                                            i.length ||
                                                (i = [
                                                    this.w.config.series.map(
                                                        function (t) {
                                                            return t.name;
                                                        }
                                                    ),
                                                ]);
                                            var a = {},
                                                r = {};
                                            i.forEach(function (i) {
                                                (a[i] = []),
                                                    (r[i] = []),
                                                    t.w.config.series
                                                        .map(function (t, e) {
                                                            return i.indexOf(
                                                                t.name
                                                            ) > -1
                                                                ? e
                                                                : null;
                                                        })
                                                        .filter(function (t) {
                                                            return null !== t;
                                                        })
                                                        .forEach(function (t) {
                                                            for (
                                                                var s = 0;
                                                                s <
                                                                e.series[
                                                                    e
                                                                        .maxValsInArrayIndex
                                                                ].length;
                                                                s++
                                                            )
                                                                void 0 ===
                                                                    a[i][s] &&
                                                                    ((a[i][
                                                                        s
                                                                    ] = 0),
                                                                    (r[i][
                                                                        s
                                                                    ] = 0)),
                                                                    null !==
                                                                        e
                                                                            .series[
                                                                            t
                                                                        ][s] &&
                                                                        v.isNumber(
                                                                            e
                                                                                .series[
                                                                                t
                                                                            ][s]
                                                                        ) &&
                                                                        (e
                                                                            .series[
                                                                            t
                                                                        ][s] > 0
                                                                            ? (a[
                                                                                  i
                                                                              ][
                                                                                  s
                                                                              ] +=
                                                                                  parseFloat(
                                                                                      e
                                                                                          .series[
                                                                                          t
                                                                                      ][
                                                                                          s
                                                                                      ]
                                                                                  ) +
                                                                                  1e-4)
                                                                            : (r[
                                                                                  i
                                                                              ][
                                                                                  s
                                                                              ] +=
                                                                                  parseFloat(
                                                                                      e
                                                                                          .series[
                                                                                          t
                                                                                      ][
                                                                                          s
                                                                                      ]
                                                                                  )));
                                                        });
                                            }),
                                                Object.entries(a).forEach(
                                                    function (t) {
                                                        var i = p(t, 1)[0];
                                                        a[i].forEach(function (
                                                            t,
                                                            s
                                                        ) {
                                                            (e.maxY = Math.max(
                                                                e.maxY,
                                                                a[i][s]
                                                            )),
                                                                (e.minY =
                                                                    Math.min(
                                                                        e.minY,
                                                                        r[i][s]
                                                                    ));
                                                        });
                                                    }
                                                );
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    J = (function () {
                        function t(e, i) {
                            o(this, t),
                                (this.ctx = e),
                                (this.elgrid = i),
                                (this.w = e.w);
                            var a = this.w;
                            (this.xaxisFontSize =
                                a.config.xaxis.labels.style.fontSize),
                                (this.axisFontFamily =
                                    a.config.xaxis.labels.style.fontFamily),
                                (this.xaxisForeColors =
                                    a.config.xaxis.labels.style.colors),
                                (this.isCategoryBarHorizontal =
                                    "bar" === a.config.chart.type &&
                                    a.config.plotOptions.bar.horizontal),
                                (this.xAxisoffX = 0),
                                "bottom" === a.config.xaxis.position &&
                                    (this.xAxisoffX = a.globals.gridHeight),
                                (this.drawnLabels = []),
                                (this.axesUtils = new j(e));
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawYaxis",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w,
                                            a = new k(this.ctx),
                                            r = i.config.yaxis[t].labels.style,
                                            s = r.fontSize,
                                            n = r.fontFamily,
                                            o = r.fontWeight,
                                            l = a.group({
                                                class: "apexcharts-yaxis",
                                                rel: t,
                                                transform:
                                                    "translate(" +
                                                    i.globals.translateYAxisX[
                                                        t
                                                    ] +
                                                    ", 0)",
                                            });
                                        if (this.axesUtils.isYAxisHidden(t))
                                            return l;
                                        var c = a.group({
                                            class: "apexcharts-yaxis-texts-g",
                                        });
                                        l.add(c);
                                        var h =
                                                i.globals.yAxisScale[t].result
                                                    .length - 1,
                                            d = i.globals.gridHeight / h,
                                            u = i.globals.translateY,
                                            f = i.globals.yLabelFormatters[t],
                                            g =
                                                i.globals.yAxisScale[
                                                    t
                                                ].result.slice();
                                        g =
                                            this.axesUtils.checkForReversedLabels(
                                                t,
                                                g
                                            );
                                        var p = "";
                                        if (i.config.yaxis[t].labels.show)
                                            for (
                                                var x = function (l) {
                                                        var x = g[l];
                                                        x = f(x, l, i);
                                                        var m =
                                                            i.config.yaxis[t]
                                                                .labels.padding;
                                                        i.config.yaxis[t]
                                                            .opposite &&
                                                            0 !==
                                                                i.config.yaxis
                                                                    .length &&
                                                            (m *= -1);
                                                        var b = "end";
                                                        i.config.yaxis[t]
                                                            .opposite &&
                                                            (b = "start"),
                                                            "left" ===
                                                            i.config.yaxis[t]
                                                                .labels.align
                                                                ? (b = "start")
                                                                : "center" ===
                                                                  i.config
                                                                      .yaxis[t]
                                                                      .labels
                                                                      .align
                                                                ? (b = "middle")
                                                                : "right" ===
                                                                      i.config
                                                                          .yaxis[
                                                                          t
                                                                      ].labels
                                                                          .align &&
                                                                  (b = "end");
                                                        var v =
                                                                e.axesUtils.getYAxisForeColor(
                                                                    r.colors,
                                                                    t
                                                                ),
                                                            y = a.drawText({
                                                                x: m,
                                                                y:
                                                                    u +
                                                                    h / 10 +
                                                                    i.config
                                                                        .yaxis[
                                                                        t
                                                                    ].labels
                                                                        .offsetY +
                                                                    1,
                                                                text: x,
                                                                textAnchor: b,
                                                                fontSize: s,
                                                                fontFamily: n,
                                                                fontWeight: o,
                                                                maxWidth:
                                                                    i.config
                                                                        .yaxis[
                                                                        t
                                                                    ].labels
                                                                        .maxWidth,
                                                                foreColor:
                                                                    Array.isArray(
                                                                        v
                                                                    )
                                                                        ? v[l]
                                                                        : v,
                                                                isPlainText: !1,
                                                                cssClass:
                                                                    "apexcharts-yaxis-label " +
                                                                    r.cssClass,
                                                            });
                                                        l === h && (p = y),
                                                            c.add(y);
                                                        var w =
                                                            document.createElementNS(
                                                                i.globals.SVGNS,
                                                                "title"
                                                            );
                                                        if (
                                                            ((w.textContent =
                                                                Array.isArray(x)
                                                                    ? x.join(
                                                                          " "
                                                                      )
                                                                    : x),
                                                            y.node.appendChild(
                                                                w
                                                            ),
                                                            0 !==
                                                                i.config.yaxis[
                                                                    t
                                                                ].labels.rotate)
                                                        ) {
                                                            var k =
                                                                    a.rotateAroundCenter(
                                                                        p.node
                                                                    ),
                                                                A =
                                                                    a.rotateAroundCenter(
                                                                        y.node
                                                                    );
                                                            y.node.setAttribute(
                                                                "transform",
                                                                "rotate("
                                                                    .concat(
                                                                        i.config
                                                                            .yaxis[
                                                                            t
                                                                        ].labels
                                                                            .rotate,
                                                                        " "
                                                                    )
                                                                    .concat(
                                                                        k.x,
                                                                        " "
                                                                    )
                                                                    .concat(
                                                                        A.y,
                                                                        ")"
                                                                    )
                                                            );
                                                        }
                                                        u += d;
                                                    },
                                                    m = h;
                                                m >= 0;
                                                m--
                                            )
                                                x(m);
                                        if (
                                            void 0 !==
                                            i.config.yaxis[t].title.text
                                        ) {
                                            var b = a.group({
                                                    class: "apexcharts-yaxis-title",
                                                }),
                                                v = 0;
                                            i.config.yaxis[t].opposite &&
                                                (v =
                                                    i.globals.translateYAxisX[
                                                        t
                                                    ]);
                                            var y = a.drawText({
                                                x: v,
                                                y:
                                                    i.globals.gridHeight / 2 +
                                                    i.globals.translateY +
                                                    i.config.yaxis[t].title
                                                        .offsetY,
                                                text: i.config.yaxis[t].title
                                                    .text,
                                                textAnchor: "end",
                                                foreColor:
                                                    i.config.yaxis[t].title
                                                        .style.color,
                                                fontSize:
                                                    i.config.yaxis[t].title
                                                        .style.fontSize,
                                                fontWeight:
                                                    i.config.yaxis[t].title
                                                        .style.fontWeight,
                                                fontFamily:
                                                    i.config.yaxis[t].title
                                                        .style.fontFamily,
                                                cssClass:
                                                    "apexcharts-yaxis-title-text " +
                                                    i.config.yaxis[t].title
                                                        .style.cssClass,
                                            });
                                            b.add(y), l.add(b);
                                        }
                                        var w = i.config.yaxis[t].axisBorder,
                                            A = 31 + w.offsetX;
                                        if (
                                            (i.config.yaxis[t].opposite &&
                                                (A = -31 - w.offsetX),
                                            w.show)
                                        ) {
                                            var S = a.drawLine(
                                                A,
                                                i.globals.translateY +
                                                    w.offsetY -
                                                    2,
                                                A,
                                                i.globals.gridHeight +
                                                    i.globals.translateY +
                                                    w.offsetY +
                                                    2,
                                                w.color,
                                                0,
                                                w.width
                                            );
                                            l.add(S);
                                        }
                                        return (
                                            i.config.yaxis[t].axisTicks.show &&
                                                this.axesUtils.drawYAxisTicks(
                                                    A,
                                                    h,
                                                    w,
                                                    i.config.yaxis[t].axisTicks,
                                                    t,
                                                    d,
                                                    l
                                                ),
                                            l
                                        );
                                    },
                                },
                                {
                                    key: "drawYaxisInversed",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new k(this.ctx),
                                            a = i.group({
                                                class: "apexcharts-xaxis apexcharts-yaxis-inversed",
                                            }),
                                            r = i.group({
                                                class: "apexcharts-xaxis-texts-g",
                                                transform: "translate("
                                                    .concat(
                                                        e.globals
                                                            .translateXAxisX,
                                                        ", "
                                                    )
                                                    .concat(
                                                        e.globals
                                                            .translateXAxisY,
                                                        ")"
                                                    ),
                                            });
                                        a.add(r);
                                        var s =
                                                e.globals.yAxisScale[t].result
                                                    .length - 1,
                                            n = e.globals.gridWidth / s + 0.1,
                                            o =
                                                n +
                                                e.config.xaxis.labels.offsetX,
                                            l = e.globals.xLabelFormatter,
                                            c =
                                                e.globals.yAxisScale[
                                                    t
                                                ].result.slice(),
                                            h = e.globals.timescaleLabels;
                                        h.length > 0 &&
                                            ((this.xaxisLabels = h.slice()),
                                            (s = (c = h.slice()).length)),
                                            (c =
                                                this.axesUtils.checkForReversedLabels(
                                                    t,
                                                    c
                                                ));
                                        var d = h.length;
                                        if (e.config.xaxis.labels.show)
                                            for (
                                                var u = d ? 0 : s;
                                                d ? u < d : u >= 0;
                                                d ? u++ : u--
                                            ) {
                                                var f = c[u];
                                                f = l(f, u, e);
                                                var g =
                                                    e.globals.gridWidth +
                                                    e.globals.padHorizontal -
                                                    (o -
                                                        n +
                                                        e.config.xaxis.labels
                                                            .offsetX);
                                                if (h.length) {
                                                    var p =
                                                        this.axesUtils.getLabel(
                                                            c,
                                                            h,
                                                            g,
                                                            u,
                                                            this.drawnLabels,
                                                            this.xaxisFontSize
                                                        );
                                                    (g = p.x),
                                                        (f = p.text),
                                                        this.drawnLabels.push(
                                                            p.text
                                                        ),
                                                        0 === u &&
                                                            e.globals
                                                                .skipFirstTimelinelabel &&
                                                            (f = ""),
                                                        u === c.length - 1 &&
                                                            e.globals
                                                                .skipLastTimelinelabel &&
                                                            (f = "");
                                                }
                                                var x = i.drawText({
                                                    x: g,
                                                    y:
                                                        this.xAxisoffX +
                                                        e.config.xaxis.labels
                                                            .offsetY +
                                                        30 -
                                                        ("top" ===
                                                        e.config.xaxis.position
                                                            ? e.globals
                                                                  .xAxisHeight +
                                                              e.config.xaxis
                                                                  .axisTicks
                                                                  .height -
                                                              2
                                                            : 0),
                                                    text: f,
                                                    textAnchor: "middle",
                                                    foreColor: Array.isArray(
                                                        this.xaxisForeColors
                                                    )
                                                        ? this.xaxisForeColors[
                                                              t
                                                          ]
                                                        : this.xaxisForeColors,
                                                    fontSize:
                                                        this.xaxisFontSize,
                                                    fontFamily:
                                                        this.xaxisFontFamily,
                                                    fontWeight:
                                                        e.config.xaxis.labels
                                                            .style.fontWeight,
                                                    isPlainText: !1,
                                                    cssClass:
                                                        "apexcharts-xaxis-label " +
                                                        e.config.xaxis.labels
                                                            .style.cssClass,
                                                });
                                                r.add(x), x.tspan(f);
                                                var m =
                                                    document.createElementNS(
                                                        e.globals.SVGNS,
                                                        "title"
                                                    );
                                                (m.textContent = f),
                                                    x.node.appendChild(m),
                                                    (o += n);
                                            }
                                        return (
                                            this.inversedYAxisTitleText(a),
                                            this.inversedYAxisBorder(a),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "inversedYAxisBorder",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new k(this.ctx),
                                            a = e.config.xaxis.axisBorder;
                                        if (a.show) {
                                            var r = 0;
                                            "bar" === e.config.chart.type &&
                                                e.globals.isXNumeric &&
                                                (r -= 15);
                                            var s = i.drawLine(
                                                e.globals.padHorizontal +
                                                    r +
                                                    a.offsetX,
                                                this.xAxisoffX,
                                                e.globals.gridWidth,
                                                this.xAxisoffX,
                                                a.color,
                                                0,
                                                a.height
                                            );
                                            this.elgrid &&
                                            this.elgrid.elGridBorders &&
                                            e.config.grid.show
                                                ? this.elgrid.elGridBorders.add(
                                                      s
                                                  )
                                                : t.add(s);
                                        }
                                    },
                                },
                                {
                                    key: "inversedYAxisTitleText",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new k(this.ctx);
                                        if (
                                            void 0 !== e.config.xaxis.title.text
                                        ) {
                                            var a = i.group({
                                                    class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed",
                                                }),
                                                r = i.drawText({
                                                    x:
                                                        e.globals.gridWidth /
                                                            2 +
                                                        e.config.xaxis.title
                                                            .offsetX,
                                                    y:
                                                        this.xAxisoffX +
                                                        parseFloat(
                                                            this.xaxisFontSize
                                                        ) +
                                                        parseFloat(
                                                            e.config.xaxis.title
                                                                .style.fontSize
                                                        ) +
                                                        e.config.xaxis.title
                                                            .offsetY +
                                                        20,
                                                    text: e.config.xaxis.title
                                                        .text,
                                                    textAnchor: "middle",
                                                    fontSize:
                                                        e.config.xaxis.title
                                                            .style.fontSize,
                                                    fontFamily:
                                                        e.config.xaxis.title
                                                            .style.fontFamily,
                                                    fontWeight:
                                                        e.config.xaxis.title
                                                            .style.fontWeight,
                                                    foreColor:
                                                        e.config.xaxis.title
                                                            .style.color,
                                                    cssClass:
                                                        "apexcharts-xaxis-title-text " +
                                                        e.config.xaxis.title
                                                            .style.cssClass,
                                                });
                                            a.add(r), t.add(a);
                                        }
                                    },
                                },
                                {
                                    key: "yAxisTitleRotate",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = new k(this.ctx),
                                            r = { width: 0, height: 0 },
                                            s = { width: 0, height: 0 },
                                            n =
                                                i.globals.dom.baseEl.querySelector(
                                                    " .apexcharts-yaxis[rel='".concat(
                                                        t,
                                                        "'] .apexcharts-yaxis-texts-g"
                                                    )
                                                );
                                        null !== n &&
                                            (r = n.getBoundingClientRect());
                                        var o =
                                            i.globals.dom.baseEl.querySelector(
                                                ".apexcharts-yaxis[rel='".concat(
                                                    t,
                                                    "'] .apexcharts-yaxis-title text"
                                                )
                                            );
                                        if (
                                            (null !== o &&
                                                (s = o.getBoundingClientRect()),
                                            null !== o)
                                        ) {
                                            var l = this.xPaddingForYAxisTitle(
                                                t,
                                                r,
                                                s,
                                                e
                                            );
                                            o.setAttribute(
                                                "x",
                                                l.xPos - (e ? 10 : 0)
                                            );
                                        }
                                        if (null !== o) {
                                            var c = a.rotateAroundCenter(o);
                                            o.setAttribute(
                                                "transform",
                                                "rotate("
                                                    .concat(
                                                        e
                                                            ? -1 *
                                                                  i.config
                                                                      .yaxis[t]
                                                                      .title
                                                                      .rotate
                                                            : i.config.yaxis[t]
                                                                  .title.rotate,
                                                        " "
                                                    )
                                                    .concat(c.x, " ")
                                                    .concat(c.y, ")")
                                            );
                                        }
                                    },
                                },
                                {
                                    key: "xPaddingForYAxisTitle",
                                    value: function (t, e, i, a) {
                                        var r = this.w,
                                            s = 0,
                                            n = 0,
                                            o = 10;
                                        return void 0 ===
                                            r.config.yaxis[t].title.text ||
                                            t < 0
                                            ? { xPos: n, padd: 0 }
                                            : (a
                                                  ? ((n =
                                                        e.width +
                                                        r.config.yaxis[t].title
                                                            .offsetX +
                                                        i.width / 2 +
                                                        o / 2),
                                                    0 === (s += 1) &&
                                                        (n -= o / 2))
                                                  : ((n =
                                                        -1 * e.width +
                                                        r.config.yaxis[t].title
                                                            .offsetX +
                                                        o / 2 +
                                                        i.width / 2),
                                                    r.globals.isBarHorizontal &&
                                                        ((o = 25),
                                                        (n =
                                                            -1 * e.width -
                                                            r.config.yaxis[t]
                                                                .title.offsetX -
                                                            o))),
                                              { xPos: n, padd: o });
                                    },
                                },
                                {
                                    key: "setYAxisXPosition",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = 0,
                                            r = 0,
                                            s = 18,
                                            n = 1;
                                        i.config.yaxis.length > 1 &&
                                            (this.multipleYs = !0),
                                            i.config.yaxis.map(function (o, l) {
                                                var c =
                                                        i.globals.ignoreYAxisIndexes.indexOf(
                                                            l
                                                        ) > -1 ||
                                                        !o.show ||
                                                        o.floating ||
                                                        0 === t[l].width,
                                                    h = t[l].width + e[l].width;
                                                o.opposite
                                                    ? i.globals.isBarHorizontal
                                                        ? ((r =
                                                              i.globals
                                                                  .gridWidth +
                                                              i.globals
                                                                  .translateX -
                                                              1),
                                                          (i.globals.translateYAxisX[
                                                              l
                                                          ] =
                                                              r -
                                                              o.labels.offsetX))
                                                        : ((r =
                                                              i.globals
                                                                  .gridWidth +
                                                              i.globals
                                                                  .translateX +
                                                              n),
                                                          c || (n = n + h + 20),
                                                          (i.globals.translateYAxisX[
                                                              l
                                                          ] =
                                                              r -
                                                              o.labels.offsetX +
                                                              20))
                                                    : ((a =
                                                          i.globals.translateX -
                                                          s),
                                                      c || (s = s + h + 20),
                                                      (i.globals.translateYAxisX[
                                                          l
                                                      ] =
                                                          a +
                                                          o.labels.offsetX));
                                            });
                                    },
                                },
                                {
                                    key: "setYAxisTextAlignments",
                                    value: function () {
                                        var t = this.w,
                                            e =
                                                t.globals.dom.baseEl.getElementsByClassName(
                                                    "apexcharts-yaxis"
                                                );
                                        (e = v.listToArray(e)).forEach(
                                            function (e, i) {
                                                var a = t.config.yaxis[i];
                                                if (
                                                    a &&
                                                    !a.floating &&
                                                    void 0 !== a.labels.align
                                                ) {
                                                    var r =
                                                            t.globals.dom.baseEl.querySelector(
                                                                ".apexcharts-yaxis[rel='".concat(
                                                                    i,
                                                                    "'] .apexcharts-yaxis-texts-g"
                                                                )
                                                            ),
                                                        s =
                                                            t.globals.dom.baseEl.querySelectorAll(
                                                                ".apexcharts-yaxis[rel='".concat(
                                                                    i,
                                                                    "'] .apexcharts-yaxis-label"
                                                                )
                                                            );
                                                    s = v.listToArray(s);
                                                    var n =
                                                        r.getBoundingClientRect();
                                                    "left" === a.labels.align
                                                        ? (s.forEach(function (
                                                              t,
                                                              e
                                                          ) {
                                                              t.setAttribute(
                                                                  "text-anchor",
                                                                  "start"
                                                              );
                                                          }),
                                                          a.opposite ||
                                                              r.setAttribute(
                                                                  "transform",
                                                                  "translate(-".concat(
                                                                      n.width,
                                                                      ", 0)"
                                                                  )
                                                              ))
                                                        : "center" ===
                                                          a.labels.align
                                                        ? (s.forEach(function (
                                                              t,
                                                              e
                                                          ) {
                                                              t.setAttribute(
                                                                  "text-anchor",
                                                                  "middle"
                                                              );
                                                          }),
                                                          r.setAttribute(
                                                              "transform",
                                                              "translate(".concat(
                                                                  (n.width /
                                                                      2) *
                                                                      (a.opposite
                                                                          ? 1
                                                                          : -1),
                                                                  ", 0)"
                                                              )
                                                          ))
                                                        : "right" ===
                                                              a.labels.align &&
                                                          (s.forEach(function (
                                                              t,
                                                              e
                                                          ) {
                                                              t.setAttribute(
                                                                  "text-anchor",
                                                                  "end"
                                                              );
                                                          }),
                                                          a.opposite &&
                                                              r.setAttribute(
                                                                  "transform",
                                                                  "translate(".concat(
                                                                      n.width,
                                                                      ", 0)"
                                                                  )
                                                              ));
                                                }
                                            }
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Q = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.documentEvent = v.bind(
                                    this.documentEvent,
                                    this
                                ));
                        }
                        return (
                            c(t, [
                                {
                                    key: "addEventListener",
                                    value: function (t, e) {
                                        var i = this.w;
                                        i.globals.events.hasOwnProperty(t)
                                            ? i.globals.events[t].push(e)
                                            : (i.globals.events[t] = [e]);
                                    },
                                },
                                {
                                    key: "removeEventListener",
                                    value: function (t, e) {
                                        var i = this.w;
                                        if (
                                            i.globals.events.hasOwnProperty(t)
                                        ) {
                                            var a =
                                                i.globals.events[t].indexOf(e);
                                            -1 !== a &&
                                                i.globals.events[t].splice(
                                                    a,
                                                    1
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "fireEvent",
                                    value: function (t, e) {
                                        var i = this.w;
                                        if (
                                            i.globals.events.hasOwnProperty(t)
                                        ) {
                                            (e && e.length) || (e = []);
                                            for (
                                                var a = i.globals.events[t],
                                                    r = a.length,
                                                    s = 0;
                                                s < r;
                                                s++
                                            )
                                                a[s].apply(null, e);
                                        }
                                    },
                                },
                                {
                                    key: "setupEventHandlers",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = this.ctx,
                                            a =
                                                e.globals.dom.baseEl.querySelector(
                                                    e.globals.chartClass
                                                );
                                        this.ctx.eventList.forEach(function (
                                            t
                                        ) {
                                            a.addEventListener(
                                                t,
                                                function (t) {
                                                    var a = Object.assign(
                                                        {},
                                                        e,
                                                        {
                                                            seriesIndex:
                                                                e.globals
                                                                    .capturedSeriesIndex,
                                                            dataPointIndex:
                                                                e.globals
                                                                    .capturedDataPointIndex,
                                                        }
                                                    );
                                                    "mousemove" === t.type ||
                                                    "touchmove" === t.type
                                                        ? "function" ==
                                                              typeof e.config
                                                                  .chart.events
                                                                  .mouseMove &&
                                                          e.config.chart.events.mouseMove(
                                                              t,
                                                              i,
                                                              a
                                                          )
                                                        : "mouseleave" ===
                                                              t.type ||
                                                          "touchleave" ===
                                                              t.type
                                                        ? "function" ==
                                                              typeof e.config
                                                                  .chart.events
                                                                  .mouseLeave &&
                                                          e.config.chart.events.mouseLeave(
                                                              t,
                                                              i,
                                                              a
                                                          )
                                                        : (("mouseup" ===
                                                              t.type &&
                                                              1 === t.which) ||
                                                              "touchend" ===
                                                                  t.type) &&
                                                          ("function" ==
                                                              typeof e.config
                                                                  .chart.events
                                                                  .click &&
                                                              e.config.chart.events.click(
                                                                  t,
                                                                  i,
                                                                  a
                                                              ),
                                                          i.ctx.events.fireEvent(
                                                              "click",
                                                              [t, i, a]
                                                          ));
                                                },
                                                { capture: !1, passive: !0 }
                                            );
                                        }),
                                            this.ctx.eventList.forEach(
                                                function (i) {
                                                    e.globals.dom.baseEl.addEventListener(
                                                        i,
                                                        t.documentEvent,
                                                        { passive: !0 }
                                                    );
                                                }
                                            ),
                                            this.ctx.core.setupBrushHandler();
                                    },
                                },
                                {
                                    key: "documentEvent",
                                    value: function (t) {
                                        var e = this.w,
                                            i = t.target.className;
                                        if ("click" === t.type) {
                                            var a =
                                                e.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-menu"
                                                );
                                            a &&
                                                a.classList.contains(
                                                    "apexcharts-menu-open"
                                                ) &&
                                                "apexcharts-menu-icon" !== i &&
                                                a.classList.remove(
                                                    "apexcharts-menu-open"
                                                );
                                        }
                                        (e.globals.clientX =
                                            "touchmove" === t.type
                                                ? t.touches[0].clientX
                                                : t.clientX),
                                            (e.globals.clientY =
                                                "touchmove" === t.type
                                                    ? t.touches[0].clientY
                                                    : t.clientY);
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    K = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "setCurrentLocaleValues",
                                    value: function (t) {
                                        var e = this.w.config.chart.locales;
                                        window.Apex.chart &&
                                            window.Apex.chart.locales &&
                                            window.Apex.chart.locales.length >
                                                0 &&
                                            (e =
                                                this.w.config.chart.locales.concat(
                                                    window.Apex.chart.locales
                                                ));
                                        var i = e.filter(function (e) {
                                            return e.name === t;
                                        })[0];
                                        if (!i)
                                            throw new Error(
                                                "Wrong locale name provided. Please make sure you set the correct locale name in options"
                                            );
                                        var a = v.extend(T, i);
                                        this.w.globals.locale = a.options;
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    tt = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawAxis",
                                    value: function (t, e) {
                                        var i,
                                            a,
                                            r = this,
                                            s = this.w.globals,
                                            n = this.w.config,
                                            o = new U(this.ctx, e),
                                            l = new J(this.ctx, e);
                                        s.axisCharts &&
                                            "radar" !== t &&
                                            (s.isBarHorizontal
                                                ? ((a = l.drawYaxisInversed(0)),
                                                  (i = o.drawXaxisInversed(0)),
                                                  s.dom.elGraphical.add(i),
                                                  s.dom.elGraphical.add(a))
                                                : ((i = o.drawXaxis()),
                                                  s.dom.elGraphical.add(i),
                                                  n.yaxis.map(function (t, e) {
                                                      if (
                                                          -1 ===
                                                              s.ignoreYAxisIndexes.indexOf(
                                                                  e
                                                              ) &&
                                                          ((a = l.drawYaxis(e)),
                                                          s.dom.Paper.add(a),
                                                          "back" ===
                                                              r.w.config.grid
                                                                  .position)
                                                      ) {
                                                          var i =
                                                              s.dom.Paper.children()[1];
                                                          i.remove(),
                                                              s.dom.Paper.add(
                                                                  i
                                                              );
                                                      }
                                                  })));
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    et = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawXCrosshairs",
                                    value: function () {
                                        var t = this.w,
                                            e = new k(this.ctx),
                                            i = new w(this.ctx),
                                            a =
                                                t.config.xaxis.crosshairs.fill
                                                    .gradient,
                                            r =
                                                t.config.xaxis.crosshairs
                                                    .dropShadow,
                                            s =
                                                t.config.xaxis.crosshairs.fill
                                                    .type,
                                            n = a.colorFrom,
                                            o = a.colorTo,
                                            l = a.opacityFrom,
                                            c = a.opacityTo,
                                            h = a.stops,
                                            d = r.enabled,
                                            u = r.left,
                                            f = r.top,
                                            g = r.blur,
                                            p = r.color,
                                            x = r.opacity,
                                            m =
                                                t.config.xaxis.crosshairs.fill
                                                    .color;
                                        if (t.config.xaxis.crosshairs.show) {
                                            "gradient" === s &&
                                                (m = e.drawGradient(
                                                    "vertical",
                                                    n,
                                                    o,
                                                    l,
                                                    c,
                                                    null,
                                                    h,
                                                    null
                                                ));
                                            var b = e.drawRect();
                                            1 ===
                                                t.config.xaxis.crosshairs
                                                    .width &&
                                                (b = e.drawLine());
                                            var y = t.globals.gridHeight;
                                            (!v.isNumber(y) || y < 0) &&
                                                (y = 0);
                                            var A =
                                                t.config.xaxis.crosshairs.width;
                                            (!v.isNumber(A) || A < 0) &&
                                                (A = 0),
                                                b.attr({
                                                    class: "apexcharts-xcrosshairs",
                                                    x: 0,
                                                    y: 0,
                                                    y2: y,
                                                    width: A,
                                                    height: y,
                                                    fill: m,
                                                    filter: "none",
                                                    "fill-opacity":
                                                        t.config.xaxis
                                                            .crosshairs.opacity,
                                                    stroke: t.config.xaxis
                                                        .crosshairs.stroke
                                                        .color,
                                                    "stroke-width":
                                                        t.config.xaxis
                                                            .crosshairs.stroke
                                                            .width,
                                                    "stroke-dasharray":
                                                        t.config.xaxis
                                                            .crosshairs.stroke
                                                            .dashArray,
                                                }),
                                                d &&
                                                    (b = i.dropShadow(b, {
                                                        left: u,
                                                        top: f,
                                                        blur: g,
                                                        color: p,
                                                        opacity: x,
                                                    })),
                                                t.globals.dom.elGraphical.add(
                                                    b
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "drawYCrosshairs",
                                    value: function () {
                                        var t = this.w,
                                            e = new k(this.ctx),
                                            i = t.config.yaxis[0].crosshairs,
                                            a = t.globals.barPadForNumericAxis;
                                        if (t.config.yaxis[0].crosshairs.show) {
                                            var r = e.drawLine(
                                                -a,
                                                0,
                                                t.globals.gridWidth + a,
                                                0,
                                                i.stroke.color,
                                                i.stroke.dashArray,
                                                i.stroke.width
                                            );
                                            r.attr({
                                                class: "apexcharts-ycrosshairs",
                                            }),
                                                t.globals.dom.elGraphical.add(
                                                    r
                                                );
                                        }
                                        var s = e.drawLine(
                                            -a,
                                            0,
                                            t.globals.gridWidth + a,
                                            0,
                                            i.stroke.color,
                                            0,
                                            0
                                        );
                                        s.attr({
                                            class: "apexcharts-ycrosshairs-hidden",
                                        }),
                                            t.globals.dom.elGraphical.add(s);
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    it = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "checkResponsiveConfig",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w,
                                            a = i.config;
                                        if (0 !== a.responsive.length) {
                                            var r = a.responsive.slice();
                                            r.sort(function (t, e) {
                                                return t.breakpoint >
                                                    e.breakpoint
                                                    ? 1
                                                    : e.breakpoint >
                                                      t.breakpoint
                                                    ? -1
                                                    : 0;
                                            }).reverse();
                                            var s = new N({}),
                                                n = function () {
                                                    var t =
                                                            arguments.length >
                                                                0 &&
                                                            void 0 !==
                                                                arguments[0]
                                                                ? arguments[0]
                                                                : {},
                                                        a = r[0].breakpoint,
                                                        n =
                                                            window.innerWidth >
                                                            0
                                                                ? window.innerWidth
                                                                : screen.width;
                                                    if (n > a) {
                                                        var o =
                                                            A.extendArrayProps(
                                                                s,
                                                                i.globals
                                                                    .initialConfig,
                                                                i
                                                            );
                                                        (t = v.extend(o, t)),
                                                            (t = v.extend(
                                                                i.config,
                                                                t
                                                            )),
                                                            e.overrideResponsiveOptions(
                                                                t
                                                            );
                                                    } else
                                                        for (
                                                            var l = 0;
                                                            l < r.length;
                                                            l++
                                                        )
                                                            n <
                                                                r[l]
                                                                    .breakpoint &&
                                                                ((t =
                                                                    A.extendArrayProps(
                                                                        s,
                                                                        r[l]
                                                                            .options,
                                                                        i
                                                                    )),
                                                                (t = v.extend(
                                                                    i.config,
                                                                    t
                                                                )),
                                                                e.overrideResponsiveOptions(
                                                                    t
                                                                ));
                                                };
                                            if (t) {
                                                var o = A.extendArrayProps(
                                                    s,
                                                    t,
                                                    i
                                                );
                                                (o = v.extend(i.config, o)),
                                                    n((o = v.extend(o, t)));
                                            } else n({});
                                        }
                                    },
                                },
                                {
                                    key: "overrideResponsiveOptions",
                                    value: function (t) {
                                        var e = new N(t).init({
                                            responsiveOverride: !0,
                                        });
                                        this.w.config = e;
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    at = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.colors = []),
                                (this.w = e.w);
                            var i = this.w;
                            (this.isColorFn = !1),
                                (this.isHeatmapDistributed =
                                    ("treemap" === i.config.chart.type &&
                                        i.config.plotOptions.treemap
                                            .distributed) ||
                                    ("heatmap" === i.config.chart.type &&
                                        i.config.plotOptions.heatmap
                                            .distributed)),
                                (this.isBarDistributed =
                                    i.config.plotOptions.bar.distributed &&
                                    ("bar" === i.config.chart.type ||
                                        "rangeBar" === i.config.chart.type));
                        }
                        return (
                            c(t, [
                                {
                                    key: "init",
                                    value: function () {
                                        this.setDefaultColors();
                                    },
                                },
                                {
                                    key: "setDefaultColors",
                                    value: function () {
                                        var t,
                                            e = this,
                                            i = this.w,
                                            a = new v();
                                        if (
                                            (i.globals.dom.elWrap.classList.add(
                                                "apexcharts-theme-".concat(
                                                    i.config.theme.mode
                                                )
                                            ),
                                            void 0 === i.config.colors ||
                                            0 ===
                                                (null ===
                                                    (t = i.config.colors) ||
                                                void 0 === t
                                                    ? void 0
                                                    : t.length)
                                                ? (i.globals.colors =
                                                      this.predefined())
                                                : ((i.globals.colors =
                                                      i.config.colors),
                                                  Array.isArray(
                                                      i.config.colors
                                                  ) &&
                                                      i.config.colors.length >
                                                          0 &&
                                                      "function" ==
                                                          typeof i.config
                                                              .colors[0] &&
                                                      (i.globals.colors =
                                                          i.config.series.map(
                                                              function (t, a) {
                                                                  var r =
                                                                      i.config
                                                                          .colors[
                                                                          a
                                                                      ];
                                                                  return (
                                                                      r ||
                                                                          (r =
                                                                              i
                                                                                  .config
                                                                                  .colors[0]),
                                                                      "function" ==
                                                                      typeof r
                                                                          ? ((e.isColorFn =
                                                                                !0),
                                                                            r({
                                                                                value: i
                                                                                    .globals
                                                                                    .axisCharts
                                                                                    ? i
                                                                                          .globals
                                                                                          .series[
                                                                                          a
                                                                                      ][0]
                                                                                        ? i
                                                                                              .globals
                                                                                              .series[
                                                                                              a
                                                                                          ][0]
                                                                                        : 0
                                                                                    : i
                                                                                          .globals
                                                                                          .series[
                                                                                          a
                                                                                      ],
                                                                                seriesIndex:
                                                                                    a,
                                                                                dataPointIndex:
                                                                                    a,
                                                                                w: i,
                                                                            }))
                                                                          : r
                                                                  );
                                                              }
                                                          ))),
                                            i.globals.seriesColors.map(
                                                function (t, e) {
                                                    t &&
                                                        (i.globals.colors[e] =
                                                            t);
                                                }
                                            ),
                                            i.config.theme.monochrome.enabled)
                                        ) {
                                            var r = [],
                                                s = i.globals.series.length;
                                            (this.isBarDistributed ||
                                                this.isHeatmapDistributed) &&
                                                (s =
                                                    i.globals.series[0].length *
                                                    i.globals.series.length);
                                            for (
                                                var n =
                                                        i.config.theme
                                                            .monochrome.color,
                                                    o =
                                                        1 /
                                                        (s /
                                                            i.config.theme
                                                                .monochrome
                                                                .shadeIntensity),
                                                    l =
                                                        i.config.theme
                                                            .monochrome.shadeTo,
                                                    c = 0,
                                                    h = 0;
                                                h < s;
                                                h++
                                            ) {
                                                var d = void 0;
                                                "dark" === l
                                                    ? ((d = a.shadeColor(
                                                          -1 * c,
                                                          n
                                                      )),
                                                      (c += o))
                                                    : ((d = a.shadeColor(c, n)),
                                                      (c += o)),
                                                    r.push(d);
                                            }
                                            i.globals.colors = r.slice();
                                        }
                                        var u = i.globals.colors.slice();
                                        this.pushExtraColors(i.globals.colors),
                                            ["fill", "stroke"].forEach(
                                                function (t) {
                                                    void 0 ===
                                                    i.config[t].colors
                                                        ? (i.globals[t].colors =
                                                              e.isColorFn
                                                                  ? i.config
                                                                        .colors
                                                                  : u)
                                                        : (i.globals[t].colors =
                                                              i.config[
                                                                  t
                                                              ].colors.slice()),
                                                        e.pushExtraColors(
                                                            i.globals[t].colors
                                                        );
                                                }
                                            ),
                                            void 0 ===
                                            i.config.dataLabels.style.colors
                                                ? (i.globals.dataLabels.style.colors =
                                                      u)
                                                : (i.globals.dataLabels.style.colors =
                                                      i.config.dataLabels.style.colors.slice()),
                                            this.pushExtraColors(
                                                i.globals.dataLabels.style
                                                    .colors,
                                                50
                                            ),
                                            void 0 ===
                                            i.config.plotOptions.radar.polygons
                                                .fill.colors
                                                ? (i.globals.radarPolygons.fill.colors =
                                                      [
                                                          "dark" ===
                                                          i.config.theme.mode
                                                              ? "#424242"
                                                              : "none",
                                                      ])
                                                : (i.globals.radarPolygons.fill.colors =
                                                      i.config.plotOptions.radar.polygons.fill.colors.slice()),
                                            this.pushExtraColors(
                                                i.globals.radarPolygons.fill
                                                    .colors,
                                                20
                                            ),
                                            void 0 === i.config.markers.colors
                                                ? (i.globals.markers.colors = u)
                                                : (i.globals.markers.colors =
                                                      i.config.markers.colors.slice()),
                                            this.pushExtraColors(
                                                i.globals.markers.colors
                                            );
                                    },
                                },
                                {
                                    key: "pushExtraColors",
                                    value: function (t, e) {
                                        var i =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : null,
                                            a = this.w,
                                            r = e || a.globals.series.length;
                                        if (
                                            (null === i &&
                                                (i =
                                                    this.isBarDistributed ||
                                                    this.isHeatmapDistributed ||
                                                    ("heatmap" ===
                                                        a.config.chart.type &&
                                                        a.config.plotOptions
                                                            .heatmap.colorScale
                                                            .inverse)),
                                            i &&
                                                a.globals.series.length &&
                                                (r =
                                                    a.globals.series[
                                                        a.globals
                                                            .maxValsInArrayIndex
                                                    ].length *
                                                    a.globals.series.length),
                                            t.length < r)
                                        )
                                            for (
                                                var s = r - t.length, n = 0;
                                                n < s;
                                                n++
                                            )
                                                t.push(t[n]);
                                    },
                                },
                                {
                                    key: "updateThemeOptions",
                                    value: function (t) {
                                        (t.chart = t.chart || {}),
                                            (t.tooltip = t.tooltip || {});
                                        var e = t.theme.mode || "light",
                                            i = t.theme.palette
                                                ? t.theme.palette
                                                : "dark" === e
                                                ? "palette4"
                                                : "palette1",
                                            a = t.chart.foreColor
                                                ? t.chart.foreColor
                                                : "dark" === e
                                                ? "#f6f7f8"
                                                : "#373d3f";
                                        return (
                                            (t.tooltip.theme = e),
                                            (t.chart.foreColor = a),
                                            (t.theme.palette = i),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "predefined",
                                    value: function () {
                                        switch (this.w.config.theme.palette) {
                                            case "palette1":
                                            default:
                                                this.colors = [
                                                    "#008FFB",
                                                    "#00E396",
                                                    "#FEB019",
                                                    "#FF4560",
                                                    "#775DD0",
                                                ];
                                                break;
                                            case "palette2":
                                                this.colors = [
                                                    "#3f51b5",
                                                    "#03a9f4",
                                                    "#4caf50",
                                                    "#f9ce1d",
                                                    "#FF9800",
                                                ];
                                                break;
                                            case "palette3":
                                                this.colors = [
                                                    "#33b2df",
                                                    "#546E7A",
                                                    "#d4526e",
                                                    "#13d8aa",
                                                    "#A5978B",
                                                ];
                                                break;
                                            case "palette4":
                                                this.colors = [
                                                    "#4ecdc4",
                                                    "#c7f464",
                                                    "#81D4FA",
                                                    "#fd6a6a",
                                                    "#546E7A",
                                                ];
                                                break;
                                            case "palette5":
                                                this.colors = [
                                                    "#2b908f",
                                                    "#f9a3a4",
                                                    "#90ee7e",
                                                    "#fa4443",
                                                    "#69d2e7",
                                                ];
                                                break;
                                            case "palette6":
                                                this.colors = [
                                                    "#449DD1",
                                                    "#F86624",
                                                    "#EA3546",
                                                    "#662E9B",
                                                    "#C5D86D",
                                                ];
                                                break;
                                            case "palette7":
                                                this.colors = [
                                                    "#D7263D",
                                                    "#1B998B",
                                                    "#2E294E",
                                                    "#F46036",
                                                    "#E2C044",
                                                ];
                                                break;
                                            case "palette8":
                                                this.colors = [
                                                    "#662E9B",
                                                    "#F86624",
                                                    "#F9C80E",
                                                    "#EA3546",
                                                    "#43BCCD",
                                                ];
                                                break;
                                            case "palette9":
                                                this.colors = [
                                                    "#5C4742",
                                                    "#A5978B",
                                                    "#8D5B4C",
                                                    "#5A2A27",
                                                    "#C4BBAF",
                                                ];
                                                break;
                                            case "palette10":
                                                this.colors = [
                                                    "#A300D6",
                                                    "#7D02EB",
                                                    "#5653FE",
                                                    "#2983FF",
                                                    "#00B1F2",
                                                ];
                                        }
                                        return this.colors;
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    rt = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "draw",
                                    value: function () {
                                        this.drawTitleSubtitle("title"),
                                            this.drawTitleSubtitle("subtitle");
                                    },
                                },
                                {
                                    key: "drawTitleSubtitle",
                                    value: function (t) {
                                        var e = this.w,
                                            i =
                                                "title" === t
                                                    ? e.config.title
                                                    : e.config.subtitle,
                                            a = e.globals.svgWidth / 2,
                                            r = i.offsetY,
                                            s = "middle";
                                        if (
                                            ("left" === i.align
                                                ? ((a = 10), (s = "start"))
                                                : "right" === i.align &&
                                                  ((a =
                                                      e.globals.svgWidth - 10),
                                                  (s = "end")),
                                            (a += i.offsetX),
                                            (r =
                                                r +
                                                parseInt(i.style.fontSize, 10) +
                                                i.margin / 2),
                                            void 0 !== i.text)
                                        ) {
                                            var n = new k(this.ctx).drawText({
                                                x: a,
                                                y: r,
                                                text: i.text,
                                                textAnchor: s,
                                                fontSize: i.style.fontSize,
                                                fontFamily: i.style.fontFamily,
                                                fontWeight: i.style.fontWeight,
                                                foreColor: i.style.color,
                                                opacity: 1,
                                            });
                                            n.node.setAttribute(
                                                "class",
                                                "apexcharts-".concat(t, "-text")
                                            ),
                                                e.globals.dom.Paper.add(n);
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    st = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w), (this.dCtx = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "getTitleSubtitleCoords",
                                    value: function (t) {
                                        var e = this.w,
                                            i = 0,
                                            a = 0,
                                            r =
                                                "title" === t
                                                    ? e.config.title.floating
                                                    : e.config.subtitle
                                                          .floating,
                                            s =
                                                e.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-".concat(
                                                        t,
                                                        "-text"
                                                    )
                                                );
                                        if (null !== s && !r) {
                                            var n = s.getBoundingClientRect();
                                            (i = n.width),
                                                (a = e.globals.axisCharts
                                                    ? n.height + 5
                                                    : n.height);
                                        }
                                        return { width: i, height: a };
                                    },
                                },
                                {
                                    key: "getLegendsRect",
                                    value: function () {
                                        var t = this.w,
                                            e = t.globals.dom.elLegendWrap;
                                        t.config.legend.height ||
                                            ("top" !==
                                                t.config.legend.position &&
                                                "bottom" !==
                                                    t.config.legend.position) ||
                                            (e.style.maxHeight =
                                                t.globals.svgHeight / 2 + "px");
                                        var i = Object.assign(
                                            {},
                                            v.getBoundingClientRect(e)
                                        );
                                        return (
                                            null !== e &&
                                            !t.config.legend.floating &&
                                            t.config.legend.show
                                                ? (this.dCtx.lgRect = {
                                                      x: i.x,
                                                      y: i.y,
                                                      height: i.height,
                                                      width:
                                                          0 === i.height
                                                              ? 0
                                                              : i.width,
                                                  })
                                                : (this.dCtx.lgRect = {
                                                      x: 0,
                                                      y: 0,
                                                      height: 0,
                                                      width: 0,
                                                  }),
                                            ("left" !==
                                                t.config.legend.position &&
                                                "right" !==
                                                    t.config.legend.position) ||
                                                (1.5 * this.dCtx.lgRect.width >
                                                    t.globals.svgWidth &&
                                                    (this.dCtx.lgRect.width =
                                                        t.globals.svgWidth /
                                                        1.5)),
                                            this.dCtx.lgRect
                                        );
                                    },
                                },
                                {
                                    key: "getLargestStringFromMultiArr",
                                    value: function (t, e) {
                                        var i = t;
                                        if (this.w.globals.isMultiLineX) {
                                            var a = e.map(function (t, e) {
                                                    return Array.isArray(t)
                                                        ? t.length
                                                        : 1;
                                                }),
                                                r = Math.max.apply(Math, x(a));
                                            i = e[a.indexOf(r)];
                                        }
                                        return i;
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    nt = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w), (this.dCtx = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "getxAxisLabelsCoords",
                                    value: function () {
                                        var t,
                                            e = this.w,
                                            i = e.globals.labels.slice();
                                        if (
                                            (e.config.xaxis
                                                .convertedCatToNumeric &&
                                                0 === i.length &&
                                                (i = e.globals.categoryLabels),
                                            e.globals.timescaleLabels.length >
                                                0)
                                        ) {
                                            var a =
                                                this.getxAxisTimeScaleLabelsCoords();
                                            (t = {
                                                width: a.width,
                                                height: a.height,
                                            }),
                                                (e.globals.rotateXLabels = !1);
                                        } else {
                                            this.dCtx.lgWidthForSideLegends =
                                                ("left" !==
                                                    e.config.legend.position &&
                                                    "right" !==
                                                        e.config.legend
                                                            .position) ||
                                                e.config.legend.floating
                                                    ? 0
                                                    : this.dCtx.lgRect.width;
                                            var r = e.globals.xLabelFormatter,
                                                s =
                                                    v.getLargestStringFromArr(
                                                        i
                                                    ),
                                                n =
                                                    this.dCtx.dimHelpers.getLargestStringFromMultiArr(
                                                        s,
                                                        i
                                                    );
                                            e.globals.isBarHorizontal &&
                                                (n = s =
                                                    e.globals.yAxisScale[0].result.reduce(
                                                        function (t, e) {
                                                            return t.length >
                                                                e.length
                                                                ? t
                                                                : e;
                                                        },
                                                        0
                                                    ));
                                            var o = new O(this.dCtx.ctx),
                                                l = s;
                                            (s = o.xLabelFormat(r, s, l, {
                                                i: void 0,
                                                dateFormatter: new I(
                                                    this.dCtx.ctx
                                                ).formatDate,
                                                w: e,
                                            })),
                                                (n = o.xLabelFormat(r, n, l, {
                                                    i: void 0,
                                                    dateFormatter: new I(
                                                        this.dCtx.ctx
                                                    ).formatDate,
                                                    w: e,
                                                })),
                                                ((e.config.xaxis
                                                    .convertedCatToNumeric &&
                                                    void 0 === s) ||
                                                    "" === String(s).trim()) &&
                                                    (n = s = "1");
                                            var c = new k(this.dCtx.ctx),
                                                h = c.getTextRects(
                                                    s,
                                                    e.config.xaxis.labels.style
                                                        .fontSize
                                                ),
                                                d = h;
                                            if (
                                                (s !== n &&
                                                    (d = c.getTextRects(
                                                        n,
                                                        e.config.xaxis.labels
                                                            .style.fontSize
                                                    )),
                                                ((t = {
                                                    width:
                                                        h.width >= d.width
                                                            ? h.width
                                                            : d.width,
                                                    height:
                                                        h.height >= d.height
                                                            ? h.height
                                                            : d.height,
                                                }).width *
                                                    i.length >
                                                    e.globals.svgWidth -
                                                        this.dCtx
                                                            .lgWidthForSideLegends -
                                                        this.dCtx.yAxisWidth -
                                                        this.dCtx.gridPad.left -
                                                        this.dCtx.gridPad
                                                            .right &&
                                                    0 !==
                                                        e.config.xaxis.labels
                                                            .rotate) ||
                                                    e.config.xaxis.labels
                                                        .rotateAlways)
                                            ) {
                                                if (
                                                    !e.globals.isBarHorizontal
                                                ) {
                                                    e.globals.rotateXLabels =
                                                        !0;
                                                    var u = function (t) {
                                                        return c.getTextRects(
                                                            t,
                                                            e.config.xaxis
                                                                .labels.style
                                                                .fontSize,
                                                            e.config.xaxis
                                                                .labels.style
                                                                .fontFamily,
                                                            "rotate(".concat(
                                                                e.config.xaxis
                                                                    .labels
                                                                    .rotate,
                                                                " 0 0)"
                                                            ),
                                                            !1
                                                        );
                                                    };
                                                    (h = u(s)),
                                                        s !== n && (d = u(n)),
                                                        (t.height =
                                                            (h.height > d.height
                                                                ? h.height
                                                                : d.height) /
                                                            1.5),
                                                        (t.width =
                                                            h.width > d.width
                                                                ? h.width
                                                                : d.width);
                                                }
                                            } else e.globals.rotateXLabels = !1;
                                        }
                                        return (
                                            e.config.xaxis.labels.show ||
                                                (t = { width: 0, height: 0 }),
                                            { width: t.width, height: t.height }
                                        );
                                    },
                                },
                                {
                                    key: "getxAxisGroupLabelsCoords",
                                    value: function () {
                                        var t,
                                            e = this.w;
                                        if (!e.globals.hasXaxisGroups)
                                            return { width: 0, height: 0 };
                                        var i,
                                            a =
                                                (null ===
                                                    (t =
                                                        e.config.xaxis.group
                                                            .style) ||
                                                void 0 === t
                                                    ? void 0
                                                    : t.fontSize) ||
                                                e.config.xaxis.labels.style
                                                    .fontSize,
                                            r = e.globals.groups.map(function (
                                                t
                                            ) {
                                                return t.title;
                                            }),
                                            s = v.getLargestStringFromArr(r),
                                            n =
                                                this.dCtx.dimHelpers.getLargestStringFromMultiArr(
                                                    s,
                                                    r
                                                ),
                                            o = new k(this.dCtx.ctx),
                                            l = o.getTextRects(s, a),
                                            c = l;
                                        return (
                                            s !== n &&
                                                (c = o.getTextRects(n, a)),
                                            (i = {
                                                width:
                                                    l.width >= c.width
                                                        ? l.width
                                                        : c.width,
                                                height:
                                                    l.height >= c.height
                                                        ? l.height
                                                        : c.height,
                                            }),
                                            e.config.xaxis.labels.show ||
                                                (i = { width: 0, height: 0 }),
                                            { width: i.width, height: i.height }
                                        );
                                    },
                                },
                                {
                                    key: "getxAxisTitleCoords",
                                    value: function () {
                                        var t = this.w,
                                            e = 0,
                                            i = 0;
                                        if (
                                            void 0 !== t.config.xaxis.title.text
                                        ) {
                                            var a = new k(
                                                this.dCtx.ctx
                                            ).getTextRects(
                                                t.config.xaxis.title.text,
                                                t.config.xaxis.title.style
                                                    .fontSize
                                            );
                                            (e = a.width), (i = a.height);
                                        }
                                        return { width: e, height: i };
                                    },
                                },
                                {
                                    key: "getxAxisTimeScaleLabelsCoords",
                                    value: function () {
                                        var t,
                                            e = this.w;
                                        this.dCtx.timescaleLabels =
                                            e.globals.timescaleLabels.slice();
                                        var i = this.dCtx.timescaleLabels.map(
                                                function (t) {
                                                    return t.value;
                                                }
                                            ),
                                            a = i.reduce(function (t, e) {
                                                return void 0 === t
                                                    ? (console.error(
                                                          "You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"
                                                      ),
                                                      0)
                                                    : t.length > e.length
                                                    ? t
                                                    : e;
                                            }, 0);
                                        return (
                                            1.05 *
                                                (t = new k(
                                                    this.dCtx.ctx
                                                ).getTextRects(
                                                    a,
                                                    e.config.xaxis.labels.style
                                                        .fontSize
                                                )).width *
                                                i.length >
                                                e.globals.gridWidth &&
                                                0 !==
                                                    e.config.xaxis.labels
                                                        .rotate &&
                                                (e.globals.overlappingXLabels =
                                                    !0),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "additionalPaddingXLabels",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w,
                                            a = i.globals,
                                            r = i.config,
                                            s = r.xaxis.type,
                                            n = t.width;
                                        (a.skipLastTimelinelabel = !1),
                                            (a.skipFirstTimelinelabel = !1);
                                        var o =
                                                i.config.yaxis[0].opposite &&
                                                i.globals.isBarHorizontal,
                                            l = function (t, o) {
                                                (r.yaxis.length > 1 &&
                                                    (function (t) {
                                                        return (
                                                            -1 !==
                                                            a.collapsedSeriesIndices.indexOf(
                                                                t
                                                            )
                                                        );
                                                    })(o)) ||
                                                    (function (t) {
                                                        if (
                                                            e.dCtx
                                                                .timescaleLabels &&
                                                            e.dCtx
                                                                .timescaleLabels
                                                                .length
                                                        ) {
                                                            var o =
                                                                    e.dCtx
                                                                        .timescaleLabels[0],
                                                                l =
                                                                    e.dCtx
                                                                        .timescaleLabels[
                                                                        e.dCtx
                                                                            .timescaleLabels
                                                                            .length -
                                                                            1
                                                                    ].position +
                                                                    n / 1.75 -
                                                                    e.dCtx
                                                                        .yAxisWidthRight,
                                                                c =
                                                                    o.position -
                                                                    n / 1.75 +
                                                                    e.dCtx
                                                                        .yAxisWidthLeft,
                                                                h =
                                                                    "right" ===
                                                                        i.config
                                                                            .legend
                                                                            .position &&
                                                                    e.dCtx
                                                                        .lgRect
                                                                        .width >
                                                                        0
                                                                        ? e.dCtx
                                                                              .lgRect
                                                                              .width
                                                                        : 0;
                                                            l >
                                                                a.svgWidth -
                                                                    a.translateX -
                                                                    h &&
                                                                (a.skipLastTimelinelabel =
                                                                    !0),
                                                                c <
                                                                    -((t.show &&
                                                                        !t.floating) ||
                                                                    ("bar" !==
                                                                        r.chart
                                                                            .type &&
                                                                        "candlestick" !==
                                                                            r
                                                                                .chart
                                                                                .type &&
                                                                        "rangeBar" !==
                                                                            r
                                                                                .chart
                                                                                .type &&
                                                                        "boxPlot" !==
                                                                            r
                                                                                .chart
                                                                                .type)
                                                                        ? 10
                                                                        : n /
                                                                          1.75) &&
                                                                    (a.skipFirstTimelinelabel =
                                                                        !0);
                                                        } else
                                                            "datetime" === s
                                                                ? e.dCtx.gridPad
                                                                      .right <
                                                                      n &&
                                                                  !a.rotateXLabels &&
                                                                  (a.skipLastTimelinelabel =
                                                                      !0)
                                                                : "datetime" !==
                                                                      s &&
                                                                  e.dCtx.gridPad
                                                                      .right <
                                                                      n / 2 -
                                                                          e.dCtx
                                                                              .yAxisWidthRight &&
                                                                  !a.rotateXLabels &&
                                                                  !i.config
                                                                      .xaxis
                                                                      .labels
                                                                      .trim &&
                                                                  ("between" !==
                                                                      i.config
                                                                          .xaxis
                                                                          .tickPlacement ||
                                                                      i.globals
                                                                          .isBarHorizontal) &&
                                                                  (e.dCtx.xPadRight =
                                                                      n / 2 +
                                                                      1);
                                                    })(t);
                                            };
                                        r.yaxis.forEach(function (t, i) {
                                            o
                                                ? (e.dCtx.gridPad.left < n &&
                                                      (e.dCtx.xPadLeft =
                                                          n / 2 + 1),
                                                  (e.dCtx.xPadRight =
                                                      n / 2 + 1))
                                                : l(t, i);
                                        });
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    ot = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w), (this.dCtx = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "getyAxisLabelsCoords",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = [],
                                            a = 10,
                                            r = new j(this.dCtx.ctx);
                                        return (
                                            e.config.yaxis.map(function (s, n) {
                                                var o = e.globals.yAxisScale[n],
                                                    l = 0;
                                                if (
                                                    (!r.isYAxisHidden(n) &&
                                                        s.labels.show &&
                                                        void 0 !==
                                                            s.labels.minWidth &&
                                                        (l = s.labels.minWidth),
                                                    !r.isYAxisHidden(n) &&
                                                        s.labels.show &&
                                                        o.result.length)
                                                ) {
                                                    var c =
                                                            e.globals
                                                                .yLabelFormatters[
                                                                n
                                                            ],
                                                        h =
                                                            o.niceMin ===
                                                            Number.MIN_VALUE
                                                                ? 0
                                                                : o.niceMin,
                                                        d =
                                                            String(h).length >
                                                            String(o.niceMax)
                                                                .length
                                                                ? h
                                                                : o.niceMax,
                                                        u = c(d, {
                                                            seriesIndex: n,
                                                            dataPointIndex: -1,
                                                            w: e,
                                                        }),
                                                        f = u;
                                                    if (
                                                        ((void 0 !== u &&
                                                            0 !== u.length) ||
                                                            (u = d),
                                                        e.globals
                                                            .isBarHorizontal)
                                                    ) {
                                                        a = 0;
                                                        var g =
                                                            e.globals.labels.slice();
                                                        (u = c(
                                                            (u =
                                                                v.getLargestStringFromArr(
                                                                    g
                                                                )),
                                                            {
                                                                seriesIndex: n,
                                                                dataPointIndex:
                                                                    -1,
                                                                w: e,
                                                            }
                                                        )),
                                                            (f =
                                                                t.dCtx.dimHelpers.getLargestStringFromMultiArr(
                                                                    u,
                                                                    g
                                                                ));
                                                    }
                                                    var p = new k(t.dCtx.ctx),
                                                        x = "rotate(".concat(
                                                            s.labels.rotate,
                                                            " 0 0)"
                                                        ),
                                                        m = p.getTextRects(
                                                            u,
                                                            s.labels.style
                                                                .fontSize,
                                                            s.labels.style
                                                                .fontFamily,
                                                            x,
                                                            !1
                                                        ),
                                                        b = m;
                                                    u !== f &&
                                                        (b = p.getTextRects(
                                                            f,
                                                            s.labels.style
                                                                .fontSize,
                                                            s.labels.style
                                                                .fontFamily,
                                                            x,
                                                            !1
                                                        )),
                                                        i.push({
                                                            width:
                                                                (l > b.width ||
                                                                l > m.width
                                                                    ? l
                                                                    : b.width >
                                                                      m.width
                                                                    ? b.width
                                                                    : m.width) +
                                                                a,
                                                            height:
                                                                b.height >
                                                                m.height
                                                                    ? b.height
                                                                    : m.height,
                                                        });
                                                } else i.push({ width: 0, height: 0 });
                                            }),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "getyAxisTitleCoords",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = [];
                                        return (
                                            e.config.yaxis.map(function (e, a) {
                                                if (
                                                    e.show &&
                                                    void 0 !== e.title.text
                                                ) {
                                                    var r = new k(t.dCtx.ctx),
                                                        s = "rotate(".concat(
                                                            e.title.rotate,
                                                            " 0 0)"
                                                        ),
                                                        n = r.getTextRects(
                                                            e.title.text,
                                                            e.title.style
                                                                .fontSize,
                                                            e.title.style
                                                                .fontFamily,
                                                            s,
                                                            !1
                                                        );
                                                    i.push({
                                                        width: n.width,
                                                        height: n.height,
                                                    });
                                                } else i.push({ width: 0, height: 0 });
                                            }),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "getTotalYAxisWidth",
                                    value: function () {
                                        var t = this.w,
                                            e = 0,
                                            i = 0,
                                            a = 0,
                                            r =
                                                t.globals.yAxisScale.length > 1
                                                    ? 10
                                                    : 0,
                                            s = new j(this.dCtx.ctx),
                                            n = function (n, o) {
                                                var l =
                                                        t.config.yaxis[o]
                                                            .floating,
                                                    c = 0;
                                                n.width > 0 && !l
                                                    ? ((c = n.width + r),
                                                      (function (e) {
                                                          return (
                                                              t.globals.ignoreYAxisIndexes.indexOf(
                                                                  e
                                                              ) > -1
                                                          );
                                                      })(o) &&
                                                          (c = c - n.width - r))
                                                    : (c =
                                                          l ||
                                                          s.isYAxisHidden(o)
                                                              ? 0
                                                              : 5),
                                                    t.config.yaxis[o].opposite
                                                        ? (a += c)
                                                        : (i += c),
                                                    (e += c);
                                            };
                                        return (
                                            t.globals.yLabelsCoords.map(
                                                function (t, e) {
                                                    n(t, e);
                                                }
                                            ),
                                            t.globals.yTitleCoords.map(
                                                function (t, e) {
                                                    n(t, e);
                                                }
                                            ),
                                            t.globals.isBarHorizontal &&
                                                !t.config.yaxis[0].floating &&
                                                (e =
                                                    t.globals.yLabelsCoords[0]
                                                        .width +
                                                    t.globals.yTitleCoords[0]
                                                        .width +
                                                    15),
                                            (this.dCtx.yAxisWidthLeft = i),
                                            (this.dCtx.yAxisWidthRight = a),
                                            e
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    lt = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w), (this.dCtx = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "gridPadForColumnsInNumericAxis",
                                    value: function (t) {
                                        var e = this.w;
                                        if (
                                            e.globals.noData ||
                                            e.globals.allSeriesCollapsed
                                        )
                                            return 0;
                                        var i = function (t) {
                                                return (
                                                    "bar" === t ||
                                                    "rangeBar" === t ||
                                                    "candlestick" === t ||
                                                    "boxPlot" === t
                                                );
                                            },
                                            a = e.config.chart.type,
                                            r = 0,
                                            s = i(a)
                                                ? e.config.series.length
                                                : 1;
                                        if (
                                            (e.globals.comboBarCount > 0 &&
                                                (s = e.globals.comboBarCount),
                                            e.globals.collapsedSeries.forEach(
                                                function (t) {
                                                    i(t.type) && (s -= 1);
                                                }
                                            ),
                                            e.config.chart.stacked && (s = 1),
                                            (i(a) ||
                                                e.globals.comboBarCount > 0) &&
                                                e.globals.isXNumeric &&
                                                !e.globals.isBarHorizontal &&
                                                s > 0)
                                        ) {
                                            var n,
                                                o,
                                                l = Math.abs(
                                                    e.globals.initialMaxX -
                                                        e.globals.initialMinX
                                                );
                                            l <= 3 &&
                                                (l = e.globals.dataPoints),
                                                (n = l / t),
                                                e.globals.minXDiff &&
                                                    e.globals.minXDiff / n >
                                                        0 &&
                                                    (o =
                                                        e.globals.minXDiff / n),
                                                o > t / 2 && (o /= 2),
                                                (r =
                                                    ((o / s) *
                                                        parseInt(
                                                            e.config.plotOptions
                                                                .bar
                                                                .columnWidth,
                                                            10
                                                        )) /
                                                    100) < 1 && (r = 1),
                                                (r = r / (s > 1 ? 1 : 1.5) + 5),
                                                (e.globals.barPadForNumericAxis =
                                                    r);
                                        }
                                        return r;
                                    },
                                },
                                {
                                    key: "gridPadFortitleSubtitle",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = e.globals,
                                            a =
                                                this.dCtx.isSparkline ||
                                                !e.globals.axisCharts
                                                    ? 0
                                                    : 10;
                                        ["title", "subtitle"].forEach(function (
                                            i
                                        ) {
                                            void 0 !== e.config[i].text
                                                ? (a += e.config[i].margin)
                                                : (a +=
                                                      t.dCtx.isSparkline ||
                                                      !e.globals.axisCharts
                                                          ? 0
                                                          : 5);
                                        }),
                                            !e.config.legend.show ||
                                                "bottom" !==
                                                    e.config.legend.position ||
                                                e.config.legend.floating ||
                                                e.globals.axisCharts ||
                                                (a += 10);
                                        var r =
                                                this.dCtx.dimHelpers.getTitleSubtitleCoords(
                                                    "title"
                                                ),
                                            s =
                                                this.dCtx.dimHelpers.getTitleSubtitleCoords(
                                                    "subtitle"
                                                );
                                        (i.gridHeight =
                                            i.gridHeight -
                                            r.height -
                                            s.height -
                                            a),
                                            (i.translateY =
                                                i.translateY +
                                                r.height +
                                                s.height +
                                                a);
                                    },
                                },
                                {
                                    key: "setGridXPosForDualYAxis",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = new j(this.dCtx.ctx);
                                        i.config.yaxis.map(function (r, s) {
                                            -1 !==
                                                i.globals.ignoreYAxisIndexes.indexOf(
                                                    s
                                                ) ||
                                                r.floating ||
                                                a.isYAxisHidden(s) ||
                                                (r.opposite &&
                                                    (i.globals.translateX =
                                                        i.globals.translateX -
                                                        (e[s].width +
                                                            t[s].width) -
                                                        parseInt(
                                                            i.config.yaxis[s]
                                                                .labels.style
                                                                .fontSize,
                                                            10
                                                        ) /
                                                            1.2 -
                                                        12),
                                                i.globals.translateX < 2 &&
                                                    (i.globals.translateX = 2));
                                        });
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    ct = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.lgRect = {}),
                                (this.yAxisWidth = 0),
                                (this.yAxisWidthLeft = 0),
                                (this.yAxisWidthRight = 0),
                                (this.xAxisHeight = 0),
                                (this.isSparkline =
                                    this.w.config.chart.sparkline.enabled),
                                (this.dimHelpers = new st(this)),
                                (this.dimYAxis = new ot(this)),
                                (this.dimXAxis = new nt(this)),
                                (this.dimGrid = new lt(this)),
                                (this.lgWidthForSideLegends = 0),
                                (this.gridPad = this.w.config.grid.padding),
                                (this.xPadRight = 0),
                                (this.xPadLeft = 0);
                        }
                        return (
                            c(t, [
                                {
                                    key: "plotCoords",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = e.globals;
                                        (this.lgRect =
                                            this.dimHelpers.getLegendsRect()),
                                            this.isSparkline &&
                                                (e.config.markers.discrete
                                                    .length > 0 ||
                                                    e.config.markers.size >
                                                        0) &&
                                                Object.entries(
                                                    this.gridPad
                                                ).forEach(function (e) {
                                                    var i = p(e, 2),
                                                        a = i[0],
                                                        r = i[1];
                                                    t.gridPad[a] = Math.max(
                                                        r,
                                                        t.w.globals.markers
                                                            .largestSize / 1.5
                                                    );
                                                }),
                                            i.axisCharts
                                                ? this.setDimensionsForAxisCharts()
                                                : this.setDimensionsForNonAxisCharts(),
                                            this.dimGrid.gridPadFortitleSubtitle(),
                                            (i.gridHeight =
                                                i.gridHeight -
                                                this.gridPad.top -
                                                this.gridPad.bottom),
                                            (i.gridWidth =
                                                i.gridWidth -
                                                this.gridPad.left -
                                                this.gridPad.right -
                                                this.xPadRight -
                                                this.xPadLeft);
                                        var a =
                                            this.dimGrid.gridPadForColumnsInNumericAxis(
                                                i.gridWidth
                                            );
                                        (i.gridWidth = i.gridWidth - 2 * a),
                                            (i.translateX =
                                                i.translateX +
                                                this.gridPad.left +
                                                this.xPadLeft +
                                                (a > 0 ? a + 4 : 0)),
                                            (i.translateY =
                                                i.translateY +
                                                this.gridPad.top);
                                    },
                                },
                                {
                                    key: "setDimensionsForAxisCharts",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = e.globals,
                                            a =
                                                this.dimYAxis.getyAxisLabelsCoords(),
                                            r =
                                                this.dimYAxis.getyAxisTitleCoords();
                                        (e.globals.yLabelsCoords = []),
                                            (e.globals.yTitleCoords = []),
                                            e.config.yaxis.map(function (t, i) {
                                                e.globals.yLabelsCoords.push({
                                                    width: a[i].width,
                                                    index: i,
                                                }),
                                                    e.globals.yTitleCoords.push(
                                                        {
                                                            width: r[i].width,
                                                            index: i,
                                                        }
                                                    );
                                            }),
                                            (this.yAxisWidth =
                                                this.dimYAxis.getTotalYAxisWidth());
                                        var s =
                                                this.dimXAxis.getxAxisLabelsCoords(),
                                            n =
                                                this.dimXAxis.getxAxisGroupLabelsCoords(),
                                            o =
                                                this.dimXAxis.getxAxisTitleCoords();
                                        this.conditionalChecksForAxisCoords(
                                            s,
                                            o,
                                            n
                                        ),
                                            (i.translateXAxisY = e.globals
                                                .rotateXLabels
                                                ? this.xAxisHeight / 8
                                                : -4),
                                            (i.translateXAxisX =
                                                e.globals.rotateXLabels &&
                                                e.globals.isXNumeric &&
                                                e.config.xaxis.labels.rotate <=
                                                    -45
                                                    ? -this.xAxisWidth / 4
                                                    : 0),
                                            e.globals.isBarHorizontal &&
                                                ((i.rotateXLabels = !1),
                                                (i.translateXAxisY =
                                                    (parseInt(
                                                        e.config.xaxis.labels
                                                            .style.fontSize,
                                                        10
                                                    ) /
                                                        1.5) *
                                                    -1)),
                                            (i.translateXAxisY =
                                                i.translateXAxisY +
                                                e.config.xaxis.labels.offsetY),
                                            (i.translateXAxisX =
                                                i.translateXAxisX +
                                                e.config.xaxis.labels.offsetX);
                                        var l = this.yAxisWidth,
                                            c = this.xAxisHeight;
                                        (i.xAxisLabelsHeight =
                                            this.xAxisHeight - o.height),
                                            (i.xAxisGroupLabelsHeight =
                                                i.xAxisLabelsHeight - s.height),
                                            (i.xAxisLabelsWidth =
                                                this.xAxisWidth),
                                            (i.xAxisHeight = this.xAxisHeight);
                                        var h = 10;
                                        ("radar" === e.config.chart.type ||
                                            this.isSparkline) &&
                                            ((l = 0), (c = i.goldenPadding)),
                                            this.isSparkline &&
                                                (this.lgRect = {
                                                    height: 0,
                                                    width: 0,
                                                }),
                                            (this.isSparkline ||
                                                "treemap" ===
                                                    e.config.chart.type) &&
                                                ((l = 0), (c = 0), (h = 0)),
                                            this.isSparkline ||
                                                this.dimXAxis.additionalPaddingXLabels(
                                                    s
                                                );
                                        var d = function () {
                                            (i.translateX = l),
                                                (i.gridHeight =
                                                    i.svgHeight -
                                                    t.lgRect.height -
                                                    c -
                                                    (t.isSparkline ||
                                                    "treemap" ===
                                                        e.config.chart.type
                                                        ? 0
                                                        : e.globals
                                                              .rotateXLabels
                                                        ? 10
                                                        : 15)),
                                                (i.gridWidth = i.svgWidth - l);
                                        };
                                        switch (
                                            ("top" ===
                                                e.config.xaxis.position &&
                                                (h =
                                                    i.xAxisHeight -
                                                    e.config.xaxis.axisTicks
                                                        .height -
                                                    5),
                                            e.config.legend.position)
                                        ) {
                                            case "bottom":
                                                (i.translateY = h), d();
                                                break;
                                            case "top":
                                                (i.translateY =
                                                    this.lgRect.height + h),
                                                    d();
                                                break;
                                            case "left":
                                                (i.translateY = h),
                                                    (i.translateX =
                                                        this.lgRect.width + l),
                                                    (i.gridHeight =
                                                        i.svgHeight - c - 12),
                                                    (i.gridWidth =
                                                        i.svgWidth -
                                                        this.lgRect.width -
                                                        l);
                                                break;
                                            case "right":
                                                (i.translateY = h),
                                                    (i.translateX = l),
                                                    (i.gridHeight =
                                                        i.svgHeight - c - 12),
                                                    (i.gridWidth =
                                                        i.svgWidth -
                                                        this.lgRect.width -
                                                        l -
                                                        5);
                                                break;
                                            default:
                                                throw new Error(
                                                    "Legend position not supported"
                                                );
                                        }
                                        this.dimGrid.setGridXPosForDualYAxis(
                                            r,
                                            a
                                        ),
                                            new J(this.ctx).setYAxisXPosition(
                                                a,
                                                r
                                            );
                                    },
                                },
                                {
                                    key: "setDimensionsForNonAxisCharts",
                                    value: function () {
                                        var t = this.w,
                                            e = t.globals,
                                            i = t.config,
                                            a = 0;
                                        t.config.legend.show &&
                                            !t.config.legend.floating &&
                                            (a = 20);
                                        var r =
                                                "pie" === i.chart.type ||
                                                "polarArea" === i.chart.type ||
                                                "donut" === i.chart.type
                                                    ? "pie"
                                                    : "radialBar",
                                            s = i.plotOptions[r].offsetY,
                                            n = i.plotOptions[r].offsetX;
                                        if (!i.legend.show || i.legend.floating)
                                            return (
                                                (e.gridHeight =
                                                    e.svgHeight -
                                                    i.grid.padding.left +
                                                    i.grid.padding.right),
                                                (e.gridWidth = e.gridHeight),
                                                (e.translateY = s),
                                                void (e.translateX =
                                                    n +
                                                    (e.svgWidth - e.gridWidth) /
                                                        2)
                                            );
                                        switch (i.legend.position) {
                                            case "bottom":
                                                (e.gridHeight =
                                                    e.svgHeight -
                                                    this.lgRect.height -
                                                    e.goldenPadding),
                                                    (e.gridWidth = e.svgWidth),
                                                    (e.translateY = s - 10),
                                                    (e.translateX =
                                                        n +
                                                        (e.svgWidth -
                                                            e.gridWidth) /
                                                            2);
                                                break;
                                            case "top":
                                                (e.gridHeight =
                                                    e.svgHeight -
                                                    this.lgRect.height -
                                                    e.goldenPadding),
                                                    (e.gridWidth = e.svgWidth),
                                                    (e.translateY =
                                                        this.lgRect.height +
                                                        s +
                                                        10),
                                                    (e.translateX =
                                                        n +
                                                        (e.svgWidth -
                                                            e.gridWidth) /
                                                            2);
                                                break;
                                            case "left":
                                                (e.gridWidth =
                                                    e.svgWidth -
                                                    this.lgRect.width -
                                                    a),
                                                    (e.gridHeight =
                                                        "auto" !==
                                                        i.chart.height
                                                            ? e.svgHeight
                                                            : e.gridWidth),
                                                    (e.translateY = s),
                                                    (e.translateX =
                                                        n +
                                                        this.lgRect.width +
                                                        a);
                                                break;
                                            case "right":
                                                (e.gridWidth =
                                                    e.svgWidth -
                                                    this.lgRect.width -
                                                    a -
                                                    5),
                                                    (e.gridHeight =
                                                        "auto" !==
                                                        i.chart.height
                                                            ? e.svgHeight
                                                            : e.gridWidth),
                                                    (e.translateY = s),
                                                    (e.translateX = n + 10);
                                                break;
                                            default:
                                                throw new Error(
                                                    "Legend position not supported"
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "conditionalChecksForAxisCoords",
                                    value: function (t, e, i) {
                                        var a = this.w,
                                            r = a.globals.hasXaxisGroups
                                                ? 2
                                                : 1,
                                            s = i.height + t.height + e.height,
                                            n = a.globals.isMultiLineX
                                                ? 1.2
                                                : a.globals.LINE_HEIGHT_RATIO,
                                            o = a.globals.rotateXLabels
                                                ? 22
                                                : 10,
                                            l =
                                                a.globals.rotateXLabels &&
                                                "bottom" ===
                                                    a.config.legend.position
                                                    ? 10
                                                    : 0;
                                        (this.xAxisHeight = s * n + r * o + l),
                                            (this.xAxisWidth = t.width),
                                            this.xAxisHeight - e.height >
                                                a.config.xaxis.labels
                                                    .maxHeight &&
                                                (this.xAxisHeight =
                                                    a.config.xaxis.labels.maxHeight),
                                            a.config.xaxis.labels.minHeight &&
                                                this.xAxisHeight <
                                                    a.config.xaxis.labels
                                                        .minHeight &&
                                                (this.xAxisHeight =
                                                    a.config.xaxis.labels.minHeight),
                                            a.config.xaxis.floating &&
                                                (this.xAxisHeight = 0);
                                        var c = 0,
                                            h = 0;
                                        a.config.yaxis.forEach(function (t) {
                                            (c += t.labels.minWidth),
                                                (h += t.labels.maxWidth);
                                        }),
                                            this.yAxisWidth < c &&
                                                (this.yAxisWidth = c),
                                            this.yAxisWidth > h &&
                                                (this.yAxisWidth = h);
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    ht = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w), (this.lgCtx = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "getLegendStyles",
                                    value: function () {
                                        var t = document.createElement("style");
                                        t.setAttribute("type", "text/css");
                                        var e = document.createTextNode(
                                            "\t\n    \t\n      .apexcharts-legend {\t\n        display: flex;\t\n        overflow: auto;\t\n        padding: 0 10px;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\t\n        flex-wrap: wrap\t\n      }\t\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        flex-direction: column;\t\n        bottom: 0;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        justify-content: flex-start;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\t\n        justify-content: center;  \t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\t\n        justify-content: flex-end;\t\n      }\t\n      .apexcharts-legend-series {\t\n        cursor: pointer;\t\n        line-height: normal;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\t\n        display: flex;\t\n        align-items: center;\t\n      }\t\n      .apexcharts-legend-text {\t\n        position: relative;\t\n        font-size: 14px;\t\n      }\t\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\t\n        pointer-events: none;\t\n      }\t\n      .apexcharts-legend-marker {\t\n        position: relative;\t\n        display: inline-block;\t\n        cursor: pointer;\t\n        margin-right: 3px;\t\n        border-style: solid;\n      }\t\n      \t\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\t\n        display: inline-block;\t\n      }\t\n      .apexcharts-legend-series.apexcharts-no-click {\t\n        cursor: auto;\t\n      }\t\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\t\n        display: none !important;\t\n      }\t\n      .apexcharts-inactive-legend {\t\n        opacity: 0.45;\t\n      }"
                                        );
                                        return t.appendChild(e), t;
                                    },
                                },
                                {
                                    key: "getLegendBBox",
                                    value: function () {
                                        var t = this.w.globals.dom.baseEl
                                                .querySelector(
                                                    ".apexcharts-legend"
                                                )
                                                .getBoundingClientRect(),
                                            e = t.width;
                                        return { clwh: t.height, clww: e };
                                    },
                                },
                                {
                                    key: "appendToForeignObject",
                                    value: function () {
                                        this.w.globals.dom.elLegendForeign.appendChild(
                                            this.getLegendStyles()
                                        );
                                    },
                                },
                                {
                                    key: "toggleDataSeries",
                                    value: function (t, e) {
                                        var i = this,
                                            a = this.w;
                                        if (
                                            a.globals.axisCharts ||
                                            "radialBar" === a.config.chart.type
                                        ) {
                                            a.globals.resized = !0;
                                            var r = null,
                                                s = null;
                                            (a.globals.risingSeries = []),
                                                a.globals.axisCharts
                                                    ? ((r =
                                                          a.globals.dom.baseEl.querySelector(
                                                              ".apexcharts-series[data\\:realIndex='".concat(
                                                                  t,
                                                                  "']"
                                                              )
                                                          )),
                                                      (s = parseInt(
                                                          r.getAttribute(
                                                              "data:realIndex"
                                                          ),
                                                          10
                                                      )))
                                                    : ((r =
                                                          a.globals.dom.baseEl.querySelector(
                                                              ".apexcharts-series[rel='".concat(
                                                                  t + 1,
                                                                  "']"
                                                              )
                                                          )),
                                                      (s =
                                                          parseInt(
                                                              r.getAttribute(
                                                                  "rel"
                                                              ),
                                                              10
                                                          ) - 1)),
                                                e
                                                    ? [
                                                          {
                                                              cs: a.globals
                                                                  .collapsedSeries,
                                                              csi: a.globals
                                                                  .collapsedSeriesIndices,
                                                          },
                                                          {
                                                              cs: a.globals
                                                                  .ancillaryCollapsedSeries,
                                                              csi: a.globals
                                                                  .ancillaryCollapsedSeriesIndices,
                                                          },
                                                      ].forEach(function (t) {
                                                          i.riseCollapsedSeries(
                                                              t.cs,
                                                              t.csi,
                                                              s
                                                          );
                                                      })
                                                    : this.hideSeries({
                                                          seriesEl: r,
                                                          realIndex: s,
                                                      });
                                        } else {
                                            var n = a.globals.dom.Paper.select(
                                                    " .apexcharts-series[rel='".concat(
                                                        t + 1,
                                                        "'] path"
                                                    )
                                                ),
                                                o = a.config.chart.type;
                                            if (
                                                "pie" === o ||
                                                "polarArea" === o ||
                                                "donut" === o
                                            ) {
                                                var l =
                                                    a.config.plotOptions.pie
                                                        .donut.labels;
                                                new k(
                                                    this.lgCtx.ctx
                                                ).pathMouseDown(
                                                    n.members[0],
                                                    null
                                                ),
                                                    this.lgCtx.ctx.pie.printDataLabelsInner(
                                                        n.members[0].node,
                                                        l
                                                    );
                                            }
                                            n.fire("click");
                                        }
                                    },
                                },
                                {
                                    key: "hideSeries",
                                    value: function (t) {
                                        var e = t.seriesEl,
                                            i = t.realIndex,
                                            a = this.w,
                                            r = v.clone(a.config.series);
                                        if (a.globals.axisCharts) {
                                            var s = !1;
                                            if (
                                                (a.config.yaxis[i] &&
                                                    a.config.yaxis[i].show &&
                                                    a.config.yaxis[i]
                                                        .showAlways &&
                                                    ((s = !0),
                                                    a.globals.ancillaryCollapsedSeriesIndices.indexOf(
                                                        i
                                                    ) < 0 &&
                                                        (a.globals.ancillaryCollapsedSeries.push(
                                                            {
                                                                index: i,
                                                                data: r[
                                                                    i
                                                                ].data.slice(),
                                                                type: e.parentNode.className.baseVal.split(
                                                                    "-"
                                                                )[1],
                                                            }
                                                        ),
                                                        a.globals.ancillaryCollapsedSeriesIndices.push(
                                                            i
                                                        ))),
                                                !s)
                                            ) {
                                                a.globals.collapsedSeries.push({
                                                    index: i,
                                                    data: r[i].data.slice(),
                                                    type: e.parentNode.className.baseVal.split(
                                                        "-"
                                                    )[1],
                                                }),
                                                    a.globals.collapsedSeriesIndices.push(
                                                        i
                                                    );
                                                var n =
                                                    a.globals.risingSeries.indexOf(
                                                        i
                                                    );
                                                a.globals.risingSeries.splice(
                                                    n,
                                                    1
                                                );
                                            }
                                        } else
                                            a.globals.collapsedSeries.push({
                                                index: i,
                                                data: r[i],
                                            }),
                                                a.globals.collapsedSeriesIndices.push(
                                                    i
                                                );
                                        for (
                                            var o = e.childNodes, l = 0;
                                            l < o.length;
                                            l++
                                        )
                                            o[l].classList.contains(
                                                "apexcharts-series-markers-wrap"
                                            ) &&
                                                (o[l].classList.contains(
                                                    "apexcharts-hide"
                                                )
                                                    ? o[l].classList.remove(
                                                          "apexcharts-hide"
                                                      )
                                                    : o[l].classList.add(
                                                          "apexcharts-hide"
                                                      ));
                                        (a.globals.allSeriesCollapsed =
                                            a.globals.collapsedSeries.length ===
                                            a.config.series.length),
                                            (r =
                                                this._getSeriesBasedOnCollapsedState(
                                                    r
                                                )),
                                            this.lgCtx.ctx.updateHelpers._updateSeries(
                                                r,
                                                a.config.chart.animations
                                                    .dynamicAnimation.enabled
                                            );
                                    },
                                },
                                {
                                    key: "riseCollapsedSeries",
                                    value: function (t, e, i) {
                                        var a = this.w,
                                            r = v.clone(a.config.series);
                                        if (t.length > 0) {
                                            for (var s = 0; s < t.length; s++)
                                                t[s].index === i &&
                                                    (a.globals.axisCharts
                                                        ? ((r[i].data =
                                                              t[
                                                                  s
                                                              ].data.slice()),
                                                          t.splice(s, 1),
                                                          e.splice(s, 1),
                                                          a.globals.risingSeries.push(
                                                              i
                                                          ))
                                                        : ((r[i] = t[s].data),
                                                          t.splice(s, 1),
                                                          e.splice(s, 1),
                                                          a.globals.risingSeries.push(
                                                              i
                                                          )));
                                            (r =
                                                this._getSeriesBasedOnCollapsedState(
                                                    r
                                                )),
                                                this.lgCtx.ctx.updateHelpers._updateSeries(
                                                    r,
                                                    a.config.chart.animations
                                                        .dynamicAnimation
                                                        .enabled
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "_getSeriesBasedOnCollapsedState",
                                    value: function (t) {
                                        var e = this.w;
                                        return (
                                            e.globals.axisCharts
                                                ? t.forEach(function (i, a) {
                                                      e.globals.collapsedSeriesIndices.indexOf(
                                                          a
                                                      ) > -1 &&
                                                          (t[a].data = []);
                                                  })
                                                : t.forEach(function (i, a) {
                                                      e.globals.collapsedSeriesIndices.indexOf(
                                                          a
                                                      ) > -1 && (t[a] = 0);
                                                  }),
                                            t
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    dt = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.onLegendClick =
                                    this.onLegendClick.bind(this)),
                                (this.onLegendHovered =
                                    this.onLegendHovered.bind(this)),
                                (this.isBarsDistributed =
                                    "bar" === this.w.config.chart.type &&
                                    this.w.config.plotOptions.bar.distributed &&
                                    1 === this.w.config.series.length),
                                (this.legendHelpers = new ht(this));
                        }
                        return (
                            c(t, [
                                {
                                    key: "init",
                                    value: function () {
                                        var t = this.w,
                                            e = t.globals,
                                            i = t.config;
                                        if (
                                            ((i.legend.showForSingleSeries &&
                                                1 === e.series.length) ||
                                                this.isBarsDistributed ||
                                                e.series.length > 1 ||
                                                !e.axisCharts) &&
                                            i.legend.show
                                        ) {
                                            for (
                                                ;
                                                e.dom.elLegendWrap.firstChild;

                                            )
                                                e.dom.elLegendWrap.removeChild(
                                                    e.dom.elLegendWrap
                                                        .firstChild
                                                );
                                            this.drawLegends(),
                                                v.isIE11()
                                                    ? document
                                                          .getElementsByTagName(
                                                              "head"
                                                          )[0]
                                                          .appendChild(
                                                              this.legendHelpers.getLegendStyles()
                                                          )
                                                    : this.legendHelpers.appendToForeignObject(),
                                                "bottom" ===
                                                    i.legend.position ||
                                                "top" === i.legend.position
                                                    ? this.legendAlignHorizontal()
                                                    : ("right" !==
                                                          i.legend.position &&
                                                          "left" !==
                                                              i.legend
                                                                  .position) ||
                                                      this.legendAlignVertical();
                                        }
                                    },
                                },
                                {
                                    key: "drawLegends",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = e.config.legend.fontFamily,
                                            a = e.globals.seriesNames,
                                            r = e.globals.colors.slice();
                                        if ("heatmap" === e.config.chart.type) {
                                            var s =
                                                e.config.plotOptions.heatmap
                                                    .colorScale.ranges;
                                            (a = s.map(function (t) {
                                                return t.name
                                                    ? t.name
                                                    : t.from + " - " + t.to;
                                            })),
                                                (r = s.map(function (t) {
                                                    return t.color;
                                                }));
                                        } else
                                            this.isBarsDistributed &&
                                                (a = e.globals.labels.slice());
                                        e.config.legend.customLegendItems
                                            .length &&
                                            (a =
                                                e.config.legend
                                                    .customLegendItems);
                                        for (
                                            var n = e.globals.legendFormatter,
                                                o =
                                                    e.config.legend
                                                        .inverseOrder,
                                                l = o ? a.length - 1 : 0;
                                            o ? l >= 0 : l <= a.length - 1;
                                            o ? l-- : l++
                                        ) {
                                            var c = n(a[l], {
                                                    seriesIndex: l,
                                                    w: e,
                                                }),
                                                h = !1,
                                                d = !1;
                                            if (
                                                e.globals.collapsedSeries
                                                    .length > 0
                                            )
                                                for (
                                                    var u = 0;
                                                    u <
                                                    e.globals.collapsedSeries
                                                        .length;
                                                    u++
                                                )
                                                    e.globals.collapsedSeries[u]
                                                        .index === l &&
                                                        (h = !0);
                                            if (
                                                e.globals
                                                    .ancillaryCollapsedSeriesIndices
                                                    .length > 0
                                            )
                                                for (
                                                    var f = 0;
                                                    f <
                                                    e.globals
                                                        .ancillaryCollapsedSeriesIndices
                                                        .length;
                                                    f++
                                                )
                                                    e.globals
                                                        .ancillaryCollapsedSeriesIndices[
                                                        f
                                                    ] === l && (d = !0);
                                            var g =
                                                document.createElement("span");
                                            g.classList.add(
                                                "apexcharts-legend-marker"
                                            );
                                            var p =
                                                    e.config.legend.markers
                                                        .offsetX,
                                                x =
                                                    e.config.legend.markers
                                                        .offsetY,
                                                m =
                                                    e.config.legend.markers
                                                        .height,
                                                b =
                                                    e.config.legend.markers
                                                        .width,
                                                y =
                                                    e.config.legend.markers
                                                        .strokeWidth,
                                                w =
                                                    e.config.legend.markers
                                                        .strokeColor,
                                                S =
                                                    e.config.legend.markers
                                                        .radius,
                                                C = g.style;
                                            (C.background = r[l]),
                                                (C.color = r[l]),
                                                C.setProperty(
                                                    "background",
                                                    r[l],
                                                    "important"
                                                ),
                                                e.config.legend.markers
                                                    .fillColors &&
                                                    e.config.legend.markers
                                                        .fillColors[l] &&
                                                    (C.background =
                                                        e.config.legend.markers.fillColors[
                                                            l
                                                        ]),
                                                void 0 !==
                                                    e.globals.seriesColors[l] &&
                                                    ((C.background =
                                                        e.globals.seriesColors[
                                                            l
                                                        ]),
                                                    (C.color =
                                                        e.globals.seriesColors[
                                                            l
                                                        ])),
                                                (C.height = Array.isArray(m)
                                                    ? parseFloat(m[l]) + "px"
                                                    : parseFloat(m) + "px"),
                                                (C.width = Array.isArray(b)
                                                    ? parseFloat(b[l]) + "px"
                                                    : parseFloat(b) + "px"),
                                                (C.left =
                                                    (Array.isArray(p)
                                                        ? parseFloat(p[l])
                                                        : parseFloat(p)) +
                                                    "px"),
                                                (C.top =
                                                    (Array.isArray(x)
                                                        ? parseFloat(x[l])
                                                        : parseFloat(x)) +
                                                    "px"),
                                                (C.borderWidth = Array.isArray(
                                                    y
                                                )
                                                    ? y[l]
                                                    : y),
                                                (C.borderColor = Array.isArray(
                                                    w
                                                )
                                                    ? w[l]
                                                    : w),
                                                (C.borderRadius = Array.isArray(
                                                    S
                                                )
                                                    ? parseFloat(S[l]) + "px"
                                                    : parseFloat(S) + "px"),
                                                e.config.legend.markers
                                                    .customHTML &&
                                                    (Array.isArray(
                                                        e.config.legend.markers
                                                            .customHTML
                                                    )
                                                        ? e.config.legend
                                                              .markers
                                                              .customHTML[l] &&
                                                          (g.innerHTML =
                                                              e.config.legend.markers.customHTML[
                                                                  l
                                                              ]())
                                                        : (g.innerHTML =
                                                              e.config.legend.markers.customHTML())),
                                                k.setAttrs(g, {
                                                    rel: l + 1,
                                                    "data:collapsed": h || d,
                                                }),
                                                (h || d) &&
                                                    g.classList.add(
                                                        "apexcharts-inactive-legend"
                                                    );
                                            var P =
                                                    document.createElement(
                                                        "div"
                                                    ),
                                                L =
                                                    document.createElement(
                                                        "span"
                                                    );
                                            L.classList.add(
                                                "apexcharts-legend-text"
                                            ),
                                                (L.innerHTML = Array.isArray(c)
                                                    ? c.join(" ")
                                                    : c);
                                            var T = e.config.legend.labels
                                                .useSeriesColors
                                                ? e.globals.colors[l]
                                                : e.config.legend.labels.colors;
                                            T || (T = e.config.chart.foreColor),
                                                (L.style.color = T),
                                                (L.style.fontSize =
                                                    parseFloat(
                                                        e.config.legend.fontSize
                                                    ) + "px"),
                                                (L.style.fontWeight =
                                                    e.config.legend.fontWeight),
                                                (L.style.fontFamily =
                                                    i ||
                                                    e.config.chart.fontFamily),
                                                k.setAttrs(L, {
                                                    rel: l + 1,
                                                    i: l,
                                                    "data:default-text":
                                                        encodeURIComponent(c),
                                                    "data:collapsed": h || d,
                                                }),
                                                P.appendChild(g),
                                                P.appendChild(L);
                                            var M = new A(this.ctx);
                                            e.config.legend.showForZeroSeries ||
                                                (0 ===
                                                    M.getSeriesTotalByIndex(
                                                        l
                                                    ) &&
                                                    M.seriesHaveSameValues(l) &&
                                                    !M.isSeriesNull(l) &&
                                                    -1 ===
                                                        e.globals.collapsedSeriesIndices.indexOf(
                                                            l
                                                        ) &&
                                                    -1 ===
                                                        e.globals.ancillaryCollapsedSeriesIndices.indexOf(
                                                            l
                                                        ) &&
                                                    P.classList.add(
                                                        "apexcharts-hidden-zero-series"
                                                    )),
                                                e.config.legend
                                                    .showForNullSeries ||
                                                    (M.isSeriesNull(l) &&
                                                        -1 ===
                                                            e.globals.collapsedSeriesIndices.indexOf(
                                                                l
                                                            ) &&
                                                        -1 ===
                                                            e.globals.ancillaryCollapsedSeriesIndices.indexOf(
                                                                l
                                                            ) &&
                                                        P.classList.add(
                                                            "apexcharts-hidden-null-series"
                                                        )),
                                                e.globals.dom.elLegendWrap.appendChild(
                                                    P
                                                ),
                                                e.globals.dom.elLegendWrap.classList.add(
                                                    "apexcharts-align-".concat(
                                                        e.config.legend
                                                            .horizontalAlign
                                                    )
                                                ),
                                                e.globals.dom.elLegendWrap.classList.add(
                                                    "apx-legend-position-" +
                                                        e.config.legend.position
                                                ),
                                                P.classList.add(
                                                    "apexcharts-legend-series"
                                                ),
                                                (P.style.margin = ""
                                                    .concat(
                                                        e.config.legend
                                                            .itemMargin
                                                            .vertical,
                                                        "px "
                                                    )
                                                    .concat(
                                                        e.config.legend
                                                            .itemMargin
                                                            .horizontal,
                                                        "px"
                                                    )),
                                                (e.globals.dom.elLegendWrap.style.width =
                                                    e.config.legend.width
                                                        ? e.config.legend
                                                              .width + "px"
                                                        : ""),
                                                (e.globals.dom.elLegendWrap.style.height =
                                                    e.config.legend.height
                                                        ? e.config.legend
                                                              .height + "px"
                                                        : ""),
                                                k.setAttrs(P, {
                                                    rel: l + 1,
                                                    seriesName: v.escapeString(
                                                        a[l]
                                                    ),
                                                    "data:collapsed": h || d,
                                                }),
                                                (h || d) &&
                                                    P.classList.add(
                                                        "apexcharts-inactive-legend"
                                                    ),
                                                e.config.legend.onItemClick
                                                    .toggleDataSeries ||
                                                    P.classList.add(
                                                        "apexcharts-no-click"
                                                    );
                                        }
                                        e.globals.dom.elWrap.addEventListener(
                                            "click",
                                            t.onLegendClick,
                                            !0
                                        ),
                                            e.config.legend.onItemHover
                                                .highlightDataSeries &&
                                                0 ===
                                                    e.config.legend
                                                        .customLegendItems
                                                        .length &&
                                                (e.globals.dom.elWrap.addEventListener(
                                                    "mousemove",
                                                    t.onLegendHovered,
                                                    !0
                                                ),
                                                e.globals.dom.elWrap.addEventListener(
                                                    "mouseout",
                                                    t.onLegendHovered,
                                                    !0
                                                ));
                                    },
                                },
                                {
                                    key: "setLegendWrapXY",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = i.globals.dom.elLegendWrap,
                                            r = a.getBoundingClientRect(),
                                            s = 0,
                                            n = 0;
                                        if (
                                            "bottom" ===
                                            i.config.legend.position
                                        )
                                            n +=
                                                i.globals.svgHeight -
                                                r.height / 2;
                                        else if (
                                            "top" === i.config.legend.position
                                        ) {
                                            var o = new ct(this.ctx),
                                                l =
                                                    o.dimHelpers.getTitleSubtitleCoords(
                                                        "title"
                                                    ).height,
                                                c =
                                                    o.dimHelpers.getTitleSubtitleCoords(
                                                        "subtitle"
                                                    ).height;
                                            n =
                                                n +
                                                (l > 0 ? l - 10 : 0) +
                                                (c > 0 ? c - 10 : 0);
                                        }
                                        (a.style.position = "absolute"),
                                            (s =
                                                s +
                                                t +
                                                i.config.legend.offsetX),
                                            (n =
                                                n +
                                                e +
                                                i.config.legend.offsetY),
                                            (a.style.left = s + "px"),
                                            (a.style.top = n + "px"),
                                            "bottom" ===
                                            i.config.legend.position
                                                ? ((a.style.top = "auto"),
                                                  (a.style.bottom =
                                                      5 -
                                                      i.config.legend.offsetY +
                                                      "px"))
                                                : "right" ===
                                                      i.config.legend
                                                          .position &&
                                                  ((a.style.left = "auto"),
                                                  (a.style.right =
                                                      25 +
                                                      i.config.legend.offsetX +
                                                      "px")),
                                            ["width", "height"].forEach(
                                                function (t) {
                                                    a.style[t] &&
                                                        (a.style[t] =
                                                            parseInt(
                                                                i.config.legend[
                                                                    t
                                                                ],
                                                                10
                                                            ) + "px");
                                                }
                                            );
                                    },
                                },
                                {
                                    key: "legendAlignHorizontal",
                                    value: function () {
                                        var t = this.w;
                                        t.globals.dom.elLegendWrap.style.right = 0;
                                        var e =
                                                this.legendHelpers.getLegendBBox(),
                                            i = new ct(this.ctx),
                                            a =
                                                i.dimHelpers.getTitleSubtitleCoords(
                                                    "title"
                                                ),
                                            r =
                                                i.dimHelpers.getTitleSubtitleCoords(
                                                    "subtitle"
                                                ),
                                            s = 0;
                                        "bottom" === t.config.legend.position
                                            ? (s = -e.clwh / 1.8)
                                            : "top" ===
                                                  t.config.legend.position &&
                                              (s =
                                                  a.height +
                                                  r.height +
                                                  t.config.title.margin +
                                                  t.config.subtitle.margin -
                                                  10),
                                            this.setLegendWrapXY(20, s);
                                    },
                                },
                                {
                                    key: "legendAlignVertical",
                                    value: function () {
                                        var t = this.w,
                                            e =
                                                this.legendHelpers.getLegendBBox(),
                                            i = 0;
                                        "left" === t.config.legend.position &&
                                            (i = 20),
                                            "right" ===
                                                t.config.legend.position &&
                                                (i =
                                                    t.globals.svgWidth -
                                                    e.clww -
                                                    10),
                                            this.setLegendWrapXY(i, 20);
                                    },
                                },
                                {
                                    key: "onLegendHovered",
                                    value: function (t) {
                                        var e = this.w,
                                            i =
                                                t.target.classList.contains(
                                                    "apexcharts-legend-text"
                                                ) ||
                                                t.target.classList.contains(
                                                    "apexcharts-legend-marker"
                                                );
                                        if (
                                            "heatmap" === e.config.chart.type ||
                                            this.isBarsDistributed
                                        ) {
                                            if (i) {
                                                var a =
                                                    parseInt(
                                                        t.target.getAttribute(
                                                            "rel"
                                                        ),
                                                        10
                                                    ) - 1;
                                                this.ctx.events.fireEvent(
                                                    "legendHover",
                                                    [this.ctx, a, this.w]
                                                ),
                                                    new V(
                                                        this.ctx
                                                    ).highlightRangeInSeries(
                                                        t,
                                                        t.target
                                                    );
                                            }
                                        } else
                                            !t.target.classList.contains(
                                                "apexcharts-inactive-legend"
                                            ) &&
                                                i &&
                                                new V(
                                                    this.ctx
                                                ).toggleSeriesOnHover(
                                                    t,
                                                    t.target
                                                );
                                    },
                                },
                                {
                                    key: "onLegendClick",
                                    value: function (t) {
                                        var e = this.w;
                                        if (
                                            !e.config.legend.customLegendItems
                                                .length &&
                                            (t.target.classList.contains(
                                                "apexcharts-legend-text"
                                            ) ||
                                                t.target.classList.contains(
                                                    "apexcharts-legend-marker"
                                                ))
                                        ) {
                                            var i =
                                                    parseInt(
                                                        t.target.getAttribute(
                                                            "rel"
                                                        ),
                                                        10
                                                    ) - 1,
                                                a =
                                                    "true" ===
                                                    t.target.getAttribute(
                                                        "data:collapsed"
                                                    ),
                                                r =
                                                    this.w.config.chart.events
                                                        .legendClick;
                                            "function" == typeof r &&
                                                r(this.ctx, i, this.w),
                                                this.ctx.events.fireEvent(
                                                    "legendClick",
                                                    [this.ctx, i, this.w]
                                                );
                                            var s =
                                                this.w.config.legend.markers
                                                    .onClick;
                                            "function" == typeof s &&
                                                t.target.classList.contains(
                                                    "apexcharts-legend-marker"
                                                ) &&
                                                (s(this.ctx, i, this.w),
                                                this.ctx.events.fireEvent(
                                                    "legendMarkerClick",
                                                    [this.ctx, i, this.w]
                                                )),
                                                "treemap" !==
                                                    e.config.chart.type &&
                                                    "heatmap" !==
                                                        e.config.chart.type &&
                                                    !this.isBarsDistributed &&
                                                    e.config.legend.onItemClick
                                                        .toggleDataSeries &&
                                                    this.legendHelpers.toggleDataSeries(
                                                        i,
                                                        a
                                                    );
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    ut = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                            var i = this.w;
                            (this.ev = this.w.config.chart.events),
                                (this.selectedClass = "apexcharts-selected"),
                                (this.localeValues =
                                    this.w.globals.locale.toolbar),
                                (this.minX = i.globals.minX),
                                (this.maxX = i.globals.maxX);
                        }
                        return (
                            c(t, [
                                {
                                    key: "createToolbar",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = function () {
                                                return document.createElement(
                                                    "div"
                                                );
                                            },
                                            a = i();
                                        if (
                                            (a.setAttribute(
                                                "class",
                                                "apexcharts-toolbar"
                                            ),
                                            (a.style.top =
                                                e.config.chart.toolbar.offsetY +
                                                "px"),
                                            (a.style.right =
                                                3 -
                                                e.config.chart.toolbar.offsetX +
                                                "px"),
                                            e.globals.dom.elWrap.appendChild(a),
                                            (this.elZoom = i()),
                                            (this.elZoomIn = i()),
                                            (this.elZoomOut = i()),
                                            (this.elPan = i()),
                                            (this.elSelection = i()),
                                            (this.elZoomReset = i()),
                                            (this.elMenuIcon = i()),
                                            (this.elMenu = i()),
                                            (this.elCustomIcons = []),
                                            (this.t =
                                                e.config.chart.toolbar.tools),
                                            Array.isArray(this.t.customIcons))
                                        )
                                            for (
                                                var r = 0;
                                                r < this.t.customIcons.length;
                                                r++
                                            )
                                                this.elCustomIcons.push(i());
                                        var s = [],
                                            n = function (i, a, r) {
                                                var n = i.toLowerCase();
                                                t.t[n] &&
                                                    e.config.chart.zoom
                                                        .enabled &&
                                                    s.push({
                                                        el: a,
                                                        icon:
                                                            "string" ==
                                                            typeof t.t[n]
                                                                ? t.t[n]
                                                                : r,
                                                        title: t.localeValues[
                                                            i
                                                        ],
                                                        class: "apexcharts-".concat(
                                                            n,
                                                            "-icon"
                                                        ),
                                                    });
                                            };
                                        n(
                                            "zoomIn",
                                            this.elZoomIn,
                                            '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
                                        ),
                                            n(
                                                "zoomOut",
                                                this.elZoomOut,
                                                '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
                                            );
                                        var o = function (i) {
                                            t.t[i] &&
                                                e.config.chart[i].enabled &&
                                                s.push({
                                                    el:
                                                        "zoom" === i
                                                            ? t.elZoom
                                                            : t.elSelection,
                                                    icon:
                                                        "string" ==
                                                        typeof t.t[i]
                                                            ? t.t[i]
                                                            : "zoom" === i
                                                            ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>'
                                                            : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
                                                    title: t.localeValues[
                                                        "zoom" === i
                                                            ? "selectionZoom"
                                                            : "selection"
                                                    ],
                                                    class: e.globals
                                                        .isTouchDevice
                                                        ? "apexcharts-element-hidden"
                                                        : "apexcharts-".concat(
                                                              i,
                                                              "-icon"
                                                          ),
                                                });
                                        };
                                        o("zoom"),
                                            o("selection"),
                                            this.t.pan &&
                                                e.config.chart.zoom.enabled &&
                                                s.push({
                                                    el: this.elPan,
                                                    icon:
                                                        "string" ==
                                                        typeof this.t.pan
                                                            ? this.t.pan
                                                            : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
                                                    title: this.localeValues
                                                        .pan,
                                                    class: e.globals
                                                        .isTouchDevice
                                                        ? "apexcharts-element-hidden"
                                                        : "apexcharts-pan-icon",
                                                }),
                                            n(
                                                "reset",
                                                this.elZoomReset,
                                                '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'
                                            ),
                                            this.t.download &&
                                                s.push({
                                                    el: this.elMenuIcon,
                                                    icon:
                                                        "string" ==
                                                        typeof this.t.download
                                                            ? this.t.download
                                                            : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                                                    title: this.localeValues
                                                        .menu,
                                                    class: "apexcharts-menu-icon",
                                                });
                                        for (
                                            var l = 0;
                                            l < this.elCustomIcons.length;
                                            l++
                                        )
                                            s.push({
                                                el: this.elCustomIcons[l],
                                                icon: this.t.customIcons[l]
                                                    .icon,
                                                title: this.t.customIcons[l]
                                                    .title,
                                                index: this.t.customIcons[l]
                                                    .index,
                                                class:
                                                    "apexcharts-toolbar-custom-icon " +
                                                    this.t.customIcons[l].class,
                                            });
                                        s.forEach(function (t, e) {
                                            t.index &&
                                                v.moveIndexInArray(
                                                    s,
                                                    e,
                                                    t.index
                                                );
                                        });
                                        for (var c = 0; c < s.length; c++)
                                            k.setAttrs(s[c].el, {
                                                class: s[c].class,
                                                title: s[c].title,
                                            }),
                                                (s[c].el.innerHTML = s[c].icon),
                                                a.appendChild(s[c].el);
                                        this._createHamburgerMenu(a),
                                            e.globals.zoomEnabled
                                                ? this.elZoom.classList.add(
                                                      this.selectedClass
                                                  )
                                                : e.globals.panEnabled
                                                ? this.elPan.classList.add(
                                                      this.selectedClass
                                                  )
                                                : e.globals.selectionEnabled &&
                                                  this.elSelection.classList.add(
                                                      this.selectedClass
                                                  ),
                                            this.addToolbarEventListeners();
                                    },
                                },
                                {
                                    key: "_createHamburgerMenu",
                                    value: function (t) {
                                        (this.elMenuItems = []),
                                            t.appendChild(this.elMenu),
                                            k.setAttrs(this.elMenu, {
                                                class: "apexcharts-menu",
                                            });
                                        var e = [
                                            {
                                                name: "exportSVG",
                                                title: this.localeValues
                                                    .exportToSVG,
                                            },
                                            {
                                                name: "exportPNG",
                                                title: this.localeValues
                                                    .exportToPNG,
                                            },
                                            {
                                                name: "exportCSV",
                                                title: this.localeValues
                                                    .exportToCSV,
                                            },
                                        ];
                                        this.w.globals.allSeriesHasEqualX ||
                                            e.splice(2, 1);
                                        for (var i = 0; i < e.length; i++)
                                            this.elMenuItems.push(
                                                document.createElement("div")
                                            ),
                                                (this.elMenuItems[i].innerHTML =
                                                    e[i].title),
                                                k.setAttrs(
                                                    this.elMenuItems[i],
                                                    {
                                                        class: "apexcharts-menu-item ".concat(
                                                            e[i].name
                                                        ),
                                                        title: e[i].title,
                                                    }
                                                ),
                                                this.elMenu.appendChild(
                                                    this.elMenuItems[i]
                                                );
                                    },
                                },
                                {
                                    key: "addToolbarEventListeners",
                                    value: function () {
                                        var t = this;
                                        this.elZoomReset.addEventListener(
                                            "click",
                                            this.handleZoomReset.bind(this)
                                        ),
                                            this.elSelection.addEventListener(
                                                "click",
                                                this.toggleZoomSelection.bind(
                                                    this,
                                                    "selection"
                                                )
                                            ),
                                            this.elZoom.addEventListener(
                                                "click",
                                                this.toggleZoomSelection.bind(
                                                    this,
                                                    "zoom"
                                                )
                                            ),
                                            this.elZoomIn.addEventListener(
                                                "click",
                                                this.handleZoomIn.bind(this)
                                            ),
                                            this.elZoomOut.addEventListener(
                                                "click",
                                                this.handleZoomOut.bind(this)
                                            ),
                                            this.elPan.addEventListener(
                                                "click",
                                                this.togglePanning.bind(this)
                                            ),
                                            this.elMenuIcon.addEventListener(
                                                "click",
                                                this.toggleMenu.bind(this)
                                            ),
                                            this.elMenuItems.forEach(function (
                                                e
                                            ) {
                                                e.classList.contains(
                                                    "exportSVG"
                                                )
                                                    ? e.addEventListener(
                                                          "click",
                                                          t.handleDownload.bind(
                                                              t,
                                                              "svg"
                                                          )
                                                      )
                                                    : e.classList.contains(
                                                          "exportPNG"
                                                      )
                                                    ? e.addEventListener(
                                                          "click",
                                                          t.handleDownload.bind(
                                                              t,
                                                              "png"
                                                          )
                                                      )
                                                    : e.classList.contains(
                                                          "exportCSV"
                                                      ) &&
                                                      e.addEventListener(
                                                          "click",
                                                          t.handleDownload.bind(
                                                              t,
                                                              "csv"
                                                          )
                                                      );
                                            });
                                        for (
                                            var e = 0;
                                            e < this.t.customIcons.length;
                                            e++
                                        )
                                            this.elCustomIcons[
                                                e
                                            ].addEventListener(
                                                "click",
                                                this.t.customIcons[
                                                    e
                                                ].click.bind(
                                                    this,
                                                    this.ctx,
                                                    this.ctx.w
                                                )
                                            );
                                    },
                                },
                                {
                                    key: "toggleZoomSelection",
                                    value: function (t) {
                                        this.ctx
                                            .getSyncedCharts()
                                            .forEach(function (e) {
                                                e.ctx.toolbar.toggleOtherControls();
                                                var i =
                                                        "selection" === t
                                                            ? e.ctx.toolbar
                                                                  .elSelection
                                                            : e.ctx.toolbar
                                                                  .elZoom,
                                                    a =
                                                        "selection" === t
                                                            ? "selectionEnabled"
                                                            : "zoomEnabled";
                                                (e.w.globals[a] =
                                                    !e.w.globals[a]),
                                                    i.classList.contains(
                                                        e.ctx.toolbar
                                                            .selectedClass
                                                    )
                                                        ? i.classList.remove(
                                                              e.ctx.toolbar
                                                                  .selectedClass
                                                          )
                                                        : i.classList.add(
                                                              e.ctx.toolbar
                                                                  .selectedClass
                                                          );
                                            });
                                    },
                                },
                                {
                                    key: "getToolbarIconsReference",
                                    value: function () {
                                        var t = this.w;
                                        this.elZoom ||
                                            (this.elZoom =
                                                t.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-zoom-icon"
                                                )),
                                            this.elPan ||
                                                (this.elPan =
                                                    t.globals.dom.baseEl.querySelector(
                                                        ".apexcharts-pan-icon"
                                                    )),
                                            this.elSelection ||
                                                (this.elSelection =
                                                    t.globals.dom.baseEl.querySelector(
                                                        ".apexcharts-selection-icon"
                                                    ));
                                    },
                                },
                                {
                                    key: "enableZoomPanFromToolbar",
                                    value: function (t) {
                                        this.toggleOtherControls(),
                                            "pan" === t
                                                ? (this.w.globals.panEnabled =
                                                      !0)
                                                : (this.w.globals.zoomEnabled =
                                                      !0);
                                        var e =
                                                "pan" === t
                                                    ? this.elPan
                                                    : this.elZoom,
                                            i =
                                                "pan" === t
                                                    ? this.elZoom
                                                    : this.elPan;
                                        e &&
                                            e.classList.add(this.selectedClass),
                                            i &&
                                                i.classList.remove(
                                                    this.selectedClass
                                                );
                                    },
                                },
                                {
                                    key: "togglePanning",
                                    value: function () {
                                        this.ctx
                                            .getSyncedCharts()
                                            .forEach(function (t) {
                                                t.ctx.toolbar.toggleOtherControls(),
                                                    (t.w.globals.panEnabled =
                                                        !t.w.globals
                                                            .panEnabled),
                                                    t.ctx.toolbar.elPan.classList.contains(
                                                        t.ctx.toolbar
                                                            .selectedClass
                                                    )
                                                        ? t.ctx.toolbar.elPan.classList.remove(
                                                              t.ctx.toolbar
                                                                  .selectedClass
                                                          )
                                                        : t.ctx.toolbar.elPan.classList.add(
                                                              t.ctx.toolbar
                                                                  .selectedClass
                                                          );
                                            });
                                    },
                                },
                                {
                                    key: "toggleOtherControls",
                                    value: function () {
                                        var t = this,
                                            e = this.w;
                                        (e.globals.panEnabled = !1),
                                            (e.globals.zoomEnabled = !1),
                                            (e.globals.selectionEnabled = !1),
                                            this.getToolbarIconsReference(),
                                            [
                                                this.elPan,
                                                this.elSelection,
                                                this.elZoom,
                                            ].forEach(function (e) {
                                                e &&
                                                    e.classList.remove(
                                                        t.selectedClass
                                                    );
                                            });
                                    },
                                },
                                {
                                    key: "handleZoomIn",
                                    value: function () {
                                        var t = this.w;
                                        t.globals.isRangeBar &&
                                            ((this.minX = t.globals.minY),
                                            (this.maxX = t.globals.maxY));
                                        var e = (this.minX + this.maxX) / 2,
                                            i = (this.minX + e) / 2,
                                            a = (this.maxX + e) / 2,
                                            r = this._getNewMinXMaxX(i, a);
                                        t.globals.disableZoomIn ||
                                            this.zoomUpdateOptions(
                                                r.minX,
                                                r.maxX
                                            );
                                    },
                                },
                                {
                                    key: "handleZoomOut",
                                    value: function () {
                                        var t = this.w;
                                        if (
                                            (t.globals.isRangeBar &&
                                                ((this.minX = t.globals.minY),
                                                (this.maxX = t.globals.maxY)),
                                            !(
                                                "datetime" ===
                                                    t.config.xaxis.type &&
                                                new Date(
                                                    this.minX
                                                ).getUTCFullYear() < 1e3
                                            ))
                                        ) {
                                            var e = (this.minX + this.maxX) / 2,
                                                i = this.minX - (e - this.minX),
                                                a = this.maxX - (e - this.maxX),
                                                r = this._getNewMinXMaxX(i, a);
                                            t.globals.disableZoomOut ||
                                                this.zoomUpdateOptions(
                                                    r.minX,
                                                    r.maxX
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "_getNewMinXMaxX",
                                    value: function (t, e) {
                                        var i =
                                            this.w.config.xaxis
                                                .convertedCatToNumeric;
                                        return {
                                            minX: i ? Math.floor(t) : t,
                                            maxX: i ? Math.floor(e) : e,
                                        };
                                    },
                                },
                                {
                                    key: "zoomUpdateOptions",
                                    value: function (t, e) {
                                        var i = this.w;
                                        if (void 0 !== t || void 0 !== e) {
                                            if (
                                                !(
                                                    i.config.xaxis
                                                        .convertedCatToNumeric &&
                                                    (t < 1 &&
                                                        ((t = 1),
                                                        (e =
                                                            i.globals
                                                                .dataPoints)),
                                                    e - t < 2)
                                                )
                                            ) {
                                                var a = { min: t, max: e },
                                                    r =
                                                        this.getBeforeZoomRange(
                                                            a
                                                        );
                                                r && (a = r.xaxis);
                                                var s = { xaxis: a },
                                                    n = v.clone(
                                                        i.globals.initialConfig
                                                            .yaxis
                                                    );
                                                i.config.chart.zoom
                                                    .autoScaleYaxis &&
                                                    (n = new $(
                                                        this.ctx
                                                    ).autoScaleY(this.ctx, n, {
                                                        xaxis: a,
                                                    })),
                                                    i.config.chart.group ||
                                                        (s.yaxis = n),
                                                    (this.w.globals.zoomed =
                                                        !0),
                                                    this.ctx.updateHelpers._updateOptions(
                                                        s,
                                                        !1,
                                                        this.w.config.chart
                                                            .animations
                                                            .dynamicAnimation
                                                            .enabled
                                                    ),
                                                    this.zoomCallback(a, n);
                                            }
                                        } else this.handleZoomReset();
                                    },
                                },
                                {
                                    key: "zoomCallback",
                                    value: function (t, e) {
                                        "function" == typeof this.ev.zoomed &&
                                            this.ev.zoomed(this.ctx, {
                                                xaxis: t,
                                                yaxis: e,
                                            });
                                    },
                                },
                                {
                                    key: "getBeforeZoomRange",
                                    value: function (t, e) {
                                        var i = null;
                                        return (
                                            "function" ==
                                                typeof this.ev.beforeZoom &&
                                                (i = this.ev.beforeZoom(this, {
                                                    xaxis: t,
                                                    yaxis: e,
                                                })),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "toggleMenu",
                                    value: function () {
                                        var t = this;
                                        window.setTimeout(function () {
                                            t.elMenu.classList.contains(
                                                "apexcharts-menu-open"
                                            )
                                                ? t.elMenu.classList.remove(
                                                      "apexcharts-menu-open"
                                                  )
                                                : t.elMenu.classList.add(
                                                      "apexcharts-menu-open"
                                                  );
                                        }, 0);
                                    },
                                },
                                {
                                    key: "handleDownload",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new _(this.ctx);
                                        switch (t) {
                                            case "svg":
                                                i.exportToSVG(this.ctx);
                                                break;
                                            case "png":
                                                i.exportToPng(this.ctx);
                                                break;
                                            case "csv":
                                                i.exportToCSV({
                                                    series: e.config.series,
                                                    columnDelimiter:
                                                        e.config.chart.toolbar
                                                            .export.csv
                                                            .columnDelimiter,
                                                });
                                        }
                                    },
                                },
                                {
                                    key: "handleZoomReset",
                                    value: function (t) {
                                        this.ctx
                                            .getSyncedCharts()
                                            .forEach(function (t) {
                                                var e = t.w;
                                                if (
                                                    ((e.globals.lastXAxis.min =
                                                        void 0),
                                                    (e.globals.lastXAxis.max =
                                                        void 0),
                                                    t.updateHelpers.revertDefaultAxisMinMax(),
                                                    "function" ==
                                                        typeof e.config.chart
                                                            .events
                                                            .beforeResetZoom)
                                                ) {
                                                    var i =
                                                        e.config.chart.events.beforeResetZoom(
                                                            t,
                                                            e
                                                        );
                                                    i &&
                                                        t.updateHelpers.revertDefaultAxisMinMax(
                                                            i
                                                        );
                                                }
                                                "function" ==
                                                    typeof e.config.chart.events
                                                        .zoomed &&
                                                    t.ctx.toolbar.zoomCallback({
                                                        min: e.config.xaxis.min,
                                                        max: e.config.xaxis.max,
                                                    }),
                                                    (e.globals.zoomed = !1);
                                                var a =
                                                    t.ctx.series.emptyCollapsedSeries(
                                                        v.clone(
                                                            e.globals
                                                                .initialSeries
                                                        )
                                                    );
                                                t.updateHelpers._updateSeries(
                                                    a,
                                                    e.config.chart.animations
                                                        .dynamicAnimation
                                                        .enabled
                                                );
                                            });
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        (this.elZoom = null),
                                            (this.elZoomIn = null),
                                            (this.elZoomOut = null),
                                            (this.elPan = null),
                                            (this.elSelection = null),
                                            (this.elZoomReset = null),
                                            (this.elMenuIcon = null);
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    ft = (function (t) {
                        d(i, ut);
                        var e = g(i);
                        function i(t) {
                            var a;
                            return (
                                o(this, i),
                                ((a = e.call(this, t)).ctx = t),
                                (a.w = t.w),
                                (a.dragged = !1),
                                (a.graphics = new k(a.ctx)),
                                (a.eventList = [
                                    "mousedown",
                                    "mouseleave",
                                    "mousemove",
                                    "touchstart",
                                    "touchmove",
                                    "mouseup",
                                    "touchend",
                                ]),
                                (a.clientX = 0),
                                (a.clientY = 0),
                                (a.startX = 0),
                                (a.endX = 0),
                                (a.dragX = 0),
                                (a.startY = 0),
                                (a.endY = 0),
                                (a.dragY = 0),
                                (a.moveDirection = "none"),
                                a
                            );
                        }
                        return (
                            c(i, [
                                {
                                    key: "init",
                                    value: function (t) {
                                        var e = this,
                                            i = t.xyRatios,
                                            a = this.w,
                                            r = this;
                                        (this.xyRatios = i),
                                            (this.zoomRect =
                                                this.graphics.drawRect(
                                                    0,
                                                    0,
                                                    0,
                                                    0
                                                )),
                                            (this.selectionRect =
                                                this.graphics.drawRect(
                                                    0,
                                                    0,
                                                    0,
                                                    0
                                                )),
                                            (this.gridRect =
                                                a.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-grid"
                                                )),
                                            this.zoomRect.node.classList.add(
                                                "apexcharts-zoom-rect"
                                            ),
                                            this.selectionRect.node.classList.add(
                                                "apexcharts-selection-rect"
                                            ),
                                            a.globals.dom.elGraphical.add(
                                                this.zoomRect
                                            ),
                                            a.globals.dom.elGraphical.add(
                                                this.selectionRect
                                            ),
                                            "x" ===
                                            a.config.chart.selection.type
                                                ? (this.slDraggableRect =
                                                      this.selectionRect
                                                          .draggable({
                                                              minX: 0,
                                                              minY: 0,
                                                              maxX: a.globals
                                                                  .gridWidth,
                                                              maxY: a.globals
                                                                  .gridHeight,
                                                          })
                                                          .on(
                                                              "dragmove",
                                                              this.selectionDragging.bind(
                                                                  this,
                                                                  "dragging"
                                                              )
                                                          ))
                                                : "y" ===
                                                  a.config.chart.selection.type
                                                ? (this.slDraggableRect =
                                                      this.selectionRect
                                                          .draggable({
                                                              minX: 0,
                                                              maxX: a.globals
                                                                  .gridWidth,
                                                          })
                                                          .on(
                                                              "dragmove",
                                                              this.selectionDragging.bind(
                                                                  this,
                                                                  "dragging"
                                                              )
                                                          ))
                                                : (this.slDraggableRect =
                                                      this.selectionRect
                                                          .draggable()
                                                          .on(
                                                              "dragmove",
                                                              this.selectionDragging.bind(
                                                                  this,
                                                                  "dragging"
                                                              )
                                                          )),
                                            this.preselectedSelection(),
                                            (this.hoverArea =
                                                a.globals.dom.baseEl.querySelector(
                                                    "".concat(
                                                        a.globals.chartClass,
                                                        " .apexcharts-svg"
                                                    )
                                                )),
                                            this.hoverArea.classList.add(
                                                "apexcharts-zoomable"
                                            ),
                                            this.eventList.forEach(function (
                                                t
                                            ) {
                                                e.hoverArea.addEventListener(
                                                    t,
                                                    r.svgMouseEvents.bind(r, i),
                                                    { capture: !1, passive: !0 }
                                                );
                                            });
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        this.slDraggableRect &&
                                            (this.slDraggableRect.draggable(!1),
                                            this.slDraggableRect.off(),
                                            this.selectionRect.off()),
                                            (this.selectionRect = null),
                                            (this.zoomRect = null),
                                            (this.gridRect = null);
                                    },
                                },
                                {
                                    key: "svgMouseEvents",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = this,
                                            r = this.ctx.toolbar,
                                            s = i.globals.zoomEnabled
                                                ? i.config.chart.zoom.type
                                                : i.config.chart.selection.type,
                                            n =
                                                i.config.chart.toolbar
                                                    .autoSelected;
                                        if (
                                            (e.shiftKey
                                                ? ((this.shiftWasPressed = !0),
                                                  r.enableZoomPanFromToolbar(
                                                      "pan" === n
                                                          ? "zoom"
                                                          : "pan"
                                                  ))
                                                : this.shiftWasPressed &&
                                                  (r.enableZoomPanFromToolbar(
                                                      n
                                                  ),
                                                  (this.shiftWasPressed = !1)),
                                            e.target)
                                        ) {
                                            var o,
                                                l = e.target.classList;
                                            if (
                                                (e.target.parentNode &&
                                                    null !==
                                                        e.target.parentNode &&
                                                    (o =
                                                        e.target.parentNode
                                                            .classList),
                                                !(
                                                    l.contains(
                                                        "apexcharts-selection-rect"
                                                    ) ||
                                                    l.contains(
                                                        "apexcharts-legend-marker"
                                                    ) ||
                                                    l.contains(
                                                        "apexcharts-legend-text"
                                                    ) ||
                                                    (o &&
                                                        o.contains(
                                                            "apexcharts-toolbar"
                                                        ))
                                                ))
                                            ) {
                                                if (
                                                    ((a.clientX =
                                                        "touchmove" ===
                                                            e.type ||
                                                        "touchstart" === e.type
                                                            ? e.touches[0]
                                                                  .clientX
                                                            : "touchend" ===
                                                              e.type
                                                            ? e
                                                                  .changedTouches[0]
                                                                  .clientX
                                                            : e.clientX),
                                                    (a.clientY =
                                                        "touchmove" ===
                                                            e.type ||
                                                        "touchstart" === e.type
                                                            ? e.touches[0]
                                                                  .clientY
                                                            : "touchend" ===
                                                              e.type
                                                            ? e
                                                                  .changedTouches[0]
                                                                  .clientY
                                                            : e.clientY),
                                                    "mousedown" === e.type &&
                                                        1 === e.which)
                                                ) {
                                                    var c =
                                                        a.gridRect.getBoundingClientRect();
                                                    (a.startX =
                                                        a.clientX - c.left),
                                                        (a.startY =
                                                            a.clientY - c.top),
                                                        (a.dragged = !1),
                                                        (a.w.globals.mousedown =
                                                            !0);
                                                }
                                                if (
                                                    ((("mousemove" === e.type &&
                                                        1 === e.which) ||
                                                        "touchmove" ===
                                                            e.type) &&
                                                        ((a.dragged = !0),
                                                        i.globals.panEnabled
                                                            ? ((i.globals.selection =
                                                                  null),
                                                              a.w.globals
                                                                  .mousedown &&
                                                                  a.panDragging(
                                                                      {
                                                                          context:
                                                                              a,
                                                                          zoomtype:
                                                                              s,
                                                                          xyRatios:
                                                                              t,
                                                                      }
                                                                  ))
                                                            : ((a.w.globals
                                                                  .mousedown &&
                                                                  i.globals
                                                                      .zoomEnabled) ||
                                                                  (a.w.globals
                                                                      .mousedown &&
                                                                      i.globals
                                                                          .selectionEnabled)) &&
                                                              (a.selection =
                                                                  a.selectionDrawing(
                                                                      {
                                                                          context:
                                                                              a,
                                                                          zoomtype:
                                                                              s,
                                                                      }
                                                                  ))),
                                                    "mouseup" === e.type ||
                                                        "touchend" === e.type ||
                                                        "mouseleave" === e.type)
                                                ) {
                                                    var h =
                                                        a.gridRect.getBoundingClientRect();
                                                    a.w.globals.mousedown &&
                                                        ((a.endX =
                                                            a.clientX - h.left),
                                                        (a.endY =
                                                            a.clientY - h.top),
                                                        (a.dragX = Math.abs(
                                                            a.endX - a.startX
                                                        )),
                                                        (a.dragY = Math.abs(
                                                            a.endY - a.startY
                                                        )),
                                                        (i.globals
                                                            .zoomEnabled ||
                                                            i.globals
                                                                .selectionEnabled) &&
                                                            a.selectionDrawn({
                                                                context: a,
                                                                zoomtype: s,
                                                            }),
                                                        i.globals.panEnabled &&
                                                            i.config.xaxis
                                                                .convertedCatToNumeric &&
                                                            a.delayedPanScrolled()),
                                                        i.globals.zoomEnabled &&
                                                            a.hideSelectionRect(
                                                                this
                                                                    .selectionRect
                                                            ),
                                                        (a.dragged = !1),
                                                        (a.w.globals.mousedown =
                                                            !1);
                                                }
                                                this.makeSelectionRectDraggable();
                                            }
                                        }
                                    },
                                },
                                {
                                    key: "makeSelectionRectDraggable",
                                    value: function () {
                                        var t = this.w;
                                        if (this.selectionRect) {
                                            var e =
                                                this.selectionRect.node.getBoundingClientRect();
                                            e.width > 0 &&
                                                e.height > 0 &&
                                                this.slDraggableRect
                                                    .selectize({
                                                        points: "l, r",
                                                        pointSize: 8,
                                                        pointType: "rect",
                                                    })
                                                    .resize({
                                                        constraint: {
                                                            minX: 0,
                                                            minY: 0,
                                                            maxX: t.globals
                                                                .gridWidth,
                                                            maxY: t.globals
                                                                .gridHeight,
                                                        },
                                                    })
                                                    .on(
                                                        "resizing",
                                                        this.selectionDragging.bind(
                                                            this,
                                                            "resizing"
                                                        )
                                                    );
                                        }
                                    },
                                },
                                {
                                    key: "preselectedSelection",
                                    value: function () {
                                        var t = this.w,
                                            e = this.xyRatios;
                                        if (!t.globals.zoomEnabled)
                                            if (
                                                void 0 !==
                                                    t.globals.selection &&
                                                null !== t.globals.selection
                                            )
                                                this.drawSelectionRect(
                                                    t.globals.selection
                                                );
                                            else if (
                                                void 0 !==
                                                    t.config.chart.selection
                                                        .xaxis.min &&
                                                void 0 !==
                                                    t.config.chart.selection
                                                        .xaxis.max
                                            ) {
                                                var i =
                                                        (t.config.chart
                                                            .selection.xaxis
                                                            .min -
                                                            t.globals.minX) /
                                                        e.xRatio,
                                                    a = {
                                                        x: i,
                                                        y: 0,
                                                        width:
                                                            t.globals
                                                                .gridWidth -
                                                            (t.globals.maxX -
                                                                t.config.chart
                                                                    .selection
                                                                    .xaxis
                                                                    .max) /
                                                                e.xRatio -
                                                            i,
                                                        height: t.globals
                                                            .gridHeight,
                                                        translateX: 0,
                                                        translateY: 0,
                                                        selectionEnabled: !0,
                                                    };
                                                this.drawSelectionRect(a),
                                                    this.makeSelectionRectDraggable(),
                                                    "function" ==
                                                        typeof t.config.chart
                                                            .events.selection &&
                                                        t.config.chart.events.selection(
                                                            this.ctx,
                                                            {
                                                                xaxis: {
                                                                    min: t
                                                                        .config
                                                                        .chart
                                                                        .selection
                                                                        .xaxis
                                                                        .min,
                                                                    max: t
                                                                        .config
                                                                        .chart
                                                                        .selection
                                                                        .xaxis
                                                                        .max,
                                                                },
                                                                yaxis: {},
                                                            }
                                                        );
                                            }
                                    },
                                },
                                {
                                    key: "drawSelectionRect",
                                    value: function (t) {
                                        var e = t.x,
                                            i = t.y,
                                            a = t.width,
                                            r = t.height,
                                            s = t.translateX,
                                            n = void 0 === s ? 0 : s,
                                            o = t.translateY,
                                            l = void 0 === o ? 0 : o,
                                            c = this.w,
                                            h = this.zoomRect,
                                            d = this.selectionRect;
                                        if (
                                            this.dragged ||
                                            null !== c.globals.selection
                                        ) {
                                            var u = {
                                                transform:
                                                    "translate(" +
                                                    n +
                                                    ", " +
                                                    l +
                                                    ")",
                                            };
                                            c.globals.zoomEnabled &&
                                                this.dragged &&
                                                (a < 0 && (a = 1),
                                                h.attr({
                                                    x: e,
                                                    y: i,
                                                    width: a,
                                                    height: r,
                                                    fill: c.config.chart.zoom
                                                        .zoomedArea.fill.color,
                                                    "fill-opacity":
                                                        c.config.chart.zoom
                                                            .zoomedArea.fill
                                                            .opacity,
                                                    stroke: c.config.chart.zoom
                                                        .zoomedArea.stroke
                                                        .color,
                                                    "stroke-width":
                                                        c.config.chart.zoom
                                                            .zoomedArea.stroke
                                                            .width,
                                                    "stroke-opacity":
                                                        c.config.chart.zoom
                                                            .zoomedArea.stroke
                                                            .opacity,
                                                }),
                                                k.setAttrs(h.node, u)),
                                                c.globals.selectionEnabled &&
                                                    (d.attr({
                                                        x: e,
                                                        y: i,
                                                        width: a > 0 ? a : 0,
                                                        height: r > 0 ? r : 0,
                                                        fill: c.config.chart
                                                            .selection.fill
                                                            .color,
                                                        "fill-opacity":
                                                            c.config.chart
                                                                .selection.fill
                                                                .opacity,
                                                        stroke: c.config.chart
                                                            .selection.stroke
                                                            .color,
                                                        "stroke-width":
                                                            c.config.chart
                                                                .selection
                                                                .stroke.width,
                                                        "stroke-dasharray":
                                                            c.config.chart
                                                                .selection
                                                                .stroke
                                                                .dashArray,
                                                        "stroke-opacity":
                                                            c.config.chart
                                                                .selection
                                                                .stroke.opacity,
                                                    }),
                                                    k.setAttrs(d.node, u));
                                        }
                                    },
                                },
                                {
                                    key: "hideSelectionRect",
                                    value: function (t) {
                                        t &&
                                            t.attr({
                                                x: 0,
                                                y: 0,
                                                width: 0,
                                                height: 0,
                                            });
                                    },
                                },
                                {
                                    key: "selectionDrawing",
                                    value: function (t) {
                                        var e,
                                            i = t.context,
                                            a = t.zoomtype,
                                            r = this.w,
                                            s = i,
                                            n =
                                                this.gridRect.getBoundingClientRect(),
                                            o = s.startX - 1,
                                            l = s.startY,
                                            c = !1,
                                            h = !1,
                                            d = s.clientX - n.left - o,
                                            u = s.clientY - n.top - l;
                                        return (
                                            Math.abs(d + o) >
                                            r.globals.gridWidth
                                                ? (d = r.globals.gridWidth - o)
                                                : s.clientX - n.left < 0 &&
                                                  (d = o),
                                            o > s.clientX - n.left &&
                                                ((c = !0), (d = Math.abs(d))),
                                            l > s.clientY - n.top &&
                                                ((h = !0), (u = Math.abs(u))),
                                            (e =
                                                "x" === a
                                                    ? {
                                                          x: c ? o - d : o,
                                                          y: 0,
                                                          width: d,
                                                          height: r.globals
                                                              .gridHeight,
                                                      }
                                                    : "y" === a
                                                    ? {
                                                          x: 0,
                                                          y: h ? l - u : l,
                                                          width: r.globals
                                                              .gridWidth,
                                                          height: u,
                                                      }
                                                    : {
                                                          x: c ? o - d : o,
                                                          y: h ? l - u : l,
                                                          width: d,
                                                          height: u,
                                                      }),
                                            s.drawSelectionRect(e),
                                            s.selectionDragging("resizing"),
                                            e
                                        );
                                    },
                                },
                                {
                                    key: "selectionDragging",
                                    value: function (t, e) {
                                        var i = this,
                                            a = this.w,
                                            r = this.xyRatios,
                                            s = this.selectionRect,
                                            n = 0;
                                        "resizing" === t && (n = 30);
                                        var o = function (t) {
                                                return parseFloat(
                                                    s.node.getAttribute(t)
                                                );
                                            },
                                            l = {
                                                x: o("x"),
                                                y: o("y"),
                                                width: o("width"),
                                                height: o("height"),
                                            };
                                        (a.globals.selection = l),
                                            "function" ==
                                                typeof a.config.chart.events
                                                    .selection &&
                                                a.globals.selectionEnabled &&
                                                (clearTimeout(
                                                    this.w.globals
                                                        .selectionResizeTimer
                                                ),
                                                (this.w.globals.selectionResizeTimer =
                                                    window.setTimeout(
                                                        function () {
                                                            var t =
                                                                    i.gridRect.getBoundingClientRect(),
                                                                e =
                                                                    s.node.getBoundingClientRect(),
                                                                n = {
                                                                    xaxis: {
                                                                        min:
                                                                            a
                                                                                .globals
                                                                                .xAxisScale
                                                                                .niceMin +
                                                                            (e.left -
                                                                                t.left) *
                                                                                r.xRatio,
                                                                        max:
                                                                            a
                                                                                .globals
                                                                                .xAxisScale
                                                                                .niceMin +
                                                                            (e.right -
                                                                                t.left) *
                                                                                r.xRatio,
                                                                    },
                                                                    yaxis: {
                                                                        min:
                                                                            a
                                                                                .globals
                                                                                .yAxisScale[0]
                                                                                .niceMin +
                                                                            (t.bottom -
                                                                                e.bottom) *
                                                                                r
                                                                                    .yRatio[0],
                                                                        max:
                                                                            a
                                                                                .globals
                                                                                .yAxisScale[0]
                                                                                .niceMax -
                                                                            (e.top -
                                                                                t.top) *
                                                                                r
                                                                                    .yRatio[0],
                                                                    },
                                                                };
                                                            a.config.chart.events.selection(
                                                                i.ctx,
                                                                n
                                                            ),
                                                                a.config.chart
                                                                    .brush
                                                                    .enabled &&
                                                                    void 0 !==
                                                                        a.config
                                                                            .chart
                                                                            .events
                                                                            .brushScrolled &&
                                                                    a.config.chart.events.brushScrolled(
                                                                        i.ctx,
                                                                        n
                                                                    );
                                                        },
                                                        n
                                                    )));
                                    },
                                },
                                {
                                    key: "selectionDrawn",
                                    value: function (t) {
                                        var e = t.context,
                                            i = t.zoomtype,
                                            a = this.w,
                                            r = e,
                                            s = this.xyRatios,
                                            n = this.ctx.toolbar;
                                        if (r.startX > r.endX) {
                                            var o = r.startX;
                                            (r.startX = r.endX), (r.endX = o);
                                        }
                                        if (r.startY > r.endY) {
                                            var l = r.startY;
                                            (r.startY = r.endY), (r.endY = l);
                                        }
                                        var c = void 0,
                                            h = void 0;
                                        a.globals.isRangeBar
                                            ? ((c =
                                                  a.globals.yAxisScale[0]
                                                      .niceMin +
                                                  r.startX * s.invertedYRatio),
                                              (h =
                                                  a.globals.yAxisScale[0]
                                                      .niceMin +
                                                  r.endX * s.invertedYRatio))
                                            : ((c =
                                                  a.globals.xAxisScale.niceMin +
                                                  r.startX * s.xRatio),
                                              (h =
                                                  a.globals.xAxisScale.niceMin +
                                                  r.endX * s.xRatio));
                                        var d = [],
                                            u = [];
                                        if (
                                            (a.config.yaxis.forEach(function (
                                                t,
                                                e
                                            ) {
                                                d.push(
                                                    a.globals.yAxisScale[e]
                                                        .niceMax -
                                                        s.yRatio[e] * r.startY
                                                ),
                                                    u.push(
                                                        a.globals.yAxisScale[e]
                                                            .niceMax -
                                                            s.yRatio[e] * r.endY
                                                    );
                                            }),
                                            r.dragged &&
                                                (r.dragX > 10 ||
                                                    r.dragY > 10) &&
                                                c !== h)
                                        )
                                            if (a.globals.zoomEnabled) {
                                                var f = v.clone(
                                                        a.globals.initialConfig
                                                            .yaxis
                                                    ),
                                                    g = v.clone(
                                                        a.globals.initialConfig
                                                            .xaxis
                                                    );
                                                if (
                                                    ((a.globals.zoomed = !0),
                                                    a.config.xaxis
                                                        .convertedCatToNumeric &&
                                                        ((c = Math.floor(c)),
                                                        (h = Math.floor(h)),
                                                        c < 1 &&
                                                            ((c = 1),
                                                            (h =
                                                                a.globals
                                                                    .dataPoints)),
                                                        h - c < 2 &&
                                                            (h = c + 1)),
                                                    ("xy" !== i && "x" !== i) ||
                                                        (g = {
                                                            min: c,
                                                            max: h,
                                                        }),
                                                    ("xy" !== i && "y" !== i) ||
                                                        f.forEach(function (
                                                            t,
                                                            e
                                                        ) {
                                                            (f[e].min = u[e]),
                                                                (f[e].max =
                                                                    d[e]);
                                                        }),
                                                    a.config.chart.zoom
                                                        .autoScaleYaxis)
                                                ) {
                                                    var p = new $(r.ctx);
                                                    f = p.autoScaleY(r.ctx, f, {
                                                        xaxis: g,
                                                    });
                                                }
                                                if (n) {
                                                    var x =
                                                        n.getBeforeZoomRange(
                                                            g,
                                                            f
                                                        );
                                                    x &&
                                                        ((g = x.xaxis
                                                            ? x.xaxis
                                                            : g),
                                                        (f = x.yaxis
                                                            ? x.yaxis
                                                            : f));
                                                }
                                                var m = { xaxis: g };
                                                a.config.chart.group ||
                                                    (m.yaxis = f),
                                                    r.ctx.updateHelpers._updateOptions(
                                                        m,
                                                        !1,
                                                        r.w.config.chart
                                                            .animations
                                                            .dynamicAnimation
                                                            .enabled
                                                    ),
                                                    "function" ==
                                                        typeof a.config.chart
                                                            .events.zoomed &&
                                                        n.zoomCallback(g, f);
                                            } else if (
                                                a.globals.selectionEnabled
                                            ) {
                                                var b,
                                                    y = null;
                                                (b = { min: c, max: h }),
                                                    ("xy" !== i && "y" !== i) ||
                                                        (y = v.clone(
                                                            a.config.yaxis
                                                        )).forEach(function (
                                                            t,
                                                            e
                                                        ) {
                                                            (y[e].min = u[e]),
                                                                (y[e].max =
                                                                    d[e]);
                                                        }),
                                                    (a.globals.selection =
                                                        r.selection),
                                                    "function" ==
                                                        typeof a.config.chart
                                                            .events.selection &&
                                                        a.config.chart.events.selection(
                                                            r.ctx,
                                                            {
                                                                xaxis: b,
                                                                yaxis: y,
                                                            }
                                                        );
                                            }
                                    },
                                },
                                {
                                    key: "panDragging",
                                    value: function (t) {
                                        var e = t.context,
                                            i = this.w,
                                            a = e;
                                        if (
                                            void 0 !==
                                            i.globals.lastClientPosition.x
                                        ) {
                                            var r =
                                                    i.globals.lastClientPosition
                                                        .x - a.clientX,
                                                s =
                                                    i.globals.lastClientPosition
                                                        .y - a.clientY;
                                            Math.abs(r) > Math.abs(s) && r > 0
                                                ? (this.moveDirection = "left")
                                                : Math.abs(r) > Math.abs(s) &&
                                                  r < 0
                                                ? (this.moveDirection = "right")
                                                : Math.abs(s) > Math.abs(r) &&
                                                  s > 0
                                                ? (this.moveDirection = "up")
                                                : Math.abs(s) > Math.abs(r) &&
                                                  s < 0 &&
                                                  (this.moveDirection = "down");
                                        }
                                        i.globals.lastClientPosition = {
                                            x: a.clientX,
                                            y: a.clientY,
                                        };
                                        var n = i.globals.isRangeBar
                                                ? i.globals.minY
                                                : i.globals.minX,
                                            o = i.globals.isRangeBar
                                                ? i.globals.maxY
                                                : i.globals.maxX;
                                        i.config.xaxis.convertedCatToNumeric ||
                                            a.panScrolled(n, o);
                                    },
                                },
                                {
                                    key: "delayedPanScrolled",
                                    value: function () {
                                        var t = this.w,
                                            e = t.globals.minX,
                                            i = t.globals.maxX,
                                            a =
                                                (t.globals.maxX -
                                                    t.globals.minX) /
                                                2;
                                        "left" === this.moveDirection
                                            ? ((e = t.globals.minX + a),
                                              (i = t.globals.maxX + a))
                                            : "right" === this.moveDirection &&
                                              ((e = t.globals.minX - a),
                                              (i = t.globals.maxX - a)),
                                            (e = Math.floor(e)),
                                            (i = Math.floor(i)),
                                            this.updateScrolledChart(
                                                { xaxis: { min: e, max: i } },
                                                e,
                                                i
                                            );
                                    },
                                },
                                {
                                    key: "panScrolled",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = this.xyRatios,
                                            r = v.clone(
                                                i.globals.initialConfig.yaxis
                                            ),
                                            s = a.xRatio,
                                            n = i.globals.minX,
                                            o = i.globals.maxX;
                                        i.globals.isRangeBar &&
                                            ((s = a.invertedYRatio),
                                            (n = i.globals.minY),
                                            (o = i.globals.maxY)),
                                            "left" === this.moveDirection
                                                ? ((t =
                                                      n +
                                                      (i.globals.gridWidth /
                                                          15) *
                                                          s),
                                                  (e =
                                                      o +
                                                      (i.globals.gridWidth /
                                                          15) *
                                                          s))
                                                : "right" ===
                                                      this.moveDirection &&
                                                  ((t =
                                                      n -
                                                      (i.globals.gridWidth /
                                                          15) *
                                                          s),
                                                  (e =
                                                      o -
                                                      (i.globals.gridWidth /
                                                          15) *
                                                          s)),
                                            i.globals.isRangeBar ||
                                                ((t < i.globals.initialMinX ||
                                                    e >
                                                        i.globals
                                                            .initialMaxX) &&
                                                    ((t = n), (e = o)));
                                        var l = { min: t, max: e };
                                        i.config.chart.zoom.autoScaleYaxis &&
                                            (r = new $(this.ctx).autoScaleY(
                                                this.ctx,
                                                r,
                                                { xaxis: l }
                                            ));
                                        var c = { xaxis: { min: t, max: e } };
                                        i.config.chart.group || (c.yaxis = r),
                                            this.updateScrolledChart(c, t, e);
                                    },
                                },
                                {
                                    key: "updateScrolledChart",
                                    value: function (t, e, i) {
                                        var a = this.w;
                                        this.ctx.updateHelpers._updateOptions(
                                            t,
                                            !1,
                                            !1
                                        ),
                                            "function" ==
                                                typeof a.config.chart.events
                                                    .scrolled &&
                                                a.config.chart.events.scrolled(
                                                    this.ctx,
                                                    {
                                                        xaxis: {
                                                            min: e,
                                                            max: i,
                                                        },
                                                    }
                                                );
                                    },
                                },
                            ]),
                            i
                        );
                    })(),
                    gt = (function () {
                        function t(e) {
                            o(this, t),
                                (this.w = e.w),
                                (this.ttCtx = e),
                                (this.ctx = e.ctx);
                        }
                        return (
                            c(t, [
                                {
                                    key: "getNearestValues",
                                    value: function (t) {
                                        var e = t.hoverArea,
                                            i = t.elGrid,
                                            a = t.clientX,
                                            r = t.clientY,
                                            s = this.w,
                                            n = i.getBoundingClientRect(),
                                            o = n.width,
                                            l = n.height,
                                            c = o / (s.globals.dataPoints - 1),
                                            h = l / s.globals.dataPoints,
                                            d = this.hasBars();
                                        (!s.globals.comboCharts && !d) ||
                                            s.config.xaxis
                                                .convertedCatToNumeric ||
                                            (c = o / s.globals.dataPoints);
                                        var u =
                                                a -
                                                n.left -
                                                s.globals.barPadForNumericAxis,
                                            f = r - n.top;
                                        u < 0 || f < 0 || u > o || f > l
                                            ? (e.classList.remove(
                                                  "hovering-zoom"
                                              ),
                                              e.classList.remove(
                                                  "hovering-pan"
                                              ))
                                            : s.globals.zoomEnabled
                                            ? (e.classList.remove(
                                                  "hovering-pan"
                                              ),
                                              e.classList.add("hovering-zoom"))
                                            : s.globals.panEnabled &&
                                              (e.classList.remove(
                                                  "hovering-zoom"
                                              ),
                                              e.classList.add("hovering-pan"));
                                        var g = Math.round(u / c),
                                            p = Math.floor(f / h);
                                        d &&
                                            !s.config.xaxis
                                                .convertedCatToNumeric &&
                                            ((g = Math.ceil(u / c)), (g -= 1));
                                        var x = null,
                                            m = null,
                                            b = [],
                                            y = [];
                                        if (
                                            (s.globals.seriesXvalues.forEach(
                                                function (t) {
                                                    b.push(
                                                        [t[0] + 1e-6].concat(t)
                                                    );
                                                }
                                            ),
                                            s.globals.seriesYvalues.forEach(
                                                function (t) {
                                                    y.push(
                                                        [t[0] + 1e-6].concat(t)
                                                    );
                                                }
                                            ),
                                            (b = b.map(function (t) {
                                                return t.filter(function (t) {
                                                    return v.isNumber(t);
                                                });
                                            })),
                                            (y = y.map(function (t) {
                                                return t.filter(function (t) {
                                                    return v.isNumber(t);
                                                });
                                            })),
                                            s.globals.isXNumeric)
                                        ) {
                                            var w = this.ttCtx
                                                    .getElGrid()
                                                    .getBoundingClientRect(),
                                                k = u * (w.width / o),
                                                A = f * (w.height / l);
                                            (x = (m = this.closestInMultiArray(
                                                k,
                                                A,
                                                b,
                                                y
                                            )).index),
                                                (g = m.j),
                                                null !== x &&
                                                    ((b =
                                                        s.globals.seriesXvalues[
                                                            x
                                                        ]),
                                                    (g = (m =
                                                        this.closestInArray(
                                                            k,
                                                            b
                                                        )).index));
                                        }
                                        return (
                                            (s.globals.capturedSeriesIndex =
                                                null === x ? -1 : x),
                                            (!g || g < 1) && (g = 0),
                                            s.globals.isBarHorizontal
                                                ? (s.globals.capturedDataPointIndex =
                                                      p)
                                                : (s.globals.capturedDataPointIndex =
                                                      g),
                                            {
                                                capturedSeries: x,
                                                j: s.globals.isBarHorizontal
                                                    ? p
                                                    : g,
                                                hoverX: u,
                                                hoverY: f,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "closestInMultiArray",
                                    value: function (t, e, i, a) {
                                        var r = this.w,
                                            s = 0,
                                            n = null,
                                            o = -1;
                                        r.globals.series.length > 1
                                            ? (s = this.getFirstActiveXArray(i))
                                            : (n = 0);
                                        var l = i[s][0],
                                            c = Math.abs(t - l);
                                        if (
                                            (i.forEach(function (e) {
                                                e.forEach(function (e, i) {
                                                    var a = Math.abs(t - e);
                                                    a < c && ((c = a), (o = i));
                                                });
                                            }),
                                            -1 !== o)
                                        ) {
                                            var h = a[s][o],
                                                d = Math.abs(e - h);
                                            (n = s),
                                                a.forEach(function (t, i) {
                                                    var a = Math.abs(e - t[o]);
                                                    a < d && ((d = a), (n = i));
                                                });
                                        }
                                        return { index: n, j: o };
                                    },
                                },
                                {
                                    key: "getFirstActiveXArray",
                                    value: function (t) {
                                        for (
                                            var e = this.w,
                                                i = 0,
                                                a = t.map(function (t, e) {
                                                    return t.length > 0
                                                        ? e
                                                        : -1;
                                                }),
                                                r = 0;
                                            r < a.length;
                                            r++
                                        )
                                            if (
                                                -1 !== a[r] &&
                                                -1 ===
                                                    e.globals.collapsedSeriesIndices.indexOf(
                                                        r
                                                    ) &&
                                                -1 ===
                                                    e.globals.ancillaryCollapsedSeriesIndices.indexOf(
                                                        r
                                                    )
                                            ) {
                                                i = a[r];
                                                break;
                                            }
                                        return i;
                                    },
                                },
                                {
                                    key: "closestInArray",
                                    value: function (t, e) {
                                        for (
                                            var i = e[0],
                                                a = null,
                                                r = Math.abs(t - i),
                                                s = 0;
                                            s < e.length;
                                            s++
                                        ) {
                                            var n = Math.abs(t - e[s]);
                                            n < r && ((r = n), (a = s));
                                        }
                                        return { index: a };
                                    },
                                },
                                {
                                    key: "isXoverlap",
                                    value: function (t) {
                                        var e = [],
                                            i = this.w.globals.seriesX.filter(
                                                function (t) {
                                                    return void 0 !== t[0];
                                                }
                                            );
                                        if (i.length > 0)
                                            for (
                                                var a = 0;
                                                a < i.length - 1;
                                                a++
                                            )
                                                void 0 !== i[a][t] &&
                                                    void 0 !== i[a + 1][t] &&
                                                    i[a][t] !== i[a + 1][t] &&
                                                    e.push("unEqual");
                                        return 0 === e.length;
                                    },
                                },
                                {
                                    key: "isInitialSeriesSameLen",
                                    value: function () {
                                        for (
                                            var t = !0,
                                                e =
                                                    this.w.globals
                                                        .initialSeries,
                                                i = 0;
                                            i < e.length - 1;
                                            i++
                                        )
                                            if (
                                                e[i].data.length !==
                                                e[i + 1].data.length
                                            ) {
                                                t = !1;
                                                break;
                                            }
                                        return t;
                                    },
                                },
                                {
                                    key: "getBarsHeight",
                                    value: function (t) {
                                        return x(t).reduce(function (t, e) {
                                            return t + e.getBBox().height;
                                        }, 0);
                                    },
                                },
                                {
                                    key: "getElMarkers",
                                    value: function (t) {
                                        return "number" == typeof t
                                            ? this.w.globals.dom.baseEl.querySelectorAll(
                                                  ".apexcharts-series[data\\:realIndex='".concat(
                                                      t,
                                                      "'] .apexcharts-series-markers-wrap > *"
                                                  )
                                              )
                                            : this.w.globals.dom.baseEl.querySelectorAll(
                                                  ".apexcharts-series-markers-wrap > *"
                                              );
                                    },
                                },
                                {
                                    key: "getAllMarkers",
                                    value: function () {
                                        var t =
                                            this.w.globals.dom.baseEl.querySelectorAll(
                                                ".apexcharts-series-markers-wrap"
                                            );
                                        (t = x(t)).sort(function (t, e) {
                                            var i = Number(
                                                    t.getAttribute(
                                                        "data:realIndex"
                                                    )
                                                ),
                                                a = Number(
                                                    e.getAttribute(
                                                        "data:realIndex"
                                                    )
                                                );
                                            return a < i ? 1 : a > i ? -1 : 0;
                                        });
                                        var e = [];
                                        return (
                                            t.forEach(function (t) {
                                                e.push(
                                                    t.querySelector(
                                                        ".apexcharts-marker"
                                                    )
                                                );
                                            }),
                                            e
                                        );
                                    },
                                },
                                {
                                    key: "hasMarkers",
                                    value: function (t) {
                                        return this.getElMarkers(t).length > 0;
                                    },
                                },
                                {
                                    key: "getElBars",
                                    value: function () {
                                        return this.w.globals.dom.baseEl.querySelectorAll(
                                            ".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series"
                                        );
                                    },
                                },
                                {
                                    key: "hasBars",
                                    value: function () {
                                        return this.getElBars().length > 0;
                                    },
                                },
                                {
                                    key: "getHoverMarkerSize",
                                    value: function (t) {
                                        var e = this.w,
                                            i = e.config.markers.hover.size;
                                        return (
                                            void 0 === i &&
                                                (i =
                                                    e.globals.markers.size[t] +
                                                    e.config.markers.hover
                                                        .sizeOffset),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "toggleAllTooltipSeriesGroups",
                                    value: function (t) {
                                        var e = this.w,
                                            i = this.ttCtx;
                                        0 === i.allTooltipSeriesGroups.length &&
                                            (i.allTooltipSeriesGroups =
                                                e.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-tooltip-series-group"
                                                ));
                                        for (
                                            var a = i.allTooltipSeriesGroups,
                                                r = 0;
                                            r < a.length;
                                            r++
                                        )
                                            "enable" === t
                                                ? (a[r].classList.add(
                                                      "apexcharts-active"
                                                  ),
                                                  (a[r].style.display =
                                                      e.config.tooltip.items.display))
                                                : (a[r].classList.remove(
                                                      "apexcharts-active"
                                                  ),
                                                  (a[r].style.display =
                                                      "none"));
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    pt = (function () {
                        function t(e) {
                            o(this, t),
                                (this.w = e.w),
                                (this.ctx = e.ctx),
                                (this.ttCtx = e),
                                (this.tooltipUtil = new gt(e));
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawSeriesTexts",
                                    value: function (t) {
                                        var e = t.shared,
                                            i = void 0 === e || e,
                                            a = t.ttItems,
                                            r = t.i,
                                            s = void 0 === r ? 0 : r,
                                            n = t.j,
                                            o = void 0 === n ? null : n,
                                            l = t.y1,
                                            c = t.y2,
                                            h = t.e,
                                            d = this.w;
                                        void 0 !== d.config.tooltip.custom
                                            ? this.handleCustomTooltip({
                                                  i: s,
                                                  j: o,
                                                  y1: l,
                                                  y2: c,
                                                  w: d,
                                              })
                                            : this.toggleActiveInactiveSeries(
                                                  i
                                              );
                                        var u = this.getValuesToPrint({
                                            i: s,
                                            j: o,
                                        });
                                        this.printLabels({
                                            i: s,
                                            j: o,
                                            values: u,
                                            ttItems: a,
                                            shared: i,
                                            e: h,
                                        });
                                        var f = this.ttCtx.getElTooltip();
                                        (this.ttCtx.tooltipRect.ttWidth =
                                            f.getBoundingClientRect().width),
                                            (this.ttCtx.tooltipRect.ttHeight =
                                                f.getBoundingClientRect().height);
                                    },
                                },
                                {
                                    key: "printLabels",
                                    value: function (t) {
                                        var e,
                                            i = this,
                                            a = t.i,
                                            r = t.j,
                                            n = t.values,
                                            o = t.ttItems,
                                            l = t.shared,
                                            c = t.e,
                                            h = this.w,
                                            d = [],
                                            u = function (t) {
                                                return (
                                                    h.globals.seriesGoals[t] &&
                                                    h.globals.seriesGoals[t][
                                                        r
                                                    ] &&
                                                    Array.isArray(
                                                        h.globals.seriesGoals[
                                                            t
                                                        ][r]
                                                    )
                                                );
                                            },
                                            f = n.xVal,
                                            g = n.zVal,
                                            p = n.xAxisTTVal,
                                            x = "",
                                            m = h.globals.colors[a];
                                        null !== r &&
                                            h.config.plotOptions.bar
                                                .distributed &&
                                            (m = h.globals.colors[r]);
                                        for (
                                            var b = function (t, n) {
                                                    var b = i.getFormatters(a);
                                                    (x = i.getSeriesName({
                                                        fn: b.yLbTitleFormatter,
                                                        index: a,
                                                        seriesIndex: a,
                                                        j: r,
                                                    })),
                                                        "treemap" ===
                                                            h.config.chart
                                                                .type &&
                                                            (x =
                                                                b.yLbTitleFormatter(
                                                                    String(
                                                                        h.config
                                                                            .series[
                                                                            a
                                                                        ].data[
                                                                            r
                                                                        ].x
                                                                    ),
                                                                    {
                                                                        series: h
                                                                            .globals
                                                                            .series,
                                                                        seriesIndex:
                                                                            a,
                                                                        dataPointIndex:
                                                                            r,
                                                                        w: h,
                                                                    }
                                                                ));
                                                    var v = h.config.tooltip
                                                        .inverseOrder
                                                        ? n
                                                        : t;
                                                    if (h.globals.axisCharts) {
                                                        var y = function (t) {
                                                            var e, i, a, s;
                                                            return h.globals
                                                                .isRangeData
                                                                ? b.yLbFormatter(
                                                                      null ===
                                                                          (e =
                                                                              h
                                                                                  .globals
                                                                                  .seriesRangeStart) ||
                                                                          void 0 ===
                                                                              e ||
                                                                          null ===
                                                                              (i =
                                                                                  e[
                                                                                      t
                                                                                  ]) ||
                                                                          void 0 ===
                                                                              i
                                                                          ? void 0
                                                                          : i[
                                                                                r
                                                                            ],
                                                                      {
                                                                          series: h
                                                                              .globals
                                                                              .seriesRangeStart,
                                                                          seriesIndex:
                                                                              t,
                                                                          dataPointIndex:
                                                                              r,
                                                                          w: h,
                                                                      }
                                                                  ) +
                                                                      " - " +
                                                                      b.yLbFormatter(
                                                                          null ===
                                                                              (a =
                                                                                  h
                                                                                      .globals
                                                                                      .seriesRangeEnd) ||
                                                                              void 0 ===
                                                                                  a ||
                                                                              null ===
                                                                                  (s =
                                                                                      a[
                                                                                          t
                                                                                      ]) ||
                                                                              void 0 ===
                                                                                  s
                                                                              ? void 0
                                                                              : s[
                                                                                    r
                                                                                ],
                                                                          {
                                                                              series: h
                                                                                  .globals
                                                                                  .seriesRangeEnd,
                                                                              seriesIndex:
                                                                                  t,
                                                                              dataPointIndex:
                                                                                  r,
                                                                              w: h,
                                                                          }
                                                                      )
                                                                : b.yLbFormatter(
                                                                      h.globals
                                                                          .series[
                                                                          t
                                                                      ][r],
                                                                      {
                                                                          series: h
                                                                              .globals
                                                                              .series,
                                                                          seriesIndex:
                                                                              t,
                                                                          dataPointIndex:
                                                                              r,
                                                                          w: h,
                                                                      }
                                                                  );
                                                        };
                                                        if (l)
                                                            (b =
                                                                i.getFormatters(
                                                                    v
                                                                )),
                                                                (x =
                                                                    i.getSeriesName(
                                                                        {
                                                                            fn: b.yLbTitleFormatter,
                                                                            index: v,
                                                                            seriesIndex:
                                                                                a,
                                                                            j: r,
                                                                        }
                                                                    )),
                                                                (m =
                                                                    h.globals
                                                                        .colors[
                                                                        v
                                                                    ]),
                                                                (e = y(v)),
                                                                u(v) &&
                                                                    (d =
                                                                        h.globals.seriesGoals[
                                                                            v
                                                                        ][
                                                                            r
                                                                        ].map(
                                                                            function (
                                                                                t
                                                                            ) {
                                                                                return {
                                                                                    attrs: t,
                                                                                    val: b.yLbFormatter(
                                                                                        t.value,
                                                                                        {
                                                                                            seriesIndex:
                                                                                                v,
                                                                                            dataPointIndex:
                                                                                                r,
                                                                                            w: h,
                                                                                        }
                                                                                    ),
                                                                                };
                                                                            }
                                                                        ));
                                                        else {
                                                            var w,
                                                                k =
                                                                    null == c ||
                                                                    null ===
                                                                        (w =
                                                                            c.target) ||
                                                                    void 0 === w
                                                                        ? void 0
                                                                        : w.getAttribute(
                                                                              "fill"
                                                                          );
                                                            k &&
                                                                (m =
                                                                    -1 !==
                                                                    k.indexOf(
                                                                        "url"
                                                                    )
                                                                        ? document
                                                                              .querySelector(
                                                                                  k
                                                                                      .substr(
                                                                                          4
                                                                                      )
                                                                                      .slice(
                                                                                          0,
                                                                                          -1
                                                                                      )
                                                                              )
                                                                              .childNodes[0].getAttribute(
                                                                                  "stroke"
                                                                              )
                                                                        : k),
                                                                (e = y(a)),
                                                                u(a) &&
                                                                    Array.isArray(
                                                                        h
                                                                            .globals
                                                                            .seriesGoals[
                                                                            a
                                                                        ][r]
                                                                    ) &&
                                                                    (d =
                                                                        h.globals.seriesGoals[
                                                                            a
                                                                        ][
                                                                            r
                                                                        ].map(
                                                                            function (
                                                                                t
                                                                            ) {
                                                                                return {
                                                                                    attrs: t,
                                                                                    val: b.yLbFormatter(
                                                                                        t.value,
                                                                                        {
                                                                                            seriesIndex:
                                                                                                a,
                                                                                            dataPointIndex:
                                                                                                r,
                                                                                            w: h,
                                                                                        }
                                                                                    ),
                                                                                };
                                                                            }
                                                                        ));
                                                        }
                                                    }
                                                    null === r &&
                                                        (e = b.yLbFormatter(
                                                            h.globals.series[a],
                                                            s(
                                                                s({}, h),
                                                                {},
                                                                {
                                                                    seriesIndex:
                                                                        a,
                                                                    dataPointIndex:
                                                                        a,
                                                                }
                                                            )
                                                        )),
                                                        i.DOMHandling({
                                                            i: a,
                                                            t: v,
                                                            j: r,
                                                            ttItems: o,
                                                            values: {
                                                                val: e,
                                                                goalVals: d,
                                                                xVal: f,
                                                                xAxisTTVal: p,
                                                                zVal: g,
                                                            },
                                                            seriesName: x,
                                                            shared: l,
                                                            pColor: m,
                                                        });
                                                },
                                                v = 0,
                                                y = h.globals.series.length - 1;
                                            v < h.globals.series.length;
                                            v++, y--
                                        )
                                            b(v, y);
                                    },
                                },
                                {
                                    key: "getFormatters",
                                    value: function (t) {
                                        var e,
                                            i = this.w,
                                            a = i.globals.yLabelFormatters[t];
                                        return (
                                            void 0 !== i.globals.ttVal
                                                ? Array.isArray(i.globals.ttVal)
                                                    ? ((a =
                                                          i.globals.ttVal[t] &&
                                                          i.globals.ttVal[t]
                                                              .formatter),
                                                      (e =
                                                          i.globals.ttVal[t] &&
                                                          i.globals.ttVal[t]
                                                              .title &&
                                                          i.globals.ttVal[t]
                                                              .title.formatter))
                                                    : ((a =
                                                          i.globals.ttVal
                                                              .formatter),
                                                      "function" ==
                                                          typeof i.globals.ttVal
                                                              .title
                                                              .formatter &&
                                                          (e =
                                                              i.globals.ttVal
                                                                  .title
                                                                  .formatter))
                                                : (e =
                                                      i.config.tooltip.y.title
                                                          .formatter),
                                            "function" != typeof a &&
                                                (a = i.globals
                                                    .yLabelFormatters[0]
                                                    ? i.globals
                                                          .yLabelFormatters[0]
                                                    : function (t) {
                                                          return t;
                                                      }),
                                            "function" != typeof e &&
                                                (e = function (t) {
                                                    return t;
                                                }),
                                            {
                                                yLbFormatter: a,
                                                yLbTitleFormatter: e,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "getSeriesName",
                                    value: function (t) {
                                        var e = t.fn,
                                            i = t.index,
                                            a = t.seriesIndex,
                                            r = t.j,
                                            s = this.w;
                                        return e(
                                            String(s.globals.seriesNames[i]),
                                            {
                                                series: s.globals.series,
                                                seriesIndex: a,
                                                dataPointIndex: r,
                                                w: s,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "DOMHandling",
                                    value: function (t) {
                                        t.i;
                                        var e = t.t,
                                            i = t.j,
                                            a = t.ttItems,
                                            r = t.values,
                                            s = t.seriesName,
                                            n = t.shared,
                                            o = t.pColor,
                                            l = this.w,
                                            c = this.ttCtx,
                                            h = r.val,
                                            d = r.goalVals,
                                            u = r.xVal,
                                            f = r.xAxisTTVal,
                                            g = r.zVal,
                                            p = null;
                                        (p = a[e].children),
                                            l.config.tooltip.fillSeriesColor &&
                                                ((a[e].style.backgroundColor =
                                                    o),
                                                (p[0].style.display = "none")),
                                            c.showTooltipTitle &&
                                                (null === c.tooltipTitle &&
                                                    (c.tooltipTitle =
                                                        l.globals.dom.baseEl.querySelector(
                                                            ".apexcharts-tooltip-title"
                                                        )),
                                                (c.tooltipTitle.innerHTML = u)),
                                            c.isXAxisTooltipEnabled &&
                                                (c.xaxisTooltipText.innerHTML =
                                                    "" !== f ? f : u);
                                        var x = a[e].querySelector(
                                            ".apexcharts-tooltip-text-y-label"
                                        );
                                        x && (x.innerHTML = s || "");
                                        var m = a[e].querySelector(
                                            ".apexcharts-tooltip-text-y-value"
                                        );
                                        m &&
                                            (m.innerHTML =
                                                void 0 !== h ? h : ""),
                                            p[0] &&
                                                p[0].classList.contains(
                                                    "apexcharts-tooltip-marker"
                                                ) &&
                                                (l.config.tooltip.marker
                                                    .fillColors &&
                                                    Array.isArray(
                                                        l.config.tooltip.marker
                                                            .fillColors
                                                    ) &&
                                                    (o =
                                                        l.config.tooltip.marker
                                                            .fillColors[e]),
                                                (p[0].style.backgroundColor =
                                                    o)),
                                            l.config.tooltip.marker.show ||
                                                (p[0].style.display = "none");
                                        var b = a[e].querySelector(
                                                ".apexcharts-tooltip-text-goals-label"
                                            ),
                                            v = a[e].querySelector(
                                                ".apexcharts-tooltip-text-goals-value"
                                            );
                                        if (
                                            d.length &&
                                            l.globals.seriesGoals[e]
                                        ) {
                                            var y = function () {
                                                var t = "<div >",
                                                    e = "<div>";
                                                d.forEach(function (i, a) {
                                                    (t +=
                                                        ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '
                                                            .concat(
                                                                i.attrs
                                                                    .strokeColor,
                                                                '; height: 3px; border-radius: 0; top: 5px;"></span> '
                                                            )
                                                            .concat(
                                                                i.attrs.name,
                                                                "</div>"
                                                            )),
                                                        (e += "<div>".concat(
                                                            i.val,
                                                            "</div>"
                                                        ));
                                                }),
                                                    (b.innerHTML =
                                                        t + "</div>"),
                                                    (v.innerHTML =
                                                        e + "</div>");
                                            };
                                            n
                                                ? l.globals.seriesGoals[e][i] &&
                                                  Array.isArray(
                                                      l.globals.seriesGoals[e][
                                                          i
                                                      ]
                                                  )
                                                    ? y()
                                                    : ((b.innerHTML = ""),
                                                      (v.innerHTML = ""))
                                                : y();
                                        } else
                                            (b.innerHTML = ""),
                                                (v.innerHTML = "");
                                        null !== g &&
                                            ((a[e].querySelector(
                                                ".apexcharts-tooltip-text-z-label"
                                            ).innerHTML =
                                                l.config.tooltip.z.title),
                                            (a[e].querySelector(
                                                ".apexcharts-tooltip-text-z-value"
                                            ).innerHTML =
                                                void 0 !== g ? g : "")),
                                            n &&
                                                p[0] &&
                                                (null == h ||
                                                l.globals.ancillaryCollapsedSeriesIndices.indexOf(
                                                    e
                                                ) > -1 ||
                                                l.globals.collapsedSeriesIndices.indexOf(
                                                    e
                                                ) > -1
                                                    ? (p[0].parentNode.style.display =
                                                          "none")
                                                    : (p[0].parentNode.style.display =
                                                          l.config.tooltip.items.display));
                                    },
                                },
                                {
                                    key: "toggleActiveInactiveSeries",
                                    value: function (t) {
                                        var e = this.w;
                                        if (t)
                                            this.tooltipUtil.toggleAllTooltipSeriesGroups(
                                                "enable"
                                            );
                                        else {
                                            this.tooltipUtil.toggleAllTooltipSeriesGroups(
                                                "disable"
                                            );
                                            var i =
                                                e.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-tooltip-series-group"
                                                );
                                            i &&
                                                (i.classList.add(
                                                    "apexcharts-active"
                                                ),
                                                (i.style.display =
                                                    e.config.tooltip.items.display));
                                        }
                                    },
                                },
                                {
                                    key: "getValuesToPrint",
                                    value: function (t) {
                                        var e = t.i,
                                            i = t.j,
                                            a = this.w,
                                            r =
                                                this.ctx.series.filteredSeriesX(),
                                            s = "",
                                            n = "",
                                            o = null,
                                            l = null,
                                            c = {
                                                series: a.globals.series,
                                                seriesIndex: e,
                                                dataPointIndex: i,
                                                w: a,
                                            },
                                            h = a.globals.ttZFormatter;
                                        null === i
                                            ? (l = a.globals.series[e])
                                            : a.globals.isXNumeric &&
                                              "treemap" !== a.config.chart.type
                                            ? ((s = r[e][i]),
                                              0 === r[e].length &&
                                                  (s =
                                                      r[
                                                          this.tooltipUtil.getFirstActiveXArray(
                                                              r
                                                          )
                                                      ][i]))
                                            : (s =
                                                  void 0 !== a.globals.labels[i]
                                                      ? a.globals.labels[i]
                                                      : "");
                                        var d = s;
                                        return (
                                            (s =
                                                a.globals.isXNumeric &&
                                                "datetime" ===
                                                    a.config.xaxis.type
                                                    ? new O(
                                                          this.ctx
                                                      ).xLabelFormat(
                                                          a.globals
                                                              .ttKeyFormatter,
                                                          d,
                                                          d,
                                                          {
                                                              i: void 0,
                                                              dateFormatter:
                                                                  new I(
                                                                      this.ctx
                                                                  ).formatDate,
                                                              w: this.w,
                                                          }
                                                      )
                                                    : a.globals.isBarHorizontal
                                                    ? a.globals.yLabelFormatters[0](
                                                          d,
                                                          c
                                                      )
                                                    : a.globals.xLabelFormatter(
                                                          d,
                                                          c
                                                      )),
                                            void 0 !==
                                                a.config.tooltip.x.formatter &&
                                                (s = a.globals.ttKeyFormatter(
                                                    d,
                                                    c
                                                )),
                                            a.globals.seriesZ.length > 0 &&
                                                a.globals.seriesZ[e].length >
                                                    0 &&
                                                (o = h(
                                                    a.globals.seriesZ[e][i],
                                                    a
                                                )),
                                            (n =
                                                "function" ==
                                                typeof a.config.xaxis.tooltip
                                                    .formatter
                                                    ? a.globals.xaxisTooltipFormatter(
                                                          d,
                                                          c
                                                      )
                                                    : s),
                                            {
                                                val: Array.isArray(l)
                                                    ? l.join(" ")
                                                    : l,
                                                xVal: Array.isArray(s)
                                                    ? s.join(" ")
                                                    : s,
                                                xAxisTTVal: Array.isArray(n)
                                                    ? n.join(" ")
                                                    : n,
                                                zVal: o,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "handleCustomTooltip",
                                    value: function (t) {
                                        var e = t.i,
                                            i = t.j,
                                            a = t.y1,
                                            r = t.y2,
                                            s = t.w,
                                            n = this.ttCtx.getElTooltip(),
                                            o = s.config.tooltip.custom;
                                        Array.isArray(o) && o[e] && (o = o[e]),
                                            (n.innerHTML = o({
                                                ctx: this.ctx,
                                                series: s.globals.series,
                                                seriesIndex: e,
                                                dataPointIndex: i,
                                                y1: a,
                                                y2: r,
                                                w: s,
                                            }));
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    xt = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ttCtx = e),
                                (this.ctx = e.ctx),
                                (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "moveXCrosshairs",
                                    value: function (t) {
                                        var e =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1]
                                                    ? arguments[1]
                                                    : null,
                                            i = this.ttCtx,
                                            a = this.w,
                                            r = i.getElXCrosshairs(),
                                            s = t - i.xcrosshairsWidth / 2,
                                            n = a.globals.labels.slice().length;
                                        if (
                                            (null !== e &&
                                                (s =
                                                    (a.globals.gridWidth / n) *
                                                    e),
                                            null === r ||
                                                a.globals.isBarHorizontal ||
                                                (r.setAttribute("x", s),
                                                r.setAttribute("x1", s),
                                                r.setAttribute("x2", s),
                                                r.setAttribute(
                                                    "y2",
                                                    a.globals.gridHeight
                                                ),
                                                r.classList.add(
                                                    "apexcharts-active"
                                                )),
                                            s < 0 && (s = 0),
                                            s > a.globals.gridWidth &&
                                                (s = a.globals.gridWidth),
                                            i.isXAxisTooltipEnabled)
                                        ) {
                                            var o = s;
                                            ("tickWidth" !==
                                                a.config.xaxis.crosshairs
                                                    .width &&
                                                "barWidth" !==
                                                    a.config.xaxis.crosshairs
                                                        .width) ||
                                                (o =
                                                    s + i.xcrosshairsWidth / 2),
                                                this.moveXAxisTooltip(o);
                                        }
                                    },
                                },
                                {
                                    key: "moveYCrosshairs",
                                    value: function (t) {
                                        var e = this.ttCtx;
                                        null !== e.ycrosshairs &&
                                            k.setAttrs(e.ycrosshairs, {
                                                y1: t,
                                                y2: t,
                                            }),
                                            null !== e.ycrosshairsHidden &&
                                                k.setAttrs(
                                                    e.ycrosshairsHidden,
                                                    { y1: t, y2: t }
                                                );
                                    },
                                },
                                {
                                    key: "moveXAxisTooltip",
                                    value: function (t) {
                                        var e = this.w,
                                            i = this.ttCtx;
                                        if (
                                            null !== i.xaxisTooltip &&
                                            0 !== i.xcrosshairsWidth
                                        ) {
                                            i.xaxisTooltip.classList.add(
                                                "apexcharts-active"
                                            );
                                            var a,
                                                r =
                                                    i.xaxisOffY +
                                                    e.config.xaxis.tooltip
                                                        .offsetY +
                                                    e.globals.translateY +
                                                    1 +
                                                    e.config.xaxis.offsetY;
                                            if (
                                                ((t -=
                                                    i.xaxisTooltip.getBoundingClientRect()
                                                        .width / 2),
                                                !isNaN(t))
                                            )
                                                (t += e.globals.translateX),
                                                    (a = new k(
                                                        this.ctx
                                                    ).getTextRects(
                                                        i.xaxisTooltipText
                                                            .innerHTML
                                                    )),
                                                    (i.xaxisTooltipText.style.minWidth =
                                                        a.width + "px"),
                                                    (i.xaxisTooltip.style.left =
                                                        t + "px"),
                                                    (i.xaxisTooltip.style.top =
                                                        r + "px");
                                        }
                                    },
                                },
                                {
                                    key: "moveYAxisTooltip",
                                    value: function (t) {
                                        var e = this.w,
                                            i = this.ttCtx;
                                        null === i.yaxisTTEls &&
                                            (i.yaxisTTEls =
                                                e.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-yaxistooltip"
                                                ));
                                        var a = parseInt(
                                                i.ycrosshairsHidden.getAttribute(
                                                    "y1"
                                                ),
                                                10
                                            ),
                                            r = e.globals.translateY + a,
                                            s =
                                                i.yaxisTTEls[
                                                    t
                                                ].getBoundingClientRect()
                                                    .height,
                                            n =
                                                e.globals.translateYAxisX[t] -
                                                2;
                                        e.config.yaxis[t].opposite && (n -= 26),
                                            (r -= s / 2),
                                            -1 ===
                                            e.globals.ignoreYAxisIndexes.indexOf(
                                                t
                                            )
                                                ? (i.yaxisTTEls[
                                                      t
                                                  ].classList.add(
                                                      "apexcharts-active"
                                                  ),
                                                  (i.yaxisTTEls[t].style.top =
                                                      r + "px"),
                                                  (i.yaxisTTEls[t].style.left =
                                                      n +
                                                      e.config.yaxis[t].tooltip
                                                          .offsetX +
                                                      "px"))
                                                : i.yaxisTTEls[
                                                      t
                                                  ].classList.remove(
                                                      "apexcharts-active"
                                                  );
                                    },
                                },
                                {
                                    key: "moveTooltip",
                                    value: function (t, e) {
                                        var i =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : null,
                                            a = this.w,
                                            r = this.ttCtx,
                                            s = r.getElTooltip(),
                                            n = r.tooltipRect,
                                            o = null !== i ? parseFloat(i) : 1,
                                            l = parseFloat(t) + o + 5,
                                            c = parseFloat(e) + o / 2;
                                        if (
                                            (l > a.globals.gridWidth / 2 &&
                                                (l = l - n.ttWidth - o - 10),
                                            l >
                                                a.globals.gridWidth -
                                                    n.ttWidth -
                                                    10 &&
                                                (l =
                                                    a.globals.gridWidth -
                                                    n.ttWidth),
                                            l < -20 && (l = -20),
                                            a.config.tooltip.followCursor)
                                        ) {
                                            var h = r
                                                .getElGrid()
                                                .getBoundingClientRect();
                                            (l = r.e.clientX - h.left) >
                                                a.globals.gridWidth / 2 &&
                                                (l -= r.tooltipRect.ttWidth),
                                                (c =
                                                    r.e.clientY +
                                                    a.globals.translateY -
                                                    h.top) >
                                                    a.globals.gridHeight / 2 &&
                                                    (c -=
                                                        r.tooltipRect.ttHeight);
                                        } else
                                            a.globals.isBarHorizontal ||
                                                (n.ttHeight / 2 + c >
                                                    a.globals.gridHeight &&
                                                    (c =
                                                        a.globals.gridHeight -
                                                        n.ttHeight +
                                                        a.globals.translateY));
                                        isNaN(l) ||
                                            ((l += a.globals.translateX),
                                            (s.style.left = l + "px"),
                                            (s.style.top = c + "px"));
                                    },
                                },
                                {
                                    key: "moveMarkers",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = this.ttCtx;
                                        if (i.globals.markers.size[t] > 0)
                                            for (
                                                var r =
                                                        i.globals.dom.baseEl.querySelectorAll(
                                                            " .apexcharts-series[data\\:realIndex='".concat(
                                                                t,
                                                                "'] .apexcharts-marker"
                                                            )
                                                        ),
                                                    s = 0;
                                                s < r.length;
                                                s++
                                            )
                                                parseInt(
                                                    r[s].getAttribute("rel"),
                                                    10
                                                ) === e &&
                                                    (a.marker.resetPointsSize(),
                                                    a.marker.enlargeCurrentPoint(
                                                        e,
                                                        r[s]
                                                    ));
                                        else
                                            a.marker.resetPointsSize(),
                                                this.moveDynamicPointOnHover(
                                                    e,
                                                    t
                                                );
                                    },
                                },
                                {
                                    key: "moveDynamicPointOnHover",
                                    value: function (t, e) {
                                        var i,
                                            a,
                                            r = this.w,
                                            s = this.ttCtx,
                                            n = r.globals.pointsArray,
                                            o =
                                                s.tooltipUtil.getHoverMarkerSize(
                                                    e
                                                ),
                                            l = r.config.series[e].type;
                                        if (
                                            !l ||
                                            ("column" !== l &&
                                                "candlestick" !== l &&
                                                "boxPlot" !== l)
                                        ) {
                                            (i = n[e][t][0]),
                                                (a = n[e][t][1]
                                                    ? n[e][t][1]
                                                    : 0);
                                            var c =
                                                r.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-series[data\\:realIndex='".concat(
                                                        e,
                                                        "'] .apexcharts-series-markers circle"
                                                    )
                                                );
                                            c &&
                                                a < r.globals.gridHeight &&
                                                a > 0 &&
                                                (c.setAttribute("r", o),
                                                c.setAttribute("cx", i),
                                                c.setAttribute("cy", a)),
                                                this.moveXCrosshairs(i),
                                                s.fixedTooltip ||
                                                    this.moveTooltip(i, a, o);
                                        }
                                    },
                                },
                                {
                                    key: "moveDynamicPointsOnHover",
                                    value: function (t) {
                                        var e,
                                            i = this.ttCtx,
                                            a = i.w,
                                            r = 0,
                                            s = 0,
                                            n = a.globals.pointsArray;
                                        e = new V(
                                            this.ctx
                                        ).getActiveConfigSeriesIndex("asc", [
                                            "line",
                                            "area",
                                            "scatter",
                                            "bubble",
                                        ]);
                                        var o =
                                            i.tooltipUtil.getHoverMarkerSize(e);
                                        n[e] &&
                                            ((r = n[e][t][0]),
                                            (s = n[e][t][1]));
                                        var l = i.tooltipUtil.getAllMarkers();
                                        if (null !== l)
                                            for (
                                                var c = 0;
                                                c < a.globals.series.length;
                                                c++
                                            ) {
                                                var h = n[c];
                                                if (
                                                    (a.globals.comboCharts &&
                                                        void 0 === h &&
                                                        l.splice(c, 0, null),
                                                    h && h.length)
                                                ) {
                                                    var d = n[c][t][1],
                                                        u = void 0;
                                                    if (
                                                        (l[c].setAttribute(
                                                            "cx",
                                                            r
                                                        ),
                                                        "rangeArea" ===
                                                            a.config.chart
                                                                .type &&
                                                            !a.globals
                                                                .comboCharts)
                                                    ) {
                                                        var f =
                                                            t +
                                                            a.globals.series[c]
                                                                .length;
                                                        (u = n[c][f][1]),
                                                            (d -=
                                                                Math.abs(
                                                                    d - u
                                                                ) / 2);
                                                    }
                                                    null !== d &&
                                                    !isNaN(d) &&
                                                    d <
                                                        a.globals.gridHeight +
                                                            o &&
                                                    d + o > 0
                                                        ? (l[c] &&
                                                              l[c].setAttribute(
                                                                  "r",
                                                                  o
                                                              ),
                                                          l[c] &&
                                                              l[c].setAttribute(
                                                                  "cy",
                                                                  d
                                                              ))
                                                        : l[c] &&
                                                          l[c].setAttribute(
                                                              "r",
                                                              0
                                                          );
                                                }
                                            }
                                        this.moveXCrosshairs(r),
                                            i.fixedTooltip ||
                                                this.moveTooltip(
                                                    r,
                                                    s || a.globals.gridHeight,
                                                    o
                                                );
                                    },
                                },
                                {
                                    key: "moveStickyTooltipOverBars",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = this.ttCtx,
                                            r = i.globals.columnSeries
                                                ? i.globals.columnSeries.length
                                                : i.globals.series.length,
                                            s =
                                                r >= 2 && r % 2 == 0
                                                    ? Math.floor(r / 2)
                                                    : Math.floor(r / 2) + 1;
                                        i.globals.isBarHorizontal &&
                                            (s =
                                                new V(
                                                    this.ctx
                                                ).getActiveConfigSeriesIndex(
                                                    "desc"
                                                ) + 1);
                                        var n =
                                            i.globals.dom.baseEl.querySelector(
                                                ".apexcharts-bar-series .apexcharts-series[rel='"
                                                    .concat(s, "'] path[j='")
                                                    .concat(
                                                        t,
                                                        "'], .apexcharts-candlestick-series .apexcharts-series[rel='"
                                                    )
                                                    .concat(s, "'] path[j='")
                                                    .concat(
                                                        t,
                                                        "'], .apexcharts-boxPlot-series .apexcharts-series[rel='"
                                                    )
                                                    .concat(s, "'] path[j='")
                                                    .concat(
                                                        t,
                                                        "'], .apexcharts-rangebar-series .apexcharts-series[rel='"
                                                    )
                                                    .concat(s, "'] path[j='")
                                                    .concat(t, "']")
                                            );
                                        n ||
                                            "number" != typeof e ||
                                            (n =
                                                i.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-bar-series .apexcharts-series[data\\:realIndex='"
                                                        .concat(
                                                            e,
                                                            "'] path[j='"
                                                        )
                                                        .concat(
                                                            t,
                                                            "'],\n        .apexcharts-candlestick-series .apexcharts-series[data\\:realIndex='"
                                                        )
                                                        .concat(
                                                            e,
                                                            "'] path[j='"
                                                        )
                                                        .concat(
                                                            t,
                                                            "'],\n        .apexcharts-boxPlot-series .apexcharts-series[data\\:realIndex='"
                                                        )
                                                        .concat(
                                                            e,
                                                            "'] path[j='"
                                                        )
                                                        .concat(
                                                            t,
                                                            "'],\n        .apexcharts-rangebar-series .apexcharts-series[data\\:realIndex='"
                                                        )
                                                        .concat(
                                                            e,
                                                            "'] path[j='"
                                                        )
                                                        .concat(t, "']")
                                                ));
                                        var o = n
                                                ? parseFloat(
                                                      n.getAttribute("cx")
                                                  )
                                                : 0,
                                            l = n
                                                ? parseFloat(
                                                      n.getAttribute("cy")
                                                  )
                                                : 0,
                                            c = n
                                                ? parseFloat(
                                                      n.getAttribute("barWidth")
                                                  )
                                                : 0,
                                            h = a
                                                .getElGrid()
                                                .getBoundingClientRect(),
                                            d =
                                                n &&
                                                (n.classList.contains(
                                                    "apexcharts-candlestick-area"
                                                ) ||
                                                    n.classList.contains(
                                                        "apexcharts-boxPlot-area"
                                                    ));
                                        i.globals.isXNumeric
                                            ? (n &&
                                                  !d &&
                                                  (o -= r % 2 != 0 ? c / 2 : 0),
                                              n &&
                                                  d &&
                                                  i.globals.comboCharts &&
                                                  (o -= c / 2))
                                            : i.globals.isBarHorizontal ||
                                              ((o =
                                                  a.xAxisTicksPositions[t - 1] +
                                                  a.dataPointsDividedWidth / 2),
                                              isNaN(o) &&
                                                  (o =
                                                      a.xAxisTicksPositions[t] -
                                                      a.dataPointsDividedWidth /
                                                          2)),
                                            i.globals.isBarHorizontal
                                                ? (l -= a.tooltipRect.ttHeight)
                                                : i.config.tooltip.followCursor
                                                ? (l =
                                                      a.e.clientY -
                                                      h.top -
                                                      a.tooltipRect.ttHeight /
                                                          2)
                                                : l +
                                                      a.tooltipRect.ttHeight +
                                                      15 >
                                                      i.globals.gridHeight &&
                                                  (l = i.globals.gridHeight),
                                            i.globals.isBarHorizontal ||
                                                this.moveXCrosshairs(o),
                                            a.fixedTooltip ||
                                                this.moveTooltip(
                                                    o,
                                                    l || i.globals.gridHeight
                                                );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    mt = (function () {
                        function t(e) {
                            o(this, t),
                                (this.w = e.w),
                                (this.ttCtx = e),
                                (this.ctx = e.ctx),
                                (this.tooltipPosition = new xt(e));
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawDynamicPoints",
                                    value: function () {
                                        var t = this.w,
                                            e = new k(this.ctx),
                                            i = new H(this.ctx),
                                            a =
                                                t.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-series"
                                                );
                                        (a = x(a)),
                                            t.config.chart.stacked &&
                                                a.sort(function (t, e) {
                                                    return (
                                                        parseFloat(
                                                            t.getAttribute(
                                                                "data:realIndex"
                                                            )
                                                        ) -
                                                        parseFloat(
                                                            e.getAttribute(
                                                                "data:realIndex"
                                                            )
                                                        )
                                                    );
                                                });
                                        for (var r = 0; r < a.length; r++) {
                                            var s = a[r].querySelector(
                                                ".apexcharts-series-markers-wrap"
                                            );
                                            if (null !== s) {
                                                var n = void 0,
                                                    o =
                                                        "apexcharts-marker w".concat(
                                                            (Math.random() + 1)
                                                                .toString(36)
                                                                .substring(4)
                                                        );
                                                ("line" !==
                                                    t.config.chart.type &&
                                                    "area" !==
                                                        t.config.chart.type) ||
                                                    t.globals.comboCharts ||
                                                    t.config.tooltip
                                                        .intersect ||
                                                    (o += " no-pointer-events");
                                                var l = i.getMarkerConfig({
                                                    cssClass: o,
                                                    seriesIndex: Number(
                                                        s.getAttribute(
                                                            "data:realIndex"
                                                        )
                                                    ),
                                                });
                                                (n = e.drawMarker(
                                                    0,
                                                    0,
                                                    l
                                                )).node.setAttribute(
                                                    "default-marker-size",
                                                    0
                                                );
                                                var c =
                                                    document.createElementNS(
                                                        t.globals.SVGNS,
                                                        "g"
                                                    );
                                                c.classList.add(
                                                    "apexcharts-series-markers"
                                                ),
                                                    c.appendChild(n.node),
                                                    s.appendChild(c);
                                            }
                                        }
                                    },
                                },
                                {
                                    key: "enlargeCurrentPoint",
                                    value: function (t, e) {
                                        var i =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2]
                                                    ? arguments[2]
                                                    : null,
                                            a =
                                                arguments.length > 3 &&
                                                void 0 !== arguments[3]
                                                    ? arguments[3]
                                                    : null,
                                            r = this.w;
                                        "bubble" !== r.config.chart.type &&
                                            this.newPointSize(t, e);
                                        var s = e.getAttribute("cx"),
                                            n = e.getAttribute("cy");
                                        if (
                                            (null !== i &&
                                                null !== a &&
                                                ((s = i), (n = a)),
                                            this.tooltipPosition.moveXCrosshairs(
                                                s
                                            ),
                                            !this.fixedTooltip)
                                        ) {
                                            if (
                                                "radar" === r.config.chart.type
                                            ) {
                                                var o = this.ttCtx
                                                    .getElGrid()
                                                    .getBoundingClientRect();
                                                s =
                                                    this.ttCtx.e.clientX -
                                                    o.left;
                                            }
                                            this.tooltipPosition.moveTooltip(
                                                s,
                                                n,
                                                r.config.markers.hover.size
                                            );
                                        }
                                    },
                                },
                                {
                                    key: "enlargePoints",
                                    value: function (t) {
                                        for (
                                            var e = this.w,
                                                i = this,
                                                a = this.ttCtx,
                                                r = t,
                                                s =
                                                    e.globals.dom.baseEl.querySelectorAll(
                                                        ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                                                    ),
                                                n = e.config.markers.hover.size,
                                                o = 0;
                                            o < s.length;
                                            o++
                                        ) {
                                            var l = s[o].getAttribute("rel"),
                                                c = s[o].getAttribute("index");
                                            if (
                                                (void 0 === n &&
                                                    (n =
                                                        e.globals.markers.size[
                                                            c
                                                        ] +
                                                        e.config.markers.hover
                                                            .sizeOffset),
                                                r === parseInt(l, 10))
                                            ) {
                                                i.newPointSize(r, s[o]);
                                                var h = s[o].getAttribute("cx"),
                                                    d = s[o].getAttribute("cy");
                                                i.tooltipPosition.moveXCrosshairs(
                                                    h
                                                ),
                                                    a.fixedTooltip ||
                                                        i.tooltipPosition.moveTooltip(
                                                            h,
                                                            d,
                                                            n
                                                        );
                                            } else i.oldPointSize(s[o]);
                                        }
                                    },
                                },
                                {
                                    key: "newPointSize",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = i.config.markers.hover.size,
                                            r =
                                                0 === t
                                                    ? e.parentNode.firstChild
                                                    : e.parentNode.lastChild;
                                        if (
                                            "0" !==
                                            r.getAttribute(
                                                "default-marker-size"
                                            )
                                        ) {
                                            var s = parseInt(
                                                r.getAttribute("index"),
                                                10
                                            );
                                            void 0 === a &&
                                                (a =
                                                    i.globals.markers.size[s] +
                                                    i.config.markers.hover
                                                        .sizeOffset),
                                                a < 0 && (a = 0),
                                                r.setAttribute("r", a);
                                        }
                                    },
                                },
                                {
                                    key: "oldPointSize",
                                    value: function (t) {
                                        var e = parseFloat(
                                            t.getAttribute(
                                                "default-marker-size"
                                            )
                                        );
                                        t.setAttribute("r", e);
                                    },
                                },
                                {
                                    key: "resetPointsSize",
                                    value: function () {
                                        for (
                                            var t =
                                                    this.w.globals.dom.baseEl.querySelectorAll(
                                                        ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                                                    ),
                                                e = 0;
                                            e < t.length;
                                            e++
                                        ) {
                                            var i = parseFloat(
                                                t[e].getAttribute(
                                                    "default-marker-size"
                                                )
                                            );
                                            v.isNumber(i) && i >= 0
                                                ? t[e].setAttribute("r", i)
                                                : t[e].setAttribute("r", 0);
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    bt = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w);
                            var i = this.w;
                            (this.ttCtx = e),
                                (this.isVerticalGroupedRangeBar =
                                    !i.globals.isBarHorizontal &&
                                    "rangeBar" === i.config.chart.type &&
                                    i.config.plotOptions.bar.rangeBarGroupRows);
                        }
                        return (
                            c(t, [
                                {
                                    key: "getAttr",
                                    value: function (t, e) {
                                        return parseFloat(
                                            t.target.getAttribute(e)
                                        );
                                    },
                                },
                                {
                                    key: "handleHeatTreeTooltip",
                                    value: function (t) {
                                        var e = t.e,
                                            i = t.opt,
                                            a = t.x,
                                            r = t.y,
                                            s = t.type,
                                            n = this.ttCtx,
                                            o = this.w;
                                        if (
                                            e.target.classList.contains(
                                                "apexcharts-".concat(s, "-rect")
                                            )
                                        ) {
                                            var l = this.getAttr(e, "i"),
                                                c = this.getAttr(e, "j"),
                                                h = this.getAttr(e, "cx"),
                                                d = this.getAttr(e, "cy"),
                                                u = this.getAttr(e, "width"),
                                                f = this.getAttr(e, "height");
                                            if (
                                                (n.tooltipLabels.drawSeriesTexts(
                                                    {
                                                        ttItems: i.ttItems,
                                                        i: l,
                                                        j: c,
                                                        shared: !1,
                                                        e,
                                                    }
                                                ),
                                                (o.globals.capturedSeriesIndex =
                                                    l),
                                                (o.globals.capturedDataPointIndex =
                                                    c),
                                                (a =
                                                    h +
                                                    n.tooltipRect.ttWidth / 2 +
                                                    u),
                                                (r =
                                                    d +
                                                    n.tooltipRect.ttHeight / 2 -
                                                    f / 2),
                                                n.tooltipPosition.moveXCrosshairs(
                                                    h + u / 2
                                                ),
                                                a > o.globals.gridWidth / 2 &&
                                                    (a =
                                                        h -
                                                        n.tooltipRect.ttWidth /
                                                            2 +
                                                        u),
                                                n.w.config.tooltip.followCursor)
                                            ) {
                                                var g =
                                                    o.globals.dom.elWrap.getBoundingClientRect();
                                                (a =
                                                    o.globals.clientX -
                                                    g.left -
                                                    (a > o.globals.gridWidth / 2
                                                        ? n.tooltipRect.ttWidth
                                                        : 0)),
                                                    (r =
                                                        o.globals.clientY -
                                                        g.top -
                                                        (r >
                                                        o.globals.gridHeight / 2
                                                            ? n.tooltipRect
                                                                  .ttHeight
                                                            : 0));
                                            }
                                        }
                                        return { x: a, y: r };
                                    },
                                },
                                {
                                    key: "handleMarkerTooltip",
                                    value: function (t) {
                                        var e,
                                            i,
                                            a = t.e,
                                            r = t.opt,
                                            s = t.x,
                                            n = t.y,
                                            o = this.w,
                                            l = this.ttCtx;
                                        if (
                                            a.target.classList.contains(
                                                "apexcharts-marker"
                                            )
                                        ) {
                                            var c = parseInt(
                                                    r.paths.getAttribute("cx"),
                                                    10
                                                ),
                                                h = parseInt(
                                                    r.paths.getAttribute("cy"),
                                                    10
                                                ),
                                                d = parseFloat(
                                                    r.paths.getAttribute("val")
                                                );
                                            if (
                                                ((i = parseInt(
                                                    r.paths.getAttribute("rel"),
                                                    10
                                                )),
                                                (e =
                                                    parseInt(
                                                        r.paths.parentNode.parentNode.parentNode.getAttribute(
                                                            "rel"
                                                        ),
                                                        10
                                                    ) - 1),
                                                l.intersect)
                                            ) {
                                                var u = v.findAncestor(
                                                    r.paths,
                                                    "apexcharts-series"
                                                );
                                                u &&
                                                    (e = parseInt(
                                                        u.getAttribute(
                                                            "data:realIndex"
                                                        ),
                                                        10
                                                    ));
                                            }
                                            if (
                                                (l.tooltipLabels.drawSeriesTexts(
                                                    {
                                                        ttItems: r.ttItems,
                                                        i: e,
                                                        j: i,
                                                        shared:
                                                            !l.showOnIntersect &&
                                                            o.config.tooltip
                                                                .shared,
                                                        e: a,
                                                    }
                                                ),
                                                "mouseup" === a.type &&
                                                    l.markerClick(a, e, i),
                                                (o.globals.capturedSeriesIndex =
                                                    e),
                                                (o.globals.capturedDataPointIndex =
                                                    i),
                                                (s = c),
                                                (n =
                                                    h +
                                                    o.globals.translateY -
                                                    1.4 *
                                                        l.tooltipRect.ttHeight),
                                                l.w.config.tooltip.followCursor)
                                            ) {
                                                var f = l
                                                    .getElGrid()
                                                    .getBoundingClientRect();
                                                n =
                                                    l.e.clientY +
                                                    o.globals.translateY -
                                                    f.top;
                                            }
                                            d < 0 && (n = h),
                                                l.marker.enlargeCurrentPoint(
                                                    i,
                                                    r.paths,
                                                    s,
                                                    n
                                                );
                                        }
                                        return { x: s, y: n };
                                    },
                                },
                                {
                                    key: "handleBarTooltip",
                                    value: function (t) {
                                        var e,
                                            i,
                                            a = t.e,
                                            r = t.opt,
                                            s = this.w,
                                            n = this.ttCtx,
                                            o = n.getElTooltip(),
                                            l = 0,
                                            c = 0,
                                            h = 0,
                                            d = this.getBarTooltipXY({
                                                e: a,
                                                opt: r,
                                            });
                                        e = d.i;
                                        var u = d.barHeight,
                                            f = d.j;
                                        (s.globals.capturedSeriesIndex = e),
                                            (s.globals.capturedDataPointIndex =
                                                f),
                                            (s.globals.isBarHorizontal &&
                                                n.tooltipUtil.hasBars()) ||
                                            !s.config.tooltip.shared
                                                ? ((c = d.x),
                                                  (h = d.y),
                                                  (i = Array.isArray(
                                                      s.config.stroke.width
                                                  )
                                                      ? s.config.stroke.width[e]
                                                      : s.config.stroke.width),
                                                  (l = c))
                                                : s.globals.comboCharts ||
                                                  s.config.tooltip.shared ||
                                                  (l /= 2),
                                            isNaN(h) &&
                                                (h =
                                                    s.globals.svgHeight -
                                                    n.tooltipRect.ttHeight);
                                        var g = parseInt(
                                                r.paths.parentNode.getAttribute(
                                                    "data:realIndex"
                                                ),
                                                10
                                            ),
                                            p = s.globals.isMultipleYAxis
                                                ? s.config.yaxis[g] &&
                                                  s.config.yaxis[g].reversed
                                                : s.config.yaxis[0].reversed;
                                        if (
                                            (c + n.tooltipRect.ttWidth >
                                                s.globals.gridWidth && !p
                                                ? (c -= n.tooltipRect.ttWidth)
                                                : c < 0 && (c = 0),
                                            n.w.config.tooltip.followCursor)
                                        ) {
                                            var x = n
                                                .getElGrid()
                                                .getBoundingClientRect();
                                            h = n.e.clientY - x.top;
                                        }
                                        null === n.tooltip &&
                                            (n.tooltip =
                                                s.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-tooltip"
                                                )),
                                            s.config.tooltip.shared ||
                                                (s.globals.comboBarCount > 0
                                                    ? n.tooltipPosition.moveXCrosshairs(
                                                          l + i / 2
                                                      )
                                                    : n.tooltipPosition.moveXCrosshairs(
                                                          l
                                                      )),
                                            !n.fixedTooltip &&
                                                (!s.config.tooltip.shared ||
                                                    (s.globals
                                                        .isBarHorizontal &&
                                                        n.tooltipUtil.hasBars())) &&
                                                (p &&
                                                    (c -=
                                                        n.tooltipRect.ttWidth) <
                                                        0 &&
                                                    (c = 0),
                                                !p ||
                                                    (s.globals
                                                        .isBarHorizontal &&
                                                        n.tooltipUtil.hasBars()) ||
                                                    (h =
                                                        h +
                                                        u -
                                                        2 *
                                                            (s.globals.series[
                                                                e
                                                            ][f] < 0
                                                                ? u
                                                                : 0)),
                                                (h =
                                                    h +
                                                    s.globals.translateY -
                                                    n.tooltipRect.ttHeight / 2),
                                                (o.style.left =
                                                    c +
                                                    s.globals.translateX +
                                                    "px"),
                                                (o.style.top = h + "px"));
                                    },
                                },
                                {
                                    key: "getBarTooltipXY",
                                    value: function (t) {
                                        var e = this,
                                            i = t.e,
                                            a = t.opt,
                                            r = this.w,
                                            s = null,
                                            n = this.ttCtx,
                                            o = 0,
                                            l = 0,
                                            c = 0,
                                            h = 0,
                                            d = 0,
                                            u = i.target.classList;
                                        if (
                                            u.contains("apexcharts-bar-area") ||
                                            u.contains(
                                                "apexcharts-candlestick-area"
                                            ) ||
                                            u.contains(
                                                "apexcharts-boxPlot-area"
                                            ) ||
                                            u.contains(
                                                "apexcharts-rangebar-area"
                                            )
                                        ) {
                                            var f = i.target,
                                                g = f.getBoundingClientRect(),
                                                p =
                                                    a.elGrid.getBoundingClientRect(),
                                                x = g.height;
                                            d = g.height;
                                            var m = g.width,
                                                b = parseInt(
                                                    f.getAttribute("cx"),
                                                    10
                                                ),
                                                v = parseInt(
                                                    f.getAttribute("cy"),
                                                    10
                                                );
                                            h = parseFloat(
                                                f.getAttribute("barWidth")
                                            );
                                            var y =
                                                "touchmove" === i.type
                                                    ? i.touches[0].clientX
                                                    : i.clientX;
                                            (s = parseInt(
                                                f.getAttribute("j"),
                                                10
                                            )),
                                                (o =
                                                    parseInt(
                                                        f.parentNode.getAttribute(
                                                            "rel"
                                                        ),
                                                        10
                                                    ) - 1);
                                            var w =
                                                    f.getAttribute(
                                                        "data-range-y1"
                                                    ),
                                                k =
                                                    f.getAttribute(
                                                        "data-range-y2"
                                                    );
                                            r.globals.comboCharts &&
                                                (o = parseInt(
                                                    f.parentNode.getAttribute(
                                                        "data:realIndex"
                                                    ),
                                                    10
                                                ));
                                            var A = function (t) {
                                                    return r.globals.isXNumeric
                                                        ? b - m / 2
                                                        : e.isVerticalGroupedRangeBar
                                                        ? b + m / 2
                                                        : b -
                                                          n.dataPointsDividedWidth +
                                                          m / 2;
                                                },
                                                S = function () {
                                                    return (
                                                        v -
                                                        n.dataPointsDividedHeight +
                                                        x / 2 -
                                                        n.tooltipRect.ttHeight /
                                                            2
                                                    );
                                                };
                                            n.tooltipLabels.drawSeriesTexts({
                                                ttItems: a.ttItems,
                                                i: o,
                                                j: s,
                                                y1: w ? parseInt(w, 10) : null,
                                                y2: k ? parseInt(k, 10) : null,
                                                shared:
                                                    !n.showOnIntersect &&
                                                    r.config.tooltip.shared,
                                                e: i,
                                            }),
                                                r.config.tooltip.followCursor
                                                    ? r.globals.isBarHorizontal
                                                        ? ((l =
                                                              y - p.left + 15),
                                                          (c = S()))
                                                        : ((l = A()),
                                                          (c =
                                                              i.clientY -
                                                              p.top -
                                                              n.tooltipRect
                                                                  .ttHeight /
                                                                  2 -
                                                              15))
                                                    : r.globals.isBarHorizontal
                                                    ? ((l = b) <
                                                          n.xyRatios
                                                              .baseLineInvertedY &&
                                                          (l =
                                                              b -
                                                              n.tooltipRect
                                                                  .ttWidth),
                                                      (c = S()))
                                                    : ((l = A()), (c = v));
                                        }
                                        return {
                                            x: l,
                                            y: c,
                                            barHeight: d,
                                            barWidth: h,
                                            i: o,
                                            j: s,
                                        };
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    vt = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w), (this.ttCtx = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawXaxisTooltip",
                                    value: function () {
                                        var t = this.w,
                                            e = this.ttCtx,
                                            i =
                                                "bottom" ===
                                                t.config.xaxis.position;
                                        e.xaxisOffY = i
                                            ? t.globals.gridHeight + 1
                                            : -t.globals.xAxisHeight -
                                              t.config.xaxis.axisTicks.height +
                                              3;
                                        var a = i
                                                ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom"
                                                : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top",
                                            r = t.globals.dom.elWrap;
                                        e.isXAxisTooltipEnabled &&
                                            null ===
                                                t.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-xaxistooltip"
                                                ) &&
                                            ((e.xaxisTooltip =
                                                document.createElement("div")),
                                            e.xaxisTooltip.setAttribute(
                                                "class",
                                                a +
                                                    " apexcharts-theme-" +
                                                    t.config.tooltip.theme
                                            ),
                                            r.appendChild(e.xaxisTooltip),
                                            (e.xaxisTooltipText =
                                                document.createElement("div")),
                                            e.xaxisTooltipText.classList.add(
                                                "apexcharts-xaxistooltip-text"
                                            ),
                                            (e.xaxisTooltipText.style.fontFamily =
                                                t.config.xaxis.tooltip.style
                                                    .fontFamily ||
                                                t.config.chart.fontFamily),
                                            (e.xaxisTooltipText.style.fontSize =
                                                t.config.xaxis.tooltip.style.fontSize),
                                            e.xaxisTooltip.appendChild(
                                                e.xaxisTooltipText
                                            ));
                                    },
                                },
                                {
                                    key: "drawYaxisTooltip",
                                    value: function () {
                                        for (
                                            var t = this.w,
                                                e = this.ttCtx,
                                                i = function (i) {
                                                    var a =
                                                        t.config.yaxis[i]
                                                            .opposite ||
                                                        t.config.yaxis[i]
                                                            .crosshairs
                                                            .opposite;
                                                    e.yaxisOffX = a
                                                        ? t.globals.gridWidth +
                                                          1
                                                        : 1;
                                                    var r =
                                                        "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(
                                                            i,
                                                            a
                                                                ? " apexcharts-yaxistooltip-right"
                                                                : " apexcharts-yaxistooltip-left"
                                                        );
                                                    t.globals.yAxisSameScaleIndices.map(
                                                        function (e, a) {
                                                            e.map(function (
                                                                e,
                                                                a
                                                            ) {
                                                                a === i &&
                                                                    (r += t
                                                                        .config
                                                                        .yaxis[
                                                                        a
                                                                    ].show
                                                                        ? " "
                                                                        : " apexcharts-yaxistooltip-hidden");
                                                            });
                                                        }
                                                    );
                                                    var s =
                                                        t.globals.dom.elWrap;
                                                    null ===
                                                        t.globals.dom.baseEl.querySelector(
                                                            ".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(
                                                                i
                                                            )
                                                        ) &&
                                                        ((e.yaxisTooltip =
                                                            document.createElement(
                                                                "div"
                                                            )),
                                                        e.yaxisTooltip.setAttribute(
                                                            "class",
                                                            r +
                                                                " apexcharts-theme-" +
                                                                t.config.tooltip
                                                                    .theme
                                                        ),
                                                        s.appendChild(
                                                            e.yaxisTooltip
                                                        ),
                                                        0 === i &&
                                                            (e.yaxisTooltipText =
                                                                []),
                                                        (e.yaxisTooltipText[i] =
                                                            document.createElement(
                                                                "div"
                                                            )),
                                                        e.yaxisTooltipText[
                                                            i
                                                        ].classList.add(
                                                            "apexcharts-yaxistooltip-text"
                                                        ),
                                                        e.yaxisTooltip.appendChild(
                                                            e.yaxisTooltipText[
                                                                i
                                                            ]
                                                        ));
                                                },
                                                a = 0;
                                            a < t.config.yaxis.length;
                                            a++
                                        )
                                            i(a);
                                    },
                                },
                                {
                                    key: "setXCrosshairWidth",
                                    value: function () {
                                        var t = this.w,
                                            e = this.ttCtx,
                                            i = e.getElXCrosshairs();
                                        if (
                                            ((e.xcrosshairsWidth = parseInt(
                                                t.config.xaxis.crosshairs.width,
                                                10
                                            )),
                                            t.globals.comboCharts)
                                        ) {
                                            var a =
                                                t.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-bar-area"
                                                );
                                            if (
                                                null !== a &&
                                                "barWidth" ===
                                                    t.config.xaxis.crosshairs
                                                        .width
                                            ) {
                                                var r = parseFloat(
                                                    a.getAttribute("barWidth")
                                                );
                                                e.xcrosshairsWidth = r;
                                            } else if (
                                                "tickWidth" ===
                                                t.config.xaxis.crosshairs.width
                                            ) {
                                                var s = t.globals.labels.length;
                                                e.xcrosshairsWidth =
                                                    t.globals.gridWidth / s;
                                            }
                                        } else if (
                                            "tickWidth" ===
                                            t.config.xaxis.crosshairs.width
                                        ) {
                                            var n = t.globals.labels.length;
                                            e.xcrosshairsWidth =
                                                t.globals.gridWidth / n;
                                        } else if (
                                            "barWidth" ===
                                            t.config.xaxis.crosshairs.width
                                        ) {
                                            var o =
                                                t.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-bar-area"
                                                );
                                            if (null !== o) {
                                                var l = parseFloat(
                                                    o.getAttribute("barWidth")
                                                );
                                                e.xcrosshairsWidth = l;
                                            } else e.xcrosshairsWidth = 1;
                                        }
                                        t.globals.isBarHorizontal &&
                                            (e.xcrosshairsWidth = 0),
                                            null !== i &&
                                                e.xcrosshairsWidth > 0 &&
                                                i.setAttribute(
                                                    "width",
                                                    e.xcrosshairsWidth
                                                );
                                    },
                                },
                                {
                                    key: "handleYCrosshair",
                                    value: function () {
                                        var t = this.w,
                                            e = this.ttCtx;
                                        (e.ycrosshairs =
                                            t.globals.dom.baseEl.querySelector(
                                                ".apexcharts-ycrosshairs"
                                            )),
                                            (e.ycrosshairsHidden =
                                                t.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-ycrosshairs-hidden"
                                                ));
                                    },
                                },
                                {
                                    key: "drawYaxisTooltipText",
                                    value: function (t, e, i) {
                                        var a = this.ttCtx,
                                            r = this.w,
                                            s = r.globals.yLabelFormatters[t];
                                        if (a.yaxisTooltips[t]) {
                                            var n = a
                                                    .getElGrid()
                                                    .getBoundingClientRect(),
                                                o = (e - n.top) * i.yRatio[t],
                                                l =
                                                    r.globals.maxYArr[t] -
                                                    r.globals.minYArr[t],
                                                c =
                                                    r.globals.minYArr[t] +
                                                    (l - o);
                                            a.tooltipPosition.moveYCrosshairs(
                                                e - n.top
                                            ),
                                                (a.yaxisTooltipText[
                                                    t
                                                ].innerHTML = s(c)),
                                                a.tooltipPosition.moveYAxisTooltip(
                                                    t
                                                );
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    yt = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                            var i = this.w;
                            (this.tConfig = i.config.tooltip),
                                (this.tooltipUtil = new gt(this)),
                                (this.tooltipLabels = new pt(this)),
                                (this.tooltipPosition = new xt(this)),
                                (this.marker = new mt(this)),
                                (this.intersect = new bt(this)),
                                (this.axesTooltip = new vt(this)),
                                (this.showOnIntersect = this.tConfig.intersect),
                                (this.showTooltipTitle = this.tConfig.x.show),
                                (this.fixedTooltip =
                                    this.tConfig.fixed.enabled),
                                (this.xaxisTooltip = null),
                                (this.yaxisTTEls = null),
                                (this.isBarShared =
                                    !i.globals.isBarHorizontal &&
                                    this.tConfig.shared),
                                (this.lastHoverTime = Date.now());
                        }
                        return (
                            c(t, [
                                {
                                    key: "getElTooltip",
                                    value: function (t) {
                                        return (
                                            t || (t = this),
                                            t.w.globals.dom.baseEl
                                                ? t.w.globals.dom.baseEl.querySelector(
                                                      ".apexcharts-tooltip"
                                                  )
                                                : null
                                        );
                                    },
                                },
                                {
                                    key: "getElXCrosshairs",
                                    value: function () {
                                        return this.w.globals.dom.baseEl.querySelector(
                                            ".apexcharts-xcrosshairs"
                                        );
                                    },
                                },
                                {
                                    key: "getElGrid",
                                    value: function () {
                                        return this.w.globals.dom.baseEl.querySelector(
                                            ".apexcharts-grid"
                                        );
                                    },
                                },
                                {
                                    key: "drawTooltip",
                                    value: function (t) {
                                        var e = this.w;
                                        (this.xyRatios = t),
                                            (this.isXAxisTooltipEnabled =
                                                e.config.xaxis.tooltip
                                                    .enabled &&
                                                e.globals.axisCharts),
                                            (this.yaxisTooltips =
                                                e.config.yaxis.map(function (
                                                    t,
                                                    i
                                                ) {
                                                    return !!(
                                                        t.show &&
                                                        t.tooltip.enabled &&
                                                        e.globals.axisCharts
                                                    );
                                                })),
                                            (this.allTooltipSeriesGroups = []),
                                            e.globals.axisCharts ||
                                                (this.showTooltipTitle = !1);
                                        var i = document.createElement("div");
                                        if (
                                            (i.classList.add(
                                                "apexcharts-tooltip"
                                            ),
                                            e.config.tooltip.cssClass &&
                                                i.classList.add(
                                                    e.config.tooltip.cssClass
                                                ),
                                            i.classList.add(
                                                "apexcharts-theme-".concat(
                                                    this.tConfig.theme
                                                )
                                            ),
                                            e.globals.dom.elWrap.appendChild(i),
                                            e.globals.axisCharts)
                                        ) {
                                            this.axesTooltip.drawXaxisTooltip(),
                                                this.axesTooltip.drawYaxisTooltip(),
                                                this.axesTooltip.setXCrosshairWidth(),
                                                this.axesTooltip.handleYCrosshair();
                                            var a = new U(this.ctx);
                                            this.xAxisTicksPositions =
                                                a.getXAxisTicksPositions();
                                        }
                                        if (
                                            ((!e.globals.comboCharts &&
                                                !this.tConfig.intersect &&
                                                "rangeBar" !==
                                                    e.config.chart.type) ||
                                                this.tConfig.shared ||
                                                (this.showOnIntersect = !0),
                                            (0 !== e.config.markers.size &&
                                                0 !==
                                                    e.globals.markers
                                                        .largestSize) ||
                                                this.marker.drawDynamicPoints(
                                                    this
                                                ),
                                            e.globals.collapsedSeries.length !==
                                                e.globals.series.length)
                                        ) {
                                            (this.dataPointsDividedHeight =
                                                e.globals.gridHeight /
                                                e.globals.dataPoints),
                                                (this.dataPointsDividedWidth =
                                                    e.globals.gridWidth /
                                                    e.globals.dataPoints),
                                                this.showTooltipTitle &&
                                                    ((this.tooltipTitle =
                                                        document.createElement(
                                                            "div"
                                                        )),
                                                    this.tooltipTitle.classList.add(
                                                        "apexcharts-tooltip-title"
                                                    ),
                                                    (this.tooltipTitle.style.fontFamily =
                                                        this.tConfig.style
                                                            .fontFamily ||
                                                        e.config.chart
                                                            .fontFamily),
                                                    (this.tooltipTitle.style.fontSize =
                                                        this.tConfig.style.fontSize),
                                                    i.appendChild(
                                                        this.tooltipTitle
                                                    ));
                                            var r = e.globals.series.length;
                                            (e.globals.xyCharts ||
                                                e.globals.comboCharts) &&
                                                this.tConfig.shared &&
                                                (r = this.showOnIntersect
                                                    ? 1
                                                    : e.globals.series.length),
                                                (this.legendLabels =
                                                    e.globals.dom.baseEl.querySelectorAll(
                                                        ".apexcharts-legend-text"
                                                    )),
                                                (this.ttItems =
                                                    this.createTTElements(r)),
                                                this.addSVGEvents();
                                        }
                                    },
                                },
                                {
                                    key: "createTTElements",
                                    value: function (t) {
                                        for (
                                            var e = this,
                                                i = this.w,
                                                a = [],
                                                r = this.getElTooltip(),
                                                s = function (s) {
                                                    var n =
                                                        document.createElement(
                                                            "div"
                                                        );
                                                    n.classList.add(
                                                        "apexcharts-tooltip-series-group"
                                                    ),
                                                        (n.style.order = i
                                                            .config.tooltip
                                                            .inverseOrder
                                                            ? t - s
                                                            : s + 1),
                                                        e.tConfig.shared &&
                                                            e.tConfig
                                                                .enabledOnSeries &&
                                                            Array.isArray(
                                                                e.tConfig
                                                                    .enabledOnSeries
                                                            ) &&
                                                            e.tConfig.enabledOnSeries.indexOf(
                                                                s
                                                            ) < 0 &&
                                                            n.classList.add(
                                                                "apexcharts-tooltip-series-group-hidden"
                                                            );
                                                    var o =
                                                        document.createElement(
                                                            "span"
                                                        );
                                                    o.classList.add(
                                                        "apexcharts-tooltip-marker"
                                                    ),
                                                        (o.style.backgroundColor =
                                                            i.globals.colors[
                                                                s
                                                            ]),
                                                        n.appendChild(o);
                                                    var l =
                                                        document.createElement(
                                                            "div"
                                                        );
                                                    l.classList.add(
                                                        "apexcharts-tooltip-text"
                                                    ),
                                                        (l.style.fontFamily =
                                                            e.tConfig.style
                                                                .fontFamily ||
                                                            i.config.chart
                                                                .fontFamily),
                                                        (l.style.fontSize =
                                                            e.tConfig.style.fontSize),
                                                        [
                                                            "y",
                                                            "goals",
                                                            "z",
                                                        ].forEach(function (t) {
                                                            var e =
                                                                document.createElement(
                                                                    "div"
                                                                );
                                                            e.classList.add(
                                                                "apexcharts-tooltip-".concat(
                                                                    t,
                                                                    "-group"
                                                                )
                                                            );
                                                            var i =
                                                                document.createElement(
                                                                    "span"
                                                                );
                                                            i.classList.add(
                                                                "apexcharts-tooltip-text-".concat(
                                                                    t,
                                                                    "-label"
                                                                )
                                                            ),
                                                                e.appendChild(
                                                                    i
                                                                );
                                                            var a =
                                                                document.createElement(
                                                                    "span"
                                                                );
                                                            a.classList.add(
                                                                "apexcharts-tooltip-text-".concat(
                                                                    t,
                                                                    "-value"
                                                                )
                                                            ),
                                                                e.appendChild(
                                                                    a
                                                                ),
                                                                l.appendChild(
                                                                    e
                                                                );
                                                        }),
                                                        n.appendChild(l),
                                                        r.appendChild(n),
                                                        a.push(n);
                                                },
                                                n = 0;
                                            n < t;
                                            n++
                                        )
                                            s(n);
                                        return a;
                                    },
                                },
                                {
                                    key: "addSVGEvents",
                                    value: function () {
                                        var t = this.w,
                                            e = t.config.chart.type,
                                            i = this.getElTooltip(),
                                            a = !(
                                                "bar" !== e &&
                                                "candlestick" !== e &&
                                                "boxPlot" !== e &&
                                                "rangeBar" !== e
                                            ),
                                            r =
                                                "area" === e ||
                                                "line" === e ||
                                                "scatter" === e ||
                                                "bubble" === e ||
                                                "radar" === e,
                                            s = t.globals.dom.Paper.node,
                                            n = this.getElGrid();
                                        n &&
                                            (this.seriesBound =
                                                n.getBoundingClientRect());
                                        var o,
                                            l = [],
                                            c = [],
                                            h = {
                                                hoverArea: s,
                                                elGrid: n,
                                                tooltipEl: i,
                                                tooltipY: l,
                                                tooltipX: c,
                                                ttItems: this.ttItems,
                                            };
                                        if (
                                            t.globals.axisCharts &&
                                            (r
                                                ? (o =
                                                      t.globals.dom.baseEl.querySelectorAll(
                                                          ".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker"
                                                      ))
                                                : a
                                                ? (o =
                                                      t.globals.dom.baseEl.querySelectorAll(
                                                          ".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area"
                                                      ))
                                                : ("heatmap" !== e &&
                                                      "treemap" !== e) ||
                                                  (o =
                                                      t.globals.dom.baseEl.querySelectorAll(
                                                          ".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap"
                                                      )),
                                            o && o.length)
                                        )
                                            for (var d = 0; d < o.length; d++)
                                                l.push(o[d].getAttribute("cy")),
                                                    c.push(
                                                        o[d].getAttribute("cx")
                                                    );
                                        if (
                                            (t.globals.xyCharts &&
                                                !this.showOnIntersect) ||
                                            (t.globals.comboCharts &&
                                                !this.showOnIntersect) ||
                                            (a &&
                                                this.tooltipUtil.hasBars() &&
                                                this.tConfig.shared)
                                        )
                                            this.addPathsEventListeners([s], h);
                                        else if (
                                            (a && !t.globals.comboCharts) ||
                                            (r && this.showOnIntersect)
                                        )
                                            this.addDatapointEventsListeners(h);
                                        else if (
                                            !t.globals.axisCharts ||
                                            "heatmap" === e ||
                                            "treemap" === e
                                        ) {
                                            var u =
                                                t.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-series"
                                                );
                                            this.addPathsEventListeners(u, h);
                                        }
                                        if (this.showOnIntersect) {
                                            var f =
                                                t.globals.dom.baseEl.querySelectorAll(
                                                    ".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker"
                                                );
                                            f.length > 0 &&
                                                this.addPathsEventListeners(
                                                    f,
                                                    h
                                                ),
                                                this.tooltipUtil.hasBars() &&
                                                    !this.tConfig.shared &&
                                                    this.addDatapointEventsListeners(
                                                        h
                                                    );
                                        }
                                    },
                                },
                                {
                                    key: "drawFixedTooltipRect",
                                    value: function () {
                                        var t = this.w,
                                            e = this.getElTooltip(),
                                            i = e.getBoundingClientRect(),
                                            a = i.width + 10,
                                            r = i.height + 10,
                                            s = this.tConfig.fixed.offsetX,
                                            n = this.tConfig.fixed.offsetY,
                                            o =
                                                this.tConfig.fixed.position.toLowerCase();
                                        return (
                                            o.indexOf("right") > -1 &&
                                                (s =
                                                    s +
                                                    t.globals.svgWidth -
                                                    a +
                                                    10),
                                            o.indexOf("bottom") > -1 &&
                                                (n =
                                                    n +
                                                    t.globals.svgHeight -
                                                    r -
                                                    10),
                                            (e.style.left = s + "px"),
                                            (e.style.top = n + "px"),
                                            {
                                                x: s,
                                                y: n,
                                                ttWidth: a,
                                                ttHeight: r,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "addDatapointEventsListeners",
                                    value: function (t) {
                                        var e =
                                            this.w.globals.dom.baseEl.querySelectorAll(
                                                ".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area"
                                            );
                                        this.addPathsEventListeners(e, t);
                                    },
                                },
                                {
                                    key: "addPathsEventListeners",
                                    value: function (t, e) {
                                        for (
                                            var i = this,
                                                a = function (a) {
                                                    var r = {
                                                        paths: t[a],
                                                        tooltipEl: e.tooltipEl,
                                                        tooltipY: e.tooltipY,
                                                        tooltipX: e.tooltipX,
                                                        elGrid: e.elGrid,
                                                        hoverArea: e.hoverArea,
                                                        ttItems: e.ttItems,
                                                    };
                                                    [
                                                        "mousemove",
                                                        "mouseup",
                                                        "touchmove",
                                                        "mouseout",
                                                        "touchend",
                                                    ].map(function (e) {
                                                        return t[
                                                            a
                                                        ].addEventListener(
                                                            e,
                                                            i.onSeriesHover.bind(
                                                                i,
                                                                r
                                                            ),
                                                            {
                                                                capture: !1,
                                                                passive: !0,
                                                            }
                                                        );
                                                    });
                                                },
                                                r = 0;
                                            r < t.length;
                                            r++
                                        )
                                            a(r);
                                    },
                                },
                                {
                                    key: "onSeriesHover",
                                    value: function (t, e) {
                                        var i = this,
                                            a = Date.now() - this.lastHoverTime;
                                        a >= 100
                                            ? this.seriesHover(t, e)
                                            : (clearTimeout(
                                                  this.seriesHoverTimeout
                                              ),
                                              (this.seriesHoverTimeout =
                                                  setTimeout(function () {
                                                      i.seriesHover(t, e);
                                                  }, 100 - a)));
                                    },
                                },
                                {
                                    key: "seriesHover",
                                    value: function (t, e) {
                                        var i = this;
                                        this.lastHoverTime = Date.now();
                                        var a = [],
                                            r = this.w;
                                        r.config.chart.group &&
                                            (a = this.ctx.getGroupedCharts()),
                                            (r.globals.axisCharts &&
                                                ((r.globals.minX === -1 / 0 &&
                                                    r.globals.maxX === 1 / 0) ||
                                                    0 ===
                                                        r.globals
                                                            .dataPoints)) ||
                                                (a.length
                                                    ? a.forEach(function (a) {
                                                          var r =
                                                                  i.getElTooltip(
                                                                      a
                                                                  ),
                                                              s = {
                                                                  paths: t.paths,
                                                                  tooltipEl: r,
                                                                  tooltipY:
                                                                      t.tooltipY,
                                                                  tooltipX:
                                                                      t.tooltipX,
                                                                  elGrid: t.elGrid,
                                                                  hoverArea:
                                                                      t.hoverArea,
                                                                  ttItems:
                                                                      a.w
                                                                          .globals
                                                                          .tooltip
                                                                          .ttItems,
                                                              };
                                                          a.w.globals.minX ===
                                                              i.w.globals
                                                                  .minX &&
                                                              a.w.globals
                                                                  .maxX ===
                                                                  i.w.globals
                                                                      .maxX &&
                                                              a.w.globals.tooltip.seriesHoverByContext(
                                                                  {
                                                                      chartCtx:
                                                                          a,
                                                                      ttCtx: a.w
                                                                          .globals
                                                                          .tooltip,
                                                                      opt: s,
                                                                      e,
                                                                  }
                                                              );
                                                      })
                                                    : this.seriesHoverByContext(
                                                          {
                                                              chartCtx:
                                                                  this.ctx,
                                                              ttCtx: this.w
                                                                  .globals
                                                                  .tooltip,
                                                              opt: t,
                                                              e,
                                                          }
                                                      ));
                                    },
                                },
                                {
                                    key: "seriesHoverByContext",
                                    value: function (t) {
                                        var e = t.chartCtx,
                                            i = t.ttCtx,
                                            a = t.opt,
                                            r = t.e,
                                            s = e.w,
                                            n = this.getElTooltip();
                                        n &&
                                            ((i.tooltipRect = {
                                                x: 0,
                                                y: 0,
                                                ttWidth:
                                                    n.getBoundingClientRect()
                                                        .width,
                                                ttHeight:
                                                    n.getBoundingClientRect()
                                                        .height,
                                            }),
                                            (i.e = r),
                                            !i.tooltipUtil.hasBars() ||
                                                s.globals.comboCharts ||
                                                i.isBarShared ||
                                                (this.tConfig.onDatasetHover
                                                    .highlightDataSeries &&
                                                    new V(
                                                        e
                                                    ).toggleSeriesOnHover(
                                                        r,
                                                        r.target.parentNode
                                                    )),
                                            i.fixedTooltip &&
                                                i.drawFixedTooltipRect(),
                                            s.globals.axisCharts
                                                ? i.axisChartsTooltips({
                                                      e: r,
                                                      opt: a,
                                                      tooltipRect:
                                                          i.tooltipRect,
                                                  })
                                                : i.nonAxisChartsTooltips({
                                                      e: r,
                                                      opt: a,
                                                      tooltipRect:
                                                          i.tooltipRect,
                                                  }));
                                    },
                                },
                                {
                                    key: "axisChartsTooltips",
                                    value: function (t) {
                                        var e,
                                            i,
                                            a = t.e,
                                            r = t.opt,
                                            s = this.w,
                                            n =
                                                r.elGrid.getBoundingClientRect(),
                                            o =
                                                "touchmove" === a.type
                                                    ? a.touches[0].clientX
                                                    : a.clientX,
                                            l =
                                                "touchmove" === a.type
                                                    ? a.touches[0].clientY
                                                    : a.clientY;
                                        if (
                                            ((this.clientY = l),
                                            (this.clientX = o),
                                            (s.globals.capturedSeriesIndex =
                                                -1),
                                            (s.globals.capturedDataPointIndex =
                                                -1),
                                            l < n.top || l > n.top + n.height)
                                        )
                                            this.handleMouseOut(r);
                                        else {
                                            if (
                                                Array.isArray(
                                                    this.tConfig.enabledOnSeries
                                                ) &&
                                                !s.config.tooltip.shared
                                            ) {
                                                var c = parseInt(
                                                    r.paths.getAttribute(
                                                        "index"
                                                    ),
                                                    10
                                                );
                                                if (
                                                    this.tConfig.enabledOnSeries.indexOf(
                                                        c
                                                    ) < 0
                                                )
                                                    return void this.handleMouseOut(
                                                        r
                                                    );
                                            }
                                            var h = this.getElTooltip(),
                                                d = this.getElXCrosshairs(),
                                                u =
                                                    s.globals.xyCharts ||
                                                    ("bar" ===
                                                        s.config.chart.type &&
                                                        !s.globals
                                                            .isBarHorizontal &&
                                                        this.tooltipUtil.hasBars() &&
                                                        this.tConfig.shared) ||
                                                    (s.globals.comboCharts &&
                                                        this.tooltipUtil.hasBars());
                                            if (
                                                "mousemove" === a.type ||
                                                "touchmove" === a.type ||
                                                "mouseup" === a.type
                                            ) {
                                                if (
                                                    s.globals.collapsedSeries
                                                        .length +
                                                        s.globals
                                                            .ancillaryCollapsedSeries
                                                            .length ===
                                                    s.globals.series.length
                                                )
                                                    return;
                                                null !== d &&
                                                    d.classList.add(
                                                        "apexcharts-active"
                                                    );
                                                var f =
                                                    this.yaxisTooltips.filter(
                                                        function (t) {
                                                            return !0 === t;
                                                        }
                                                    );
                                                if (
                                                    (null !==
                                                        this.ycrosshairs &&
                                                        f.length &&
                                                        this.ycrosshairs.classList.add(
                                                            "apexcharts-active"
                                                        ),
                                                    u && !this.showOnIntersect)
                                                )
                                                    this.handleStickyTooltip(
                                                        a,
                                                        o,
                                                        l,
                                                        r
                                                    );
                                                else if (
                                                    "heatmap" ===
                                                        s.config.chart.type ||
                                                    "treemap" ===
                                                        s.config.chart.type
                                                ) {
                                                    var g =
                                                        this.intersect.handleHeatTreeTooltip(
                                                            {
                                                                e: a,
                                                                opt: r,
                                                                x: e,
                                                                y: i,
                                                                type: s.config
                                                                    .chart.type,
                                                            }
                                                        );
                                                    (e = g.x),
                                                        (i = g.y),
                                                        (h.style.left =
                                                            e + "px"),
                                                        (h.style.top =
                                                            i + "px");
                                                } else
                                                    this.tooltipUtil.hasBars() &&
                                                        this.intersect.handleBarTooltip(
                                                            { e: a, opt: r }
                                                        ),
                                                        this.tooltipUtil.hasMarkers() &&
                                                            this.intersect.handleMarkerTooltip(
                                                                {
                                                                    e: a,
                                                                    opt: r,
                                                                    x: e,
                                                                    y: i,
                                                                }
                                                            );
                                                if (this.yaxisTooltips.length)
                                                    for (
                                                        var p = 0;
                                                        p <
                                                        s.config.yaxis.length;
                                                        p++
                                                    )
                                                        this.axesTooltip.drawYaxisTooltipText(
                                                            p,
                                                            l,
                                                            this.xyRatios
                                                        );
                                                r.tooltipEl.classList.add(
                                                    "apexcharts-active"
                                                );
                                            } else
                                                ("mouseout" !== a.type &&
                                                    "touchend" !== a.type) ||
                                                    this.handleMouseOut(r);
                                        }
                                    },
                                },
                                {
                                    key: "nonAxisChartsTooltips",
                                    value: function (t) {
                                        var e = t.e,
                                            i = t.opt,
                                            a = t.tooltipRect,
                                            r = this.w,
                                            s = i.paths.getAttribute("rel"),
                                            n = this.getElTooltip(),
                                            o =
                                                r.globals.dom.elWrap.getBoundingClientRect();
                                        if (
                                            "mousemove" === e.type ||
                                            "touchmove" === e.type
                                        ) {
                                            n.classList.add(
                                                "apexcharts-active"
                                            ),
                                                this.tooltipLabels.drawSeriesTexts(
                                                    {
                                                        ttItems: i.ttItems,
                                                        i: parseInt(s, 10) - 1,
                                                        shared: !1,
                                                    }
                                                );
                                            var l =
                                                    r.globals.clientX -
                                                    o.left -
                                                    a.ttWidth / 2,
                                                c =
                                                    r.globals.clientY -
                                                    o.top -
                                                    a.ttHeight -
                                                    10;
                                            if (
                                                ((n.style.left = l + "px"),
                                                (n.style.top = c + "px"),
                                                r.config.legend
                                                    .tooltipHoverFormatter)
                                            ) {
                                                var h = s - 1,
                                                    d = (0,
                                                    r.config.legend
                                                        .tooltipHoverFormatter)(
                                                        this.legendLabels[
                                                            h
                                                        ].getAttribute(
                                                            "data:default-text"
                                                        ),
                                                        {
                                                            seriesIndex: h,
                                                            dataPointIndex: h,
                                                            w: r,
                                                        }
                                                    );
                                                this.legendLabels[h].innerHTML =
                                                    d;
                                            }
                                        } else
                                            ("mouseout" !== e.type &&
                                                "touchend" !== e.type) ||
                                                (n.classList.remove(
                                                    "apexcharts-active"
                                                ),
                                                r.config.legend
                                                    .tooltipHoverFormatter &&
                                                    this.legendLabels.forEach(
                                                        function (t) {
                                                            var e =
                                                                t.getAttribute(
                                                                    "data:default-text"
                                                                );
                                                            t.innerHTML =
                                                                decodeURIComponent(
                                                                    e
                                                                );
                                                        }
                                                    ));
                                    },
                                },
                                {
                                    key: "handleStickyTooltip",
                                    value: function (t, e, i, a) {
                                        var r = this.w,
                                            s =
                                                this.tooltipUtil.getNearestValues(
                                                    {
                                                        context: this,
                                                        hoverArea: a.hoverArea,
                                                        elGrid: a.elGrid,
                                                        clientX: e,
                                                        clientY: i,
                                                    }
                                                ),
                                            n = s.j,
                                            o = s.capturedSeries;
                                        r.globals.collapsedSeriesIndices.includes(
                                            o
                                        ) && (o = null);
                                        var l =
                                            a.elGrid.getBoundingClientRect();
                                        if (s.hoverX < 0 || s.hoverX > l.width)
                                            this.handleMouseOut(a);
                                        else if (null !== o)
                                            this.handleStickyCapturedSeries(
                                                t,
                                                o,
                                                a,
                                                n
                                            );
                                        else if (
                                            this.tooltipUtil.isXoverlap(n) ||
                                            r.globals.isBarHorizontal
                                        ) {
                                            var c = r.globals.series.findIndex(
                                                function (t, e) {
                                                    return !r.globals.collapsedSeriesIndices.includes(
                                                        e
                                                    );
                                                }
                                            );
                                            this.create(
                                                t,
                                                this,
                                                c,
                                                n,
                                                a.ttItems
                                            );
                                        }
                                    },
                                },
                                {
                                    key: "handleStickyCapturedSeries",
                                    value: function (t, e, i, a) {
                                        var r = this.w;
                                        if (
                                            this.tConfig.shared ||
                                            null !== r.globals.series[e][a]
                                        ) {
                                            if (
                                                void 0 !==
                                                r.globals.series[e][a]
                                            )
                                                this.tConfig.shared &&
                                                this.tooltipUtil.isXoverlap(
                                                    a
                                                ) &&
                                                this.tooltipUtil.isInitialSeriesSameLen()
                                                    ? this.create(
                                                          t,
                                                          this,
                                                          e,
                                                          a,
                                                          i.ttItems
                                                      )
                                                    : this.create(
                                                          t,
                                                          this,
                                                          e,
                                                          a,
                                                          i.ttItems,
                                                          !1
                                                      );
                                            else if (
                                                this.tooltipUtil.isXoverlap(a)
                                            ) {
                                                var s =
                                                    r.globals.series.findIndex(
                                                        function (t, e) {
                                                            return !r.globals.collapsedSeriesIndices.includes(
                                                                e
                                                            );
                                                        }
                                                    );
                                                this.create(
                                                    t,
                                                    this,
                                                    s,
                                                    a,
                                                    i.ttItems
                                                );
                                            }
                                        } else this.handleMouseOut(i);
                                    },
                                },
                                {
                                    key: "deactivateHoverFilter",
                                    value: function () {
                                        for (
                                            var t = this.w,
                                                e = new k(this.ctx),
                                                i = t.globals.dom.Paper.select(
                                                    ".apexcharts-bar-area"
                                                ),
                                                a = 0;
                                            a < i.length;
                                            a++
                                        )
                                            e.pathMouseLeave(i[a]);
                                    },
                                },
                                {
                                    key: "handleMouseOut",
                                    value: function (t) {
                                        var e = this.w,
                                            i = this.getElXCrosshairs();
                                        if (
                                            (t.tooltipEl.classList.remove(
                                                "apexcharts-active"
                                            ),
                                            this.deactivateHoverFilter(),
                                            "bubble" !== e.config.chart.type &&
                                                this.marker.resetPointsSize(),
                                            null !== i &&
                                                i.classList.remove(
                                                    "apexcharts-active"
                                                ),
                                            null !== this.ycrosshairs &&
                                                this.ycrosshairs.classList.remove(
                                                    "apexcharts-active"
                                                ),
                                            this.isXAxisTooltipEnabled &&
                                                this.xaxisTooltip.classList.remove(
                                                    "apexcharts-active"
                                                ),
                                            this.yaxisTooltips.length)
                                        ) {
                                            null === this.yaxisTTEls &&
                                                (this.yaxisTTEls =
                                                    e.globals.dom.baseEl.querySelectorAll(
                                                        ".apexcharts-yaxistooltip"
                                                    ));
                                            for (
                                                var a = 0;
                                                a < this.yaxisTTEls.length;
                                                a++
                                            )
                                                this.yaxisTTEls[
                                                    a
                                                ].classList.remove(
                                                    "apexcharts-active"
                                                );
                                        }
                                        e.config.legend.tooltipHoverFormatter &&
                                            this.legendLabels.forEach(function (
                                                t
                                            ) {
                                                var e =
                                                    t.getAttribute(
                                                        "data:default-text"
                                                    );
                                                t.innerHTML =
                                                    decodeURIComponent(e);
                                            });
                                    },
                                },
                                {
                                    key: "markerClick",
                                    value: function (t, e, i) {
                                        var a = this.w;
                                        "function" ==
                                            typeof a.config.chart.events
                                                .markerClick &&
                                            a.config.chart.events.markerClick(
                                                t,
                                                this.ctx,
                                                {
                                                    seriesIndex: e,
                                                    dataPointIndex: i,
                                                    w: a,
                                                }
                                            ),
                                            this.ctx.events.fireEvent(
                                                "markerClick",
                                                [
                                                    t,
                                                    this.ctx,
                                                    {
                                                        seriesIndex: e,
                                                        dataPointIndex: i,
                                                        w: a,
                                                    },
                                                ]
                                            );
                                    },
                                },
                                {
                                    key: "create",
                                    value: function (t, e, i, a, r) {
                                        var n,
                                            o,
                                            l,
                                            c,
                                            h,
                                            d,
                                            u,
                                            f,
                                            g,
                                            p,
                                            x,
                                            m,
                                            b,
                                            v,
                                            y,
                                            w,
                                            A =
                                                arguments.length > 5 &&
                                                void 0 !== arguments[5]
                                                    ? arguments[5]
                                                    : null,
                                            S = this.w,
                                            C = e;
                                        "mouseup" === t.type &&
                                            this.markerClick(t, i, a),
                                            null === A &&
                                                (A = this.tConfig.shared);
                                        var P = this.tooltipUtil.hasMarkers(i),
                                            L = this.tooltipUtil.getElBars();
                                        if (
                                            S.config.legend
                                                .tooltipHoverFormatter
                                        ) {
                                            var T =
                                                    S.config.legend
                                                        .tooltipHoverFormatter,
                                                M = Array.from(
                                                    this.legendLabels
                                                );
                                            M.forEach(function (t) {
                                                var e =
                                                    t.getAttribute(
                                                        "data:default-text"
                                                    );
                                                t.innerHTML =
                                                    decodeURIComponent(e);
                                            });
                                            for (var E = 0; E < M.length; E++) {
                                                var I = M[E],
                                                    O = parseInt(
                                                        I.getAttribute("i"),
                                                        10
                                                    ),
                                                    z = decodeURIComponent(
                                                        I.getAttribute(
                                                            "data:default-text"
                                                        )
                                                    ),
                                                    F = T(z, {
                                                        seriesIndex: A ? O : i,
                                                        dataPointIndex: a,
                                                        w: S,
                                                    });
                                                if (A)
                                                    I.innerHTML =
                                                        S.globals.collapsedSeriesIndices.indexOf(
                                                            O
                                                        ) < 0
                                                            ? F
                                                            : z;
                                                else if (
                                                    ((I.innerHTML =
                                                        O === i ? F : z),
                                                    i === O)
                                                )
                                                    break;
                                            }
                                        }
                                        var D = s(
                                            s(
                                                { ttItems: r, i, j: a },
                                                void 0 !==
                                                    (null ===
                                                        (n =
                                                            S.globals
                                                                .seriesRange) ||
                                                    void 0 === n ||
                                                    null === (o = n[i]) ||
                                                    void 0 === o ||
                                                    null === (l = o[a]) ||
                                                    void 0 === l ||
                                                    null === (c = l.y[0]) ||
                                                    void 0 === c
                                                        ? void 0
                                                        : c.y1) && {
                                                    y1:
                                                        null ===
                                                            (h =
                                                                S.globals
                                                                    .seriesRange) ||
                                                        void 0 === h ||
                                                        null === (d = h[i]) ||
                                                        void 0 === d ||
                                                        null === (u = d[a]) ||
                                                        void 0 === u ||
                                                        null === (f = u.y[0]) ||
                                                        void 0 === f
                                                            ? void 0
                                                            : f.y1,
                                                }
                                            ),
                                            void 0 !==
                                                (null ===
                                                    (g =
                                                        S.globals
                                                            .seriesRange) ||
                                                void 0 === g ||
                                                null === (p = g[i]) ||
                                                void 0 === p ||
                                                null === (x = p[a]) ||
                                                void 0 === x ||
                                                null === (m = x.y[0]) ||
                                                void 0 === m
                                                    ? void 0
                                                    : m.y2) && {
                                                y2:
                                                    null ===
                                                        (b =
                                                            S.globals
                                                                .seriesRange) ||
                                                    void 0 === b ||
                                                    null === (v = b[i]) ||
                                                    void 0 === v ||
                                                    null === (y = v[a]) ||
                                                    void 0 === y ||
                                                    null === (w = y.y[0]) ||
                                                    void 0 === w
                                                        ? void 0
                                                        : w.y2,
                                            }
                                        );
                                        if (A) {
                                            if (
                                                (C.tooltipLabels.drawSeriesTexts(
                                                    s(
                                                        s({}, D),
                                                        {},
                                                        {
                                                            shared:
                                                                !this
                                                                    .showOnIntersect &&
                                                                this.tConfig
                                                                    .shared,
                                                        }
                                                    )
                                                ),
                                                P)
                                            )
                                                S.globals.markers.largestSize >
                                                0
                                                    ? C.marker.enlargePoints(a)
                                                    : C.tooltipPosition.moveDynamicPointsOnHover(
                                                          a
                                                      );
                                            else if (
                                                this.tooltipUtil.hasBars() &&
                                                ((this.barSeriesHeight =
                                                    this.tooltipUtil.getBarsHeight(
                                                        L
                                                    )),
                                                this.barSeriesHeight > 0)
                                            ) {
                                                var N = new k(this.ctx),
                                                    X =
                                                        S.globals.dom.Paper.select(
                                                            ".apexcharts-bar-area[j='".concat(
                                                                a,
                                                                "']"
                                                            )
                                                        );
                                                this.deactivateHoverFilter(),
                                                    this.tooltipPosition.moveStickyTooltipOverBars(
                                                        a,
                                                        i
                                                    );
                                                for (
                                                    var R = 0;
                                                    R < X.length;
                                                    R++
                                                )
                                                    N.pathMouseEnter(X[R]);
                                            }
                                        } else
                                            C.tooltipLabels.drawSeriesTexts(
                                                s({ shared: !1 }, D)
                                            ),
                                                this.tooltipUtil.hasBars() &&
                                                    C.tooltipPosition.moveStickyTooltipOverBars(
                                                        a,
                                                        i
                                                    ),
                                                P &&
                                                    C.tooltipPosition.moveMarkers(
                                                        i,
                                                        a
                                                    );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    wt = (function () {
                        function t(e) {
                            o(this, t),
                                (this.w = e.w),
                                (this.barCtx = e),
                                (this.totalFormatter =
                                    this.w.config.plotOptions.bar.dataLabels.total.formatter),
                                this.totalFormatter ||
                                    (this.totalFormatter =
                                        this.w.config.dataLabels.formatter);
                        }
                        return (
                            c(t, [
                                {
                                    key: "handleBarDataLabels",
                                    value: function (t) {
                                        var e = t.x,
                                            i = t.y,
                                            a = t.y1,
                                            r = t.y2,
                                            s = t.i,
                                            n = t.j,
                                            o = t.realIndex,
                                            l = t.groupIndex,
                                            c = t.series,
                                            h = t.barHeight,
                                            d = t.barWidth,
                                            u = t.barXPosition,
                                            f = t.barYPosition,
                                            g = t.visibleSeries,
                                            p = t.renderedPath,
                                            x = this.w,
                                            m = new k(this.barCtx.ctx),
                                            b = Array.isArray(
                                                this.barCtx.strokeWidth
                                            )
                                                ? this.barCtx.strokeWidth[o]
                                                : this.barCtx.strokeWidth,
                                            v = e + parseFloat(d * g),
                                            y = i + parseFloat(h * g);
                                        x.globals.isXNumeric &&
                                            !x.globals.isBarHorizontal &&
                                            ((v = e + parseFloat(d * (g + 1))),
                                            (y =
                                                i +
                                                parseFloat(h * (g + 1)) -
                                                b));
                                        var w,
                                            A,
                                            S = null,
                                            C = e,
                                            P = i,
                                            L = x.config.dataLabels,
                                            T =
                                                this.barCtx.barOptions
                                                    .dataLabels,
                                            M =
                                                this.barCtx.barOptions
                                                    .dataLabels.total;
                                        void 0 !== f &&
                                            this.barCtx.isRangeBar &&
                                            ((y = f), (P = f)),
                                            void 0 !== u &&
                                                this.barCtx
                                                    .isVerticalGroupedRangeBar &&
                                                ((v = u), (C = u));
                                        var E = L.offsetX,
                                            I = L.offsetY,
                                            O = { width: 0, height: 0 };
                                        if (x.config.dataLabels.enabled) {
                                            var z = this.barCtx.series[s][n];
                                            O = m.getTextRects(
                                                x.globals.yLabelFormatters[0](
                                                    z
                                                ),
                                                parseFloat(L.style.fontSize)
                                            );
                                        }
                                        var F = {
                                            x: e,
                                            y: i,
                                            i: s,
                                            j: n,
                                            realIndex: o,
                                            groupIndex: l || -1,
                                            renderedPath: p,
                                            bcx: v,
                                            bcy: y,
                                            barHeight: h,
                                            barWidth: d,
                                            textRects: O,
                                            strokeWidth: b,
                                            dataLabelsX: C,
                                            dataLabelsY: P,
                                            dataLabelsConfig: L,
                                            barDataLabelsConfig: T,
                                            barTotalDataLabelsConfig: M,
                                            offX: E,
                                            offY: I,
                                        };
                                        return (
                                            (A = this.barCtx.isHorizontal
                                                ? this.calculateBarsDataLabelsPosition(
                                                      F
                                                  )
                                                : this.calculateColumnsDataLabelsPosition(
                                                      F
                                                  )),
                                            p.attr({
                                                cy: A.bcy,
                                                cx: A.bcx,
                                                j: n,
                                                val: c[s][n],
                                                barHeight: h,
                                                barWidth: d,
                                            }),
                                            (w = this.drawCalculatedDataLabels({
                                                x: A.dataLabelsX,
                                                y: A.dataLabelsY,
                                                val: this.barCtx.isRangeBar
                                                    ? [a, r]
                                                    : c[s][n],
                                                i: o,
                                                j: n,
                                                barWidth: d,
                                                barHeight: h,
                                                textRects: O,
                                                dataLabelsConfig: L,
                                            })),
                                            x.config.chart.stacked &&
                                                M.enabled &&
                                                (S = this.drawTotalDataLabels({
                                                    x: A.totalDataLabelsX,
                                                    y: A.totalDataLabelsY,
                                                    realIndex: o,
                                                    textAnchor:
                                                        A.totalDataLabelsAnchor,
                                                    val: this.getStackedTotalDataLabel(
                                                        { realIndex: o, j: n }
                                                    ),
                                                    dataLabelsConfig: L,
                                                    barTotalDataLabelsConfig: M,
                                                })),
                                            {
                                                dataLabels: w,
                                                totalDataLabels: S,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "getStackedTotalDataLabel",
                                    value: function (t) {
                                        var e = t.realIndex,
                                            i = t.j,
                                            a = this.w,
                                            r =
                                                this.barCtx.stackedSeriesTotals[
                                                    i
                                                ];
                                        return (
                                            this.totalFormatter &&
                                                (r = this.totalFormatter(
                                                    r,
                                                    s(
                                                        s({}, a),
                                                        {},
                                                        {
                                                            seriesIndex: e,
                                                            dataPointIndex: i,
                                                            w: a,
                                                        }
                                                    )
                                                )),
                                            r
                                        );
                                    },
                                },
                                {
                                    key: "calculateColumnsDataLabelsPosition",
                                    value: function (t) {
                                        var e,
                                            i,
                                            a = this.w,
                                            r = t.i,
                                            s = t.j,
                                            n = t.realIndex,
                                            o = t.groupIndex,
                                            l = t.y,
                                            c = t.bcx,
                                            h = t.barWidth,
                                            d = t.barHeight,
                                            u = t.textRects,
                                            f = t.dataLabelsX,
                                            g = t.dataLabelsY,
                                            p = t.dataLabelsConfig,
                                            x = t.barDataLabelsConfig,
                                            m = t.barTotalDataLabelsConfig,
                                            b = t.strokeWidth,
                                            v = t.offX,
                                            y = t.offY;
                                        d = Math.abs(d);
                                        var w =
                                            "vertical" ===
                                            a.config.plotOptions.bar.dataLabels
                                                .orientation;
                                        c = c - b / 2 + (-1 !== o ? o * h : 0);
                                        var A =
                                            a.globals.gridWidth /
                                            a.globals.dataPoints;
                                        this.barCtx.isVerticalGroupedRangeBar
                                            ? (f += h / 2)
                                            : (f = a.globals.isXNumeric
                                                  ? c - h / 2 + v
                                                  : c - A + h / 2 + v),
                                            w &&
                                                (f =
                                                    f +
                                                    u.height / 2 -
                                                    b / 2 -
                                                    2);
                                        var S = this.barCtx.series[r][s] < 0,
                                            C = l;
                                        switch (
                                            (this.barCtx.isReversed &&
                                                ((C = l - d + (S ? 2 * d : 0)),
                                                (l -= d)),
                                            x.position)
                                        ) {
                                            case "center":
                                                g = w
                                                    ? S
                                                        ? C + d / 2 + y
                                                        : C + d / 2 - y
                                                    : S
                                                    ? C -
                                                      d / 2 +
                                                      u.height / 2 +
                                                      y
                                                    : C +
                                                      d / 2 +
                                                      u.height / 2 -
                                                      y;
                                                break;
                                            case "bottom":
                                                g = w
                                                    ? S
                                                        ? C + d + y
                                                        : C + d - y
                                                    : S
                                                    ? C - d + u.height + b + y
                                                    : C +
                                                      d -
                                                      u.height / 2 +
                                                      b -
                                                      y;
                                                break;
                                            case "top":
                                                g = w
                                                    ? S
                                                        ? C + y
                                                        : C - y
                                                    : S
                                                    ? C - u.height / 2 - y
                                                    : C + u.height + y;
                                        }
                                        if (
                                            this.barCtx
                                                .lastActiveBarSerieIndex ===
                                                n &&
                                            m.enabled
                                        ) {
                                            var P = new k(
                                                this.barCtx.ctx
                                            ).getTextRects(
                                                this.getStackedTotalDataLabel({
                                                    realIndex: n,
                                                    j: s,
                                                }),
                                                p.fontSize
                                            );
                                            (e = S
                                                ? C -
                                                  P.height / 2 -
                                                  y -
                                                  m.offsetY +
                                                  18
                                                : C +
                                                  P.height +
                                                  y +
                                                  m.offsetY -
                                                  18),
                                                (i = f + m.offsetX);
                                        }
                                        return (
                                            a.config.chart.stacked ||
                                                (g < 0
                                                    ? (g = 0 + b)
                                                    : g + u.height / 3 >
                                                          a.globals
                                                              .gridHeight &&
                                                      (g =
                                                          a.globals.gridHeight -
                                                          b)),
                                            {
                                                bcx: c,
                                                bcy: l,
                                                dataLabelsX: f,
                                                dataLabelsY: g,
                                                totalDataLabelsX: i,
                                                totalDataLabelsY: e,
                                                totalDataLabelsAnchor: "middle",
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "calculateBarsDataLabelsPosition",
                                    value: function (t) {
                                        var e = this.w,
                                            i = t.x,
                                            a = t.i,
                                            r = t.j,
                                            s = t.realIndex,
                                            n = t.groupIndex,
                                            o = t.bcy,
                                            l = t.barHeight,
                                            c = t.barWidth,
                                            h = t.textRects,
                                            d = t.dataLabelsX,
                                            u = t.strokeWidth,
                                            f = t.dataLabelsConfig,
                                            g = t.barDataLabelsConfig,
                                            p = t.barTotalDataLabelsConfig,
                                            x = t.offX,
                                            m = t.offY,
                                            b =
                                                e.globals.gridHeight /
                                                e.globals.dataPoints;
                                        c = Math.abs(c);
                                        var v,
                                            y,
                                            w =
                                                (o += -1 !== n ? n * l : 0) -
                                                (this.barCtx.isRangeBar
                                                    ? 0
                                                    : b) +
                                                l / 2 +
                                                h.height / 2 +
                                                m -
                                                3,
                                            A = "start",
                                            S = this.barCtx.series[a][r] < 0,
                                            C = i;
                                        switch (
                                            (this.barCtx.isReversed &&
                                                ((C = i + c - (S ? 2 * c : 0)),
                                                (i = e.globals.gridWidth - c)),
                                            g.position)
                                        ) {
                                            case "center":
                                                d = S
                                                    ? C + c / 2 - x
                                                    : Math.max(
                                                          h.width / 2,
                                                          C - c / 2
                                                      ) + x;
                                                break;
                                            case "bottom":
                                                d = S
                                                    ? C +
                                                      c -
                                                      u -
                                                      Math.round(h.width / 2) -
                                                      x
                                                    : C -
                                                      c +
                                                      u +
                                                      Math.round(h.width / 2) +
                                                      x;
                                                break;
                                            case "top":
                                                d = S
                                                    ? C -
                                                      u +
                                                      Math.round(h.width / 2) -
                                                      x
                                                    : C -
                                                      u -
                                                      Math.round(h.width / 2) +
                                                      x;
                                        }
                                        if (
                                            this.barCtx
                                                .lastActiveBarSerieIndex ===
                                                s &&
                                            p.enabled
                                        ) {
                                            var P = new k(
                                                this.barCtx.ctx
                                            ).getTextRects(
                                                this.getStackedTotalDataLabel({
                                                    realIndex: s,
                                                    j: r,
                                                }),
                                                f.fontSize
                                            );
                                            S
                                                ? ((v =
                                                      C -
                                                      u +
                                                      Math.round(P.width / 2) -
                                                      x -
                                                      p.offsetX -
                                                      15),
                                                  (A = "end"))
                                                : (v =
                                                      C -
                                                      u -
                                                      Math.round(P.width / 2) +
                                                      x +
                                                      p.offsetX +
                                                      15),
                                                (y = w + p.offsetY);
                                        }
                                        return (
                                            e.config.chart.stacked ||
                                                (d < 0
                                                    ? (d = d + h.width + u)
                                                    : d + h.width / 2 >
                                                          e.globals.gridWidth &&
                                                      (d =
                                                          e.globals.gridWidth -
                                                          h.width -
                                                          u)),
                                            {
                                                bcx: i,
                                                bcy: o,
                                                dataLabelsX: d,
                                                dataLabelsY: w,
                                                totalDataLabelsX: v,
                                                totalDataLabelsY: y,
                                                totalDataLabelsAnchor: A,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawCalculatedDataLabels",
                                    value: function (t) {
                                        var e = t.x,
                                            i = t.y,
                                            a = t.val,
                                            r = t.i,
                                            n = t.j,
                                            o = t.textRects,
                                            l = t.barHeight,
                                            c = t.barWidth,
                                            h = t.dataLabelsConfig,
                                            d = this.w,
                                            u = "rotate(0)";
                                        "vertical" ===
                                            d.config.plotOptions.bar.dataLabels
                                                .orientation &&
                                            (u = "rotate(-90, "
                                                .concat(e, ", ")
                                                .concat(i, ")"));
                                        var f = new B(this.barCtx.ctx),
                                            g = new k(this.barCtx.ctx),
                                            p = h.formatter,
                                            x = null,
                                            m =
                                                d.globals.collapsedSeriesIndices.indexOf(
                                                    r
                                                ) > -1;
                                        if (h.enabled && !m) {
                                            x = g.group({
                                                class: "apexcharts-data-labels",
                                                transform: u,
                                            });
                                            var b = "";
                                            void 0 !== a &&
                                                (b = p(
                                                    a,
                                                    s(
                                                        s({}, d),
                                                        {},
                                                        {
                                                            seriesIndex: r,
                                                            dataPointIndex: n,
                                                            w: d,
                                                        }
                                                    )
                                                )),
                                                !a &&
                                                    d.config.plotOptions.bar
                                                        .hideZeroBarsWhenGrouped &&
                                                    (b = "");
                                            var v = d.globals.series[r][n] < 0,
                                                y =
                                                    d.config.plotOptions.bar
                                                        .dataLabels.position;
                                            "vertical" ===
                                                d.config.plotOptions.bar
                                                    .dataLabels.orientation &&
                                                ("top" === y &&
                                                    (h.textAnchor = v
                                                        ? "end"
                                                        : "start"),
                                                "center" === y &&
                                                    (h.textAnchor = "middle"),
                                                "bottom" === y &&
                                                    (h.textAnchor = v
                                                        ? "end"
                                                        : "start")),
                                                this.barCtx.isRangeBar &&
                                                    this.barCtx.barOptions
                                                        .dataLabels
                                                        .hideOverflowingLabels &&
                                                    c <
                                                        g.getTextRects(
                                                            b,
                                                            parseFloat(
                                                                h.style.fontSize
                                                            )
                                                        ).width &&
                                                    (b = ""),
                                                d.config.chart.stacked &&
                                                    this.barCtx.barOptions
                                                        .dataLabels
                                                        .hideOverflowingLabels &&
                                                    (this.barCtx.isHorizontal
                                                        ? o.width / 1.6 >
                                                              Math.abs(c) &&
                                                          (b = "")
                                                        : o.height / 1.6 >
                                                              Math.abs(l) &&
                                                          (b = ""));
                                            var w = s({}, h);
                                            this.barCtx.isHorizontal &&
                                                a < 0 &&
                                                ("start" === h.textAnchor
                                                    ? (w.textAnchor = "end")
                                                    : "end" === h.textAnchor &&
                                                      (w.textAnchor = "start")),
                                                f.plotDataLabelsText({
                                                    x: e,
                                                    y: i,
                                                    text: b,
                                                    i: r,
                                                    j: n,
                                                    parent: x,
                                                    dataLabelsConfig: w,
                                                    alwaysDrawDataLabel: !0,
                                                    offsetCorrection: !0,
                                                });
                                        }
                                        return x;
                                    },
                                },
                                {
                                    key: "drawTotalDataLabels",
                                    value: function (t) {
                                        var e,
                                            i = t.x,
                                            a = t.y,
                                            r = t.val,
                                            s = t.realIndex,
                                            n = t.textAnchor,
                                            o = t.barTotalDataLabelsConfig,
                                            l = new k(this.barCtx.ctx);
                                        return (
                                            o.enabled &&
                                                void 0 !== i &&
                                                void 0 !== a &&
                                                this.barCtx
                                                    .lastActiveBarSerieIndex ===
                                                    s &&
                                                (e = l.drawText({
                                                    x: i,
                                                    y: a,
                                                    foreColor: o.style.color,
                                                    text: r,
                                                    textAnchor: n,
                                                    fontFamily:
                                                        o.style.fontFamily,
                                                    fontSize: o.style.fontSize,
                                                    fontWeight:
                                                        o.style.fontWeight,
                                                })),
                                            e
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    kt = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w), (this.barCtx = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "initVariables",
                                    value: function (t) {
                                        var e = this.w;
                                        (this.barCtx.series = t),
                                            (this.barCtx.totalItems = 0),
                                            (this.barCtx.seriesLen = 0),
                                            (this.barCtx.visibleI = -1),
                                            (this.barCtx.visibleItems = 1);
                                        for (var i = 0; i < t.length; i++)
                                            if (
                                                (t[i].length > 0 &&
                                                    ((this.barCtx.seriesLen =
                                                        this.barCtx.seriesLen +
                                                        1),
                                                    (this.barCtx.totalItems +=
                                                        t[i].length)),
                                                e.globals.isXNumeric)
                                            )
                                                for (
                                                    var a = 0;
                                                    a < t[i].length;
                                                    a++
                                                )
                                                    e.globals.seriesX[i][a] >
                                                        e.globals.minX &&
                                                        e.globals.seriesX[i][
                                                            a
                                                        ] < e.globals.maxX &&
                                                        this.barCtx
                                                            .visibleItems++;
                                            else
                                                this.barCtx.visibleItems =
                                                    e.globals.dataPoints;
                                        0 === this.barCtx.seriesLen &&
                                            (this.barCtx.seriesLen = 1),
                                            (this.barCtx.zeroSerieses = []),
                                            e.globals.comboCharts ||
                                                this.checkZeroSeries({
                                                    series: t,
                                                });
                                    },
                                },
                                {
                                    key: "initialPositions",
                                    value: function () {
                                        var t,
                                            e,
                                            i,
                                            a,
                                            r,
                                            s,
                                            n,
                                            o,
                                            l = this.w,
                                            c = l.globals.dataPoints;
                                        this.barCtx.isRangeBar &&
                                            (c = l.globals.labels.length);
                                        var h = this.barCtx.seriesLen;
                                        if (
                                            (l.config.plotOptions.bar
                                                .rangeBarGroupRows && (h = 1),
                                            this.barCtx.isHorizontal)
                                        )
                                            (r =
                                                (i = l.globals.gridHeight / c) /
                                                h),
                                                l.globals.isXNumeric &&
                                                    (r =
                                                        (i =
                                                            l.globals
                                                                .gridHeight /
                                                            this.barCtx
                                                                .totalItems) /
                                                        this.barCtx.seriesLen),
                                                (r =
                                                    (r *
                                                        parseInt(
                                                            this.barCtx
                                                                .barOptions
                                                                .barHeight,
                                                            10
                                                        )) /
                                                    100),
                                                -1 ===
                                                    String(
                                                        this.barCtx.barOptions
                                                            .barHeight
                                                    ).indexOf("%") &&
                                                    (r = parseInt(
                                                        this.barCtx.barOptions
                                                            .barHeight,
                                                        10
                                                    )),
                                                (o =
                                                    this.barCtx
                                                        .baseLineInvertedY +
                                                    l.globals.padHorizontal +
                                                    (this.barCtx.isReversed
                                                        ? l.globals.gridWidth
                                                        : 0) -
                                                    (this.barCtx.isReversed
                                                        ? 2 *
                                                          this.barCtx
                                                              .baseLineInvertedY
                                                        : 0)),
                                                this.barCtx.isFunnel &&
                                                    (o =
                                                        l.globals.gridWidth /
                                                        2),
                                                (e =
                                                    (i -
                                                        r *
                                                            this.barCtx
                                                                .seriesLen) /
                                                    2);
                                        else {
                                            if (
                                                ((a =
                                                    l.globals.gridWidth /
                                                    this.barCtx.visibleItems),
                                                l.config.xaxis
                                                    .convertedCatToNumeric &&
                                                    (a =
                                                        l.globals.gridWidth /
                                                        l.globals.dataPoints),
                                                (s =
                                                    ((a / h) *
                                                        parseInt(
                                                            this.barCtx
                                                                .barOptions
                                                                .columnWidth,
                                                            10
                                                        )) /
                                                    100),
                                                l.globals.isXNumeric)
                                            ) {
                                                var d = this.barCtx.xRatio;
                                                l.config.xaxis
                                                    .convertedCatToNumeric &&
                                                    (d =
                                                        this.barCtx
                                                            .initialXRatio),
                                                    l.globals.minXDiff &&
                                                        0.5 !==
                                                            l.globals
                                                                .minXDiff &&
                                                        l.globals.minXDiff / d >
                                                            0 &&
                                                        (a =
                                                            l.globals.minXDiff /
                                                            d),
                                                    (s =
                                                        ((a / h) *
                                                            parseInt(
                                                                this.barCtx
                                                                    .barOptions
                                                                    .columnWidth,
                                                                10
                                                            )) /
                                                        100) < 1 && (s = 1);
                                            }
                                            -1 ===
                                                String(
                                                    this.barCtx.barOptions
                                                        .columnWidth
                                                ).indexOf("%") &&
                                                (s = parseInt(
                                                    this.barCtx.barOptions
                                                        .columnWidth,
                                                    10
                                                )),
                                                (n =
                                                    l.globals.gridHeight -
                                                    this.barCtx.baseLineY[
                                                        this.barCtx.yaxisIndex
                                                    ] -
                                                    (this.barCtx.isReversed
                                                        ? l.globals.gridHeight
                                                        : 0) +
                                                    (this.barCtx.isReversed
                                                        ? 2 *
                                                          this.barCtx.baseLineY[
                                                              this.barCtx
                                                                  .yaxisIndex
                                                          ]
                                                        : 0)),
                                                (t =
                                                    l.globals.padHorizontal +
                                                    (a -
                                                        s *
                                                            this.barCtx
                                                                .seriesLen) /
                                                        2);
                                        }
                                        return {
                                            x: t,
                                            y: e,
                                            yDivision: i,
                                            xDivision: a,
                                            barHeight: r,
                                            barWidth: s,
                                            zeroH: n,
                                            zeroW: o,
                                        };
                                    },
                                },
                                {
                                    key: "initializeStackedPrevVars",
                                    value: function (t) {
                                        var e = t.w;
                                        e.globals.hasSeriesGroups
                                            ? e.globals.seriesGroups.forEach(
                                                  function (e) {
                                                      t[e] || (t[e] = {}),
                                                          (t[e].prevY = []),
                                                          (t[e].prevX = []),
                                                          (t[e].prevYF = []),
                                                          (t[e].prevXF = []),
                                                          (t[e].prevYVal = []),
                                                          (t[e].prevXVal = []);
                                                  }
                                              )
                                            : ((t.prevY = []),
                                              (t.prevX = []),
                                              (t.prevYF = []),
                                              (t.prevXF = []),
                                              (t.prevYVal = []),
                                              (t.prevXVal = []));
                                    },
                                },
                                {
                                    key: "initializeStackedXYVars",
                                    value: function (t) {
                                        var e = t.w;
                                        e.globals.hasSeriesGroups
                                            ? e.globals.seriesGroups.forEach(
                                                  function (e) {
                                                      t[e] || (t[e] = {}),
                                                          (t[e].xArrj = []),
                                                          (t[e].xArrjF = []),
                                                          (t[e].xArrjVal = []),
                                                          (t[e].yArrj = []),
                                                          (t[e].yArrjF = []),
                                                          (t[e].yArrjVal = []);
                                                  }
                                              )
                                            : ((t.xArrj = []),
                                              (t.xArrjF = []),
                                              (t.xArrjVal = []),
                                              (t.yArrj = []),
                                              (t.yArrjF = []),
                                              (t.yArrjVal = []));
                                    },
                                },
                                {
                                    key: "getPathFillColor",
                                    value: function (t, e, i, a) {
                                        var r,
                                            s,
                                            n,
                                            o,
                                            l = this.w,
                                            c = new Y(this.barCtx.ctx),
                                            h = null,
                                            d = this.barCtx.barOptions
                                                .distributed
                                                ? i
                                                : e;
                                        return (
                                            this.barCtx.barOptions.colors.ranges
                                                .length > 0 &&
                                                this.barCtx.barOptions.colors.ranges.map(
                                                    function (a) {
                                                        t[e][i] >= a.from &&
                                                            t[e][i] <= a.to &&
                                                            (h = a.color);
                                                    }
                                                ),
                                            l.config.series[e].data[i] &&
                                                l.config.series[e].data[i]
                                                    .fillColor &&
                                                (h =
                                                    l.config.series[e].data[i]
                                                        .fillColor),
                                            c.fillPath({
                                                seriesNumber: this.barCtx
                                                    .barOptions.distributed
                                                    ? d
                                                    : a,
                                                dataPointIndex: i,
                                                color: h,
                                                value: t[e][i],
                                                fillConfig:
                                                    null ===
                                                        (r =
                                                            l.config.series[e]
                                                                .data[i]) ||
                                                    void 0 === r
                                                        ? void 0
                                                        : r.fill,
                                                fillType:
                                                    null !==
                                                        (s =
                                                            l.config.series[e]
                                                                .data[i]) &&
                                                    void 0 !== s &&
                                                    null !== (n = s.fill) &&
                                                    void 0 !== n &&
                                                    n.type
                                                        ? null ===
                                                              (o =
                                                                  l.config
                                                                      .series[e]
                                                                      .data[
                                                                      i
                                                                  ]) ||
                                                          void 0 === o
                                                            ? void 0
                                                            : o.fill.type
                                                        : l.config.fill.type,
                                            })
                                        );
                                    },
                                },
                                {
                                    key: "getStrokeWidth",
                                    value: function (t, e, i) {
                                        var a = 0,
                                            r = this.w;
                                        return (
                                            this.barCtx.series[t][e]
                                                ? (this.barCtx.isNullValue = !1)
                                                : (this.barCtx.isNullValue =
                                                      !0),
                                            r.config.stroke.show &&
                                                (this.barCtx.isNullValue ||
                                                    (a = Array.isArray(
                                                        this.barCtx.strokeWidth
                                                    )
                                                        ? this.barCtx
                                                              .strokeWidth[i]
                                                        : this.barCtx
                                                              .strokeWidth)),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "shouldApplyRadius",
                                    value: function (t) {
                                        var e = this.w,
                                            i = !1;
                                        return (
                                            e.config.plotOptions.bar
                                                .borderRadius > 0 &&
                                                (e.config.chart.stacked &&
                                                "last" ===
                                                    e.config.plotOptions.bar
                                                        .borderRadiusWhenStacked
                                                    ? this.barCtx
                                                          .lastActiveBarSerieIndex ===
                                                          t && (i = !0)
                                                    : (i = !0)),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "barBackground",
                                    value: function (t) {
                                        var e = t.j,
                                            i = t.i,
                                            a = t.x1,
                                            r = t.x2,
                                            s = t.y1,
                                            n = t.y2,
                                            o = t.elSeries,
                                            l = this.w,
                                            c = new k(this.barCtx.ctx),
                                            h = new V(
                                                this.barCtx.ctx
                                            ).getActiveConfigSeriesIndex();
                                        if (
                                            this.barCtx.barOptions.colors
                                                .backgroundBarColors.length >
                                                0 &&
                                            h === i
                                        ) {
                                            e >=
                                                this.barCtx.barOptions.colors
                                                    .backgroundBarColors
                                                    .length &&
                                                (e %=
                                                    this.barCtx.barOptions
                                                        .colors
                                                        .backgroundBarColors
                                                        .length);
                                            var d =
                                                    this.barCtx.barOptions
                                                        .colors
                                                        .backgroundBarColors[e],
                                                u = c.drawRect(
                                                    void 0 !== a ? a : 0,
                                                    void 0 !== s ? s : 0,
                                                    void 0 !== r
                                                        ? r
                                                        : l.globals.gridWidth,
                                                    void 0 !== n
                                                        ? n
                                                        : l.globals.gridHeight,
                                                    this.barCtx.barOptions
                                                        .colors
                                                        .backgroundBarRadius,
                                                    d,
                                                    this.barCtx.barOptions
                                                        .colors
                                                        .backgroundBarOpacity
                                                );
                                            o.add(u),
                                                u.node.classList.add(
                                                    "apexcharts-backgroundBar"
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "getColumnPaths",
                                    value: function (t) {
                                        var e,
                                            i = t.barWidth,
                                            a = t.barXPosition,
                                            r = t.y1,
                                            s = t.y2,
                                            n = t.strokeWidth,
                                            o = t.seriesGroup,
                                            l = t.realIndex,
                                            c = t.i,
                                            h = t.j,
                                            d = t.w,
                                            u = new k(this.barCtx.ctx);
                                        (n = Array.isArray(n) ? n[l] : n) ||
                                            (n = 0);
                                        var f = i,
                                            g = a;
                                        null !==
                                            (e = d.config.series[l].data[h]) &&
                                            void 0 !== e &&
                                            e.columnWidthOffset &&
                                            ((g =
                                                a -
                                                d.config.series[l].data[h]
                                                    .columnWidthOffset /
                                                    2),
                                            (f =
                                                i +
                                                d.config.series[l].data[h]
                                                    .columnWidthOffset));
                                        var p = g,
                                            x = g + f;
                                        (r += 0.001), (s += 0.001);
                                        var m = u.move(p, r),
                                            b = u.move(p, r),
                                            v = u.line(x - n, r);
                                        if (
                                            (d.globals.previousPaths.length >
                                                0 &&
                                                (b =
                                                    this.barCtx.getPreviousPath(
                                                        l,
                                                        h,
                                                        !1
                                                    )),
                                            (m =
                                                m +
                                                u.line(p, s) +
                                                u.line(x - n, s) +
                                                u.line(x - n, r) +
                                                ("around" ===
                                                d.config.plotOptions.bar
                                                    .borderRadiusApplication
                                                    ? " Z"
                                                    : " z")),
                                            (b =
                                                b +
                                                u.line(p, r) +
                                                v +
                                                v +
                                                v +
                                                v +
                                                v +
                                                u.line(p, r) +
                                                ("around" ===
                                                d.config.plotOptions.bar
                                                    .borderRadiusApplication
                                                    ? " Z"
                                                    : " z")),
                                            this.shouldApplyRadius(l) &&
                                                (m = u.roundPathCorners(
                                                    m,
                                                    d.config.plotOptions.bar
                                                        .borderRadius
                                                )),
                                            d.config.chart.stacked)
                                        ) {
                                            var y = this.barCtx;
                                            d.globals.hasSeriesGroups &&
                                                o &&
                                                (y = this.barCtx[o]),
                                                y.yArrj.push(s),
                                                y.yArrjF.push(Math.abs(r - s)),
                                                y.yArrjVal.push(
                                                    this.barCtx.series[c][h]
                                                );
                                        }
                                        return { pathTo: m, pathFrom: b };
                                    },
                                },
                                {
                                    key: "getBarpaths",
                                    value: function (t) {
                                        var e,
                                            i = t.barYPosition,
                                            a = t.barHeight,
                                            r = t.x1,
                                            s = t.x2,
                                            n = t.strokeWidth,
                                            o = t.seriesGroup,
                                            l = t.realIndex,
                                            c = t.i,
                                            h = t.j,
                                            d = t.w,
                                            u = new k(this.barCtx.ctx);
                                        (n = Array.isArray(n) ? n[l] : n) ||
                                            (n = 0);
                                        var f = i,
                                            g = a;
                                        null !==
                                            (e = d.config.series[l].data[h]) &&
                                            void 0 !== e &&
                                            e.barHeightOffset &&
                                            ((f =
                                                i -
                                                d.config.series[l].data[h]
                                                    .barHeightOffset /
                                                    2),
                                            (g =
                                                a +
                                                d.config.series[l].data[h]
                                                    .barHeightOffset));
                                        var p = f,
                                            x = f + g;
                                        (r += 0.001), (s += 0.001);
                                        var m = u.move(r, p),
                                            b = u.move(r, p);
                                        d.globals.previousPaths.length > 0 &&
                                            (b = this.barCtx.getPreviousPath(
                                                l,
                                                h,
                                                !1
                                            ));
                                        var v = u.line(r, x - n);
                                        if (
                                            ((m =
                                                m +
                                                u.line(s, p) +
                                                u.line(s, x - n) +
                                                v +
                                                ("around" ===
                                                d.config.plotOptions.bar
                                                    .borderRadiusApplication
                                                    ? " Z"
                                                    : " z")),
                                            (b =
                                                b +
                                                u.line(r, p) +
                                                v +
                                                v +
                                                v +
                                                v +
                                                v +
                                                u.line(r, p) +
                                                ("around" ===
                                                d.config.plotOptions.bar
                                                    .borderRadiusApplication
                                                    ? " Z"
                                                    : " z")),
                                            this.shouldApplyRadius(l) &&
                                                (m = u.roundPathCorners(
                                                    m,
                                                    d.config.plotOptions.bar
                                                        .borderRadius
                                                )),
                                            d.config.chart.stacked)
                                        ) {
                                            var y = this.barCtx;
                                            d.globals.hasSeriesGroups &&
                                                o &&
                                                (y = this.barCtx[o]),
                                                y.xArrj.push(s),
                                                y.xArrjF.push(Math.abs(r - s)),
                                                y.xArrjVal.push(
                                                    this.barCtx.series[c][h]
                                                );
                                        }
                                        return { pathTo: m, pathFrom: b };
                                    },
                                },
                                {
                                    key: "checkZeroSeries",
                                    value: function (t) {
                                        for (
                                            var e = t.series, i = this.w, a = 0;
                                            a < e.length;
                                            a++
                                        ) {
                                            for (
                                                var r = 0, s = 0;
                                                s <
                                                e[i.globals.maxValsInArrayIndex]
                                                    .length;
                                                s++
                                            )
                                                r += e[a][s];
                                            0 === r &&
                                                this.barCtx.zeroSerieses.push(
                                                    a
                                                );
                                        }
                                    },
                                },
                                {
                                    key: "getXForValue",
                                    value: function (t, e) {
                                        var i =
                                            arguments.length > 2 &&
                                            void 0 !== arguments[2] &&
                                            !arguments[2]
                                                ? null
                                                : e;
                                        return (
                                            null != t &&
                                                (i =
                                                    e +
                                                    t /
                                                        this.barCtx
                                                            .invertedYRatio -
                                                    2 *
                                                        (this.barCtx.isReversed
                                                            ? t /
                                                              this.barCtx
                                                                  .invertedYRatio
                                                            : 0)),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "getYForValue",
                                    value: function (t, e) {
                                        var i =
                                            arguments.length > 2 &&
                                            void 0 !== arguments[2] &&
                                            !arguments[2]
                                                ? null
                                                : e;
                                        return (
                                            null != t &&
                                                (i =
                                                    e -
                                                    t /
                                                        this.barCtx.yRatio[
                                                            this.barCtx
                                                                .yaxisIndex
                                                        ] +
                                                    2 *
                                                        (this.barCtx.isReversed
                                                            ? t /
                                                              this.barCtx
                                                                  .yRatio[
                                                                  this.barCtx
                                                                      .yaxisIndex
                                                              ]
                                                            : 0)),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "getGoalValues",
                                    value: function (t, e, i, a, r) {
                                        var n = this,
                                            o = this.w,
                                            l = [],
                                            c = function (a, r) {
                                                var s;
                                                l.push(
                                                    (h(
                                                        (s = {}),
                                                        t,
                                                        "x" === t
                                                            ? n.getXForValue(
                                                                  a,
                                                                  e,
                                                                  !1
                                                              )
                                                            : n.getYForValue(
                                                                  a,
                                                                  i,
                                                                  !1
                                                              )
                                                    ),
                                                    h(s, "attrs", r),
                                                    s)
                                                );
                                            };
                                        if (
                                            (o.globals.seriesGoals[a] &&
                                                o.globals.seriesGoals[a][r] &&
                                                Array.isArray(
                                                    o.globals.seriesGoals[a][r]
                                                ) &&
                                                o.globals.seriesGoals[a][
                                                    r
                                                ].forEach(function (t) {
                                                    c(t.value, t);
                                                }),
                                            this.barCtx.barOptions.isDumbbell &&
                                                o.globals.seriesRange.length)
                                        ) {
                                            var d = this.barCtx.barOptions
                                                    .dumbbellColors
                                                    ? this.barCtx.barOptions
                                                          .dumbbellColors
                                                    : o.globals.colors,
                                                u = {
                                                    strokeHeight:
                                                        "x" === t
                                                            ? 0
                                                            : o.globals.markers
                                                                  .size[a],
                                                    strokeWidth:
                                                        "x" === t
                                                            ? o.globals.markers
                                                                  .size[a]
                                                            : 0,
                                                    strokeDashArray: 0,
                                                    strokeLineCap: "round",
                                                    strokeColor: Array.isArray(
                                                        d[a]
                                                    )
                                                        ? d[a][0]
                                                        : d[a],
                                                };
                                            c(
                                                o.globals.seriesRangeStart[a][
                                                    r
                                                ],
                                                u
                                            ),
                                                c(
                                                    o.globals.seriesRangeEnd[a][
                                                        r
                                                    ],
                                                    s(
                                                        s({}, u),
                                                        {},
                                                        {
                                                            strokeColor:
                                                                Array.isArray(
                                                                    d[a]
                                                                )
                                                                    ? d[a][1]
                                                                    : d[a],
                                                        }
                                                    )
                                                );
                                        }
                                        return l;
                                    },
                                },
                                {
                                    key: "drawGoalLine",
                                    value: function (t) {
                                        var e = t.barXPosition,
                                            i = t.barYPosition,
                                            a = t.goalX,
                                            r = t.goalY,
                                            s = t.barWidth,
                                            n = t.barHeight,
                                            o = new k(this.barCtx.ctx),
                                            l = o.group({
                                                className:
                                                    "apexcharts-bar-goals-groups",
                                            });
                                        l.node.classList.add(
                                            "apexcharts-element-hidden"
                                        ),
                                            this.barCtx.w.globals.delayedElements.push(
                                                { el: l.node }
                                            ),
                                            l.attr(
                                                "clip-path",
                                                "url(#gridRectMarkerMask".concat(
                                                    this.barCtx.w.globals.cuid,
                                                    ")"
                                                )
                                            );
                                        var c = null;
                                        return (
                                            this.barCtx.isHorizontal
                                                ? Array.isArray(a) &&
                                                  a.forEach(function (t) {
                                                      var e =
                                                              void 0 !==
                                                              t.attrs
                                                                  .strokeHeight
                                                                  ? t.attrs
                                                                        .strokeHeight
                                                                  : n / 2,
                                                          a = i + e + n / 2;
                                                      (c = o.drawLine(
                                                          t.x,
                                                          a - 2 * e,
                                                          t.x,
                                                          a,
                                                          t.attrs.strokeColor
                                                              ? t.attrs
                                                                    .strokeColor
                                                              : void 0,
                                                          t.attrs
                                                              .strokeDashArray,
                                                          t.attrs.strokeWidth
                                                              ? t.attrs
                                                                    .strokeWidth
                                                              : 2,
                                                          t.attrs.strokeLineCap
                                                      )),
                                                          l.add(c);
                                                  })
                                                : Array.isArray(r) &&
                                                  r.forEach(function (t) {
                                                      var i =
                                                              void 0 !==
                                                              t.attrs
                                                                  .strokeWidth
                                                                  ? t.attrs
                                                                        .strokeWidth
                                                                  : s / 2,
                                                          a = e + i + s / 2;
                                                      (c = o.drawLine(
                                                          a - 2 * i,
                                                          t.y,
                                                          a,
                                                          t.y,
                                                          t.attrs.strokeColor
                                                              ? t.attrs
                                                                    .strokeColor
                                                              : void 0,
                                                          t.attrs
                                                              .strokeDashArray,
                                                          t.attrs.strokeHeight
                                                              ? t.attrs
                                                                    .strokeHeight
                                                              : 2,
                                                          t.attrs.strokeLineCap
                                                      )),
                                                          l.add(c);
                                                  }),
                                            l
                                        );
                                    },
                                },
                                {
                                    key: "drawBarShadow",
                                    value: function (t) {
                                        var e = t.prevPaths,
                                            i = t.currPaths,
                                            a = t.color,
                                            r = this.w,
                                            s = e.x,
                                            n = e.x1,
                                            o = e.barYPosition,
                                            l = i.x,
                                            c = i.x1,
                                            h = i.barYPosition,
                                            d = o + i.barHeight,
                                            u = new k(this.barCtx.ctx),
                                            f = new v(),
                                            g =
                                                u.move(n, d) +
                                                u.line(s, d) +
                                                u.line(l, h) +
                                                u.line(c, h) +
                                                u.line(n, d) +
                                                ("around" ===
                                                r.config.plotOptions.bar
                                                    .borderRadiusApplication
                                                    ? " Z"
                                                    : " z");
                                        return u.drawPath({
                                            d: g,
                                            fill: f.shadeColor(
                                                0.5,
                                                v.rgb2hex(a)
                                            ),
                                            stroke: "none",
                                            strokeWidth: 0,
                                            fillOpacity: 1,
                                            classes: "apexcharts-bar-shadows",
                                        });
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    At = (function () {
                        function t(e, i) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                            var a = this.w;
                            (this.barOptions = a.config.plotOptions.bar),
                                (this.isHorizontal =
                                    this.barOptions.horizontal),
                                (this.strokeWidth = a.config.stroke.width),
                                (this.isNullValue = !1),
                                (this.isRangeBar =
                                    a.globals.seriesRange.length &&
                                    this.isHorizontal),
                                (this.isVerticalGroupedRangeBar =
                                    !a.globals.isBarHorizontal &&
                                    a.globals.seriesRange.length &&
                                    a.config.plotOptions.bar.rangeBarGroupRows),
                                (this.isFunnel = this.barOptions.isFunnel),
                                (this.xyRatios = i),
                                null !== this.xyRatios &&
                                    ((this.xRatio = i.xRatio),
                                    (this.initialXRatio = i.initialXRatio),
                                    (this.yRatio = i.yRatio),
                                    (this.invertedXRatio = i.invertedXRatio),
                                    (this.invertedYRatio = i.invertedYRatio),
                                    (this.baseLineY = i.baseLineY),
                                    (this.baseLineInvertedY =
                                        i.baseLineInvertedY)),
                                (this.yaxisIndex = 0),
                                (this.seriesLen = 0),
                                (this.pathArr = []);
                            var r = new V(this.ctx);
                            this.lastActiveBarSerieIndex =
                                r.getActiveConfigSeriesIndex("desc", [
                                    "bar",
                                    "column",
                                ]);
                            var s = r.getBarSeriesIndices(),
                                n = new A(this.ctx);
                            (this.stackedSeriesTotals =
                                n.getStackedSeriesTotals(
                                    this.w.config.series
                                        .map(function (t, e) {
                                            return -1 === s.indexOf(e) ? e : -1;
                                        })
                                        .filter(function (t) {
                                            return -1 !== t;
                                        })
                                )),
                                (this.barHelpers = new kt(this));
                        }
                        return (
                            c(t, [
                                {
                                    key: "draw",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = new k(this.ctx),
                                            r = new A(this.ctx, i);
                                        (t = r.getLogSeries(t)),
                                            (this.series = t),
                                            (this.yRatio = r.getLogYRatios(
                                                this.yRatio
                                            )),
                                            this.barHelpers.initVariables(t);
                                        var n = a.group({
                                            class: "apexcharts-bar-series apexcharts-plot-series",
                                        });
                                        i.config.dataLabels.enabled &&
                                            this.totalItems >
                                                this.barOptions.dataLabels
                                                    .maxItems &&
                                            console.warn(
                                                "WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering."
                                            );
                                        for (
                                            var o = 0, l = 0;
                                            o < t.length;
                                            o++, l++
                                        ) {
                                            var c,
                                                h,
                                                d,
                                                u,
                                                f = void 0,
                                                g = void 0,
                                                p = [],
                                                x = [],
                                                m = i.globals.comboCharts
                                                    ? e[o]
                                                    : o,
                                                b = a.group({
                                                    class: "apexcharts-series",
                                                    rel: o + 1,
                                                    seriesName: v.escapeString(
                                                        i.globals.seriesNames[m]
                                                    ),
                                                    "data:realIndex": m,
                                                });
                                            this.ctx.series.addCollapsedClassToSeries(
                                                b,
                                                m
                                            ),
                                                t[o].length > 0 &&
                                                    (this.visibleI =
                                                        this.visibleI + 1);
                                            var y = 0,
                                                w = 0;
                                            this.yRatio.length > 1 &&
                                                (this.yaxisIndex = m),
                                                (this.isReversed =
                                                    i.config.yaxis[
                                                        this.yaxisIndex
                                                    ] &&
                                                    i.config.yaxis[
                                                        this.yaxisIndex
                                                    ].reversed);
                                            var S =
                                                this.barHelpers.initialPositions();
                                            (g = S.y),
                                                (y = S.barHeight),
                                                (h = S.yDivision),
                                                (u = S.zeroW),
                                                (f = S.x),
                                                (w = S.barWidth),
                                                (c = S.xDivision),
                                                (d = S.zeroH),
                                                this.horizontal ||
                                                    x.push(f + w / 2);
                                            var C = a.group({
                                                class: "apexcharts-datalabels",
                                                "data:realIndex": m,
                                            });
                                            i.globals.delayedElements.push({
                                                el: C.node,
                                            }),
                                                C.node.classList.add(
                                                    "apexcharts-element-hidden"
                                                );
                                            var P = a.group({
                                                    class: "apexcharts-bar-goals-markers",
                                                    style: "pointer-events: none",
                                                }),
                                                L = a.group({
                                                    class: "apexcharts-bar-shadows",
                                                    style: "pointer-events: none",
                                                });
                                            i.globals.delayedElements.push({
                                                el: L.node,
                                            }),
                                                L.node.classList.add(
                                                    "apexcharts-element-hidden"
                                                );
                                            for (
                                                var T = 0;
                                                T < i.globals.dataPoints;
                                                T++
                                            ) {
                                                var M =
                                                        this.barHelpers.getStrokeWidth(
                                                            o,
                                                            T,
                                                            m
                                                        ),
                                                    E = null,
                                                    I = {
                                                        indexes: {
                                                            i: o,
                                                            j: T,
                                                            realIndex: m,
                                                            bc: l,
                                                        },
                                                        x: f,
                                                        y: g,
                                                        strokeWidth: M,
                                                        elSeries: b,
                                                    };
                                                this.isHorizontal
                                                    ? ((E = this.drawBarPaths(
                                                          s(
                                                              s({}, I),
                                                              {},
                                                              {
                                                                  barHeight: y,
                                                                  zeroW: u,
                                                                  yDivision: h,
                                                              }
                                                          )
                                                      )),
                                                      (w =
                                                          this.series[o][T] /
                                                          this.invertedYRatio))
                                                    : ((E =
                                                          this.drawColumnPaths(
                                                              s(
                                                                  s({}, I),
                                                                  {},
                                                                  {
                                                                      xDivision:
                                                                          c,
                                                                      barWidth:
                                                                          w,
                                                                      zeroH: d,
                                                                  }
                                                              )
                                                          )),
                                                      (y =
                                                          this.series[o][T] /
                                                          this.yRatio[
                                                              this.yaxisIndex
                                                          ]));
                                                var O =
                                                    this.barHelpers.getPathFillColor(
                                                        t,
                                                        o,
                                                        T,
                                                        m
                                                    );
                                                if (
                                                    this.isFunnel &&
                                                    this.barOptions
                                                        .isFunnel3d &&
                                                    this.pathArr.length &&
                                                    T > 0
                                                ) {
                                                    var z =
                                                        this.barHelpers.drawBarShadow(
                                                            {
                                                                color:
                                                                    "string" ==
                                                                        typeof O &&
                                                                    -1 ===
                                                                        (null ==
                                                                        O
                                                                            ? void 0
                                                                            : O.indexOf(
                                                                                  "url"
                                                                              ))
                                                                        ? O
                                                                        : v.hexToRgba(
                                                                              i
                                                                                  .globals
                                                                                  .colors[
                                                                                  o
                                                                              ]
                                                                          ),
                                                                prevPaths:
                                                                    this
                                                                        .pathArr[
                                                                        this
                                                                            .pathArr
                                                                            .length -
                                                                            1
                                                                    ],
                                                                currPaths: E,
                                                            }
                                                        );
                                                    z && L.add(z);
                                                }
                                                this.pathArr.push(E);
                                                var F =
                                                    this.barHelpers.drawGoalLine(
                                                        {
                                                            barXPosition:
                                                                E.barXPosition,
                                                            barYPosition:
                                                                E.barYPosition,
                                                            goalX: E.goalX,
                                                            goalY: E.goalY,
                                                            barHeight: y,
                                                            barWidth: w,
                                                        }
                                                    );
                                                F && P.add(F),
                                                    (g = E.y),
                                                    (f = E.x),
                                                    T > 0 && x.push(f + w / 2),
                                                    p.push(g),
                                                    this.renderSeries({
                                                        realIndex: m,
                                                        pathFill: O,
                                                        j: T,
                                                        i: o,
                                                        pathFrom: E.pathFrom,
                                                        pathTo: E.pathTo,
                                                        strokeWidth: M,
                                                        elSeries: b,
                                                        x: f,
                                                        y: g,
                                                        series: t,
                                                        barHeight: E.barHeight
                                                            ? E.barHeight
                                                            : y,
                                                        barWidth: E.barWidth
                                                            ? E.barWidth
                                                            : w,
                                                        elDataLabelsWrap: C,
                                                        elGoalsMarkers: P,
                                                        elBarShadows: L,
                                                        visibleSeries:
                                                            this.visibleI,
                                                        type: "bar",
                                                    });
                                            }
                                            (i.globals.seriesXvalues[m] = x),
                                                (i.globals.seriesYvalues[m] =
                                                    p),
                                                n.add(b);
                                        }
                                        return n;
                                    },
                                },
                                {
                                    key: "renderSeries",
                                    value: function (t) {
                                        var e = t.realIndex,
                                            i = t.pathFill,
                                            a = t.lineFill,
                                            r = t.j,
                                            s = t.i,
                                            n = t.groupIndex,
                                            o = t.pathFrom,
                                            l = t.pathTo,
                                            c = t.strokeWidth,
                                            h = t.elSeries,
                                            d = t.x,
                                            u = t.y,
                                            f = t.y1,
                                            g = t.y2,
                                            p = t.series,
                                            x = t.barHeight,
                                            m = t.barWidth,
                                            b = t.barXPosition,
                                            v = t.barYPosition,
                                            y = t.elDataLabelsWrap,
                                            A = t.elGoalsMarkers,
                                            S = t.elBarShadows,
                                            C = t.visibleSeries,
                                            P = t.type,
                                            L = this.w,
                                            T = new k(this.ctx);
                                        a ||
                                            (a = this.barOptions.distributed
                                                ? L.globals.stroke.colors[r]
                                                : L.globals.stroke.colors[e]),
                                            L.config.series[s].data[r] &&
                                                L.config.series[s].data[r]
                                                    .strokeColor &&
                                                (a =
                                                    L.config.series[s].data[r]
                                                        .strokeColor),
                                            this.isNullValue && (i = "none");
                                        var M =
                                                ((r /
                                                    L.config.chart.animations
                                                        .animateGradually
                                                        .delay) *
                                                    (L.config.chart.animations
                                                        .speed /
                                                        L.globals.dataPoints)) /
                                                2.4,
                                            E = T.renderPaths({
                                                i: s,
                                                j: r,
                                                realIndex: e,
                                                pathFrom: o,
                                                pathTo: l,
                                                stroke: a,
                                                strokeWidth: c,
                                                strokeLineCap:
                                                    L.config.stroke.lineCap,
                                                fill: i,
                                                animationDelay: M,
                                                initialSpeed:
                                                    L.config.chart.animations
                                                        .speed,
                                                dataChangeSpeed:
                                                    L.config.chart.animations
                                                        .dynamicAnimation.speed,
                                                className: "apexcharts-".concat(
                                                    P,
                                                    "-area"
                                                ),
                                            });
                                        E.attr(
                                            "clip-path",
                                            "url(#gridRectMask".concat(
                                                L.globals.cuid,
                                                ")"
                                            )
                                        );
                                        var I = L.config.forecastDataPoints;
                                        I.count > 0 &&
                                            r >=
                                                L.globals.dataPoints -
                                                    I.count &&
                                            (E.node.setAttribute(
                                                "stroke-dasharray",
                                                I.dashArray
                                            ),
                                            E.node.setAttribute(
                                                "stroke-width",
                                                I.strokeWidth
                                            ),
                                            E.node.setAttribute(
                                                "fill-opacity",
                                                I.fillOpacity
                                            )),
                                            void 0 !== f &&
                                                void 0 !== g &&
                                                (E.attr("data-range-y1", f),
                                                E.attr("data-range-y2", g)),
                                            new w(this.ctx).setSelectionFilter(
                                                E,
                                                e,
                                                r
                                            ),
                                            h.add(E);
                                        var O = new wt(
                                            this
                                        ).handleBarDataLabels({
                                            x: d,
                                            y: u,
                                            y1: f,
                                            y2: g,
                                            i: s,
                                            j: r,
                                            series: p,
                                            realIndex: e,
                                            groupIndex: n,
                                            barHeight: x,
                                            barWidth: m,
                                            barXPosition: b,
                                            barYPosition: v,
                                            renderedPath: E,
                                            visibleSeries: C,
                                        });
                                        return (
                                            null !== O.dataLabels &&
                                                y.add(O.dataLabels),
                                            O.totalDataLabels &&
                                                y.add(O.totalDataLabels),
                                            h.add(y),
                                            A && h.add(A),
                                            S && h.add(S),
                                            h
                                        );
                                    },
                                },
                                {
                                    key: "drawBarPaths",
                                    value: function (t) {
                                        var e,
                                            i = t.indexes,
                                            a = t.barHeight,
                                            r = t.strokeWidth,
                                            s = t.zeroW,
                                            n = t.x,
                                            o = t.y,
                                            l = t.yDivision,
                                            c = t.elSeries,
                                            h = this.w,
                                            d = i.i,
                                            u = i.j;
                                        if (h.globals.isXNumeric)
                                            e =
                                                (o =
                                                    (h.globals.seriesX[d][u] -
                                                        h.globals.minX) /
                                                        this.invertedXRatio -
                                                    a) +
                                                a * this.visibleI;
                                        else if (
                                            h.config.plotOptions.bar
                                                .hideZeroBarsWhenGrouped
                                        ) {
                                            var f = 0,
                                                g = 0;
                                            h.globals.seriesPercent.forEach(
                                                function (t, e) {
                                                    t[u] && f++,
                                                        e < d &&
                                                            0 === t[u] &&
                                                            g++;
                                                }
                                            ),
                                                f > 0 &&
                                                    (a =
                                                        (this.seriesLen * a) /
                                                        f),
                                                (e = o + a * this.visibleI),
                                                (e -= a * g);
                                        } else e = o + a * this.visibleI;
                                        this.isFunnel &&
                                            (s -=
                                                (this.barHelpers.getXForValue(
                                                    this.series[d][u],
                                                    s
                                                ) -
                                                    s) /
                                                2),
                                            (n = this.barHelpers.getXForValue(
                                                this.series[d][u],
                                                s
                                            ));
                                        var p = this.barHelpers.getBarpaths({
                                            barYPosition: e,
                                            barHeight: a,
                                            x1: s,
                                            x2: n,
                                            strokeWidth: r,
                                            series: this.series,
                                            realIndex: i.realIndex,
                                            i: d,
                                            j: u,
                                            w: h,
                                        });
                                        return (
                                            h.globals.isXNumeric || (o += l),
                                            this.barHelpers.barBackground({
                                                j: u,
                                                i: d,
                                                y1: e - a * this.visibleI,
                                                y2: a * this.seriesLen,
                                                elSeries: c,
                                            }),
                                            {
                                                pathTo: p.pathTo,
                                                pathFrom: p.pathFrom,
                                                x1: s,
                                                x: n,
                                                y: o,
                                                goalX: this.barHelpers.getGoalValues(
                                                    "x",
                                                    s,
                                                    null,
                                                    d,
                                                    u
                                                ),
                                                barYPosition: e,
                                                barHeight: a,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawColumnPaths",
                                    value: function (t) {
                                        var e,
                                            i = t.indexes,
                                            a = t.x,
                                            r = t.y,
                                            s = t.xDivision,
                                            n = t.barWidth,
                                            o = t.zeroH,
                                            l = t.strokeWidth,
                                            c = t.elSeries,
                                            h = this.w,
                                            d = i.realIndex,
                                            u = i.i,
                                            f = i.j,
                                            g = i.bc;
                                        if (h.globals.isXNumeric) {
                                            var p = d;
                                            h.globals.seriesX[d].length ||
                                                (p =
                                                    h.globals
                                                        .maxValsInArrayIndex),
                                                h.globals.seriesX[p][f] &&
                                                    (a =
                                                        (h.globals.seriesX[p][
                                                            f
                                                        ] -
                                                            h.globals.minX) /
                                                            this.xRatio -
                                                        (n * this.seriesLen) /
                                                            2),
                                                (e = a + n * this.visibleI);
                                        } else if (
                                            h.config.plotOptions.bar
                                                .hideZeroBarsWhenGrouped
                                        ) {
                                            var x = 0,
                                                m = 0;
                                            h.globals.seriesPercent.forEach(
                                                function (t, e) {
                                                    t[f] && x++,
                                                        e < u &&
                                                            0 === t[f] &&
                                                            m++;
                                                }
                                            ),
                                                x > 0 &&
                                                    (n =
                                                        (this.seriesLen * n) /
                                                        x),
                                                (e = a + n * this.visibleI),
                                                (e -= n * m);
                                        } else e = a + n * this.visibleI;
                                        r = this.barHelpers.getYForValue(
                                            this.series[u][f],
                                            o
                                        );
                                        var b = this.barHelpers.getColumnPaths({
                                            barXPosition: e,
                                            barWidth: n,
                                            y1: o,
                                            y2: r,
                                            strokeWidth: l,
                                            series: this.series,
                                            realIndex: i.realIndex,
                                            i: u,
                                            j: f,
                                            w: h,
                                        });
                                        return (
                                            h.globals.isXNumeric || (a += s),
                                            this.barHelpers.barBackground({
                                                bc: g,
                                                j: f,
                                                i: u,
                                                x1:
                                                    e -
                                                    l / 2 -
                                                    n * this.visibleI,
                                                x2: n * this.seriesLen + l / 2,
                                                elSeries: c,
                                            }),
                                            {
                                                pathTo: b.pathTo,
                                                pathFrom: b.pathFrom,
                                                x: a,
                                                y: r,
                                                goalY: this.barHelpers.getGoalValues(
                                                    "y",
                                                    null,
                                                    o,
                                                    u,
                                                    f
                                                ),
                                                barXPosition: e,
                                                barWidth: n,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "getPreviousPath",
                                    value: function (t, e) {
                                        for (
                                            var i, a = this.w, r = 0;
                                            r < a.globals.previousPaths.length;
                                            r++
                                        ) {
                                            var s = a.globals.previousPaths[r];
                                            s.paths &&
                                                s.paths.length > 0 &&
                                                parseInt(s.realIndex, 10) ===
                                                    parseInt(t, 10) &&
                                                void 0 !==
                                                    a.globals.previousPaths[r]
                                                        .paths[e] &&
                                                (i =
                                                    a.globals.previousPaths[r]
                                                        .paths[e].d);
                                        }
                                        return i;
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    St = (function (t) {
                        d(i, At);
                        var e = g(i);
                        function i() {
                            return o(this, i), e.apply(this, arguments);
                        }
                        return (
                            c(i, [
                                {
                                    key: "draw",
                                    value: function (t, e) {
                                        var i = this,
                                            a = this.w;
                                        (this.graphics = new k(this.ctx)),
                                            (this.bar = new At(
                                                this.ctx,
                                                this.xyRatios
                                            ));
                                        var r = new A(this.ctx, a);
                                        (t = r.getLogSeries(t)),
                                            (this.yRatio = r.getLogYRatios(
                                                this.yRatio
                                            )),
                                            this.barHelpers.initVariables(t),
                                            "100%" ===
                                                a.config.chart.stackType &&
                                                (t =
                                                    a.globals.seriesPercent.slice()),
                                            (this.series = t),
                                            this.barHelpers.initializeStackedPrevVars(
                                                this
                                            );
                                        for (
                                            var n = this.graphics.group({
                                                    class: "apexcharts-bar-series apexcharts-plot-series",
                                                }),
                                                o = 0,
                                                l = 0,
                                                c = function (r, c) {
                                                    var h = void 0,
                                                        d = void 0,
                                                        u = void 0,
                                                        f = void 0,
                                                        g = -1;
                                                    (i.groupCtx = i),
                                                        a.globals.seriesGroups.forEach(
                                                            function (t, e) {
                                                                t.indexOf(
                                                                    a.config
                                                                        .series[
                                                                        r
                                                                    ].name
                                                                ) > -1 &&
                                                                    (g = e);
                                                            }
                                                        ),
                                                        -1 !== g &&
                                                            (i.groupCtx =
                                                                i[
                                                                    a.globals.seriesGroups[
                                                                        g
                                                                    ]
                                                                ]);
                                                    var p = [],
                                                        x = [],
                                                        m = a.globals
                                                            .comboCharts
                                                            ? e[r]
                                                            : r;
                                                    i.yRatio.length > 1 &&
                                                        (i.yaxisIndex = m),
                                                        (i.isReversed =
                                                            a.config.yaxis[
                                                                i.yaxisIndex
                                                            ] &&
                                                            a.config.yaxis[
                                                                i.yaxisIndex
                                                            ].reversed);
                                                    var b = i.graphics.group({
                                                        class: "apexcharts-series",
                                                        seriesName:
                                                            v.escapeString(
                                                                a.globals
                                                                    .seriesNames[
                                                                    m
                                                                ]
                                                            ),
                                                        rel: r + 1,
                                                        "data:realIndex": m,
                                                    });
                                                    i.ctx.series.addCollapsedClassToSeries(
                                                        b,
                                                        m
                                                    );
                                                    var y = i.graphics.group({
                                                            class: "apexcharts-datalabels",
                                                            "data:realIndex": m,
                                                        }),
                                                        w = i.graphics.group({
                                                            class: "apexcharts-bar-goals-markers",
                                                            style: "pointer-events: none",
                                                        }),
                                                        k = 0,
                                                        A = 0,
                                                        S = i.initialPositions(
                                                            o,
                                                            l,
                                                            h,
                                                            d,
                                                            u,
                                                            f
                                                        );
                                                    (l = S.y),
                                                        (k = S.barHeight),
                                                        (d = S.yDivision),
                                                        (f = S.zeroW),
                                                        (o = S.x),
                                                        (A = S.barWidth),
                                                        (h = S.xDivision),
                                                        (u = S.zeroH),
                                                        i.barHelpers.initializeStackedXYVars(
                                                            i
                                                        ),
                                                        1 ===
                                                            i.groupCtx.prevY
                                                                .length &&
                                                            i.groupCtx.prevY[0].every(
                                                                function (t) {
                                                                    return isNaN(
                                                                        t
                                                                    );
                                                                }
                                                            ) &&
                                                            ((i.groupCtx.prevY[0] =
                                                                i.groupCtx.prevY[0].map(
                                                                    function (
                                                                        t
                                                                    ) {
                                                                        return u;
                                                                    }
                                                                )),
                                                            (i.groupCtx.prevYF[0] =
                                                                i.groupCtx.prevYF[0].map(
                                                                    function (
                                                                        t
                                                                    ) {
                                                                        return 0;
                                                                    }
                                                                )));
                                                    for (
                                                        var C = 0;
                                                        C <
                                                        a.globals.dataPoints;
                                                        C++
                                                    ) {
                                                        var P =
                                                                i.barHelpers.getStrokeWidth(
                                                                    r,
                                                                    C,
                                                                    m
                                                                ),
                                                            L = {
                                                                indexes: {
                                                                    i: r,
                                                                    j: C,
                                                                    realIndex:
                                                                        m,
                                                                    bc: c,
                                                                },
                                                                strokeWidth: P,
                                                                x: o,
                                                                y: l,
                                                                elSeries: b,
                                                                groupIndex: g,
                                                                seriesGroup:
                                                                    a.globals
                                                                        .seriesGroups[
                                                                        g
                                                                    ],
                                                            },
                                                            T = null;
                                                        i.isHorizontal
                                                            ? ((T =
                                                                  i.drawStackedBarPaths(
                                                                      s(
                                                                          s(
                                                                              {},
                                                                              L
                                                                          ),
                                                                          {},
                                                                          {
                                                                              zeroW: f,
                                                                              barHeight:
                                                                                  k,
                                                                              yDivision:
                                                                                  d,
                                                                          }
                                                                      )
                                                                  )),
                                                              (A =
                                                                  i.series[r][
                                                                      C
                                                                  ] /
                                                                  i.invertedYRatio))
                                                            : ((T =
                                                                  i.drawStackedColumnPaths(
                                                                      s(
                                                                          s(
                                                                              {},
                                                                              L
                                                                          ),
                                                                          {},
                                                                          {
                                                                              xDivision:
                                                                                  h,
                                                                              barWidth:
                                                                                  A,
                                                                              zeroH: u,
                                                                          }
                                                                      )
                                                                  )),
                                                              (k =
                                                                  i.series[r][
                                                                      C
                                                                  ] /
                                                                  i.yRatio[
                                                                      i
                                                                          .yaxisIndex
                                                                  ]));
                                                        var M =
                                                            i.barHelpers.drawGoalLine(
                                                                {
                                                                    barXPosition:
                                                                        T.barXPosition,
                                                                    barYPosition:
                                                                        T.barYPosition,
                                                                    goalX: T.goalX,
                                                                    goalY: T.goalY,
                                                                    barHeight:
                                                                        k,
                                                                    barWidth: A,
                                                                }
                                                            );
                                                        M && w.add(M),
                                                            (l = T.y),
                                                            (o = T.x),
                                                            p.push(o),
                                                            x.push(l);
                                                        var E =
                                                            i.barHelpers.getPathFillColor(
                                                                t,
                                                                r,
                                                                C,
                                                                m
                                                            );
                                                        b = i.renderSeries({
                                                            realIndex: m,
                                                            pathFill: E,
                                                            j: C,
                                                            i: r,
                                                            groupIndex: g,
                                                            pathFrom:
                                                                T.pathFrom,
                                                            pathTo: T.pathTo,
                                                            strokeWidth: P,
                                                            elSeries: b,
                                                            x: o,
                                                            y: l,
                                                            series: t,
                                                            barHeight: k,
                                                            barWidth: A,
                                                            elDataLabelsWrap: y,
                                                            elGoalsMarkers: w,
                                                            type: "bar",
                                                            visibleSeries: 0,
                                                        });
                                                    }
                                                    (a.globals.seriesXvalues[
                                                        m
                                                    ] = p),
                                                        (a.globals.seriesYvalues[
                                                            m
                                                        ] = x),
                                                        i.groupCtx.prevY.push(
                                                            i.groupCtx.yArrj
                                                        ),
                                                        i.groupCtx.prevYF.push(
                                                            i.groupCtx.yArrjF
                                                        ),
                                                        i.groupCtx.prevYVal.push(
                                                            i.groupCtx.yArrjVal
                                                        ),
                                                        i.groupCtx.prevX.push(
                                                            i.groupCtx.xArrj
                                                        ),
                                                        i.groupCtx.prevXF.push(
                                                            i.groupCtx.xArrjF
                                                        ),
                                                        i.groupCtx.prevXVal.push(
                                                            i.groupCtx.xArrjVal
                                                        ),
                                                        n.add(b);
                                                },
                                                h = 0,
                                                d = 0;
                                            h < t.length;
                                            h++, d++
                                        )
                                            c(h, d);
                                        return n;
                                    },
                                },
                                {
                                    key: "initialPositions",
                                    value: function (t, e, i, a, r, s) {
                                        var n,
                                            o,
                                            l,
                                            c,
                                            h = this.w;
                                        return (
                                            this.isHorizontal
                                                ? ((l =
                                                      ((l = a =
                                                          h.globals.gridHeight /
                                                          h.globals
                                                              .dataPoints) *
                                                          parseInt(
                                                              h.config
                                                                  .plotOptions
                                                                  .bar
                                                                  .barHeight,
                                                              10
                                                          )) /
                                                      100),
                                                  -1 ===
                                                      String(
                                                          h.config.plotOptions
                                                              .bar.barHeight
                                                      ).indexOf("%") &&
                                                      (l = parseInt(
                                                          h.config.plotOptions
                                                              .bar.barHeight,
                                                          10
                                                      )),
                                                  (s =
                                                      this.baseLineInvertedY +
                                                      h.globals.padHorizontal +
                                                      (this.isReversed
                                                          ? h.globals.gridWidth
                                                          : 0) -
                                                      (this.isReversed
                                                          ? 2 *
                                                            this
                                                                .baseLineInvertedY
                                                          : 0)),
                                                  (e = (a - l) / 2))
                                                : ((c = i =
                                                      h.globals.gridWidth /
                                                      h.globals.dataPoints),
                                                  (c =
                                                      h.globals.isXNumeric &&
                                                      h.globals.dataPoints > 1
                                                          ? ((i =
                                                                h.globals
                                                                    .minXDiff /
                                                                this.xRatio) *
                                                                parseInt(
                                                                    this
                                                                        .barOptions
                                                                        .columnWidth,
                                                                    10
                                                                )) /
                                                            100
                                                          : (c *
                                                                parseInt(
                                                                    h.config
                                                                        .plotOptions
                                                                        .bar
                                                                        .columnWidth,
                                                                    10
                                                                )) /
                                                            100),
                                                  -1 ===
                                                      String(
                                                          h.config.plotOptions
                                                              .bar.columnWidth
                                                      ).indexOf("%") &&
                                                      (c = parseInt(
                                                          h.config.plotOptions
                                                              .bar.columnWidth,
                                                          10
                                                      )),
                                                  (r =
                                                      h.globals.gridHeight -
                                                      this.baseLineY[
                                                          this.yaxisIndex
                                                      ] -
                                                      (this.isReversed
                                                          ? h.globals.gridHeight
                                                          : 0) +
                                                      (this.isReversed
                                                          ? 2 *
                                                            this.baseLineY[
                                                                this.yaxisIndex
                                                            ]
                                                          : 0)),
                                                  (t =
                                                      h.globals.padHorizontal +
                                                      (i - c) / 2)),
                                            {
                                                x: t,
                                                y: e,
                                                yDivision: a,
                                                xDivision: i,
                                                barHeight:
                                                    null !==
                                                        (n =
                                                            h.globals
                                                                .seriesGroups) &&
                                                    void 0 !== n &&
                                                    n.length
                                                        ? l /
                                                          h.globals.seriesGroups
                                                              .length
                                                        : l,
                                                barWidth:
                                                    null !==
                                                        (o =
                                                            h.globals
                                                                .seriesGroups) &&
                                                    void 0 !== o &&
                                                    o.length
                                                        ? c /
                                                          h.globals.seriesGroups
                                                              .length
                                                        : c,
                                                zeroH: r,
                                                zeroW: s,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawStackedBarPaths",
                                    value: function (t) {
                                        for (
                                            var e,
                                                i = t.indexes,
                                                a = t.barHeight,
                                                r = t.strokeWidth,
                                                s = t.zeroW,
                                                n = t.x,
                                                o = t.y,
                                                l = t.groupIndex,
                                                c = t.seriesGroup,
                                                h = t.yDivision,
                                                d = t.elSeries,
                                                u = this.w,
                                                f = o + (-1 !== l ? l * a : 0),
                                                g = i.i,
                                                p = i.j,
                                                x = 0,
                                                m = 0;
                                            m < this.groupCtx.prevXF.length;
                                            m++
                                        )
                                            x += this.groupCtx.prevXF[m][p];
                                        var b = g;
                                        if (
                                            (c &&
                                                (b = c.indexOf(
                                                    u.config.series[g].name
                                                )),
                                            b > 0)
                                        ) {
                                            var v = s;
                                            this.groupCtx.prevXVal[b - 1][p] < 0
                                                ? (v =
                                                      this.series[g][p] >= 0
                                                          ? this.groupCtx.prevX[
                                                                b - 1
                                                            ][p] +
                                                            x -
                                                            2 *
                                                                (this.isReversed
                                                                    ? x
                                                                    : 0)
                                                          : this.groupCtx.prevX[
                                                                b - 1
                                                            ][p])
                                                : this.groupCtx.prevXVal[b - 1][
                                                      p
                                                  ] >= 0 &&
                                                  (v =
                                                      this.series[g][p] >= 0
                                                          ? this.groupCtx.prevX[
                                                                b - 1
                                                            ][p]
                                                          : this.groupCtx.prevX[
                                                                b - 1
                                                            ][p] -
                                                            x +
                                                            2 *
                                                                (this.isReversed
                                                                    ? x
                                                                    : 0)),
                                                (e = v);
                                        } else e = s;
                                        n =
                                            null === this.series[g][p]
                                                ? e
                                                : e +
                                                  this.series[g][p] /
                                                      this.invertedYRatio -
                                                  2 *
                                                      (this.isReversed
                                                          ? this.series[g][p] /
                                                            this.invertedYRatio
                                                          : 0);
                                        var y = this.barHelpers.getBarpaths({
                                            barYPosition: f,
                                            barHeight: a,
                                            x1: e,
                                            x2: n,
                                            strokeWidth: r,
                                            series: this.series,
                                            realIndex: i.realIndex,
                                            seriesGroup: c,
                                            i: g,
                                            j: p,
                                            w: u,
                                        });
                                        return (
                                            this.barHelpers.barBackground({
                                                j: p,
                                                i: g,
                                                y1: f,
                                                y2: a,
                                                elSeries: d,
                                            }),
                                            (o += h),
                                            {
                                                pathTo: y.pathTo,
                                                pathFrom: y.pathFrom,
                                                goalX: this.barHelpers.getGoalValues(
                                                    "x",
                                                    s,
                                                    null,
                                                    g,
                                                    p
                                                ),
                                                barYPosition: f,
                                                x: n,
                                                y: o,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawStackedColumnPaths",
                                    value: function (t) {
                                        var e = t.indexes,
                                            i = t.x,
                                            a = t.y,
                                            r = t.xDivision,
                                            s = t.barWidth,
                                            n = t.zeroH,
                                            o = t.groupIndex,
                                            l = t.seriesGroup,
                                            c = t.elSeries,
                                            h = this.w,
                                            d = e.i,
                                            u = e.j,
                                            f = e.bc;
                                        if (h.globals.isXNumeric) {
                                            var g = h.globals.seriesX[d][u];
                                            g || (g = 0),
                                                (i =
                                                    (g - h.globals.minX) /
                                                        this.xRatio -
                                                    s / 2),
                                                h.globals.seriesGroups.length &&
                                                    (i =
                                                        (g - h.globals.minX) /
                                                            this.xRatio -
                                                        (s / 2) *
                                                            h.globals
                                                                .seriesGroups
                                                                .length);
                                        }
                                        for (
                                            var p,
                                                x = i + (-1 !== o ? o * s : 0),
                                                m = 0,
                                                b = 0;
                                            b < this.groupCtx.prevYF.length;
                                            b++
                                        )
                                            m += isNaN(
                                                this.groupCtx.prevYF[b][u]
                                            )
                                                ? 0
                                                : this.groupCtx.prevYF[b][u];
                                        var v = d;
                                        if (
                                            (l &&
                                                (v = l.indexOf(
                                                    h.config.series[d].name
                                                )),
                                            (v > 0 && !h.globals.isXNumeric) ||
                                                (v > 0 &&
                                                    h.globals.isXNumeric &&
                                                    h.globals.seriesX[d - 1][
                                                        u
                                                    ] ===
                                                        h.globals.seriesX[d][
                                                            u
                                                        ]))
                                        ) {
                                            var y,
                                                w,
                                                k,
                                                A = Math.min(
                                                    this.yRatio.length + 1,
                                                    d + 1
                                                );
                                            if (
                                                void 0 !==
                                                    this.groupCtx.prevY[
                                                        v - 1
                                                    ] &&
                                                this.groupCtx.prevY[v - 1]
                                                    .length
                                            )
                                                for (var S = 1; S < A; S++) {
                                                    var C;
                                                    if (
                                                        !isNaN(
                                                            null ===
                                                                (C =
                                                                    this
                                                                        .groupCtx
                                                                        .prevY[
                                                                        v - S
                                                                    ]) ||
                                                                void 0 === C
                                                                ? void 0
                                                                : C[u]
                                                        )
                                                    ) {
                                                        k =
                                                            this.groupCtx.prevY[
                                                                v - S
                                                            ][u];
                                                        break;
                                                    }
                                                }
                                            for (var P = 1; P < A; P++) {
                                                var L, T;
                                                if (
                                                    (null ===
                                                        (L =
                                                            this.groupCtx
                                                                .prevYVal[
                                                                v - P
                                                            ]) || void 0 === L
                                                        ? void 0
                                                        : L[u]) < 0
                                                ) {
                                                    w =
                                                        this.series[d][u] >= 0
                                                            ? k -
                                                              m +
                                                              2 *
                                                                  (this
                                                                      .isReversed
                                                                      ? m
                                                                      : 0)
                                                            : k;
                                                    break;
                                                }
                                                if (
                                                    (null ===
                                                        (T =
                                                            this.groupCtx
                                                                .prevYVal[
                                                                v - P
                                                            ]) || void 0 === T
                                                        ? void 0
                                                        : T[u]) >= 0
                                                ) {
                                                    w =
                                                        this.series[d][u] >= 0
                                                            ? k
                                                            : k +
                                                              m -
                                                              2 *
                                                                  (this
                                                                      .isReversed
                                                                      ? m
                                                                      : 0);
                                                    break;
                                                }
                                            }
                                            void 0 === w &&
                                                (w = h.globals.gridHeight),
                                                (p =
                                                    null !==
                                                        (y =
                                                            this.groupCtx
                                                                .prevYF[0]) &&
                                                    void 0 !== y &&
                                                    y.every(function (t) {
                                                        return 0 === t;
                                                    }) &&
                                                    this.groupCtx.prevYF
                                                        .slice(1, v)
                                                        .every(function (t) {
                                                            return t.every(
                                                                function (t) {
                                                                    return isNaN(
                                                                        t
                                                                    );
                                                                }
                                                            );
                                                        })
                                                        ? n
                                                        : w);
                                        } else p = n;
                                        a = this.series[d][u]
                                            ? p -
                                              this.series[d][u] /
                                                  this.yRatio[this.yaxisIndex] +
                                              2 *
                                                  (this.isReversed
                                                      ? this.series[d][u] /
                                                        this.yRatio[
                                                            this.yaxisIndex
                                                        ]
                                                      : 0)
                                            : p;
                                        var M = this.barHelpers.getColumnPaths({
                                            barXPosition: x,
                                            barWidth: s,
                                            y1: p,
                                            y2: a,
                                            yRatio: this.yRatio[
                                                this.yaxisIndex
                                            ],
                                            strokeWidth: this.strokeWidth,
                                            series: this.series,
                                            seriesGroup: l,
                                            realIndex: e.realIndex,
                                            i: d,
                                            j: u,
                                            w: h,
                                        });
                                        return (
                                            this.barHelpers.barBackground({
                                                bc: f,
                                                j: u,
                                                i: d,
                                                x1: x,
                                                x2: s,
                                                elSeries: c,
                                            }),
                                            (i += r),
                                            {
                                                pathTo: M.pathTo,
                                                pathFrom: M.pathFrom,
                                                goalY: this.barHelpers.getGoalValues(
                                                    "y",
                                                    null,
                                                    n,
                                                    d,
                                                    u
                                                ),
                                                barXPosition: x,
                                                x: h.globals.isXNumeric
                                                    ? i - r
                                                    : i,
                                                y: a,
                                            }
                                        );
                                    },
                                },
                            ]),
                            i
                        );
                    })(),
                    Ct = (function (t) {
                        d(i, At);
                        var e = g(i);
                        function i() {
                            return o(this, i), e.apply(this, arguments);
                        }
                        return (
                            c(i, [
                                {
                                    key: "draw",
                                    value: function (t, e, i) {
                                        var a = this,
                                            r = this.w,
                                            n = new k(this.ctx),
                                            o = r.globals.comboCharts
                                                ? e
                                                : r.config.chart.type,
                                            l = new Y(this.ctx);
                                        (this.candlestickOptions =
                                            this.w.config.plotOptions.candlestick),
                                            (this.boxOptions =
                                                this.w.config.plotOptions.boxPlot),
                                            (this.isHorizontal =
                                                r.config.plotOptions.bar.horizontal);
                                        var c = new A(this.ctx, r);
                                        (t = c.getLogSeries(t)),
                                            (this.series = t),
                                            (this.yRatio = c.getLogYRatios(
                                                this.yRatio
                                            )),
                                            this.barHelpers.initVariables(t);
                                        for (
                                            var h = n.group({
                                                    class: "apexcharts-".concat(
                                                        o,
                                                        "-series apexcharts-plot-series"
                                                    ),
                                                }),
                                                d = function (e) {
                                                    a.isBoxPlot =
                                                        "boxPlot" ===
                                                            r.config.chart
                                                                .type ||
                                                        "boxPlot" ===
                                                            r.config.series[e]
                                                                .type;
                                                    var o,
                                                        c,
                                                        d,
                                                        u,
                                                        f,
                                                        g,
                                                        p = void 0,
                                                        x = void 0,
                                                        m = [],
                                                        b = [],
                                                        y = r.globals
                                                            .comboCharts
                                                            ? i[e]
                                                            : e,
                                                        w = n.group({
                                                            class: "apexcharts-series",
                                                            seriesName:
                                                                v.escapeString(
                                                                    r.globals
                                                                        .seriesNames[
                                                                        y
                                                                    ]
                                                                ),
                                                            rel: e + 1,
                                                            "data:realIndex": y,
                                                        });
                                                    a.ctx.series.addCollapsedClassToSeries(
                                                        w,
                                                        y
                                                    ),
                                                        t[e].length > 0 &&
                                                            (a.visibleI =
                                                                a.visibleI + 1),
                                                        a.yRatio.length > 1 &&
                                                            (a.yaxisIndex = y);
                                                    var k =
                                                        a.barHelpers.initialPositions();
                                                    (x = k.y),
                                                        (f = k.barHeight),
                                                        (c = k.yDivision),
                                                        (u = k.zeroW),
                                                        (p = k.x),
                                                        (g = k.barWidth),
                                                        (o = k.xDivision),
                                                        (d = k.zeroH),
                                                        b.push(p + g / 2);
                                                    for (
                                                        var A = n.group({
                                                                class: "apexcharts-datalabels",
                                                                "data:realIndex":
                                                                    y,
                                                            }),
                                                            S = function (i) {
                                                                var n =
                                                                        a.barHelpers.getStrokeWidth(
                                                                            e,
                                                                            i,
                                                                            y
                                                                        ),
                                                                    h = null,
                                                                    v = {
                                                                        indexes:
                                                                            {
                                                                                i: e,
                                                                                j: i,
                                                                                realIndex:
                                                                                    y,
                                                                            },
                                                                        x: p,
                                                                        y: x,
                                                                        strokeWidth:
                                                                            n,
                                                                        elSeries:
                                                                            w,
                                                                    };
                                                                (h =
                                                                    a.isHorizontal
                                                                        ? a.drawHorizontalBoxPaths(
                                                                              s(
                                                                                  s(
                                                                                      {},
                                                                                      v
                                                                                  ),
                                                                                  {},
                                                                                  {
                                                                                      yDivision:
                                                                                          c,
                                                                                      barHeight:
                                                                                          f,
                                                                                      zeroW: u,
                                                                                  }
                                                                              )
                                                                          )
                                                                        : a.drawVerticalBoxPaths(
                                                                              s(
                                                                                  s(
                                                                                      {},
                                                                                      v
                                                                                  ),
                                                                                  {},
                                                                                  {
                                                                                      xDivision:
                                                                                          o,
                                                                                      barWidth:
                                                                                          g,
                                                                                      zeroH: d,
                                                                                  }
                                                                              )
                                                                          )),
                                                                    (x = h.y),
                                                                    (p = h.x),
                                                                    i > 0 &&
                                                                        b.push(
                                                                            p +
                                                                                g /
                                                                                    2
                                                                        ),
                                                                    m.push(x),
                                                                    h.pathTo.forEach(
                                                                        function (
                                                                            s,
                                                                            o
                                                                        ) {
                                                                            var c =
                                                                                    !a.isBoxPlot &&
                                                                                    a
                                                                                        .candlestickOptions
                                                                                        .wick
                                                                                        .useFillColor
                                                                                        ? h
                                                                                              .color[
                                                                                              o
                                                                                          ]
                                                                                        : r
                                                                                              .globals
                                                                                              .stroke
                                                                                              .colors[
                                                                                              e
                                                                                          ],
                                                                                d =
                                                                                    l.fillPath(
                                                                                        {
                                                                                            seriesNumber:
                                                                                                y,
                                                                                            dataPointIndex:
                                                                                                i,
                                                                                            color: h
                                                                                                .color[
                                                                                                o
                                                                                            ],
                                                                                            value: t[
                                                                                                e
                                                                                            ][
                                                                                                i
                                                                                            ],
                                                                                        }
                                                                                    );
                                                                            a.renderSeries(
                                                                                {
                                                                                    realIndex:
                                                                                        y,
                                                                                    pathFill:
                                                                                        d,
                                                                                    lineFill:
                                                                                        c,
                                                                                    j: i,
                                                                                    i: e,
                                                                                    pathFrom:
                                                                                        h.pathFrom,
                                                                                    pathTo: s,
                                                                                    strokeWidth:
                                                                                        n,
                                                                                    elSeries:
                                                                                        w,
                                                                                    x: p,
                                                                                    y: x,
                                                                                    series: t,
                                                                                    barHeight:
                                                                                        f,
                                                                                    barWidth:
                                                                                        g,
                                                                                    elDataLabelsWrap:
                                                                                        A,
                                                                                    visibleSeries:
                                                                                        a.visibleI,
                                                                                    type: r
                                                                                        .config
                                                                                        .chart
                                                                                        .type,
                                                                                }
                                                                            );
                                                                        }
                                                                    );
                                                            },
                                                            C = 0;
                                                        C <
                                                        r.globals.dataPoints;
                                                        C++
                                                    )
                                                        S(C);
                                                    (r.globals.seriesXvalues[
                                                        y
                                                    ] = b),
                                                        (r.globals.seriesYvalues[
                                                            y
                                                        ] = m),
                                                        h.add(w);
                                                },
                                                u = 0;
                                            u < t.length;
                                            u++
                                        )
                                            d(u);
                                        return h;
                                    },
                                },
                                {
                                    key: "drawVerticalBoxPaths",
                                    value: function (t) {
                                        var e = t.indexes,
                                            i = t.x;
                                        t.y;
                                        var a = t.xDivision,
                                            r = t.barWidth,
                                            s = t.zeroH,
                                            n = t.strokeWidth,
                                            o = this.w,
                                            l = new k(this.ctx),
                                            c = e.i,
                                            h = e.j,
                                            d = !0,
                                            u =
                                                o.config.plotOptions.candlestick
                                                    .colors.upward,
                                            f =
                                                o.config.plotOptions.candlestick
                                                    .colors.downward,
                                            g = "";
                                        this.isBoxPlot &&
                                            (g = [
                                                this.boxOptions.colors.lower,
                                                this.boxOptions.colors.upper,
                                            ]);
                                        var p = this.yRatio[this.yaxisIndex],
                                            x = e.realIndex,
                                            m = this.getOHLCValue(x, h),
                                            b = s,
                                            v = s;
                                        m.o > m.c && (d = !1);
                                        var y = Math.min(m.o, m.c),
                                            w = Math.max(m.o, m.c),
                                            A = m.m;
                                        o.globals.isXNumeric &&
                                            (i =
                                                (o.globals.seriesX[x][h] -
                                                    o.globals.minX) /
                                                    this.xRatio -
                                                r / 2);
                                        var S = i + r * this.visibleI;
                                        void 0 === this.series[c][h] ||
                                        null === this.series[c][h]
                                            ? ((y = s), (w = s))
                                            : ((y = s - y / p),
                                              (w = s - w / p),
                                              (b = s - m.h / p),
                                              (v = s - m.l / p),
                                              (A = s - m.m / p));
                                        var C = l.move(S, s),
                                            P = l.move(S + r / 2, y);
                                        return (
                                            o.globals.previousPaths.length >
                                                0 &&
                                                (P = this.getPreviousPath(
                                                    x,
                                                    h,
                                                    !0
                                                )),
                                            (C = this.isBoxPlot
                                                ? [
                                                      l.move(S, y) +
                                                          l.line(S + r / 2, y) +
                                                          l.line(S + r / 2, b) +
                                                          l.line(S + r / 4, b) +
                                                          l.line(
                                                              S + r - r / 4,
                                                              b
                                                          ) +
                                                          l.line(S + r / 2, b) +
                                                          l.line(S + r / 2, y) +
                                                          l.line(S + r, y) +
                                                          l.line(S + r, A) +
                                                          l.line(S, A) +
                                                          l.line(S, y + n / 2),
                                                      l.move(S, A) +
                                                          l.line(S + r, A) +
                                                          l.line(S + r, w) +
                                                          l.line(S + r / 2, w) +
                                                          l.line(S + r / 2, v) +
                                                          l.line(
                                                              S + r - r / 4,
                                                              v
                                                          ) +
                                                          l.line(S + r / 4, v) +
                                                          l.line(S + r / 2, v) +
                                                          l.line(S + r / 2, w) +
                                                          l.line(S, w) +
                                                          l.line(S, A) +
                                                          "z",
                                                  ]
                                                : [
                                                      l.move(S, w) +
                                                          l.line(S + r / 2, w) +
                                                          l.line(S + r / 2, b) +
                                                          l.line(S + r / 2, w) +
                                                          l.line(S + r, w) +
                                                          l.line(S + r, y) +
                                                          l.line(S + r / 2, y) +
                                                          l.line(S + r / 2, v) +
                                                          l.line(S + r / 2, y) +
                                                          l.line(S, y) +
                                                          l.line(S, w - n / 2),
                                                  ]),
                                            (P += l.move(S, y)),
                                            o.globals.isXNumeric || (i += a),
                                            {
                                                pathTo: C,
                                                pathFrom: P,
                                                x: i,
                                                y: w,
                                                barXPosition: S,
                                                color: this.isBoxPlot
                                                    ? g
                                                    : d
                                                    ? [u]
                                                    : [f],
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawHorizontalBoxPaths",
                                    value: function (t) {
                                        var e = t.indexes;
                                        t.x;
                                        var i = t.y,
                                            a = t.yDivision,
                                            r = t.barHeight,
                                            s = t.zeroW,
                                            n = t.strokeWidth,
                                            o = this.w,
                                            l = new k(this.ctx),
                                            c = e.i,
                                            h = e.j,
                                            d = this.boxOptions.colors.lower;
                                        this.isBoxPlot &&
                                            (d = [
                                                this.boxOptions.colors.lower,
                                                this.boxOptions.colors.upper,
                                            ]);
                                        var u = this.invertedYRatio,
                                            f = e.realIndex,
                                            g = this.getOHLCValue(f, h),
                                            p = s,
                                            x = s,
                                            m = Math.min(g.o, g.c),
                                            b = Math.max(g.o, g.c),
                                            v = g.m;
                                        o.globals.isXNumeric &&
                                            (i =
                                                (o.globals.seriesX[f][h] -
                                                    o.globals.minX) /
                                                    this.invertedXRatio -
                                                r / 2);
                                        var y = i + r * this.visibleI;
                                        void 0 === this.series[c][h] ||
                                        null === this.series[c][h]
                                            ? ((m = s), (b = s))
                                            : ((m = s + m / u),
                                              (b = s + b / u),
                                              (p = s + g.h / u),
                                              (x = s + g.l / u),
                                              (v = s + g.m / u));
                                        var w = l.move(s, y),
                                            A = l.move(m, y + r / 2);
                                        return (
                                            o.globals.previousPaths.length >
                                                0 &&
                                                (A = this.getPreviousPath(
                                                    f,
                                                    h,
                                                    !0
                                                )),
                                            (w = [
                                                l.move(m, y) +
                                                    l.line(m, y + r / 2) +
                                                    l.line(p, y + r / 2) +
                                                    l.line(
                                                        p,
                                                        y + r / 2 - r / 4
                                                    ) +
                                                    l.line(
                                                        p,
                                                        y + r / 2 + r / 4
                                                    ) +
                                                    l.line(p, y + r / 2) +
                                                    l.line(m, y + r / 2) +
                                                    l.line(m, y + r) +
                                                    l.line(v, y + r) +
                                                    l.line(v, y) +
                                                    l.line(m + n / 2, y),
                                                l.move(v, y) +
                                                    l.line(v, y + r) +
                                                    l.line(b, y + r) +
                                                    l.line(b, y + r / 2) +
                                                    l.line(x, y + r / 2) +
                                                    l.line(x, y + r - r / 4) +
                                                    l.line(x, y + r / 4) +
                                                    l.line(x, y + r / 2) +
                                                    l.line(b, y + r / 2) +
                                                    l.line(b, y) +
                                                    l.line(v, y) +
                                                    "z",
                                            ]),
                                            (A += l.move(m, y)),
                                            o.globals.isXNumeric || (i += a),
                                            {
                                                pathTo: w,
                                                pathFrom: A,
                                                x: b,
                                                y: i,
                                                barYPosition: y,
                                                color: d,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "getOHLCValue",
                                    value: function (t, e) {
                                        var i = this.w;
                                        return {
                                            o: this.isBoxPlot
                                                ? i.globals.seriesCandleH[t][e]
                                                : i.globals.seriesCandleO[t][e],
                                            h: this.isBoxPlot
                                                ? i.globals.seriesCandleO[t][e]
                                                : i.globals.seriesCandleH[t][e],
                                            m: i.globals.seriesCandleM[t][e],
                                            l: this.isBoxPlot
                                                ? i.globals.seriesCandleC[t][e]
                                                : i.globals.seriesCandleL[t][e],
                                            c: this.isBoxPlot
                                                ? i.globals.seriesCandleL[t][e]
                                                : i.globals.seriesCandleC[t][e],
                                        };
                                    },
                                },
                            ]),
                            i
                        );
                    })(),
                    Pt = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "checkColorRange",
                                    value: function () {
                                        var t = this.w,
                                            e = !1,
                                            i =
                                                t.config.plotOptions[
                                                    t.config.chart.type
                                                ];
                                        return (
                                            i.colorScale.ranges.length > 0 &&
                                                i.colorScale.ranges.map(
                                                    function (t, i) {
                                                        t.from <= 0 && (e = !0);
                                                    }
                                                ),
                                            e
                                        );
                                    },
                                },
                                {
                                    key: "getShadeColor",
                                    value: function (t, e, i, a) {
                                        var r = this.w,
                                            s = 1,
                                            n =
                                                r.config.plotOptions[t]
                                                    .shadeIntensity,
                                            o = this.determineColor(t, e, i);
                                        r.globals.hasNegs || a
                                            ? (s = r.config.plotOptions[t]
                                                  .reverseNegativeShade
                                                  ? o.percent < 0
                                                      ? (o.percent / 100) *
                                                        (1.25 * n)
                                                      : (1 - o.percent / 100) *
                                                        (1.25 * n)
                                                  : o.percent <= 0
                                                  ? 1 -
                                                    (1 + o.percent / 100) * n
                                                  : (1 - o.percent / 100) * n)
                                            : ((s = 1 - o.percent / 100),
                                              "treemap" === t &&
                                                  (s =
                                                      (1 - o.percent / 100) *
                                                      (1.25 * n)));
                                        var l = o.color,
                                            c = new v();
                                        return (
                                            r.config.plotOptions[t]
                                                .enableShades &&
                                                (l =
                                                    "dark" ===
                                                    this.w.config.theme.mode
                                                        ? v.hexToRgba(
                                                              c.shadeColor(
                                                                  -1 * s,
                                                                  o.color
                                                              ),
                                                              r.config.fill
                                                                  .opacity
                                                          )
                                                        : v.hexToRgba(
                                                              c.shadeColor(
                                                                  s,
                                                                  o.color
                                                              ),
                                                              r.config.fill
                                                                  .opacity
                                                          )),
                                            { color: l, colorProps: o }
                                        );
                                    },
                                },
                                {
                                    key: "determineColor",
                                    value: function (t, e, i) {
                                        var a = this.w,
                                            r = a.globals.series[e][i],
                                            s = a.config.plotOptions[t],
                                            n = s.colorScale.inverse ? i : e;
                                        s.distributed &&
                                            "treemap" === a.config.chart.type &&
                                            (n = i);
                                        var o = a.globals.colors[n],
                                            l = null,
                                            c = Math.min.apply(
                                                Math,
                                                x(a.globals.series[e])
                                            ),
                                            h = Math.max.apply(
                                                Math,
                                                x(a.globals.series[e])
                                            );
                                        s.distributed ||
                                            "heatmap" !== t ||
                                            ((c = a.globals.minY),
                                            (h = a.globals.maxY)),
                                            void 0 !== s.colorScale.min &&
                                                ((c =
                                                    s.colorScale.min <
                                                    a.globals.minY
                                                        ? s.colorScale.min
                                                        : a.globals.minY),
                                                (h =
                                                    s.colorScale.max >
                                                    a.globals.maxY
                                                        ? s.colorScale.max
                                                        : a.globals.maxY));
                                        var d = Math.abs(h) + Math.abs(c),
                                            u =
                                                (100 * r) /
                                                (0 === d ? d - 1e-6 : d);
                                        return (
                                            s.colorScale.ranges.length > 0 &&
                                                s.colorScale.ranges.map(
                                                    function (t, e) {
                                                        if (
                                                            r >= t.from &&
                                                            r <= t.to
                                                        ) {
                                                            (o = t.color),
                                                                (l = t.foreColor
                                                                    ? t.foreColor
                                                                    : null),
                                                                (c = t.from),
                                                                (h = t.to);
                                                            var i =
                                                                Math.abs(h) +
                                                                Math.abs(c);
                                                            u =
                                                                (100 * r) /
                                                                (0 === i
                                                                    ? i - 1e-6
                                                                    : i);
                                                        }
                                                    }
                                                ),
                                            {
                                                color: o,
                                                foreColor: l,
                                                percent: u,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "calculateDataLabels",
                                    value: function (t) {
                                        var e = t.text,
                                            i = t.x,
                                            a = t.y,
                                            r = t.i,
                                            s = t.j,
                                            n = t.colorProps,
                                            o = t.fontSize,
                                            l = this.w.config.dataLabels,
                                            c = new k(this.ctx),
                                            h = new B(this.ctx),
                                            d = null;
                                        if (l.enabled) {
                                            d = c.group({
                                                class: "apexcharts-data-labels",
                                            });
                                            var u = l.offsetX,
                                                f = l.offsetY,
                                                g = i + u,
                                                p =
                                                    a +
                                                    parseFloat(
                                                        l.style.fontSize
                                                    ) /
                                                        3 +
                                                    f;
                                            h.plotDataLabelsText({
                                                x: g,
                                                y: p,
                                                text: e,
                                                i: r,
                                                j: s,
                                                color: n.foreColor,
                                                parent: d,
                                                fontSize: o,
                                                dataLabelsConfig: l,
                                            });
                                        }
                                        return d;
                                    },
                                },
                                {
                                    key: "addListeners",
                                    value: function (t) {
                                        var e = new k(this.ctx);
                                        t.node.addEventListener(
                                            "mouseenter",
                                            e.pathMouseEnter.bind(this, t)
                                        ),
                                            t.node.addEventListener(
                                                "mouseleave",
                                                e.pathMouseLeave.bind(this, t)
                                            ),
                                            t.node.addEventListener(
                                                "mousedown",
                                                e.pathMouseDown.bind(this, t)
                                            );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Lt = (function () {
                        function t(e, i) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.xRatio = i.xRatio),
                                (this.yRatio = i.yRatio),
                                (this.dynamicAnim =
                                    this.w.config.chart.animations.dynamicAnimation),
                                (this.helpers = new Pt(e)),
                                (this.rectRadius =
                                    this.w.config.plotOptions.heatmap.radius),
                                (this.strokeWidth = this.w.config.stroke.show
                                    ? this.w.config.stroke.width
                                    : 0);
                        }
                        return (
                            c(t, [
                                {
                                    key: "draw",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new k(this.ctx),
                                            a = i.group({
                                                class: "apexcharts-heatmap",
                                            });
                                        a.attr(
                                            "clip-path",
                                            "url(#gridRectMask".concat(
                                                e.globals.cuid,
                                                ")"
                                            )
                                        );
                                        var r =
                                                e.globals.gridWidth /
                                                e.globals.dataPoints,
                                            s =
                                                e.globals.gridHeight /
                                                e.globals.series.length,
                                            n = 0,
                                            o = !1;
                                        this.negRange =
                                            this.helpers.checkColorRange();
                                        var l = t.slice();
                                        e.config.yaxis[0].reversed &&
                                            ((o = !0), l.reverse());
                                        for (
                                            var c = o ? 0 : l.length - 1;
                                            o ? c < l.length : c >= 0;
                                            o ? c++ : c--
                                        ) {
                                            var h = i.group({
                                                class: "apexcharts-series apexcharts-heatmap-series",
                                                seriesName: v.escapeString(
                                                    e.globals.seriesNames[c]
                                                ),
                                                rel: c + 1,
                                                "data:realIndex": c,
                                            });
                                            if (
                                                (this.ctx.series.addCollapsedClassToSeries(
                                                    h,
                                                    c
                                                ),
                                                e.config.chart.dropShadow
                                                    .enabled)
                                            ) {
                                                var d =
                                                    e.config.chart.dropShadow;
                                                new w(this.ctx).dropShadow(
                                                    h,
                                                    d,
                                                    c
                                                );
                                            }
                                            for (
                                                var u = 0,
                                                    f =
                                                        e.config.plotOptions
                                                            .heatmap
                                                            .shadeIntensity,
                                                    g = 0;
                                                g < l[c].length;
                                                g++
                                            ) {
                                                var p =
                                                        this.helpers.getShadeColor(
                                                            e.config.chart.type,
                                                            c,
                                                            g,
                                                            this.negRange
                                                        ),
                                                    x = p.color,
                                                    m = p.colorProps;
                                                "image" ===
                                                    e.config.fill.type &&
                                                    (x = new Y(
                                                        this.ctx
                                                    ).fillPath({
                                                        seriesNumber: c,
                                                        dataPointIndex: g,
                                                        opacity: e.globals
                                                            .hasNegs
                                                            ? m.percent < 0
                                                                ? 1 -
                                                                  (1 +
                                                                      m.percent /
                                                                          100)
                                                                : f +
                                                                  m.percent /
                                                                      100
                                                            : m.percent / 100,
                                                        patternID: v.randomId(),
                                                        width: e.config.fill
                                                            .image.width
                                                            ? e.config.fill
                                                                  .image.width
                                                            : r,
                                                        height: e.config.fill
                                                            .image.height
                                                            ? e.config.fill
                                                                  .image.height
                                                            : s,
                                                    }));
                                                var b = this.rectRadius,
                                                    y = i.drawRect(
                                                        u,
                                                        n,
                                                        r,
                                                        s,
                                                        b
                                                    );
                                                if (
                                                    (y.attr({ cx: u, cy: n }),
                                                    y.node.classList.add(
                                                        "apexcharts-heatmap-rect"
                                                    ),
                                                    h.add(y),
                                                    y.attr({
                                                        fill: x,
                                                        i: c,
                                                        index: c,
                                                        j: g,
                                                        val: l[c][g],
                                                        "stroke-width":
                                                            this.strokeWidth,
                                                        stroke: e.config
                                                            .plotOptions.heatmap
                                                            .useFillColorAsStroke
                                                            ? x
                                                            : e.globals.stroke
                                                                  .colors[0],
                                                        color: x,
                                                    }),
                                                    this.helpers.addListeners(
                                                        y
                                                    ),
                                                    e.config.chart.animations
                                                        .enabled &&
                                                        !e.globals.dataChanged)
                                                ) {
                                                    var A = 1;
                                                    e.globals.resized ||
                                                        (A =
                                                            e.config.chart
                                                                .animations
                                                                .speed),
                                                        this.animateHeatMap(
                                                            y,
                                                            u,
                                                            n,
                                                            r,
                                                            s,
                                                            A
                                                        );
                                                }
                                                if (e.globals.dataChanged) {
                                                    var S = 1;
                                                    if (
                                                        this.dynamicAnim
                                                            .enabled &&
                                                        e.globals.shouldAnimate
                                                    ) {
                                                        S =
                                                            this.dynamicAnim
                                                                .speed;
                                                        var C =
                                                            e.globals
                                                                .previousPaths[
                                                                c
                                                            ] &&
                                                            e.globals
                                                                .previousPaths[
                                                                c
                                                            ][g] &&
                                                            e.globals
                                                                .previousPaths[
                                                                c
                                                            ][g].color;
                                                        C ||
                                                            (C =
                                                                "rgba(255, 255, 255, 0)"),
                                                            this.animateHeatColor(
                                                                y,
                                                                v.isColorHex(C)
                                                                    ? C
                                                                    : v.rgb2hex(
                                                                          C
                                                                      ),
                                                                v.isColorHex(x)
                                                                    ? x
                                                                    : v.rgb2hex(
                                                                          x
                                                                      ),
                                                                S
                                                            );
                                                    }
                                                }
                                                var P = (0,
                                                    e.config.dataLabels
                                                        .formatter)(
                                                        e.globals.series[c][g],
                                                        {
                                                            value: e.globals
                                                                .series[c][g],
                                                            seriesIndex: c,
                                                            dataPointIndex: g,
                                                            w: e,
                                                        }
                                                    ),
                                                    L =
                                                        this.helpers.calculateDataLabels(
                                                            {
                                                                text: P,
                                                                x: u + r / 2,
                                                                y: n + s / 2,
                                                                i: c,
                                                                j: g,
                                                                colorProps: m,
                                                                series: l,
                                                            }
                                                        );
                                                null !== L && h.add(L),
                                                    (u += r);
                                            }
                                            (n += s), a.add(h);
                                        }
                                        var T =
                                            e.globals.yAxisScale[0].result.slice();
                                        e.config.yaxis[0].reversed
                                            ? T.unshift("")
                                            : T.push(""),
                                            (e.globals.yAxisScale[0].result =
                                                T);
                                        var M =
                                            e.globals.gridHeight /
                                            e.globals.series.length;
                                        return (
                                            (e.config.yaxis[0].labels.offsetY =
                                                -M / 2),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "animateHeatMap",
                                    value: function (t, e, i, a, r, s) {
                                        var n = new y(this.ctx);
                                        n.animateRect(
                                            t,
                                            {
                                                x: e + a / 2,
                                                y: i + r / 2,
                                                width: 0,
                                                height: 0,
                                            },
                                            { x: e, y: i, width: a, height: r },
                                            s,
                                            function () {
                                                n.animationCompleted(t);
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "animateHeatColor",
                                    value: function (t, e, i, a) {
                                        t.attr({ fill: e })
                                            .animate(a)
                                            .attr({ fill: i });
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Tt = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "drawYAxisTexts",
                                    value: function (t, e, i, a) {
                                        var r = this.w,
                                            s = r.config.yaxis[0],
                                            n = r.globals.yLabelFormatters[0];
                                        return new k(this.ctx).drawText({
                                            x: t + s.labels.offsetX,
                                            y: e + s.labels.offsetY,
                                            text: n(a, i),
                                            textAnchor: "middle",
                                            fontSize: s.labels.style.fontSize,
                                            fontFamily:
                                                s.labels.style.fontFamily,
                                            foreColor: Array.isArray(
                                                s.labels.style.colors
                                            )
                                                ? s.labels.style.colors[i]
                                                : s.labels.style.colors,
                                        });
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Mt = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                            var i = this.w;
                            (this.chartType = this.w.config.chart.type),
                                (this.initialAnim =
                                    this.w.config.chart.animations.enabled),
                                (this.dynamicAnim =
                                    this.initialAnim &&
                                    this.w.config.chart.animations
                                        .dynamicAnimation.enabled),
                                (this.animBeginArr = [0]),
                                (this.animDur = 0),
                                (this.donutDataLabels =
                                    this.w.config.plotOptions.pie.donut.labels),
                                (this.lineColorArr =
                                    void 0 !== i.globals.stroke.colors
                                        ? i.globals.stroke.colors
                                        : i.globals.colors),
                                (this.defaultSize = Math.min(
                                    i.globals.gridWidth,
                                    i.globals.gridHeight
                                )),
                                (this.centerY = this.defaultSize / 2),
                                (this.centerX = i.globals.gridWidth / 2),
                                "radialBar" === i.config.chart.type
                                    ? (this.fullAngle = 360)
                                    : (this.fullAngle = Math.abs(
                                          i.config.plotOptions.pie.endAngle -
                                              i.config.plotOptions.pie
                                                  .startAngle
                                      )),
                                (this.initialAngle =
                                    i.config.plotOptions.pie.startAngle %
                                    this.fullAngle),
                                (i.globals.radialSize =
                                    this.defaultSize / 2.05 -
                                    i.config.stroke.width -
                                    (i.config.chart.sparkline.enabled
                                        ? 0
                                        : i.config.chart.dropShadow.blur)),
                                (this.donutSize =
                                    (i.globals.radialSize *
                                        parseInt(
                                            i.config.plotOptions.pie.donut.size,
                                            10
                                        )) /
                                    100),
                                (this.maxY = 0),
                                (this.sliceLabels = []),
                                (this.sliceSizes = []),
                                (this.prevSectorAngleArr = []);
                        }
                        return (
                            c(t, [
                                {
                                    key: "draw",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w,
                                            a = new k(this.ctx);
                                        if (
                                            ((this.ret = a.group({
                                                class: "apexcharts-pie",
                                            })),
                                            i.globals.noData)
                                        )
                                            return this.ret;
                                        for (
                                            var r = 0, s = 0;
                                            s < t.length;
                                            s++
                                        )
                                            r += v.negToZero(t[s]);
                                        var n = [],
                                            o = a.group();
                                        0 === r && (r = 1e-5),
                                            t.forEach(function (t) {
                                                e.maxY = Math.max(e.maxY, t);
                                            }),
                                            i.config.yaxis[0].max &&
                                                (this.maxY =
                                                    i.config.yaxis[0].max),
                                            "back" === i.config.grid.position &&
                                                "polarArea" ===
                                                    this.chartType &&
                                                this.drawPolarElements(
                                                    this.ret
                                                );
                                        for (var l = 0; l < t.length; l++) {
                                            var c =
                                                (this.fullAngle *
                                                    v.negToZero(t[l])) /
                                                r;
                                            n.push(c),
                                                "polarArea" === this.chartType
                                                    ? ((n[l] =
                                                          this.fullAngle /
                                                          t.length),
                                                      this.sliceSizes.push(
                                                          (i.globals
                                                              .radialSize *
                                                              t[l]) /
                                                              this.maxY
                                                      ))
                                                    : this.sliceSizes.push(
                                                          i.globals.radialSize
                                                      );
                                        }
                                        if (i.globals.dataChanged) {
                                            for (
                                                var h, d = 0, u = 0;
                                                u <
                                                i.globals.previousPaths.length;
                                                u++
                                            )
                                                d += v.negToZero(
                                                    i.globals.previousPaths[u]
                                                );
                                            for (
                                                var f = 0;
                                                f <
                                                i.globals.previousPaths.length;
                                                f++
                                            )
                                                (h =
                                                    (this.fullAngle *
                                                        v.negToZero(
                                                            i.globals
                                                                .previousPaths[
                                                                f
                                                            ]
                                                        )) /
                                                    d),
                                                    this.prevSectorAngleArr.push(
                                                        h
                                                    );
                                        }
                                        this.donutSize < 0 &&
                                            (this.donutSize = 0);
                                        var g =
                                                i.config.plotOptions.pie
                                                    .customScale,
                                            p = i.globals.gridWidth / 2,
                                            x = i.globals.gridHeight / 2,
                                            m =
                                                p -
                                                (i.globals.gridWidth / 2) * g,
                                            b =
                                                x -
                                                (i.globals.gridHeight / 2) * g;
                                        if ("donut" === this.chartType) {
                                            var y = a.drawCircle(
                                                this.donutSize
                                            );
                                            y.attr({
                                                cx: this.centerX,
                                                cy: this.centerY,
                                                fill: i.config.plotOptions.pie
                                                    .donut.background
                                                    ? i.config.plotOptions.pie
                                                          .donut.background
                                                    : "transparent",
                                            }),
                                                o.add(y);
                                        }
                                        var w = this.drawArcs(n, t);
                                        if (
                                            (this.sliceLabels.forEach(function (
                                                t
                                            ) {
                                                w.add(t);
                                            }),
                                            o.attr({
                                                transform: "translate("
                                                    .concat(m, ", ")
                                                    .concat(b, ") scale(")
                                                    .concat(g, ")"),
                                            }),
                                            o.add(w),
                                            this.ret.add(o),
                                            this.donutDataLabels.show)
                                        ) {
                                            var A = this.renderInnerDataLabels(
                                                this.donutDataLabels,
                                                {
                                                    hollowSize: this.donutSize,
                                                    centerX: this.centerX,
                                                    centerY: this.centerY,
                                                    opacity:
                                                        this.donutDataLabels
                                                            .show,
                                                    translateX: m,
                                                    translateY: b,
                                                }
                                            );
                                            this.ret.add(A);
                                        }
                                        return (
                                            "front" ===
                                                i.config.grid.position &&
                                                "polarArea" ===
                                                    this.chartType &&
                                                this.drawPolarElements(
                                                    this.ret
                                                ),
                                            this.ret
                                        );
                                    },
                                },
                                {
                                    key: "drawArcs",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = new w(this.ctx),
                                            r = new k(this.ctx),
                                            s = new Y(this.ctx),
                                            n = r.group({
                                                class: "apexcharts-slices",
                                            }),
                                            o = this.initialAngle,
                                            l = this.initialAngle,
                                            c = this.initialAngle,
                                            h = this.initialAngle;
                                        this.strokeWidth = i.config.stroke.show
                                            ? i.config.stroke.width
                                            : 0;
                                        for (var d = 0; d < t.length; d++) {
                                            var u = r.group({
                                                class: "apexcharts-series apexcharts-pie-series",
                                                seriesName: v.escapeString(
                                                    i.globals.seriesNames[d]
                                                ),
                                                rel: d + 1,
                                                "data:realIndex": d,
                                            });
                                            n.add(u),
                                                (l = h),
                                                (c = (o = c) + t[d]),
                                                (h =
                                                    l +
                                                    this.prevSectorAngleArr[d]);
                                            var f =
                                                    c < o
                                                        ? this.fullAngle + c - o
                                                        : c - o,
                                                g = s.fillPath({
                                                    seriesNumber: d,
                                                    size: this.sliceSizes[d],
                                                    value: e[d],
                                                }),
                                                p = this.getChangedPath(l, h),
                                                x = r.drawPath({
                                                    d: p,
                                                    stroke: Array.isArray(
                                                        this.lineColorArr
                                                    )
                                                        ? this.lineColorArr[d]
                                                        : this.lineColorArr,
                                                    strokeWidth: 0,
                                                    fill: g,
                                                    fillOpacity:
                                                        i.config.fill.opacity,
                                                    classes:
                                                        "apexcharts-pie-area apexcharts-"
                                                            .concat(
                                                                this.chartType.toLowerCase(),
                                                                "-slice-"
                                                            )
                                                            .concat(d),
                                                });
                                            if (
                                                (x.attr({ index: 0, j: d }),
                                                a.setSelectionFilter(x, 0, d),
                                                i.config.chart.dropShadow
                                                    .enabled)
                                            ) {
                                                var m =
                                                    i.config.chart.dropShadow;
                                                a.dropShadow(x, m, d);
                                            }
                                            this.addListeners(
                                                x,
                                                this.donutDataLabels
                                            ),
                                                k.setAttrs(x.node, {
                                                    "data:angle": f,
                                                    "data:startAngle": o,
                                                    "data:strokeWidth":
                                                        this.strokeWidth,
                                                    "data:value": e[d],
                                                });
                                            var b = { x: 0, y: 0 };
                                            "pie" === this.chartType ||
                                            "polarArea" === this.chartType
                                                ? (b = v.polarToCartesian(
                                                      this.centerX,
                                                      this.centerY,
                                                      i.globals.radialSize /
                                                          1.25 +
                                                          i.config.plotOptions
                                                              .pie.dataLabels
                                                              .offset,
                                                      (o + f / 2) %
                                                          this.fullAngle
                                                  ))
                                                : "donut" === this.chartType &&
                                                  (b = v.polarToCartesian(
                                                      this.centerX,
                                                      this.centerY,
                                                      (i.globals.radialSize +
                                                          this.donutSize) /
                                                          2 +
                                                          i.config.plotOptions
                                                              .pie.dataLabels
                                                              .offset,
                                                      (o + f / 2) %
                                                          this.fullAngle
                                                  )),
                                                u.add(x);
                                            var y = 0;
                                            if (
                                                (!this.initialAnim ||
                                                i.globals.resized ||
                                                i.globals.dataChanged
                                                    ? this.animBeginArr.push(0)
                                                    : (0 ==
                                                          (y =
                                                              (f /
                                                                  this
                                                                      .fullAngle) *
                                                              i.config.chart
                                                                  .animations
                                                                  .speed) &&
                                                          (y = 1),
                                                      (this.animDur =
                                                          y + this.animDur),
                                                      this.animBeginArr.push(
                                                          this.animDur
                                                      )),
                                                this.dynamicAnim &&
                                                i.globals.dataChanged
                                                    ? this.animatePaths(x, {
                                                          size: this.sliceSizes[
                                                              d
                                                          ],
                                                          endAngle: c,
                                                          startAngle: o,
                                                          prevStartAngle: l,
                                                          prevEndAngle: h,
                                                          animateStartingPos:
                                                              !0,
                                                          i: d,
                                                          animBeginArr:
                                                              this.animBeginArr,
                                                          shouldSetPrevPaths:
                                                              !0,
                                                          dur: i.config.chart
                                                              .animations
                                                              .dynamicAnimation
                                                              .speed,
                                                      })
                                                    : this.animatePaths(x, {
                                                          size: this.sliceSizes[
                                                              d
                                                          ],
                                                          endAngle: c,
                                                          startAngle: o,
                                                          i: d,
                                                          totalItems:
                                                              t.length - 1,
                                                          animBeginArr:
                                                              this.animBeginArr,
                                                          dur: y,
                                                      }),
                                                i.config.plotOptions.pie
                                                    .expandOnClick &&
                                                    "polarArea" !==
                                                        this.chartType &&
                                                    x.click(
                                                        this.pieClicked.bind(
                                                            this,
                                                            d
                                                        )
                                                    ),
                                                void 0 !==
                                                    i.globals
                                                        .selectedDataPoints[0] &&
                                                    i.globals.selectedDataPoints[0].indexOf(
                                                        d
                                                    ) > -1 &&
                                                    this.pieClicked(d),
                                                i.config.dataLabels.enabled)
                                            ) {
                                                var A = b.x,
                                                    S = b.y,
                                                    C =
                                                        (100 * f) /
                                                            this.fullAngle +
                                                        "%";
                                                if (
                                                    0 !== f &&
                                                    i.config.plotOptions.pie
                                                        .dataLabels
                                                        .minAngleToShowLabel <
                                                        t[d]
                                                ) {
                                                    var P =
                                                        i.config.dataLabels
                                                            .formatter;
                                                    void 0 !== P &&
                                                        (C = P(
                                                            i.globals
                                                                .seriesPercent[
                                                                d
                                                            ][0],
                                                            {
                                                                seriesIndex: d,
                                                                w: i,
                                                            }
                                                        ));
                                                    var L =
                                                            i.globals.dataLabels
                                                                .style.colors[
                                                                d
                                                            ],
                                                        T = r.group({
                                                            class: "apexcharts-datalabels",
                                                        }),
                                                        M = r.drawText({
                                                            x: A,
                                                            y: S,
                                                            text: C,
                                                            textAnchor:
                                                                "middle",
                                                            fontSize:
                                                                i.config
                                                                    .dataLabels
                                                                    .style
                                                                    .fontSize,
                                                            fontFamily:
                                                                i.config
                                                                    .dataLabels
                                                                    .style
                                                                    .fontFamily,
                                                            fontWeight:
                                                                i.config
                                                                    .dataLabels
                                                                    .style
                                                                    .fontWeight,
                                                            foreColor: L,
                                                        });
                                                    if (
                                                        (T.add(M),
                                                        i.config.dataLabels
                                                            .dropShadow.enabled)
                                                    ) {
                                                        var E =
                                                            i.config.dataLabels
                                                                .dropShadow;
                                                        a.dropShadow(M, E);
                                                    }
                                                    M.node.classList.add(
                                                        "apexcharts-pie-label"
                                                    ),
                                                        i.config.chart
                                                            .animations
                                                            .animate &&
                                                            !1 ===
                                                                i.globals
                                                                    .resized &&
                                                            (M.node.classList.add(
                                                                "apexcharts-pie-label-delay"
                                                            ),
                                                            (M.node.style.animationDelay =
                                                                i.config.chart
                                                                    .animations
                                                                    .speed /
                                                                    940 +
                                                                "s")),
                                                        this.sliceLabels.push(
                                                            T
                                                        );
                                                }
                                            }
                                        }
                                        return n;
                                    },
                                },
                                {
                                    key: "addListeners",
                                    value: function (t, e) {
                                        var i = new k(this.ctx);
                                        t.node.addEventListener(
                                            "mouseenter",
                                            i.pathMouseEnter.bind(this, t)
                                        ),
                                            t.node.addEventListener(
                                                "mouseleave",
                                                i.pathMouseLeave.bind(this, t)
                                            ),
                                            t.node.addEventListener(
                                                "mouseleave",
                                                this.revertDataLabelsInner.bind(
                                                    this,
                                                    t.node,
                                                    e
                                                )
                                            ),
                                            t.node.addEventListener(
                                                "mousedown",
                                                i.pathMouseDown.bind(this, t)
                                            ),
                                            this.donutDataLabels.total
                                                .showAlways ||
                                                (t.node.addEventListener(
                                                    "mouseenter",
                                                    this.printDataLabelsInner.bind(
                                                        this,
                                                        t.node,
                                                        e
                                                    )
                                                ),
                                                t.node.addEventListener(
                                                    "mousedown",
                                                    this.printDataLabelsInner.bind(
                                                        this,
                                                        t.node,
                                                        e
                                                    )
                                                ));
                                    },
                                },
                                {
                                    key: "animatePaths",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a =
                                                e.endAngle < e.startAngle
                                                    ? this.fullAngle +
                                                      e.endAngle -
                                                      e.startAngle
                                                    : e.endAngle - e.startAngle,
                                            r = a,
                                            s = e.startAngle,
                                            n = e.startAngle;
                                        void 0 !== e.prevStartAngle &&
                                            void 0 !== e.prevEndAngle &&
                                            ((s = e.prevEndAngle),
                                            (r =
                                                e.prevEndAngle <
                                                e.prevStartAngle
                                                    ? this.fullAngle +
                                                      e.prevEndAngle -
                                                      e.prevStartAngle
                                                    : e.prevEndAngle -
                                                      e.prevStartAngle)),
                                            e.i ===
                                                i.config.series.length - 1 &&
                                                (a + n > this.fullAngle
                                                    ? (e.endAngle =
                                                          e.endAngle - (a + n))
                                                    : a + n < this.fullAngle &&
                                                      (e.endAngle =
                                                          e.endAngle +
                                                          (this.fullAngle -
                                                              (a + n)))),
                                            a === this.fullAngle &&
                                                (a = this.fullAngle - 0.01),
                                            this.animateArc(t, s, n, a, r, e);
                                    },
                                },
                                {
                                    key: "animateArc",
                                    value: function (t, e, i, a, r, s) {
                                        var n,
                                            o = this,
                                            l = this.w,
                                            c = new y(this.ctx),
                                            h = s.size;
                                        (isNaN(e) || isNaN(r)) &&
                                            ((e = i), (r = a), (s.dur = 0));
                                        var d = a,
                                            u = i,
                                            f =
                                                e < i
                                                    ? this.fullAngle + e - i
                                                    : e - i;
                                        l.globals.dataChanged &&
                                            s.shouldSetPrevPaths &&
                                            s.prevEndAngle &&
                                            ((n = o.getPiePath({
                                                me: o,
                                                startAngle: s.prevStartAngle,
                                                angle:
                                                    s.prevEndAngle <
                                                    s.prevStartAngle
                                                        ? this.fullAngle +
                                                          s.prevEndAngle -
                                                          s.prevStartAngle
                                                        : s.prevEndAngle -
                                                          s.prevStartAngle,
                                                size: h,
                                            })),
                                            t.attr({ d: n })),
                                            0 !== s.dur
                                                ? t
                                                      .animate(
                                                          s.dur,
                                                          l.globals.easing,
                                                          s.animBeginArr[s.i]
                                                      )
                                                      .afterAll(function () {
                                                          ("pie" !==
                                                              o.chartType &&
                                                              "donut" !==
                                                                  o.chartType &&
                                                              "polarArea" !==
                                                                  o.chartType) ||
                                                              this.animate(
                                                                  l.config.chart
                                                                      .animations
                                                                      .dynamicAnimation
                                                                      .speed
                                                              ).attr({
                                                                  "stroke-width":
                                                                      o.strokeWidth,
                                                              }),
                                                              s.i ===
                                                                  l.config
                                                                      .series
                                                                      .length -
                                                                      1 &&
                                                                  c.animationCompleted(
                                                                      t
                                                                  );
                                                      })
                                                      .during(function (l) {
                                                          (d = f + (a - f) * l),
                                                              s.animateStartingPos &&
                                                                  ((d =
                                                                      r +
                                                                      (a - r) *
                                                                          l),
                                                                  (u =
                                                                      e -
                                                                      r +
                                                                      (i -
                                                                          (e -
                                                                              r)) *
                                                                          l)),
                                                              (n = o.getPiePath(
                                                                  {
                                                                      me: o,
                                                                      startAngle:
                                                                          u,
                                                                      angle: d,
                                                                      size: h,
                                                                  }
                                                              )),
                                                              t.node.setAttribute(
                                                                  "data:pathOrig",
                                                                  n
                                                              ),
                                                              t.attr({ d: n });
                                                      })
                                                : ((n = o.getPiePath({
                                                      me: o,
                                                      startAngle: u,
                                                      angle: a,
                                                      size: h,
                                                  })),
                                                  s.isTrack ||
                                                      (l.globals.animationEnded =
                                                          !0),
                                                  t.node.setAttribute(
                                                      "data:pathOrig",
                                                      n
                                                  ),
                                                  t.attr({
                                                      d: n,
                                                      "stroke-width":
                                                          o.strokeWidth,
                                                  }));
                                    },
                                },
                                {
                                    key: "pieClicked",
                                    value: function (t) {
                                        var e,
                                            i = this.w,
                                            a = this,
                                            r =
                                                a.sliceSizes[t] +
                                                (i.config.plotOptions.pie
                                                    .expandOnClick
                                                    ? 4
                                                    : 0),
                                            s = i.globals.dom.Paper.select(
                                                ".apexcharts-"
                                                    .concat(
                                                        a.chartType.toLowerCase(),
                                                        "-slice-"
                                                    )
                                                    .concat(t)
                                            ).members[0];
                                        if (
                                            "true" !== s.attr("data:pieClicked")
                                        ) {
                                            var n =
                                                i.globals.dom.baseEl.getElementsByClassName(
                                                    "apexcharts-pie-area"
                                                );
                                            Array.prototype.forEach.call(
                                                n,
                                                function (t) {
                                                    t.setAttribute(
                                                        "data:pieClicked",
                                                        "false"
                                                    );
                                                    var e =
                                                        t.getAttribute(
                                                            "data:pathOrig"
                                                        );
                                                    e && t.setAttribute("d", e);
                                                }
                                            ),
                                                s.attr(
                                                    "data:pieClicked",
                                                    "true"
                                                );
                                            var o = parseInt(
                                                    s.attr("data:startAngle"),
                                                    10
                                                ),
                                                l = parseInt(
                                                    s.attr("data:angle"),
                                                    10
                                                );
                                            (e = a.getPiePath({
                                                me: a,
                                                startAngle: o,
                                                angle: l,
                                                size: r,
                                            })),
                                                360 !== l && s.plot(e);
                                        } else {
                                            s.attr({
                                                "data:pieClicked": "false",
                                            }),
                                                this.revertDataLabelsInner(
                                                    s.node,
                                                    this.donutDataLabels
                                                );
                                            var c = s.attr("data:pathOrig");
                                            s.attr({ d: c });
                                        }
                                    },
                                },
                                {
                                    key: "getChangedPath",
                                    value: function (t, e) {
                                        var i = "";
                                        return (
                                            this.dynamicAnim &&
                                                this.w.globals.dataChanged &&
                                                (i = this.getPiePath({
                                                    me: this,
                                                    startAngle: t,
                                                    angle: e - t,
                                                    size: this.size,
                                                })),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "getPiePath",
                                    value: function (t) {
                                        var e = t.me,
                                            i = t.startAngle,
                                            a = t.angle,
                                            r = t.size,
                                            s = i,
                                            n = (Math.PI * (s - 90)) / 180,
                                            o = a + i;
                                        Math.ceil(o) >=
                                            this.fullAngle +
                                                (this.w.config.plotOptions.pie
                                                    .startAngle %
                                                    this.fullAngle) &&
                                            (o =
                                                this.fullAngle +
                                                (this.w.config.plotOptions.pie
                                                    .startAngle %
                                                    this.fullAngle) -
                                                0.01),
                                            Math.ceil(o) > this.fullAngle &&
                                                (o -= this.fullAngle);
                                        var l = (Math.PI * (o - 90)) / 180,
                                            c = e.centerX + r * Math.cos(n),
                                            h = e.centerY + r * Math.sin(n),
                                            d = e.centerX + r * Math.cos(l),
                                            u = e.centerY + r * Math.sin(l),
                                            f = v.polarToCartesian(
                                                e.centerX,
                                                e.centerY,
                                                e.donutSize,
                                                o
                                            ),
                                            g = v.polarToCartesian(
                                                e.centerX,
                                                e.centerY,
                                                e.donutSize,
                                                s
                                            ),
                                            p = a > 180 ? 1 : 0,
                                            x = [
                                                "M",
                                                c,
                                                h,
                                                "A",
                                                r,
                                                r,
                                                0,
                                                p,
                                                1,
                                                d,
                                                u,
                                            ];
                                        return "donut" === e.chartType
                                            ? []
                                                  .concat(x, [
                                                      "L",
                                                      f.x,
                                                      f.y,
                                                      "A",
                                                      e.donutSize,
                                                      e.donutSize,
                                                      0,
                                                      p,
                                                      0,
                                                      g.x,
                                                      g.y,
                                                      "L",
                                                      c,
                                                      h,
                                                      "z",
                                                  ])
                                                  .join(" ")
                                            : "pie" === e.chartType ||
                                              "polarArea" === e.chartType
                                            ? []
                                                  .concat(x, [
                                                      "L",
                                                      e.centerX,
                                                      e.centerY,
                                                      "L",
                                                      c,
                                                      h,
                                                  ])
                                                  .join(" ")
                                            : [].concat(x).join(" ");
                                    },
                                },
                                {
                                    key: "drawPolarElements",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new $(this.ctx),
                                            a = new k(this.ctx),
                                            r = new Tt(this.ctx),
                                            s = a.group(),
                                            n = a.group(),
                                            o = i.niceScale(
                                                0,
                                                Math.ceil(this.maxY),
                                                e.config.yaxis[0].tickAmount,
                                                0,
                                                !0
                                            ),
                                            l = o.result.reverse(),
                                            c = o.result.length;
                                        this.maxY = o.niceMax;
                                        for (
                                            var h = e.globals.radialSize,
                                                d = h / (c - 1),
                                                u = 0;
                                            u < c - 1;
                                            u++
                                        ) {
                                            var f = a.drawCircle(h);
                                            if (
                                                (f.attr({
                                                    cx: this.centerX,
                                                    cy: this.centerY,
                                                    fill: "none",
                                                    "stroke-width":
                                                        e.config.plotOptions
                                                            .polarArea.rings
                                                            .strokeWidth,
                                                    stroke: e.config.plotOptions
                                                        .polarArea.rings
                                                        .strokeColor,
                                                }),
                                                e.config.yaxis[0].show)
                                            ) {
                                                var g = r.drawYAxisTexts(
                                                    this.centerX,
                                                    this.centerY -
                                                        h +
                                                        parseInt(
                                                            e.config.yaxis[0]
                                                                .labels.style
                                                                .fontSize,
                                                            10
                                                        ) /
                                                            2,
                                                    u,
                                                    l[u]
                                                );
                                                n.add(g);
                                            }
                                            s.add(f), (h -= d);
                                        }
                                        this.drawSpokes(t), t.add(s), t.add(n);
                                    },
                                },
                                {
                                    key: "renderInnerDataLabels",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = new k(this.ctx),
                                            r = a.group({
                                                class: "apexcharts-datalabels-group",
                                                transform: "translate("
                                                    .concat(
                                                        e.translateX
                                                            ? e.translateX
                                                            : 0,
                                                        ", "
                                                    )
                                                    .concat(
                                                        e.translateY
                                                            ? e.translateY
                                                            : 0,
                                                        ") scale("
                                                    )
                                                    .concat(
                                                        i.config.plotOptions.pie
                                                            .customScale,
                                                        ")"
                                                    ),
                                            }),
                                            s = t.total.show;
                                        r.node.style.opacity = e.opacity;
                                        var n,
                                            o,
                                            l = e.centerX,
                                            c = e.centerY;
                                        n =
                                            void 0 === t.name.color
                                                ? i.globals.colors[0]
                                                : t.name.color;
                                        var h = t.name.fontSize,
                                            d = t.name.fontFamily,
                                            u = t.name.fontWeight;
                                        o =
                                            void 0 === t.value.color
                                                ? i.config.chart.foreColor
                                                : t.value.color;
                                        var f = t.value.formatter,
                                            g = "",
                                            p = "";
                                        if (
                                            (s
                                                ? ((n = t.total.color),
                                                  (h = t.total.fontSize),
                                                  (d = t.total.fontFamily),
                                                  (u = t.total.fontWeight),
                                                  (p = t.total.label),
                                                  (g = t.total.formatter(i)))
                                                : 1 ===
                                                      i.globals.series.length &&
                                                  ((g = f(
                                                      i.globals.series[0],
                                                      i
                                                  )),
                                                  (p =
                                                      i.globals
                                                          .seriesNames[0])),
                                            p &&
                                                (p = t.name.formatter(
                                                    p,
                                                    t.total.show,
                                                    i
                                                )),
                                            t.name.show)
                                        ) {
                                            var x = a.drawText({
                                                x: l,
                                                y:
                                                    c +
                                                    parseFloat(t.name.offsetY),
                                                text: p,
                                                textAnchor: "middle",
                                                foreColor: n,
                                                fontSize: h,
                                                fontWeight: u,
                                                fontFamily: d,
                                            });
                                            x.node.classList.add(
                                                "apexcharts-datalabel-label"
                                            ),
                                                r.add(x);
                                        }
                                        if (t.value.show) {
                                            var m = t.name.show
                                                    ? parseFloat(
                                                          t.value.offsetY
                                                      ) + 16
                                                    : t.value.offsetY,
                                                b = a.drawText({
                                                    x: l,
                                                    y: c + m,
                                                    text: g,
                                                    textAnchor: "middle",
                                                    foreColor: o,
                                                    fontWeight:
                                                        t.value.fontWeight,
                                                    fontSize: t.value.fontSize,
                                                    fontFamily:
                                                        t.value.fontFamily,
                                                });
                                            b.node.classList.add(
                                                "apexcharts-datalabel-value"
                                            ),
                                                r.add(b);
                                        }
                                        return r;
                                    },
                                },
                                {
                                    key: "printInnerLabels",
                                    value: function (t, e, i, a) {
                                        var r,
                                            s = this.w;
                                        a
                                            ? (r =
                                                  void 0 === t.name.color
                                                      ? s.globals.colors[
                                                            parseInt(
                                                                a.parentNode.getAttribute(
                                                                    "rel"
                                                                ),
                                                                10
                                                            ) - 1
                                                        ]
                                                      : t.name.color)
                                            : s.globals.series.length > 1 &&
                                              t.total.show &&
                                              (r = t.total.color);
                                        var n =
                                                s.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-datalabel-label"
                                                ),
                                            o =
                                                s.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-datalabel-value"
                                                );
                                        (i = (0, t.value.formatter)(i, s)),
                                            a ||
                                                "function" !=
                                                    typeof t.total.formatter ||
                                                (i = t.total.formatter(s));
                                        var l = e === t.total.label;
                                        (e = t.name.formatter(e, l, s)),
                                            null !== n && (n.textContent = e),
                                            null !== o && (o.textContent = i),
                                            null !== n && (n.style.fill = r);
                                    },
                                },
                                {
                                    key: "printDataLabelsInner",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = t.getAttribute("data:value"),
                                            r =
                                                i.globals.seriesNames[
                                                    parseInt(
                                                        t.parentNode.getAttribute(
                                                            "rel"
                                                        ),
                                                        10
                                                    ) - 1
                                                ];
                                        i.globals.series.length > 1 &&
                                            this.printInnerLabels(e, r, a, t);
                                        var s =
                                            i.globals.dom.baseEl.querySelector(
                                                ".apexcharts-datalabels-group"
                                            );
                                        null !== s && (s.style.opacity = 1);
                                    },
                                },
                                {
                                    key: "drawSpokes",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w,
                                            a = new k(this.ctx),
                                            r =
                                                i.config.plotOptions.polarArea
                                                    .spokes;
                                        if (0 !== r.strokeWidth) {
                                            for (
                                                var s = [],
                                                    n =
                                                        360 /
                                                        i.globals.series.length,
                                                    o = 0;
                                                o < i.globals.series.length;
                                                o++
                                            )
                                                s.push(
                                                    v.polarToCartesian(
                                                        this.centerX,
                                                        this.centerY,
                                                        i.globals.radialSize,
                                                        i.config.plotOptions.pie
                                                            .startAngle +
                                                            n * o
                                                    )
                                                );
                                            s.forEach(function (i, s) {
                                                var n = a.drawLine(
                                                    i.x,
                                                    i.y,
                                                    e.centerX,
                                                    e.centerY,
                                                    Array.isArray(
                                                        r.connectorColors
                                                    )
                                                        ? r.connectorColors[s]
                                                        : r.connectorColors
                                                );
                                                t.add(n);
                                            });
                                        }
                                    },
                                },
                                {
                                    key: "revertDataLabelsInner",
                                    value: function (t, e, i) {
                                        var a = this,
                                            r = this.w,
                                            s =
                                                r.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-datalabels-group"
                                                ),
                                            n = !1,
                                            o =
                                                r.globals.dom.baseEl.getElementsByClassName(
                                                    "apexcharts-pie-area"
                                                ),
                                            l = function (t) {
                                                var i = t.makeSliceOut,
                                                    r = t.printLabel;
                                                Array.prototype.forEach.call(
                                                    o,
                                                    function (t) {
                                                        "true" ===
                                                            t.getAttribute(
                                                                "data:pieClicked"
                                                            ) &&
                                                            (i && (n = !0),
                                                            r &&
                                                                a.printDataLabelsInner(
                                                                    t,
                                                                    e
                                                                ));
                                                    }
                                                );
                                            };
                                        if (
                                            (l({
                                                makeSliceOut: !0,
                                                printLabel: !1,
                                            }),
                                            e.total.show &&
                                                r.globals.series.length > 1)
                                        )
                                            n && !e.total.showAlways
                                                ? l({
                                                      makeSliceOut: !1,
                                                      printLabel: !0,
                                                  })
                                                : this.printInnerLabels(
                                                      e,
                                                      e.total.label,
                                                      e.total.formatter(r)
                                                  );
                                        else if (
                                            (l({
                                                makeSliceOut: !1,
                                                printLabel: !0,
                                            }),
                                            !n)
                                        )
                                            if (
                                                r.globals.selectedDataPoints
                                                    .length &&
                                                r.globals.series.length > 1
                                            )
                                                if (
                                                    r.globals
                                                        .selectedDataPoints[0]
                                                        .length > 0
                                                ) {
                                                    var c =
                                                            r.globals
                                                                .selectedDataPoints[0],
                                                        h =
                                                            r.globals.dom.baseEl.querySelector(
                                                                ".apexcharts-"
                                                                    .concat(
                                                                        this.chartType.toLowerCase(),
                                                                        "-slice-"
                                                                    )
                                                                    .concat(c)
                                                            );
                                                    this.printDataLabelsInner(
                                                        h,
                                                        e
                                                    );
                                                } else
                                                    s &&
                                                        r.globals
                                                            .selectedDataPoints
                                                            .length &&
                                                        0 ===
                                                            r.globals
                                                                .selectedDataPoints[0]
                                                                .length &&
                                                        (s.style.opacity = 0);
                                            else
                                                s &&
                                                    r.globals.series.length >
                                                        1 &&
                                                    (s.style.opacity = 0);
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Et = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.chartType = this.w.config.chart.type),
                                (this.initialAnim =
                                    this.w.config.chart.animations.enabled),
                                (this.dynamicAnim =
                                    this.initialAnim &&
                                    this.w.config.chart.animations
                                        .dynamicAnimation.enabled),
                                (this.animDur = 0);
                            var i = this.w;
                            (this.graphics = new k(this.ctx)),
                                (this.lineColorArr =
                                    void 0 !== i.globals.stroke.colors
                                        ? i.globals.stroke.colors
                                        : i.globals.colors),
                                (this.defaultSize =
                                    i.globals.svgHeight < i.globals.svgWidth
                                        ? i.globals.gridHeight +
                                          1.5 * i.globals.goldenPadding
                                        : i.globals.gridWidth),
                                (this.isLog = i.config.yaxis[0].logarithmic),
                                (this.coreUtils = new A(this.ctx)),
                                (this.maxValue = this.isLog
                                    ? this.coreUtils.getLogVal(
                                          i.globals.maxY,
                                          0
                                      )
                                    : i.globals.maxY),
                                (this.minValue = this.isLog
                                    ? this.coreUtils.getLogVal(
                                          this.w.globals.minY,
                                          0
                                      )
                                    : i.globals.minY),
                                (this.polygons =
                                    i.config.plotOptions.radar.polygons),
                                (this.strokeWidth = i.config.stroke.show
                                    ? i.config.stroke.width
                                    : 0),
                                (this.size =
                                    this.defaultSize / 2.1 -
                                    this.strokeWidth -
                                    i.config.chart.dropShadow.blur),
                                i.config.xaxis.labels.show &&
                                    (this.size =
                                        this.size -
                                        i.globals.xAxisLabelsWidth / 1.75),
                                void 0 !== i.config.plotOptions.radar.size &&
                                    (this.size =
                                        i.config.plotOptions.radar.size),
                                (this.dataRadiusOfPercent = []),
                                (this.dataRadius = []),
                                (this.angleArr = []),
                                (this.yaxisLabelsTextsPos = []);
                        }
                        return (
                            c(t, [
                                {
                                    key: "draw",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w,
                                            a = new Y(this.ctx),
                                            r = [],
                                            n = new B(this.ctx);
                                        t.length &&
                                            (this.dataPointsLen =
                                                t[
                                                    i.globals.maxValsInArrayIndex
                                                ].length),
                                            (this.disAngle =
                                                (2 * Math.PI) /
                                                this.dataPointsLen);
                                        var o = i.globals.gridWidth / 2,
                                            l = i.globals.gridHeight / 2,
                                            c =
                                                o +
                                                i.config.plotOptions.radar
                                                    .offsetX,
                                            h =
                                                l +
                                                i.config.plotOptions.radar
                                                    .offsetY,
                                            d = this.graphics.group({
                                                class: "apexcharts-radar-series apexcharts-plot-series",
                                                transform: "translate("
                                                    .concat(c || 0, ", ")
                                                    .concat(h || 0, ")"),
                                            }),
                                            u = [],
                                            f = null,
                                            g = null;
                                        if (
                                            ((this.yaxisLabels =
                                                this.graphics.group({
                                                    class: "apexcharts-yaxis",
                                                })),
                                            t.forEach(function (t, o) {
                                                var l =
                                                        t.length ===
                                                        i.globals.dataPoints,
                                                    c = e.graphics
                                                        .group()
                                                        .attr({
                                                            class: "apexcharts-series",
                                                            "data:longestSeries":
                                                                l,
                                                            seriesName:
                                                                v.escapeString(
                                                                    i.globals
                                                                        .seriesNames[
                                                                        o
                                                                    ]
                                                                ),
                                                            rel: o + 1,
                                                            "data:realIndex": o,
                                                        });
                                                (e.dataRadiusOfPercent[o] = []),
                                                    (e.dataRadius[o] = []),
                                                    (e.angleArr[o] = []),
                                                    t.forEach(function (t, i) {
                                                        var a = Math.abs(
                                                            e.maxValue -
                                                                e.minValue
                                                        );
                                                        (t += Math.abs(
                                                            e.minValue
                                                        )),
                                                            e.isLog &&
                                                                (t =
                                                                    e.coreUtils.getLogVal(
                                                                        t,
                                                                        0
                                                                    )),
                                                            (e.dataRadiusOfPercent[
                                                                o
                                                            ][i] = t / a),
                                                            (e.dataRadius[o][
                                                                i
                                                            ] =
                                                                e
                                                                    .dataRadiusOfPercent[
                                                                    o
                                                                ][i] * e.size),
                                                            (e.angleArr[o][i] =
                                                                i * e.disAngle);
                                                    }),
                                                    (u = e.getDataPointsPos(
                                                        e.dataRadius[o],
                                                        e.angleArr[o]
                                                    ));
                                                var h = e.createPaths(u, {
                                                    x: 0,
                                                    y: 0,
                                                });
                                                (f = e.graphics.group({
                                                    class: "apexcharts-series-markers-wrap apexcharts-element-hidden",
                                                })),
                                                    (g = e.graphics.group({
                                                        class: "apexcharts-datalabels",
                                                        "data:realIndex": o,
                                                    })),
                                                    i.globals.delayedElements.push(
                                                        { el: f.node, index: o }
                                                    );
                                                var d = {
                                                        i: o,
                                                        realIndex: o,
                                                        animationDelay: o,
                                                        initialSpeed:
                                                            i.config.chart
                                                                .animations
                                                                .speed,
                                                        dataChangeSpeed:
                                                            i.config.chart
                                                                .animations
                                                                .dynamicAnimation
                                                                .speed,
                                                        className:
                                                            "apexcharts-radar",
                                                        shouldClipToGrid: !1,
                                                        bindEventsOnPaths: !1,
                                                        stroke: i.globals.stroke
                                                            .colors[o],
                                                        strokeLineCap:
                                                            i.config.stroke
                                                                .lineCap,
                                                    },
                                                    p = null;
                                                i.globals.previousPaths.length >
                                                    0 &&
                                                    (p = e.getPreviousPath(o));
                                                for (
                                                    var x = 0;
                                                    x < h.linePathsTo.length;
                                                    x++
                                                ) {
                                                    var m =
                                                        e.graphics.renderPaths(
                                                            s(
                                                                s({}, d),
                                                                {},
                                                                {
                                                                    pathFrom:
                                                                        null ===
                                                                        p
                                                                            ? h
                                                                                  .linePathsFrom[
                                                                                  x
                                                                              ]
                                                                            : p,
                                                                    pathTo: h
                                                                        .linePathsTo[
                                                                        x
                                                                    ],
                                                                    strokeWidth:
                                                                        Array.isArray(
                                                                            e.strokeWidth
                                                                        )
                                                                            ? e
                                                                                  .strokeWidth[
                                                                                  o
                                                                              ]
                                                                            : e.strokeWidth,
                                                                    fill: "none",
                                                                    drawShadow:
                                                                        !1,
                                                                }
                                                            )
                                                        );
                                                    c.add(m);
                                                    var b = a.fillPath({
                                                            seriesNumber: o,
                                                        }),
                                                        y =
                                                            e.graphics.renderPaths(
                                                                s(
                                                                    s({}, d),
                                                                    {},
                                                                    {
                                                                        pathFrom:
                                                                            null ===
                                                                            p
                                                                                ? h
                                                                                      .areaPathsFrom[
                                                                                      x
                                                                                  ]
                                                                                : p,
                                                                        pathTo: h
                                                                            .areaPathsTo[
                                                                            x
                                                                        ],
                                                                        strokeWidth: 0,
                                                                        fill: b,
                                                                        drawShadow:
                                                                            !1,
                                                                    }
                                                                )
                                                            );
                                                    if (
                                                        i.config.chart
                                                            .dropShadow.enabled
                                                    ) {
                                                        var k = new w(e.ctx),
                                                            A =
                                                                i.config.chart
                                                                    .dropShadow;
                                                        k.dropShadow(
                                                            y,
                                                            Object.assign(
                                                                {},
                                                                A,
                                                                {
                                                                    noUserSpaceOnUse:
                                                                        !0,
                                                                }
                                                            ),
                                                            o
                                                        );
                                                    }
                                                    c.add(y);
                                                }
                                                t.forEach(function (t, a) {
                                                    var r = new H(
                                                            e.ctx
                                                        ).getMarkerConfig({
                                                            cssClass:
                                                                "apexcharts-marker",
                                                            seriesIndex: o,
                                                            dataPointIndex: a,
                                                        }),
                                                        l =
                                                            e.graphics.drawMarker(
                                                                u[a].x,
                                                                u[a].y,
                                                                r
                                                            );
                                                    l.attr("rel", a),
                                                        l.attr("j", a),
                                                        l.attr("index", o),
                                                        l.node.setAttribute(
                                                            "default-marker-size",
                                                            r.pSize
                                                        );
                                                    var h = e.graphics.group({
                                                        class: "apexcharts-series-markers",
                                                    });
                                                    h && h.add(l),
                                                        f.add(h),
                                                        c.add(f);
                                                    var d = i.config.dataLabels;
                                                    if (d.enabled) {
                                                        var p = d.formatter(
                                                            i.globals.series[o][
                                                                a
                                                            ],
                                                            {
                                                                seriesIndex: o,
                                                                dataPointIndex:
                                                                    a,
                                                                w: i,
                                                            }
                                                        );
                                                        n.plotDataLabelsText({
                                                            x: u[a].x,
                                                            y: u[a].y,
                                                            text: p,
                                                            textAnchor:
                                                                "middle",
                                                            i: o,
                                                            j: o,
                                                            parent: g,
                                                            offsetCorrection:
                                                                !1,
                                                            dataLabelsConfig: s(
                                                                {},
                                                                d
                                                            ),
                                                        });
                                                    }
                                                    c.add(g);
                                                }),
                                                    r.push(c);
                                            }),
                                            this.drawPolygons({ parent: d }),
                                            i.config.xaxis.labels.show)
                                        ) {
                                            var p = this.drawXAxisTexts();
                                            d.add(p);
                                        }
                                        return (
                                            r.forEach(function (t) {
                                                d.add(t);
                                            }),
                                            d.add(this.yaxisLabels),
                                            d
                                        );
                                    },
                                },
                                {
                                    key: "drawPolygons",
                                    value: function (t) {
                                        for (
                                            var e = this,
                                                i = this.w,
                                                a = t.parent,
                                                r = new Tt(this.ctx),
                                                s =
                                                    i.globals.yAxisScale[0].result.reverse(),
                                                n = s.length,
                                                o = [],
                                                l = this.size / (n - 1),
                                                c = 0;
                                            c < n;
                                            c++
                                        )
                                            o[c] = l * c;
                                        o.reverse();
                                        var h = [],
                                            d = [];
                                        o.forEach(function (t, i) {
                                            var a = v.getPolygonPos(
                                                    t,
                                                    e.dataPointsLen
                                                ),
                                                r = "";
                                            a.forEach(function (t, a) {
                                                if (0 === i) {
                                                    var s = e.graphics.drawLine(
                                                        t.x,
                                                        t.y,
                                                        0,
                                                        0,
                                                        Array.isArray(
                                                            e.polygons
                                                                .connectorColors
                                                        )
                                                            ? e.polygons
                                                                  .connectorColors[
                                                                  a
                                                              ]
                                                            : e.polygons
                                                                  .connectorColors
                                                    );
                                                    d.push(s);
                                                }
                                                0 === a &&
                                                    e.yaxisLabelsTextsPos.push({
                                                        x: t.x,
                                                        y: t.y,
                                                    }),
                                                    (r +=
                                                        t.x + "," + t.y + " ");
                                            }),
                                                h.push(r);
                                        }),
                                            h.forEach(function (t, r) {
                                                var s = e.polygons.strokeColors,
                                                    n = e.polygons.strokeWidth,
                                                    o = e.graphics.drawPolygon(
                                                        t,
                                                        Array.isArray(s)
                                                            ? s[r]
                                                            : s,
                                                        Array.isArray(n)
                                                            ? n[r]
                                                            : n,
                                                        i.globals.radarPolygons
                                                            .fill.colors[r]
                                                    );
                                                a.add(o);
                                            }),
                                            d.forEach(function (t) {
                                                a.add(t);
                                            }),
                                            i.config.yaxis[0].show &&
                                                this.yaxisLabelsTextsPos.forEach(
                                                    function (t, i) {
                                                        var a =
                                                            r.drawYAxisTexts(
                                                                t.x,
                                                                t.y,
                                                                i,
                                                                s[i]
                                                            );
                                                        e.yaxisLabels.add(a);
                                                    }
                                                );
                                    },
                                },
                                {
                                    key: "drawXAxisTexts",
                                    value: function () {
                                        var t = this,
                                            e = this.w,
                                            i = e.config.xaxis.labels,
                                            a = this.graphics.group({
                                                class: "apexcharts-xaxis",
                                            }),
                                            r = v.getPolygonPos(
                                                this.size,
                                                this.dataPointsLen
                                            );
                                        return (
                                            e.globals.labels.forEach(function (
                                                n,
                                                o
                                            ) {
                                                var l =
                                                        e.config.xaxis.labels
                                                            .formatter,
                                                    c = new B(t.ctx);
                                                if (r[o]) {
                                                    var h = t.getTextPos(
                                                            r[o],
                                                            t.size
                                                        ),
                                                        d = l(n, {
                                                            seriesIndex: -1,
                                                            dataPointIndex: o,
                                                            w: e,
                                                        });
                                                    c.plotDataLabelsText({
                                                        x: h.newX,
                                                        y: h.newY,
                                                        text: d,
                                                        textAnchor:
                                                            h.textAnchor,
                                                        i: o,
                                                        j: o,
                                                        parent: a,
                                                        color:
                                                            Array.isArray(
                                                                i.style.colors
                                                            ) &&
                                                            i.style.colors[o]
                                                                ? i.style
                                                                      .colors[o]
                                                                : "#a8a8a8",
                                                        dataLabelsConfig: s(
                                                            {
                                                                textAnchor:
                                                                    h.textAnchor,
                                                                dropShadow: {
                                                                    enabled: !1,
                                                                },
                                                            },
                                                            i
                                                        ),
                                                        offsetCorrection: !1,
                                                    });
                                                }
                                            }),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "createPaths",
                                    value: function (t, e) {
                                        var i = this,
                                            a = [],
                                            r = [],
                                            s = [],
                                            n = [];
                                        if (t.length) {
                                            (r = [
                                                this.graphics.move(e.x, e.y),
                                            ]),
                                                (n = [
                                                    this.graphics.move(
                                                        e.x,
                                                        e.y
                                                    ),
                                                ]);
                                            var o = this.graphics.move(
                                                    t[0].x,
                                                    t[0].y
                                                ),
                                                l = this.graphics.move(
                                                    t[0].x,
                                                    t[0].y
                                                );
                                            t.forEach(function (e, a) {
                                                (o += i.graphics.line(
                                                    e.x,
                                                    e.y
                                                )),
                                                    (l += i.graphics.line(
                                                        e.x,
                                                        e.y
                                                    )),
                                                    a === t.length - 1 &&
                                                        ((o += "Z"),
                                                        (l += "Z"));
                                            }),
                                                a.push(o),
                                                s.push(l);
                                        }
                                        return {
                                            linePathsFrom: r,
                                            linePathsTo: a,
                                            areaPathsFrom: n,
                                            areaPathsTo: s,
                                        };
                                    },
                                },
                                {
                                    key: "getTextPos",
                                    value: function (t, e) {
                                        var i = "middle",
                                            a = t.x,
                                            r = t.y;
                                        return (
                                            Math.abs(t.x) >= 10
                                                ? t.x > 0
                                                    ? ((i = "start"), (a += 10))
                                                    : t.x < 0 &&
                                                      ((i = "end"), (a -= 10))
                                                : (i = "middle"),
                                            Math.abs(t.y) >= e - 10 &&
                                                (t.y < 0
                                                    ? (r -= 10)
                                                    : t.y > 0 && (r += 10)),
                                            { textAnchor: i, newX: a, newY: r }
                                        );
                                    },
                                },
                                {
                                    key: "getPreviousPath",
                                    value: function (t) {
                                        for (
                                            var e = this.w, i = null, a = 0;
                                            a < e.globals.previousPaths.length;
                                            a++
                                        ) {
                                            var r = e.globals.previousPaths[a];
                                            r.paths.length > 0 &&
                                                parseInt(r.realIndex, 10) ===
                                                    parseInt(t, 10) &&
                                                void 0 !==
                                                    e.globals.previousPaths[a]
                                                        .paths[0] &&
                                                (i =
                                                    e.globals.previousPaths[a]
                                                        .paths[0].d);
                                        }
                                        return i;
                                    },
                                },
                                {
                                    key: "getDataPointsPos",
                                    value: function (t, e) {
                                        var i =
                                            arguments.length > 2 &&
                                            void 0 !== arguments[2]
                                                ? arguments[2]
                                                : this.dataPointsLen;
                                        (t = t || []), (e = e || []);
                                        for (var a = [], r = 0; r < i; r++) {
                                            var s = {};
                                            (s.x = t[r] * Math.sin(e[r])),
                                                (s.y = -t[r] * Math.cos(e[r])),
                                                a.push(s);
                                        }
                                        return a;
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    It = (function (t) {
                        d(i, Mt);
                        var e = g(i);
                        function i(t) {
                            var a;
                            o(this, i),
                                ((a = e.call(this, t)).ctx = t),
                                (a.w = t.w),
                                (a.animBeginArr = [0]),
                                (a.animDur = 0);
                            var r = a.w;
                            return (
                                (a.startAngle =
                                    r.config.plotOptions.radialBar.startAngle),
                                (a.endAngle =
                                    r.config.plotOptions.radialBar.endAngle),
                                (a.totalAngle = Math.abs(
                                    r.config.plotOptions.radialBar.endAngle -
                                        r.config.plotOptions.radialBar
                                            .startAngle
                                )),
                                (a.trackStartAngle =
                                    r.config.plotOptions.radialBar.track.startAngle),
                                (a.trackEndAngle =
                                    r.config.plotOptions.radialBar.track.endAngle),
                                (a.donutDataLabels =
                                    a.w.config.plotOptions.radialBar.dataLabels),
                                (a.radialDataLabels = a.donutDataLabels),
                                a.trackStartAngle ||
                                    (a.trackStartAngle = a.startAngle),
                                a.trackEndAngle ||
                                    (a.trackEndAngle = a.endAngle),
                                360 === a.endAngle && (a.endAngle = 359.99),
                                (a.margin = parseInt(
                                    r.config.plotOptions.radialBar.track.margin,
                                    10
                                )),
                                a
                            );
                        }
                        return (
                            c(i, [
                                {
                                    key: "draw",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new k(this.ctx),
                                            a = i.group({
                                                class: "apexcharts-radialbar",
                                            });
                                        if (e.globals.noData) return a;
                                        var r = i.group(),
                                            s = this.defaultSize / 2,
                                            n = e.globals.gridWidth / 2,
                                            o = this.defaultSize / 2.05;
                                        e.config.chart.sparkline.enabled ||
                                            (o =
                                                o -
                                                e.config.stroke.width -
                                                e.config.chart.dropShadow.blur);
                                        var l = e.globals.fill.colors;
                                        if (
                                            e.config.plotOptions.radialBar.track
                                                .show
                                        ) {
                                            var c = this.drawTracks({
                                                size: o,
                                                centerX: n,
                                                centerY: s,
                                                colorArr: l,
                                                series: t,
                                            });
                                            r.add(c);
                                        }
                                        var h = this.drawArcs({
                                                size: o,
                                                centerX: n,
                                                centerY: s,
                                                colorArr: l,
                                                series: t,
                                            }),
                                            d = 360;
                                        e.config.plotOptions.radialBar
                                            .startAngle < 0 &&
                                            (d = this.totalAngle);
                                        var u = (360 - d) / 360;
                                        if (
                                            ((e.globals.radialSize = o - o * u),
                                            this.radialDataLabels.value.show)
                                        ) {
                                            var f = Math.max(
                                                this.radialDataLabels.value
                                                    .offsetY,
                                                this.radialDataLabels.name
                                                    .offsetY
                                            );
                                            e.globals.radialSize += f * u;
                                        }
                                        return (
                                            r.add(h.g),
                                            "front" ===
                                                e.config.plotOptions.radialBar
                                                    .hollow.position &&
                                                (h.g.add(h.elHollow),
                                                h.dataLabels &&
                                                    h.g.add(h.dataLabels)),
                                            a.add(r),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "drawTracks",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new k(this.ctx),
                                            a = i.group({
                                                class: "apexcharts-tracks",
                                            }),
                                            r = new w(this.ctx),
                                            s = new Y(this.ctx),
                                            n = this.getStrokeWidth(t);
                                        t.size = t.size - n / 2;
                                        for (
                                            var o = 0;
                                            o < t.series.length;
                                            o++
                                        ) {
                                            var l = i.group({
                                                class: "apexcharts-radialbar-track apexcharts-track",
                                            });
                                            a.add(l),
                                                l.attr({ rel: o + 1 }),
                                                (t.size =
                                                    t.size - n - this.margin);
                                            var c =
                                                    e.config.plotOptions
                                                        .radialBar.track,
                                                h = s.fillPath({
                                                    seriesNumber: 0,
                                                    size: t.size,
                                                    fillColors: Array.isArray(
                                                        c.background
                                                    )
                                                        ? c.background[o]
                                                        : c.background,
                                                    solid: !0,
                                                }),
                                                d = this.trackStartAngle,
                                                u = this.trackEndAngle;
                                            Math.abs(u) + Math.abs(d) >= 360 &&
                                                (u =
                                                    360 -
                                                    Math.abs(this.startAngle) -
                                                    0.1);
                                            var f = i.drawPath({
                                                d: "",
                                                stroke: h,
                                                strokeWidth:
                                                    (n *
                                                        parseInt(
                                                            c.strokeWidth,
                                                            10
                                                        )) /
                                                    100,
                                                fill: "none",
                                                strokeOpacity: c.opacity,
                                                classes:
                                                    "apexcharts-radialbar-area",
                                            });
                                            if (c.dropShadow.enabled) {
                                                var g = c.dropShadow;
                                                r.dropShadow(f, g);
                                            }
                                            l.add(f),
                                                f.attr(
                                                    "id",
                                                    "apexcharts-radialbarTrack-" +
                                                        o
                                                ),
                                                this.animatePaths(f, {
                                                    centerX: t.centerX,
                                                    centerY: t.centerY,
                                                    endAngle: u,
                                                    startAngle: d,
                                                    size: t.size,
                                                    i: o,
                                                    totalItems: 2,
                                                    animBeginArr: 0,
                                                    dur: 0,
                                                    isTrack: !0,
                                                    easing: e.globals.easing,
                                                });
                                        }
                                        return a;
                                    },
                                },
                                {
                                    key: "drawArcs",
                                    value: function (t) {
                                        var e = this.w,
                                            i = new k(this.ctx),
                                            a = new Y(this.ctx),
                                            r = new w(this.ctx),
                                            s = i.group(),
                                            n = this.getStrokeWidth(t);
                                        t.size = t.size - n / 2;
                                        var o =
                                                e.config.plotOptions.radialBar
                                                    .hollow.background,
                                            l =
                                                t.size -
                                                n * t.series.length -
                                                this.margin * t.series.length -
                                                (n *
                                                    parseInt(
                                                        e.config.plotOptions
                                                            .radialBar.track
                                                            .strokeWidth,
                                                        10
                                                    )) /
                                                    100 /
                                                    2,
                                            c =
                                                l -
                                                e.config.plotOptions.radialBar
                                                    .hollow.margin;
                                        void 0 !==
                                            e.config.plotOptions.radialBar
                                                .hollow.image &&
                                            (o = this.drawHollowImage(
                                                t,
                                                s,
                                                l,
                                                o
                                            ));
                                        var h = this.drawHollow({
                                            size: c,
                                            centerX: t.centerX,
                                            centerY: t.centerY,
                                            fill: o || "transparent",
                                        });
                                        if (
                                            e.config.plotOptions.radialBar
                                                .hollow.dropShadow.enabled
                                        ) {
                                            var d =
                                                e.config.plotOptions.radialBar
                                                    .hollow.dropShadow;
                                            r.dropShadow(h, d);
                                        }
                                        var u = 1;
                                        !this.radialDataLabels.total.show &&
                                            e.globals.series.length > 1 &&
                                            (u = 0);
                                        var f = null;
                                        this.radialDataLabels.show &&
                                            (f = this.renderInnerDataLabels(
                                                this.radialDataLabels,
                                                {
                                                    hollowSize: l,
                                                    centerX: t.centerX,
                                                    centerY: t.centerY,
                                                    opacity: u,
                                                }
                                            )),
                                            "back" ===
                                                e.config.plotOptions.radialBar
                                                    .hollow.position &&
                                                (s.add(h), f && s.add(f));
                                        var g = !1;
                                        e.config.plotOptions.radialBar
                                            .inverseOrder && (g = !0);
                                        for (
                                            var p = g ? t.series.length - 1 : 0;
                                            g ? p >= 0 : p < t.series.length;
                                            g ? p-- : p++
                                        ) {
                                            var x = i.group({
                                                class: "apexcharts-series apexcharts-radial-series",
                                                seriesName: v.escapeString(
                                                    e.globals.seriesNames[p]
                                                ),
                                            });
                                            s.add(x),
                                                x.attr({
                                                    rel: p + 1,
                                                    "data:realIndex": p,
                                                }),
                                                this.ctx.series.addCollapsedClassToSeries(
                                                    x,
                                                    p
                                                ),
                                                (t.size =
                                                    t.size - n - this.margin);
                                            var m = a.fillPath({
                                                    seriesNumber: p,
                                                    size: t.size,
                                                    value: t.series[p],
                                                }),
                                                b = this.startAngle,
                                                y = void 0,
                                                A =
                                                    v.negToZero(
                                                        t.series[p] > 100
                                                            ? 100
                                                            : t.series[p]
                                                    ) / 100,
                                                S =
                                                    Math.round(
                                                        this.totalAngle * A
                                                    ) + this.startAngle,
                                                C = void 0;
                                            e.globals.dataChanged &&
                                                ((y = this.startAngle),
                                                (C =
                                                    Math.round(
                                                        (this.totalAngle *
                                                            v.negToZero(
                                                                e.globals
                                                                    .previousPaths[
                                                                    p
                                                                ]
                                                            )) /
                                                            100
                                                    ) + y)),
                                                Math.abs(S) + Math.abs(b) >=
                                                    360 && (S -= 0.01),
                                                Math.abs(C) + Math.abs(y) >=
                                                    360 && (C -= 0.01);
                                            var P = S - b,
                                                L = Array.isArray(
                                                    e.config.stroke.dashArray
                                                )
                                                    ? e.config.stroke.dashArray[
                                                          p
                                                      ]
                                                    : e.config.stroke.dashArray,
                                                T = i.drawPath({
                                                    d: "",
                                                    stroke: m,
                                                    strokeWidth: n,
                                                    fill: "none",
                                                    fillOpacity:
                                                        e.config.fill.opacity,
                                                    classes:
                                                        "apexcharts-radialbar-area apexcharts-radialbar-slice-" +
                                                        p,
                                                    strokeDashArray: L,
                                                });
                                            if (
                                                (k.setAttrs(T.node, {
                                                    "data:angle": P,
                                                    "data:value": t.series[p],
                                                }),
                                                e.config.chart.dropShadow
                                                    .enabled)
                                            ) {
                                                var M =
                                                    e.config.chart.dropShadow;
                                                r.dropShadow(T, M, p);
                                            }
                                            r.setSelectionFilter(T, 0, p),
                                                this.addListeners(
                                                    T,
                                                    this.radialDataLabels
                                                ),
                                                x.add(T),
                                                T.attr({ index: 0, j: p });
                                            var E = 0;
                                            !this.initialAnim ||
                                                e.globals.resized ||
                                                e.globals.dataChanged ||
                                                (E =
                                                    e.config.chart.animations
                                                        .speed),
                                                e.globals.dataChanged &&
                                                    (E =
                                                        e.config.chart
                                                            .animations
                                                            .dynamicAnimation
                                                            .speed),
                                                (this.animDur =
                                                    E /
                                                        (1.2 *
                                                            t.series.length) +
                                                    this.animDur),
                                                this.animBeginArr.push(
                                                    this.animDur
                                                ),
                                                this.animatePaths(T, {
                                                    centerX: t.centerX,
                                                    centerY: t.centerY,
                                                    endAngle: S,
                                                    startAngle: b,
                                                    prevEndAngle: C,
                                                    prevStartAngle: y,
                                                    size: t.size,
                                                    i: p,
                                                    totalItems: 2,
                                                    animBeginArr:
                                                        this.animBeginArr,
                                                    dur: E,
                                                    shouldSetPrevPaths: !0,
                                                    easing: e.globals.easing,
                                                });
                                        }
                                        return {
                                            g: s,
                                            elHollow: h,
                                            dataLabels: f,
                                        };
                                    },
                                },
                                {
                                    key: "drawHollow",
                                    value: function (t) {
                                        var e = new k(this.ctx).drawCircle(
                                            2 * t.size
                                        );
                                        return (
                                            e.attr({
                                                class: "apexcharts-radialbar-hollow",
                                                cx: t.centerX,
                                                cy: t.centerY,
                                                r: t.size,
                                                fill: t.fill,
                                            }),
                                            e
                                        );
                                    },
                                },
                                {
                                    key: "drawHollowImage",
                                    value: function (t, e, i, a) {
                                        var r = this.w,
                                            s = new Y(this.ctx),
                                            n = v.randomId(),
                                            o =
                                                r.config.plotOptions.radialBar
                                                    .hollow.image;
                                        if (
                                            r.config.plotOptions.radialBar
                                                .hollow.imageClipped
                                        )
                                            s.clippedImgArea({
                                                width: i,
                                                height: i,
                                                image: o,
                                                patternID: "pattern"
                                                    .concat(r.globals.cuid)
                                                    .concat(n),
                                            }),
                                                (a = "url(#pattern"
                                                    .concat(r.globals.cuid)
                                                    .concat(n, ")"));
                                        else {
                                            var l =
                                                    r.config.plotOptions
                                                        .radialBar.hollow
                                                        .imageWidth,
                                                c =
                                                    r.config.plotOptions
                                                        .radialBar.hollow
                                                        .imageHeight;
                                            if (void 0 === l && void 0 === c) {
                                                var h =
                                                    r.globals.dom.Paper.image(
                                                        o
                                                    ).loaded(function (e) {
                                                        this.move(
                                                            t.centerX -
                                                                e.width / 2 +
                                                                r.config
                                                                    .plotOptions
                                                                    .radialBar
                                                                    .hollow
                                                                    .imageOffsetX,
                                                            t.centerY -
                                                                e.height / 2 +
                                                                r.config
                                                                    .plotOptions
                                                                    .radialBar
                                                                    .hollow
                                                                    .imageOffsetY
                                                        );
                                                    });
                                                e.add(h);
                                            } else {
                                                var d =
                                                    r.globals.dom.Paper.image(
                                                        o
                                                    ).loaded(function (e) {
                                                        this.move(
                                                            t.centerX -
                                                                l / 2 +
                                                                r.config
                                                                    .plotOptions
                                                                    .radialBar
                                                                    .hollow
                                                                    .imageOffsetX,
                                                            t.centerY -
                                                                c / 2 +
                                                                r.config
                                                                    .plotOptions
                                                                    .radialBar
                                                                    .hollow
                                                                    .imageOffsetY
                                                        ),
                                                            this.size(l, c);
                                                    });
                                                e.add(d);
                                            }
                                        }
                                        return a;
                                    },
                                },
                                {
                                    key: "getStrokeWidth",
                                    value: function (t) {
                                        var e = this.w;
                                        return (
                                            (t.size *
                                                (100 -
                                                    parseInt(
                                                        e.config.plotOptions
                                                            .radialBar.hollow
                                                            .size,
                                                        10
                                                    ))) /
                                                100 /
                                                (t.series.length + 1) -
                                            this.margin
                                        );
                                    },
                                },
                            ]),
                            i
                        );
                    })(),
                    Ot = (function (t) {
                        d(i, At);
                        var e = g(i);
                        function i() {
                            return o(this, i), e.apply(this, arguments);
                        }
                        return (
                            c(i, [
                                {
                                    key: "draw",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = new k(this.ctx);
                                        (this.rangeBarOptions =
                                            this.w.config.plotOptions.rangeBar),
                                            (this.series = t),
                                            (this.seriesRangeStart =
                                                i.globals.seriesRangeStart),
                                            (this.seriesRangeEnd =
                                                i.globals.seriesRangeEnd),
                                            this.barHelpers.initVariables(t);
                                        for (
                                            var r = a.group({
                                                    class: "apexcharts-rangebar-series apexcharts-plot-series",
                                                }),
                                                n = 0;
                                            n < t.length;
                                            n++
                                        ) {
                                            var o,
                                                l,
                                                c,
                                                d,
                                                u = void 0,
                                                f = void 0,
                                                g = i.globals.comboCharts
                                                    ? e[n]
                                                    : n,
                                                p = a.group({
                                                    class: "apexcharts-series",
                                                    seriesName: v.escapeString(
                                                        i.globals.seriesNames[g]
                                                    ),
                                                    rel: n + 1,
                                                    "data:realIndex": g,
                                                });
                                            this.ctx.series.addCollapsedClassToSeries(
                                                p,
                                                g
                                            ),
                                                t[n].length > 0 &&
                                                    (this.visibleI =
                                                        this.visibleI + 1);
                                            var x = 0,
                                                m = 0;
                                            this.yRatio.length > 1 &&
                                                (this.yaxisIndex = g);
                                            var b =
                                                this.barHelpers.initialPositions();
                                            (f = b.y),
                                                (d = b.zeroW),
                                                (u = b.x),
                                                (m = b.barWidth),
                                                (x = b.barHeight),
                                                (o = b.xDivision),
                                                (l = b.yDivision),
                                                (c = b.zeroH);
                                            for (
                                                var y = a.group({
                                                        class: "apexcharts-datalabels",
                                                        "data:realIndex": g,
                                                    }),
                                                    w = a.group({
                                                        class: "apexcharts-rangebar-goals-markers",
                                                        style: "pointer-events: none",
                                                    }),
                                                    A = 0;
                                                A < i.globals.dataPoints;
                                                A++
                                            ) {
                                                var S,
                                                    C =
                                                        this.barHelpers.getStrokeWidth(
                                                            n,
                                                            A,
                                                            g
                                                        ),
                                                    P =
                                                        this.seriesRangeStart[
                                                            n
                                                        ][A],
                                                    L =
                                                        this.seriesRangeEnd[n][
                                                            A
                                                        ],
                                                    T = null,
                                                    M = null,
                                                    E = null,
                                                    I = {
                                                        x: u,
                                                        y: f,
                                                        strokeWidth: C,
                                                        elSeries: p,
                                                    },
                                                    O = this.seriesLen;
                                                if (
                                                    (i.config.plotOptions.bar
                                                        .rangeBarGroupRows &&
                                                        (O = 1),
                                                    void 0 ===
                                                        i.config.series[n].data[
                                                            A
                                                        ])
                                                )
                                                    break;
                                                if (this.isHorizontal) {
                                                    E = f + x * this.visibleI;
                                                    var z = (l - x * O) / 2;
                                                    if (
                                                        i.config.series[n].data[
                                                            A
                                                        ].x
                                                    ) {
                                                        var F =
                                                            this.detectOverlappingBars(
                                                                {
                                                                    i: n,
                                                                    j: A,
                                                                    barYPosition:
                                                                        E,
                                                                    srty: z,
                                                                    barHeight:
                                                                        x,
                                                                    yDivision:
                                                                        l,
                                                                    initPositions:
                                                                        b,
                                                                }
                                                            );
                                                        (x = F.barHeight),
                                                            (E =
                                                                F.barYPosition);
                                                    }
                                                    m = (T =
                                                        this.drawRangeBarPaths(
                                                            s(
                                                                {
                                                                    indexes: {
                                                                        i: n,
                                                                        j: A,
                                                                        realIndex:
                                                                            g,
                                                                    },
                                                                    barHeight:
                                                                        x,
                                                                    barYPosition:
                                                                        E,
                                                                    zeroW: d,
                                                                    yDivision:
                                                                        l,
                                                                    y1: P,
                                                                    y2: L,
                                                                },
                                                                I
                                                            )
                                                        )).barWidth;
                                                } else {
                                                    i.globals.isXNumeric &&
                                                        (u =
                                                            (i.globals.seriesX[
                                                                n
                                                            ][A] -
                                                                i.globals
                                                                    .minX) /
                                                                this.xRatio -
                                                            m / 2),
                                                        (M =
                                                            u +
                                                            m * this.visibleI);
                                                    var D = (o - m * O) / 2;
                                                    if (
                                                        i.config.series[n].data[
                                                            A
                                                        ].x
                                                    ) {
                                                        var N =
                                                            this.detectOverlappingBars(
                                                                {
                                                                    i: n,
                                                                    j: A,
                                                                    barXPosition:
                                                                        M,
                                                                    srtx: D,
                                                                    barWidth: m,
                                                                    xDivision:
                                                                        o,
                                                                    initPositions:
                                                                        b,
                                                                }
                                                            );
                                                        (m = N.barWidth),
                                                            (M =
                                                                N.barXPosition);
                                                    }
                                                    x = (T =
                                                        this.drawRangeColumnPaths(
                                                            s(
                                                                {
                                                                    indexes: {
                                                                        i: n,
                                                                        j: A,
                                                                        realIndex:
                                                                            g,
                                                                    },
                                                                    barWidth: m,
                                                                    barXPosition:
                                                                        M,
                                                                    zeroH: c,
                                                                    xDivision:
                                                                        o,
                                                                },
                                                                I
                                                            )
                                                        )).barHeight;
                                                }
                                                var X =
                                                    this.barHelpers.drawGoalLine(
                                                        {
                                                            barXPosition:
                                                                T.barXPosition,
                                                            barYPosition: E,
                                                            goalX: T.goalX,
                                                            goalY: T.goalY,
                                                            barHeight: x,
                                                            barWidth: m,
                                                        }
                                                    );
                                                X && w.add(X),
                                                    (f = T.y),
                                                    (u = T.x);
                                                var R =
                                                        this.barHelpers.getPathFillColor(
                                                            t,
                                                            n,
                                                            A,
                                                            g
                                                        ),
                                                    Y =
                                                        i.globals.stroke.colors[
                                                            g
                                                        ];
                                                this.renderSeries(
                                                    (h(
                                                        (S = {
                                                            realIndex: g,
                                                            pathFill: R,
                                                            lineFill: Y,
                                                            j: A,
                                                            i: n,
                                                            x: u,
                                                            y: f,
                                                            y1: P,
                                                            y2: L,
                                                            pathFrom:
                                                                T.pathFrom,
                                                            pathTo: T.pathTo,
                                                            strokeWidth: C,
                                                            elSeries: p,
                                                            series: t,
                                                            barHeight: x,
                                                            barWidth: m,
                                                            barXPosition: M,
                                                            barYPosition: E,
                                                        }),
                                                        "barWidth",
                                                        m
                                                    ),
                                                    h(S, "elDataLabelsWrap", y),
                                                    h(S, "elGoalsMarkers", w),
                                                    h(
                                                        S,
                                                        "visibleSeries",
                                                        this.visibleI
                                                    ),
                                                    h(S, "type", "rangebar"),
                                                    S)
                                                );
                                            }
                                            r.add(p);
                                        }
                                        return r;
                                    },
                                },
                                {
                                    key: "detectOverlappingBars",
                                    value: function (t) {
                                        var e = t.i,
                                            i = t.j,
                                            a = t.barYPosition,
                                            r = t.barXPosition,
                                            s = t.srty,
                                            n = t.srtx,
                                            o = t.barHeight,
                                            l = t.barWidth,
                                            c = t.yDivision,
                                            h = t.xDivision,
                                            d = t.initPositions,
                                            u = this.w,
                                            f = [],
                                            g =
                                                u.config.series[e].data[i]
                                                    .rangeName,
                                            p = u.config.series[e].data[i].x,
                                            x = Array.isArray(p)
                                                ? p.join(" ")
                                                : p,
                                            m = u.globals.labels
                                                .map(function (t) {
                                                    return Array.isArray(t)
                                                        ? t.join(" ")
                                                        : t;
                                                })
                                                .indexOf(x),
                                            b = u.globals.seriesRange[
                                                e
                                            ].findIndex(function (t) {
                                                return (
                                                    t.x === x &&
                                                    t.overlaps.length > 0
                                                );
                                            });
                                        return (
                                            this.isHorizontal
                                                ? ((a = u.config.plotOptions.bar
                                                      .rangeBarGroupRows
                                                      ? s + c * m
                                                      : s +
                                                        o * this.visibleI +
                                                        c * m),
                                                  b > -1 &&
                                                      !u.config.plotOptions.bar
                                                          .rangeBarOverlap &&
                                                      (f =
                                                          u.globals.seriesRange[
                                                              e
                                                          ][b]
                                                              .overlaps).indexOf(
                                                          g
                                                      ) > -1 &&
                                                      (a =
                                                          (o =
                                                              d.barHeight /
                                                              f.length) *
                                                              this.visibleI +
                                                          (c *
                                                              (100 -
                                                                  parseInt(
                                                                      this
                                                                          .barOptions
                                                                          .barHeight,
                                                                      10
                                                                  ))) /
                                                              100 /
                                                              2 +
                                                          o *
                                                              (this.visibleI +
                                                                  f.indexOf(
                                                                      g
                                                                  )) +
                                                          c * m))
                                                : (m > -1 &&
                                                      (r = u.config.plotOptions
                                                          .bar.rangeBarGroupRows
                                                          ? n + h * m
                                                          : n +
                                                            l * this.visibleI +
                                                            h * m),
                                                  b > -1 &&
                                                      !u.config.plotOptions.bar
                                                          .rangeBarOverlap &&
                                                      (f =
                                                          u.globals.seriesRange[
                                                              e
                                                          ][b]
                                                              .overlaps).indexOf(
                                                          g
                                                      ) > -1 &&
                                                      (r =
                                                          (l =
                                                              d.barWidth /
                                                              f.length) *
                                                              this.visibleI +
                                                          (h *
                                                              (100 -
                                                                  parseInt(
                                                                      this
                                                                          .barOptions
                                                                          .barWidth,
                                                                      10
                                                                  ))) /
                                                              100 /
                                                              2 +
                                                          l *
                                                              (this.visibleI +
                                                                  f.indexOf(
                                                                      g
                                                                  )) +
                                                          h * m)),
                                            {
                                                barYPosition: a,
                                                barXPosition: r,
                                                barHeight: o,
                                                barWidth: l,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawRangeColumnPaths",
                                    value: function (t) {
                                        var e = t.indexes,
                                            i = t.x,
                                            a = t.xDivision,
                                            r = t.barWidth,
                                            s = t.barXPosition,
                                            n = t.zeroH,
                                            o = this.w,
                                            l = e.i,
                                            c = e.j,
                                            h = this.yRatio[this.yaxisIndex],
                                            d = e.realIndex,
                                            u = this.getRangeValue(d, c),
                                            f = Math.min(u.start, u.end),
                                            g = Math.max(u.start, u.end);
                                        void 0 === this.series[l][c] ||
                                        null === this.series[l][c]
                                            ? (f = n)
                                            : ((f = n - f / h),
                                              (g = n - g / h));
                                        var p = Math.abs(g - f),
                                            x = this.barHelpers.getColumnPaths({
                                                barXPosition: s,
                                                barWidth: r,
                                                y1: f,
                                                y2: g,
                                                strokeWidth: this.strokeWidth,
                                                series: this.seriesRangeEnd,
                                                realIndex: e.realIndex,
                                                i: d,
                                                j: c,
                                                w: o,
                                            });
                                        return (
                                            o.globals.isXNumeric || (i += a),
                                            {
                                                pathTo: x.pathTo,
                                                pathFrom: x.pathFrom,
                                                barHeight: p,
                                                x: i,
                                                y: g,
                                                goalY: this.barHelpers.getGoalValues(
                                                    "y",
                                                    null,
                                                    n,
                                                    l,
                                                    c
                                                ),
                                                barXPosition: s,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "drawRangeBarPaths",
                                    value: function (t) {
                                        var e = t.indexes,
                                            i = t.y,
                                            a = t.y1,
                                            r = t.y2,
                                            s = t.yDivision,
                                            n = t.barHeight,
                                            o = t.barYPosition,
                                            l = t.zeroW,
                                            c = this.w,
                                            h = l + a / this.invertedYRatio,
                                            d = l + r / this.invertedYRatio,
                                            u = Math.abs(d - h),
                                            f = this.barHelpers.getBarpaths({
                                                barYPosition: o,
                                                barHeight: n,
                                                x1: h,
                                                x2: d,
                                                strokeWidth: this.strokeWidth,
                                                series: this.seriesRangeEnd,
                                                i: e.realIndex,
                                                realIndex: e.realIndex,
                                                j: e.j,
                                                w: c,
                                            });
                                        return (
                                            c.globals.isXNumeric || (i += s),
                                            {
                                                pathTo: f.pathTo,
                                                pathFrom: f.pathFrom,
                                                barWidth: u,
                                                x: d,
                                                goalX: this.barHelpers.getGoalValues(
                                                    "x",
                                                    l,
                                                    null,
                                                    e.realIndex,
                                                    e.j
                                                ),
                                                y: i,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "getRangeValue",
                                    value: function (t, e) {
                                        var i = this.w;
                                        return {
                                            start: i.globals.seriesRangeStart[
                                                t
                                            ][e],
                                            end: i.globals.seriesRangeEnd[t][e],
                                        };
                                    },
                                },
                            ]),
                            i
                        );
                    })(),
                    zt = (function () {
                        function t(e) {
                            o(this, t), (this.w = e.w), (this.lineCtx = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "sameValueSeriesFix",
                                    value: function (t, e) {
                                        var i = this.w;
                                        if (
                                            ("gradient" ===
                                                i.config.fill.type ||
                                                "gradient" ===
                                                    i.config.fill.type[t]) &&
                                            new A(
                                                this.lineCtx.ctx,
                                                i
                                            ).seriesHaveSameValues(t)
                                        ) {
                                            var a = e[t].slice();
                                            (a[a.length - 1] =
                                                a[a.length - 1] + 1e-6),
                                                (e[t] = a);
                                        }
                                        return e;
                                    },
                                },
                                {
                                    key: "calculatePoints",
                                    value: function (t) {
                                        var e = t.series,
                                            i = t.realIndex,
                                            a = t.x,
                                            r = t.y,
                                            s = t.i,
                                            n = t.j,
                                            o = t.prevY,
                                            l = this.w,
                                            c = [],
                                            h = [];
                                        if (0 === n) {
                                            var d =
                                                this.lineCtx
                                                    .categoryAxisCorrection +
                                                l.config.markers.offsetX;
                                            l.globals.isXNumeric &&
                                                (d =
                                                    (l.globals.seriesX[i][0] -
                                                        l.globals.minX) /
                                                        this.lineCtx.xRatio +
                                                    l.config.markers.offsetX),
                                                c.push(d),
                                                h.push(
                                                    v.isNumber(e[s][0])
                                                        ? o +
                                                              l.config.markers
                                                                  .offsetY
                                                        : null
                                                ),
                                                c.push(
                                                    a + l.config.markers.offsetX
                                                ),
                                                h.push(
                                                    v.isNumber(e[s][n + 1])
                                                        ? r +
                                                              l.config.markers
                                                                  .offsetY
                                                        : null
                                                );
                                        } else
                                            c.push(
                                                a + l.config.markers.offsetX
                                            ),
                                                h.push(
                                                    v.isNumber(e[s][n + 1])
                                                        ? r +
                                                              l.config.markers
                                                                  .offsetY
                                                        : null
                                                );
                                        return { x: c, y: h };
                                    },
                                },
                                {
                                    key: "checkPreviousPaths",
                                    value: function (t) {
                                        for (
                                            var e = t.pathFromLine,
                                                i = t.pathFromArea,
                                                a = t.realIndex,
                                                r = this.w,
                                                s = 0;
                                            s < r.globals.previousPaths.length;
                                            s++
                                        ) {
                                            var n = r.globals.previousPaths[s];
                                            ("line" === n.type ||
                                                "area" === n.type) &&
                                                n.paths.length > 0 &&
                                                parseInt(n.realIndex, 10) ===
                                                    parseInt(a, 10) &&
                                                ("line" === n.type
                                                    ? ((this.lineCtx.appendPathFrom =
                                                          !1),
                                                      (e =
                                                          r.globals
                                                              .previousPaths[s]
                                                              .paths[0].d))
                                                    : "area" === n.type &&
                                                      ((this.lineCtx.appendPathFrom =
                                                          !1),
                                                      (i =
                                                          r.globals
                                                              .previousPaths[s]
                                                              .paths[0].d),
                                                      r.config.stroke.show &&
                                                          r.globals
                                                              .previousPaths[s]
                                                              .paths[1] &&
                                                          (e =
                                                              r.globals
                                                                  .previousPaths[
                                                                  s
                                                              ].paths[1].d)));
                                        }
                                        return {
                                            pathFromLine: e,
                                            pathFromArea: i,
                                        };
                                    },
                                },
                                {
                                    key: "determineFirstPrevY",
                                    value: function (t) {
                                        var e,
                                            i = t.i,
                                            a = t.series,
                                            r = t.prevY,
                                            s = t.lineYPosition,
                                            n = this.w;
                                        if (
                                            void 0 !==
                                            (null === (e = a[i]) || void 0 === e
                                                ? void 0
                                                : e[0])
                                        )
                                            r =
                                                (s =
                                                    n.config.chart.stacked &&
                                                    i > 0
                                                        ? this.lineCtx
                                                              .prevSeriesY[
                                                              i - 1
                                                          ][0]
                                                        : this.lineCtx.zeroY) -
                                                a[i][0] /
                                                    this.lineCtx.yRatio[
                                                        this.lineCtx.yaxisIndex
                                                    ] +
                                                2 *
                                                    (this.lineCtx.isReversed
                                                        ? a[i][0] /
                                                          this.lineCtx.yRatio[
                                                              this.lineCtx
                                                                  .yaxisIndex
                                                          ]
                                                        : 0);
                                        else if (
                                            n.config.chart.stacked &&
                                            i > 0 &&
                                            void 0 === a[i][0]
                                        )
                                            for (var o = i - 1; o >= 0; o--)
                                                if (
                                                    null !== a[o][0] &&
                                                    void 0 !== a[o][0]
                                                ) {
                                                    r = s =
                                                        this.lineCtx
                                                            .prevSeriesY[o][0];
                                                    break;
                                                }
                                        return { prevY: r, lineYPosition: s };
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Ft = (function () {
                        function t(e, i, a) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.xyRatios = i),
                                (this.pointsChart =
                                    !(
                                        "bubble" !== this.w.config.chart.type &&
                                        "scatter" !== this.w.config.chart.type
                                    ) || a),
                                (this.scatter = new W(this.ctx)),
                                (this.noNegatives =
                                    this.w.globals.minX === Number.MAX_VALUE),
                                (this.lineHelpers = new zt(this)),
                                (this.markers = new H(this.ctx)),
                                (this.prevSeriesY = []),
                                (this.categoryAxisCorrection = 0),
                                (this.yaxisIndex = 0);
                        }
                        return (
                            c(t, [
                                {
                                    key: "draw",
                                    value: function (t, e, i, a) {
                                        var r = this.w,
                                            n = new k(this.ctx),
                                            o = r.globals.comboCharts
                                                ? e
                                                : r.config.chart.type,
                                            l = n.group({
                                                class: "apexcharts-".concat(
                                                    o,
                                                    "-series apexcharts-plot-series"
                                                ),
                                            }),
                                            c = new A(this.ctx, r);
                                        (this.yRatio = this.xyRatios.yRatio),
                                            (this.zRatio =
                                                this.xyRatios.zRatio),
                                            (this.xRatio =
                                                this.xyRatios.xRatio),
                                            (this.baseLineY =
                                                this.xyRatios.baseLineY),
                                            (t = c.getLogSeries(t)),
                                            (this.yRatio = c.getLogYRatios(
                                                this.yRatio
                                            ));
                                        for (
                                            var h = [], d = 0;
                                            d < t.length;
                                            d++
                                        ) {
                                            t =
                                                this.lineHelpers.sameValueSeriesFix(
                                                    d,
                                                    t
                                                );
                                            var u = r.globals.comboCharts
                                                ? i[d]
                                                : d;
                                            this._initSerieVariables(t, d, u);
                                            var f = [],
                                                g = [],
                                                p =
                                                    r.globals.padHorizontal +
                                                    this.categoryAxisCorrection;
                                            this.ctx.series.addCollapsedClassToSeries(
                                                this.elSeries,
                                                u
                                            ),
                                                r.globals.isXNumeric &&
                                                    r.globals.seriesX.length >
                                                        0 &&
                                                    (p =
                                                        (r.globals.seriesX[
                                                            u
                                                        ][0] -
                                                            r.globals.minX) /
                                                        this.xRatio),
                                                g.push(p);
                                            var x,
                                                m = p,
                                                b = void 0,
                                                v = m,
                                                y = this.zeroY,
                                                w = this.zeroY;
                                            (y =
                                                this.lineHelpers.determineFirstPrevY(
                                                    {
                                                        i: d,
                                                        series: t,
                                                        prevY: y,
                                                        lineYPosition: 0,
                                                    }
                                                ).prevY),
                                                f.push(y),
                                                (x = y),
                                                "rangeArea" === o &&
                                                    (b = w =
                                                        this.lineHelpers.determineFirstPrevY(
                                                            {
                                                                i: d,
                                                                series: a,
                                                                prevY: w,
                                                                lineYPosition: 0,
                                                            }
                                                        ).prevY);
                                            var S = {
                                                    type: o,
                                                    series: t,
                                                    realIndex: u,
                                                    i: d,
                                                    x: p,
                                                    y: 1,
                                                    pX: m,
                                                    pY: x,
                                                    pathsFrom:
                                                        this._calculatePathsFrom(
                                                            {
                                                                type: o,
                                                                series: t,
                                                                i: d,
                                                                realIndex: u,
                                                                prevX: v,
                                                                prevY: y,
                                                                prevY2: w,
                                                            }
                                                        ),
                                                    linePaths: [],
                                                    areaPaths: [],
                                                    seriesIndex: i,
                                                    lineYPosition: 0,
                                                    xArrj: g,
                                                    yArrj: f,
                                                    seriesRangeEnd: a,
                                                },
                                                C = this._iterateOverDataPoints(
                                                    s(
                                                        s({}, S),
                                                        {},
                                                        {
                                                            iterations:
                                                                "rangeArea" ===
                                                                o
                                                                    ? t[d]
                                                                          .length -
                                                                      1
                                                                    : void 0,
                                                            isRangeStart: !0,
                                                        }
                                                    )
                                                );
                                            if ("rangeArea" === o) {
                                                var P =
                                                        this._calculatePathsFrom(
                                                            {
                                                                series: a,
                                                                i: d,
                                                                realIndex: u,
                                                                prevX: v,
                                                                prevY: w,
                                                            }
                                                        ),
                                                    L =
                                                        this._iterateOverDataPoints(
                                                            s(
                                                                s({}, S),
                                                                {},
                                                                {
                                                                    series: a,
                                                                    pY: b,
                                                                    pathsFrom:
                                                                        P,
                                                                    iterations:
                                                                        a[d]
                                                                            .length -
                                                                        1,
                                                                    isRangeStart:
                                                                        !1,
                                                                }
                                                            )
                                                        );
                                                (C.linePaths[0] =
                                                    L.linePath + C.linePath),
                                                    (C.pathFromLine =
                                                        L.pathFromLine +
                                                        C.pathFromLine);
                                            }
                                            this._handlePaths({
                                                type: o,
                                                realIndex: u,
                                                i: d,
                                                paths: C,
                                            }),
                                                this.elSeries.add(
                                                    this.elPointsMain
                                                ),
                                                this.elSeries.add(
                                                    this.elDataLabelsWrap
                                                ),
                                                h.push(this.elSeries);
                                        }
                                        if (r.config.chart.stacked)
                                            for (var T = h.length; T > 0; T--)
                                                l.add(h[T - 1]);
                                        else
                                            for (var M = 0; M < h.length; M++)
                                                l.add(h[M]);
                                        return l;
                                    },
                                },
                                {
                                    key: "_initSerieVariables",
                                    value: function (t, e, i) {
                                        var a = this.w,
                                            r = new k(this.ctx);
                                        (this.xDivision =
                                            a.globals.gridWidth /
                                            (a.globals.dataPoints -
                                                ("on" ===
                                                a.config.xaxis.tickPlacement
                                                    ? 1
                                                    : 0))),
                                            (this.strokeWidth = Array.isArray(
                                                a.config.stroke.width
                                            )
                                                ? a.config.stroke.width[i]
                                                : a.config.stroke.width),
                                            this.yRatio.length > 1 &&
                                                (this.yaxisIndex = i),
                                            (this.isReversed =
                                                a.config.yaxis[
                                                    this.yaxisIndex
                                                ] &&
                                                a.config.yaxis[this.yaxisIndex]
                                                    .reversed),
                                            (this.zeroY =
                                                a.globals.gridHeight -
                                                this.baseLineY[
                                                    this.yaxisIndex
                                                ] -
                                                (this.isReversed
                                                    ? a.globals.gridHeight
                                                    : 0) +
                                                (this.isReversed
                                                    ? 2 *
                                                      this.baseLineY[
                                                          this.yaxisIndex
                                                      ]
                                                    : 0)),
                                            (this.areaBottomY = this.zeroY),
                                            (this.zeroY >
                                                a.globals.gridHeight ||
                                                "end" ===
                                                    a.config.plotOptions.area
                                                        .fillTo) &&
                                                (this.areaBottomY =
                                                    a.globals.gridHeight),
                                            (this.categoryAxisCorrection =
                                                this.xDivision / 2),
                                            (this.elSeries = r.group({
                                                class: "apexcharts-series",
                                                seriesName: v.escapeString(
                                                    a.globals.seriesNames[i]
                                                ),
                                            })),
                                            (this.elPointsMain = r.group({
                                                class: "apexcharts-series-markers-wrap",
                                                "data:realIndex": i,
                                            })),
                                            (this.elDataLabelsWrap = r.group({
                                                class: "apexcharts-datalabels",
                                                "data:realIndex": i,
                                            }));
                                        var s =
                                            t[e].length ===
                                            a.globals.dataPoints;
                                        this.elSeries.attr({
                                            "data:longestSeries": s,
                                            rel: e + 1,
                                            "data:realIndex": i,
                                        }),
                                            (this.appendPathFrom = !0);
                                    },
                                },
                                {
                                    key: "_calculatePathsFrom",
                                    value: function (t) {
                                        var e,
                                            i,
                                            a,
                                            r,
                                            s = t.type,
                                            n = t.series,
                                            o = t.i,
                                            l = t.realIndex,
                                            c = t.prevX,
                                            h = t.prevY,
                                            d = t.prevY2,
                                            u = this.w,
                                            f = new k(this.ctx);
                                        if (null === n[o][0]) {
                                            for (
                                                var g = 0;
                                                g < n[o].length;
                                                g++
                                            )
                                                if (null !== n[o][g]) {
                                                    (c = this.xDivision * g),
                                                        (h =
                                                            this.zeroY -
                                                            n[o][g] /
                                                                this.yRatio[
                                                                    this
                                                                        .yaxisIndex
                                                                ]),
                                                        (e = f.move(c, h)),
                                                        (i = f.move(
                                                            c,
                                                            this.areaBottomY
                                                        ));
                                                    break;
                                                }
                                        } else
                                            (e = f.move(c, h)),
                                                "rangeArea" === s &&
                                                    (e =
                                                        f.move(c, d) +
                                                        f.line(c, h)),
                                                (i =
                                                    f.move(
                                                        c,
                                                        this.areaBottomY
                                                    ) + f.line(c, h));
                                        if (
                                            ((a =
                                                f.move(-1, this.zeroY) +
                                                f.line(-1, this.zeroY)),
                                            (r =
                                                f.move(-1, this.zeroY) +
                                                f.line(-1, this.zeroY)),
                                            u.globals.previousPaths.length > 0)
                                        ) {
                                            var p =
                                                this.lineHelpers.checkPreviousPaths(
                                                    {
                                                        pathFromLine: a,
                                                        pathFromArea: r,
                                                        realIndex: l,
                                                    }
                                                );
                                            (a = p.pathFromLine),
                                                (r = p.pathFromArea);
                                        }
                                        return {
                                            prevX: c,
                                            prevY: h,
                                            linePath: e,
                                            areaPath: i,
                                            pathFromLine: a,
                                            pathFromArea: r,
                                        };
                                    },
                                },
                                {
                                    key: "_handlePaths",
                                    value: function (t) {
                                        var e = t.type,
                                            i = t.realIndex,
                                            a = t.i,
                                            r = t.paths,
                                            n = this.w,
                                            o = new k(this.ctx),
                                            l = new Y(this.ctx);
                                        this.prevSeriesY.push(r.yArrj),
                                            (n.globals.seriesXvalues[i] =
                                                r.xArrj),
                                            (n.globals.seriesYvalues[i] =
                                                r.yArrj);
                                        var c = n.config.forecastDataPoints;
                                        if (c.count > 0 && "rangeArea" !== e) {
                                            var h =
                                                    n.globals.seriesXvalues[i][
                                                        n.globals.seriesXvalues[
                                                            i
                                                        ].length -
                                                            c.count -
                                                            1
                                                    ],
                                                d = o.drawRect(
                                                    h,
                                                    0,
                                                    n.globals.gridWidth,
                                                    n.globals.gridHeight,
                                                    0
                                                );
                                            n.globals.dom.elForecastMask.appendChild(
                                                d.node
                                            );
                                            var u = o.drawRect(
                                                0,
                                                0,
                                                h,
                                                n.globals.gridHeight,
                                                0
                                            );
                                            n.globals.dom.elNonForecastMask.appendChild(
                                                u.node
                                            );
                                        }
                                        this.pointsChart ||
                                            n.globals.delayedElements.push({
                                                el: this.elPointsMain.node,
                                                index: i,
                                            });
                                        var f = {
                                            i: a,
                                            realIndex: i,
                                            animationDelay: a,
                                            initialSpeed:
                                                n.config.chart.animations.speed,
                                            dataChangeSpeed:
                                                n.config.chart.animations
                                                    .dynamicAnimation.speed,
                                            className: "apexcharts-".concat(e),
                                        };
                                        if ("area" === e)
                                            for (
                                                var g = l.fillPath({
                                                        seriesNumber: i,
                                                    }),
                                                    p = 0;
                                                p < r.areaPaths.length;
                                                p++
                                            ) {
                                                var x = o.renderPaths(
                                                    s(
                                                        s({}, f),
                                                        {},
                                                        {
                                                            pathFrom:
                                                                r.pathFromArea,
                                                            pathTo: r.areaPaths[
                                                                p
                                                            ],
                                                            stroke: "none",
                                                            strokeWidth: 0,
                                                            strokeLineCap: null,
                                                            fill: g,
                                                        }
                                                    )
                                                );
                                                this.elSeries.add(x);
                                            }
                                        if (
                                            n.config.stroke.show &&
                                            !this.pointsChart
                                        ) {
                                            var m = null;
                                            if ("line" === e)
                                                m = l.fillPath({
                                                    seriesNumber: i,
                                                    i: a,
                                                });
                                            else if (
                                                "solid" ===
                                                n.config.stroke.fill.type
                                            )
                                                m = n.globals.stroke.colors[i];
                                            else {
                                                var b = n.config.fill;
                                                (n.config.fill =
                                                    n.config.stroke.fill),
                                                    (m = l.fillPath({
                                                        seriesNumber: i,
                                                        i: a,
                                                    })),
                                                    (n.config.fill = b);
                                            }
                                            for (
                                                var v = 0;
                                                v < r.linePaths.length;
                                                v++
                                            ) {
                                                var y = m;
                                                "rangeArea" === e &&
                                                    (y = l.fillPath({
                                                        seriesNumber: i,
                                                    }));
                                                var w = s(
                                                        s({}, f),
                                                        {},
                                                        {
                                                            pathFrom:
                                                                r.pathFromLine,
                                                            pathTo: r.linePaths[
                                                                v
                                                            ],
                                                            stroke: m,
                                                            strokeWidth:
                                                                this
                                                                    .strokeWidth,
                                                            strokeLineCap:
                                                                n.config.stroke
                                                                    .lineCap,
                                                            fill:
                                                                "rangeArea" ===
                                                                e
                                                                    ? y
                                                                    : "none",
                                                        }
                                                    ),
                                                    A = o.renderPaths(w);
                                                if (
                                                    (this.elSeries.add(A),
                                                    A.attr(
                                                        "fill-rule",
                                                        "evenodd"
                                                    ),
                                                    c.count > 0 &&
                                                        "rangeArea" !== e)
                                                ) {
                                                    var S = o.renderPaths(w);
                                                    S.node.setAttribute(
                                                        "stroke-dasharray",
                                                        c.dashArray
                                                    ),
                                                        c.strokeWidth &&
                                                            S.node.setAttribute(
                                                                "stroke-width",
                                                                c.strokeWidth
                                                            ),
                                                        this.elSeries.add(S),
                                                        S.attr(
                                                            "clip-path",
                                                            "url(#forecastMask".concat(
                                                                n.globals.cuid,
                                                                ")"
                                                            )
                                                        ),
                                                        A.attr(
                                                            "clip-path",
                                                            "url(#nonForecastMask".concat(
                                                                n.globals.cuid,
                                                                ")"
                                                            )
                                                        );
                                                }
                                            }
                                        }
                                    },
                                },
                                {
                                    key: "_iterateOverDataPoints",
                                    value: function (t) {
                                        var e = t.type,
                                            i = t.series,
                                            a = t.iterations,
                                            r = t.realIndex,
                                            s = t.i,
                                            n = t.x,
                                            o = t.y,
                                            l = t.pX,
                                            c = t.pY,
                                            h = t.pathsFrom,
                                            d = t.linePaths,
                                            u = t.areaPaths,
                                            f = t.seriesIndex,
                                            g = t.lineYPosition,
                                            p = t.xArrj,
                                            x = t.yArrj,
                                            m = t.isRangeStart,
                                            b = t.seriesRangeEnd,
                                            y = this.w,
                                            w = new k(this.ctx),
                                            A = this.yRatio,
                                            S = h.prevY,
                                            C = h.linePath,
                                            P = h.areaPath,
                                            L = h.pathFromLine,
                                            T = h.pathFromArea,
                                            M = v.isNumber(y.globals.minYArr[r])
                                                ? y.globals.minYArr[r]
                                                : y.globals.minY;
                                        a ||
                                            (a =
                                                y.globals.dataPoints > 1
                                                    ? y.globals.dataPoints - 1
                                                    : y.globals.dataPoints);
                                        for (var E = o, I = 0; I < a; I++) {
                                            var O =
                                                void 0 === i[s][I + 1] ||
                                                null === i[s][I + 1];
                                            if (y.globals.isXNumeric) {
                                                var z =
                                                    y.globals.seriesX[r][I + 1];
                                                void 0 ===
                                                    y.globals.seriesX[r][
                                                        I + 1
                                                    ] &&
                                                    (z =
                                                        y.globals.seriesX[r][
                                                            a - 1
                                                        ]),
                                                    (n =
                                                        (z - y.globals.minX) /
                                                        this.xRatio);
                                            } else n += this.xDivision;
                                            (g =
                                                y.config.chart.stacked &&
                                                s > 0 &&
                                                y.globals.collapsedSeries
                                                    .length <
                                                    y.config.series.length - 1
                                                    ? this.prevSeriesY[
                                                          (function (t) {
                                                              for (
                                                                  var e = t,
                                                                      i = 0;
                                                                  i <
                                                                  y.globals
                                                                      .series
                                                                      .length;
                                                                  i++
                                                              )
                                                                  if (
                                                                      y.globals.collapsedSeriesIndices.indexOf(
                                                                          t
                                                                      ) > -1
                                                                  ) {
                                                                      e--;
                                                                      break;
                                                                  }
                                                              return e >= 0
                                                                  ? e
                                                                  : 0;
                                                          })(s - 1)
                                                      ][I + 1]
                                                    : this.zeroY),
                                                O
                                                    ? (o =
                                                          g -
                                                          M /
                                                              A[
                                                                  this
                                                                      .yaxisIndex
                                                              ] +
                                                          2 *
                                                              (this.isReversed
                                                                  ? M /
                                                                    A[
                                                                        this
                                                                            .yaxisIndex
                                                                    ]
                                                                  : 0))
                                                    : ((o =
                                                          g -
                                                          i[s][I + 1] /
                                                              A[
                                                                  this
                                                                      .yaxisIndex
                                                              ] +
                                                          2 *
                                                              (this.isReversed
                                                                  ? i[s][
                                                                        I + 1
                                                                    ] /
                                                                    A[
                                                                        this
                                                                            .yaxisIndex
                                                                    ]
                                                                  : 0)),
                                                      "rangeArea" === e &&
                                                          (E =
                                                              g -
                                                              b[s][I + 1] /
                                                                  A[
                                                                      this
                                                                          .yaxisIndex
                                                                  ] +
                                                              2 *
                                                                  (this
                                                                      .isReversed
                                                                      ? b[s][
                                                                            I +
                                                                                1
                                                                        ] /
                                                                        A[
                                                                            this
                                                                                .yaxisIndex
                                                                        ]
                                                                      : 0))),
                                                p.push(n),
                                                x.push(o);
                                            var F =
                                                    this.lineHelpers.calculatePoints(
                                                        {
                                                            series: i,
                                                            x: n,
                                                            y: o,
                                                            realIndex: r,
                                                            i: s,
                                                            j: I,
                                                            prevY: S,
                                                        }
                                                    ),
                                                D = this._createPaths({
                                                    type: e,
                                                    series: i,
                                                    i: s,
                                                    realIndex: r,
                                                    j: I,
                                                    x: n,
                                                    y: o,
                                                    y2: E,
                                                    pX: l,
                                                    pY: c,
                                                    linePath: C,
                                                    areaPath: P,
                                                    linePaths: d,
                                                    areaPaths: u,
                                                    seriesIndex: f,
                                                    isRangeStart: m,
                                                });
                                            (u = D.areaPaths),
                                                (d = D.linePaths),
                                                (l = D.pX),
                                                (c = D.pY),
                                                (P = D.areaPath),
                                                (C = D.linePath),
                                                this.appendPathFrom &&
                                                    ((L += w.line(
                                                        n,
                                                        this.zeroY
                                                    )),
                                                    (T += w.line(
                                                        n,
                                                        this.zeroY
                                                    ))),
                                                this.handleNullDataPoints(
                                                    i,
                                                    F,
                                                    s,
                                                    I,
                                                    r
                                                ),
                                                this._handleMarkersAndLabels({
                                                    type: e,
                                                    pointsPos: F,
                                                    i: s,
                                                    j: I,
                                                    realIndex: r,
                                                    isRangeStart: m,
                                                });
                                        }
                                        return {
                                            yArrj: x,
                                            xArrj: p,
                                            pathFromArea: T,
                                            areaPaths: u,
                                            pathFromLine: L,
                                            linePaths: d,
                                            linePath: C,
                                            areaPath: P,
                                        };
                                    },
                                },
                                {
                                    key: "_handleMarkersAndLabels",
                                    value: function (t) {
                                        var e = t.type,
                                            i = t.pointsPos,
                                            a = t.isRangeStart,
                                            r = t.i,
                                            s = t.j,
                                            n = t.realIndex,
                                            o = this.w,
                                            l = new B(this.ctx);
                                        if (this.pointsChart)
                                            this.scatter.draw(
                                                this.elSeries,
                                                s,
                                                {
                                                    realIndex: n,
                                                    pointsPos: i,
                                                    zRatio: this.zRatio,
                                                    elParent: this.elPointsMain,
                                                }
                                            );
                                        else {
                                            o.globals.series[r].length > 1 &&
                                                this.elPointsMain.node.classList.add(
                                                    "apexcharts-element-hidden"
                                                );
                                            var c =
                                                this.markers.plotChartMarkers(
                                                    i,
                                                    n,
                                                    s + 1
                                                );
                                            null !== c &&
                                                this.elPointsMain.add(c);
                                        }
                                        var h = l.drawDataLabel({
                                            type: e,
                                            isRangeStart: a,
                                            pos: i,
                                            i: n,
                                            j: s + 1,
                                        });
                                        null !== h &&
                                            this.elDataLabelsWrap.add(h);
                                    },
                                },
                                {
                                    key: "_createPaths",
                                    value: function (t) {
                                        var e = t.type,
                                            i = t.series,
                                            a = t.i,
                                            r = t.realIndex,
                                            s = t.j,
                                            n = t.x,
                                            o = t.y,
                                            l = t.y2,
                                            c = t.pX,
                                            h = t.pY,
                                            d = t.linePath,
                                            u = t.areaPath,
                                            f = t.linePaths,
                                            g = t.areaPaths,
                                            p = t.seriesIndex,
                                            x = t.isRangeStart,
                                            m = this.w,
                                            b = new k(this.ctx),
                                            v = m.config.stroke.curve,
                                            y = this.areaBottomY;
                                        if (
                                            (Array.isArray(
                                                m.config.stroke.curve
                                            ) &&
                                                (v = Array.isArray(p)
                                                    ? m.config.stroke.curve[
                                                          p[a]
                                                      ]
                                                    : m.config.stroke.curve[a]),
                                            "smooth" === v)
                                        ) {
                                            var w = 0.35 * (n - c);
                                            m.globals.hasNullValues
                                                ? (null !== i[a][s] &&
                                                      (null !== i[a][s + 1]
                                                          ? ((d =
                                                                b.move(c, h) +
                                                                b.curve(
                                                                    c + w,
                                                                    h,
                                                                    n - w,
                                                                    o,
                                                                    n + 1,
                                                                    o
                                                                )),
                                                            (u =
                                                                b.move(
                                                                    c + 1,
                                                                    h
                                                                ) +
                                                                b.curve(
                                                                    c + w,
                                                                    h,
                                                                    n - w,
                                                                    o,
                                                                    n + 1,
                                                                    o
                                                                ) +
                                                                b.line(n, y) +
                                                                b.line(c, y) +
                                                                "z"))
                                                          : ((d = b.move(c, h)),
                                                            (u =
                                                                b.move(c, h) +
                                                                "z"))),
                                                  f.push(d),
                                                  g.push(u))
                                                : ((d += b.curve(
                                                      c + w,
                                                      h,
                                                      n - w,
                                                      o,
                                                      n,
                                                      o
                                                  )),
                                                  (u += b.curve(
                                                      c + w,
                                                      h,
                                                      n - w,
                                                      o,
                                                      n,
                                                      o
                                                  ))),
                                                (c = n),
                                                (h = o),
                                                s === i[a].length - 2 &&
                                                    ((u =
                                                        u +
                                                        b.curve(
                                                            c,
                                                            h,
                                                            n,
                                                            o,
                                                            n,
                                                            y
                                                        ) +
                                                        b.move(n, o) +
                                                        "z"),
                                                    "rangeArea" === e && x
                                                        ? (d =
                                                              d +
                                                              b.curve(
                                                                  c,
                                                                  h,
                                                                  n,
                                                                  o,
                                                                  n,
                                                                  l
                                                              ) +
                                                              b.move(n, l) +
                                                              "z")
                                                        : m.globals
                                                              .hasNullValues ||
                                                          (f.push(d),
                                                          g.push(u)));
                                        } else {
                                            if (null === i[a][s + 1]) {
                                                d += b.move(n, o);
                                                var A = m.globals.isXNumeric
                                                    ? (m.globals.seriesX[r][s] -
                                                          m.globals.minX) /
                                                      this.xRatio
                                                    : n - this.xDivision;
                                                u =
                                                    u +
                                                    b.line(A, y) +
                                                    b.move(n, o) +
                                                    "z";
                                            }
                                            null === i[a][s] &&
                                                ((d += b.move(n, o)),
                                                (u += b.move(n, y))),
                                                "stepline" === v
                                                    ? ((d =
                                                          d +
                                                          b.line(n, null, "H") +
                                                          b.line(null, o, "V")),
                                                      (u =
                                                          u +
                                                          b.line(n, null, "H") +
                                                          b.line(null, o, "V")))
                                                    : "straight" === v &&
                                                      ((d += b.line(n, o)),
                                                      (u += b.line(n, o))),
                                                s === i[a].length - 2 &&
                                                    ((u =
                                                        u +
                                                        b.line(n, y) +
                                                        b.move(n, o) +
                                                        "z"),
                                                    "rangeArea" === e && x
                                                        ? (d =
                                                              d +
                                                              b.line(n, l) +
                                                              b.move(n, l) +
                                                              "z")
                                                        : (f.push(d),
                                                          g.push(u)));
                                        }
                                        return {
                                            linePaths: f,
                                            areaPaths: g,
                                            pX: c,
                                            pY: h,
                                            linePath: d,
                                            areaPath: u,
                                        };
                                    },
                                },
                                {
                                    key: "handleNullDataPoints",
                                    value: function (t, e, i, a, r) {
                                        var s = this.w;
                                        if (
                                            (null === t[i][a] &&
                                                s.config.markers
                                                    .showNullDataPoints) ||
                                            1 === t[i].length
                                        ) {
                                            var n =
                                                this.markers.plotChartMarkers(
                                                    e,
                                                    r,
                                                    a + 1,
                                                    this.strokeWidth -
                                                        s.config.markers
                                                            .strokeWidth /
                                                            2,
                                                    !0
                                                );
                                            null !== n &&
                                                this.elPointsMain.add(n);
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })();
                (window.TreemapSquared = {}),
                    (window.TreemapSquared.generate = (function () {
                        function t(e, i, a, r) {
                            (this.xoffset = e),
                                (this.yoffset = i),
                                (this.height = r),
                                (this.width = a),
                                (this.shortestEdge = function () {
                                    return Math.min(this.height, this.width);
                                }),
                                (this.getCoordinates = function (t) {
                                    var e,
                                        i = [],
                                        a = this.xoffset,
                                        r = this.yoffset,
                                        n = s(t) / this.height,
                                        o = s(t) / this.width;
                                    if (this.width >= this.height)
                                        for (e = 0; e < t.length; e++)
                                            i.push([a, r, a + n, r + t[e] / n]),
                                                (r += t[e] / n);
                                    else
                                        for (e = 0; e < t.length; e++)
                                            i.push([a, r, a + t[e] / o, r + o]),
                                                (a += t[e] / o);
                                    return i;
                                }),
                                (this.cutArea = function (e) {
                                    var i;
                                    if (this.width >= this.height) {
                                        var a = e / this.height,
                                            r = this.width - a;
                                        i = new t(
                                            this.xoffset + a,
                                            this.yoffset,
                                            r,
                                            this.height
                                        );
                                    } else {
                                        var s = e / this.width,
                                            n = this.height - s;
                                        i = new t(
                                            this.xoffset,
                                            this.yoffset + s,
                                            this.width,
                                            n
                                        );
                                    }
                                    return i;
                                });
                        }
                        function e(e, a, r, n, o) {
                            (n = void 0 === n ? 0 : n),
                                (o = void 0 === o ? 0 : o);
                            var l = i(
                                (function (t, e) {
                                    var i,
                                        a = [],
                                        r = e / s(t);
                                    for (i = 0; i < t.length; i++)
                                        a[i] = t[i] * r;
                                    return a;
                                })(e, a * r),
                                [],
                                new t(n, o, a, r),
                                []
                            );
                            return (function (t) {
                                var e,
                                    i,
                                    a = [];
                                for (e = 0; e < t.length; e++)
                                    for (i = 0; i < t[e].length; i++)
                                        a.push(t[e][i]);
                                return a;
                            })(l);
                        }
                        function i(t, e, r, n) {
                            var o, l, c;
                            if (0 !== t.length)
                                return (
                                    (o = r.shortestEdge()),
                                    (function (t, e, i) {
                                        var r;
                                        return (
                                            0 === t.length ||
                                            ((r = t.slice()).push(e),
                                            a(t, i) >= a(r, i))
                                        );
                                    })(e, (l = t[0]), o)
                                        ? (e.push(l), i(t.slice(1), e, r, n))
                                        : ((c = r.cutArea(s(e), n)),
                                          n.push(r.getCoordinates(e)),
                                          i(t, [], c, n)),
                                    n
                                );
                            n.push(r.getCoordinates(e));
                        }
                        function a(t, e) {
                            var i = Math.min.apply(Math, t),
                                a = Math.max.apply(Math, t),
                                r = s(t);
                            return Math.max(
                                (Math.pow(e, 2) * a) / Math.pow(r, 2),
                                Math.pow(r, 2) / (Math.pow(e, 2) * i)
                            );
                        }
                        function r(t) {
                            return t && t.constructor === Array;
                        }
                        function s(t) {
                            var e,
                                i = 0;
                            for (e = 0; e < t.length; e++) i += t[e];
                            return i;
                        }
                        function n(t) {
                            var e,
                                i = 0;
                            if (r(t[0]))
                                for (e = 0; e < t.length; e++) i += n(t[e]);
                            else i = s(t);
                            return i;
                        }
                        return function t(i, a, s, o, l) {
                            (o = void 0 === o ? 0 : o),
                                (l = void 0 === l ? 0 : l);
                            var c,
                                h,
                                d = [],
                                u = [];
                            if (r(i[0])) {
                                for (h = 0; h < i.length; h++) d[h] = n(i[h]);
                                for (
                                    c = e(d, a, s, o, l), h = 0;
                                    h < i.length;
                                    h++
                                )
                                    u.push(
                                        t(
                                            i[h],
                                            c[h][2] - c[h][0],
                                            c[h][3] - c[h][1],
                                            c[h][0],
                                            c[h][1]
                                        )
                                    );
                            } else u = e(i, a, s, o, l);
                            return u;
                        };
                    })());
                var Dt,
                    Nt,
                    Xt = (function () {
                        function t(e, i) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.strokeWidth = this.w.config.stroke.width),
                                (this.helpers = new Pt(e)),
                                (this.dynamicAnim =
                                    this.w.config.chart.animations.dynamicAnimation),
                                (this.labels = []);
                        }
                        return (
                            c(t, [
                                {
                                    key: "draw",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w,
                                            a = new k(this.ctx),
                                            r = new Y(this.ctx),
                                            s = a.group({
                                                class: "apexcharts-treemap",
                                            });
                                        if (i.globals.noData) return s;
                                        var n = [];
                                        return (
                                            t.forEach(function (t) {
                                                var e = t.map(function (t) {
                                                    return Math.abs(t);
                                                });
                                                n.push(e);
                                            }),
                                            (this.negRange =
                                                this.helpers.checkColorRange()),
                                            i.config.series.forEach(function (
                                                t,
                                                i
                                            ) {
                                                t.data.forEach(function (t) {
                                                    Array.isArray(
                                                        e.labels[i]
                                                    ) || (e.labels[i] = []),
                                                        e.labels[i].push(t.x);
                                                });
                                            }),
                                            window.TreemapSquared.generate(
                                                n,
                                                i.globals.gridWidth,
                                                i.globals.gridHeight
                                            ).forEach(function (n, o) {
                                                var l = a.group({
                                                    class: "apexcharts-series apexcharts-treemap-series",
                                                    seriesName: v.escapeString(
                                                        i.globals.seriesNames[o]
                                                    ),
                                                    rel: o + 1,
                                                    "data:realIndex": o,
                                                });
                                                if (
                                                    i.config.chart.dropShadow
                                                        .enabled
                                                ) {
                                                    var c =
                                                        i.config.chart
                                                            .dropShadow;
                                                    new w(e.ctx).dropShadow(
                                                        s,
                                                        c,
                                                        o
                                                    );
                                                }
                                                var h = a.group({
                                                    class: "apexcharts-data-labels",
                                                });
                                                n.forEach(function (s, n) {
                                                    var c = s[0],
                                                        h = s[1],
                                                        d = s[2],
                                                        u = s[3],
                                                        f = a.drawRect(
                                                            c,
                                                            h,
                                                            d - c,
                                                            u - h,
                                                            0,
                                                            "#fff",
                                                            1,
                                                            e.strokeWidth,
                                                            i.config.plotOptions
                                                                .treemap
                                                                .useFillColorAsStroke
                                                                ? p
                                                                : i.globals
                                                                      .stroke
                                                                      .colors[o]
                                                        );
                                                    f.attr({
                                                        cx: c,
                                                        cy: h,
                                                        index: o,
                                                        i: o,
                                                        j: n,
                                                        width: d - c,
                                                        height: u - h,
                                                    });
                                                    var g =
                                                            e.helpers.getShadeColor(
                                                                i.config.chart
                                                                    .type,
                                                                o,
                                                                n,
                                                                e.negRange
                                                            ),
                                                        p = g.color;
                                                    void 0 !==
                                                        i.config.series[o].data[
                                                            n
                                                        ] &&
                                                        i.config.series[o].data[
                                                            n
                                                        ].fillColor &&
                                                        (p =
                                                            i.config.series[o]
                                                                .data[n]
                                                                .fillColor);
                                                    var x = r.fillPath({
                                                        color: p,
                                                        seriesNumber: o,
                                                        dataPointIndex: n,
                                                    });
                                                    f.node.classList.add(
                                                        "apexcharts-treemap-rect"
                                                    ),
                                                        f.attr({ fill: x }),
                                                        e.helpers.addListeners(
                                                            f
                                                        );
                                                    var m = {
                                                            x: c + (d - c) / 2,
                                                            y: h + (u - h) / 2,
                                                            width: 0,
                                                            height: 0,
                                                        },
                                                        b = {
                                                            x: c,
                                                            y: h,
                                                            width: d - c,
                                                            height: u - h,
                                                        };
                                                    if (
                                                        i.config.chart
                                                            .animations
                                                            .enabled &&
                                                        !i.globals.dataChanged
                                                    ) {
                                                        var v = 1;
                                                        i.globals.resized ||
                                                            (v =
                                                                i.config.chart
                                                                    .animations
                                                                    .speed),
                                                            e.animateTreemap(
                                                                f,
                                                                m,
                                                                b,
                                                                v
                                                            );
                                                    }
                                                    if (i.globals.dataChanged) {
                                                        var y = 1;
                                                        e.dynamicAnim.enabled &&
                                                            i.globals
                                                                .shouldAnimate &&
                                                            ((y =
                                                                e.dynamicAnim
                                                                    .speed),
                                                            i.globals
                                                                .previousPaths[
                                                                o
                                                            ] &&
                                                                i.globals
                                                                    .previousPaths[
                                                                    o
                                                                ][n] &&
                                                                i.globals
                                                                    .previousPaths[
                                                                    o
                                                                ][n].rect &&
                                                                (m =
                                                                    i.globals
                                                                        .previousPaths[
                                                                        o
                                                                    ][n].rect),
                                                            e.animateTreemap(
                                                                f,
                                                                m,
                                                                b,
                                                                y
                                                            ));
                                                    }
                                                    var w = e.getFontSize(s),
                                                        k =
                                                            i.config.dataLabels.formatter(
                                                                e.labels[o][n],
                                                                {
                                                                    value: i
                                                                        .globals
                                                                        .series[
                                                                        o
                                                                    ][n],
                                                                    seriesIndex:
                                                                        o,
                                                                    dataPointIndex:
                                                                        n,
                                                                    w: i,
                                                                }
                                                            ),
                                                        A =
                                                            e.helpers.calculateDataLabels(
                                                                {
                                                                    text: k,
                                                                    x:
                                                                        (c +
                                                                            d) /
                                                                        2,
                                                                    y:
                                                                        (h +
                                                                            u) /
                                                                            2 +
                                                                        e.strokeWidth /
                                                                            2 +
                                                                        w / 3,
                                                                    i: o,
                                                                    j: n,
                                                                    colorProps:
                                                                        g,
                                                                    fontSize: w,
                                                                    series: t,
                                                                }
                                                            );
                                                    i.config.dataLabels
                                                        .enabled &&
                                                        A &&
                                                        e.rotateToFitLabel(
                                                            A,
                                                            w,
                                                            k,
                                                            c,
                                                            h,
                                                            d,
                                                            u
                                                        ),
                                                        l.add(f),
                                                        null !== A && l.add(A);
                                                }),
                                                    l.add(h),
                                                    s.add(l);
                                            }),
                                            s
                                        );
                                    },
                                },
                                {
                                    key: "getFontSize",
                                    value: function (t) {
                                        var e,
                                            i,
                                            a = this.w,
                                            r =
                                                (function t(e) {
                                                    var i,
                                                        a = 0;
                                                    if (Array.isArray(e[0]))
                                                        for (
                                                            i = 0;
                                                            i < e.length;
                                                            i++
                                                        )
                                                            a += t(e[i]);
                                                    else
                                                        for (
                                                            i = 0;
                                                            i < e.length;
                                                            i++
                                                        )
                                                            a += e[i].length;
                                                    return a;
                                                })(this.labels) /
                                                (function t(e) {
                                                    var i,
                                                        a = 0;
                                                    if (Array.isArray(e[0]))
                                                        for (
                                                            i = 0;
                                                            i < e.length;
                                                            i++
                                                        )
                                                            a += t(e[i]);
                                                    else
                                                        for (
                                                            i = 0;
                                                            i < e.length;
                                                            i++
                                                        )
                                                            a += 1;
                                                    return a;
                                                })(this.labels);
                                        return (
                                            (e = (t[2] - t[0]) * (t[3] - t[1])),
                                            (i = Math.pow(e, 0.5)),
                                            Math.min(
                                                i / r,
                                                parseInt(
                                                    a.config.dataLabels.style
                                                        .fontSize,
                                                    10
                                                )
                                            )
                                        );
                                    },
                                },
                                {
                                    key: "rotateToFitLabel",
                                    value: function (t, e, i, a, r, s, n) {
                                        var o = new k(this.ctx),
                                            l = o.getTextRects(i, e);
                                        if (
                                            l.width +
                                                this.w.config.stroke.width +
                                                5 >
                                                s - a &&
                                            l.width <= n - r
                                        ) {
                                            var c = o.rotateAroundCenter(
                                                t.node
                                            );
                                            t.node.setAttribute(
                                                "transform",
                                                "rotate(-90 "
                                                    .concat(c.x, " ")
                                                    .concat(c.y, ")")
                                            );
                                        }
                                    },
                                },
                                {
                                    key: "animateTreemap",
                                    value: function (t, e, i, a) {
                                        var r = new y(this.ctx);
                                        r.animateRect(
                                            t,
                                            {
                                                x: e.x,
                                                y: e.y,
                                                width: e.width,
                                                height: e.height,
                                            },
                                            {
                                                x: i.x,
                                                y: i.y,
                                                width: i.width,
                                                height: i.height,
                                            },
                                            a,
                                            function () {
                                                r.animationCompleted(t);
                                            }
                                        );
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Rt = (function () {
                        function t(e) {
                            o(this, t),
                                (this.ctx = e),
                                (this.w = e.w),
                                (this.timeScaleArray = []),
                                (this.utc =
                                    this.w.config.xaxis.labels.datetimeUTC);
                        }
                        return (
                            c(t, [
                                {
                                    key: "calculateTimeScaleTicks",
                                    value: function (t, e) {
                                        var i = this,
                                            a = this.w;
                                        if (a.globals.allSeriesCollapsed)
                                            return (
                                                (a.globals.labels = []),
                                                (a.globals.timescaleLabels =
                                                    []),
                                                []
                                            );
                                        var r = new I(this.ctx),
                                            n = (e - t) / 864e5;
                                        this.determineInterval(n),
                                            (a.globals.disableZoomIn = !1),
                                            (a.globals.disableZoomOut = !1),
                                            n < 0.00011574074074074075
                                                ? (a.globals.disableZoomIn = !0)
                                                : n > 5e4 &&
                                                  (a.globals.disableZoomOut =
                                                      !0);
                                        var o = r.getTimeUnitsfromTimestamp(
                                                t,
                                                e,
                                                this.utc
                                            ),
                                            l = a.globals.gridWidth / n,
                                            c = l / 24,
                                            h = c / 60,
                                            d = h / 60,
                                            u = Math.floor(24 * n),
                                            f = Math.floor(1440 * n),
                                            g = Math.floor(86400 * n),
                                            p = Math.floor(n),
                                            x = Math.floor(n / 30),
                                            m = Math.floor(n / 365),
                                            b = {
                                                minMillisecond:
                                                    o.minMillisecond,
                                                minSecond: o.minSecond,
                                                minMinute: o.minMinute,
                                                minHour: o.minHour,
                                                minDate: o.minDate,
                                                minMonth: o.minMonth,
                                                minYear: o.minYear,
                                            },
                                            v = {
                                                firstVal: b,
                                                currentMillisecond:
                                                    b.minMillisecond,
                                                currentSecond: b.minSecond,
                                                currentMinute: b.minMinute,
                                                currentHour: b.minHour,
                                                currentMonthDate: b.minDate,
                                                currentDate: b.minDate,
                                                currentMonth: b.minMonth,
                                                currentYear: b.minYear,
                                                daysWidthOnXAxis: l,
                                                hoursWidthOnXAxis: c,
                                                minutesWidthOnXAxis: h,
                                                secondsWidthOnXAxis: d,
                                                numberOfSeconds: g,
                                                numberOfMinutes: f,
                                                numberOfHours: u,
                                                numberOfDays: p,
                                                numberOfMonths: x,
                                                numberOfYears: m,
                                            };
                                        switch (this.tickInterval) {
                                            case "years":
                                                this.generateYearScale(v);
                                                break;
                                            case "months":
                                            case "half_year":
                                                this.generateMonthScale(v);
                                                break;
                                            case "months_days":
                                            case "months_fortnight":
                                            case "days":
                                            case "week_days":
                                                this.generateDayScale(v);
                                                break;
                                            case "hours":
                                                this.generateHourScale(v);
                                                break;
                                            case "minutes_fives":
                                            case "minutes":
                                                this.generateMinuteScale(v);
                                                break;
                                            case "seconds_tens":
                                            case "seconds_fives":
                                            case "seconds":
                                                this.generateSecondScale(v);
                                        }
                                        var y = this.timeScaleArray.map(
                                            function (t) {
                                                var e = {
                                                    position: t.position,
                                                    unit: t.unit,
                                                    year: t.year,
                                                    day: t.day ? t.day : 1,
                                                    hour: t.hour ? t.hour : 0,
                                                    month: t.month + 1,
                                                };
                                                return "month" === t.unit
                                                    ? s(
                                                          s({}, e),
                                                          {},
                                                          {
                                                              day: 1,
                                                              value:
                                                                  t.value + 1,
                                                          }
                                                      )
                                                    : "day" === t.unit ||
                                                      "hour" === t.unit
                                                    ? s(
                                                          s({}, e),
                                                          {},
                                                          { value: t.value }
                                                      )
                                                    : "minute" === t.unit
                                                    ? s(
                                                          s({}, e),
                                                          {},
                                                          {
                                                              value: t.value,
                                                              minute: t.value,
                                                          }
                                                      )
                                                    : "second" === t.unit
                                                    ? s(
                                                          s({}, e),
                                                          {},
                                                          {
                                                              value: t.value,
                                                              minute: t.minute,
                                                              second: t.second,
                                                          }
                                                      )
                                                    : t;
                                            }
                                        );
                                        return y.filter(function (t) {
                                            var e = 1,
                                                r = Math.ceil(
                                                    a.globals.gridWidth / 120
                                                ),
                                                s = t.value;
                                            void 0 !==
                                                a.config.xaxis.tickAmount &&
                                                (r = a.config.xaxis.tickAmount),
                                                y.length > r &&
                                                    (e = Math.floor(
                                                        y.length / r
                                                    ));
                                            var n = !1,
                                                o = !1;
                                            switch (i.tickInterval) {
                                                case "years":
                                                    "year" === t.unit &&
                                                        (n = !0);
                                                    break;
                                                case "half_year":
                                                    (e = 7),
                                                        "year" === t.unit &&
                                                            (n = !0);
                                                    break;
                                                case "months":
                                                    (e = 1),
                                                        "year" === t.unit &&
                                                            (n = !0);
                                                    break;
                                                case "months_fortnight":
                                                    (e = 15),
                                                        ("year" !== t.unit &&
                                                            "month" !==
                                                                t.unit) ||
                                                            (n = !0),
                                                        30 === s && (o = !0);
                                                    break;
                                                case "months_days":
                                                    (e = 10),
                                                        "month" === t.unit &&
                                                            (n = !0),
                                                        30 === s && (o = !0);
                                                    break;
                                                case "week_days":
                                                    (e = 8),
                                                        "month" === t.unit &&
                                                            (n = !0);
                                                    break;
                                                case "days":
                                                    (e = 1),
                                                        "month" === t.unit &&
                                                            (n = !0);
                                                    break;
                                                case "hours":
                                                    "day" === t.unit &&
                                                        (n = !0);
                                                    break;
                                                case "minutes_fives":
                                                case "seconds_fives":
                                                    s % 5 != 0 && (o = !0);
                                                    break;
                                                case "seconds_tens":
                                                    s % 10 != 0 && (o = !0);
                                            }
                                            if (
                                                "hours" === i.tickInterval ||
                                                "minutes_fives" ===
                                                    i.tickInterval ||
                                                "seconds_tens" ===
                                                    i.tickInterval ||
                                                "seconds_fives" ===
                                                    i.tickInterval
                                            ) {
                                                if (!o) return !0;
                                            } else if ((s % e == 0 || n) && !o) return !0;
                                        });
                                    },
                                },
                                {
                                    key: "recalcDimensionsBasedOnFormat",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = this.formatDates(t),
                                            r = this.removeOverlappingTS(a);
                                        (i.globals.timescaleLabels = r.slice()),
                                            new ct(this.ctx).plotCoords();
                                    },
                                },
                                {
                                    key: "determineInterval",
                                    value: function (t) {
                                        var e = 24 * t,
                                            i = 60 * e;
                                        switch (!0) {
                                            case t / 365 > 5:
                                                this.tickInterval = "years";
                                                break;
                                            case t > 800:
                                                this.tickInterval = "half_year";
                                                break;
                                            case t > 180:
                                                this.tickInterval = "months";
                                                break;
                                            case t > 90:
                                                this.tickInterval =
                                                    "months_fortnight";
                                                break;
                                            case t > 60:
                                                this.tickInterval =
                                                    "months_days";
                                                break;
                                            case t > 30:
                                                this.tickInterval = "week_days";
                                                break;
                                            case t > 2:
                                                this.tickInterval = "days";
                                                break;
                                            case e > 2.4:
                                                this.tickInterval = "hours";
                                                break;
                                            case i > 15:
                                                this.tickInterval =
                                                    "minutes_fives";
                                                break;
                                            case i > 5:
                                                this.tickInterval = "minutes";
                                                break;
                                            case i > 1:
                                                this.tickInterval =
                                                    "seconds_tens";
                                                break;
                                            case 60 * i > 20:
                                                this.tickInterval =
                                                    "seconds_fives";
                                                break;
                                            default:
                                                this.tickInterval = "seconds";
                                        }
                                    },
                                },
                                {
                                    key: "generateYearScale",
                                    value: function (t) {
                                        var e = t.firstVal,
                                            i = t.currentMonth,
                                            a = t.currentYear,
                                            r = t.daysWidthOnXAxis,
                                            s = t.numberOfYears,
                                            n = e.minYear,
                                            o = 0,
                                            l = new I(this.ctx),
                                            c = "year";
                                        if (e.minDate > 1 || e.minMonth > 0) {
                                            var h =
                                                l.determineRemainingDaysOfYear(
                                                    e.minYear,
                                                    e.minMonth,
                                                    e.minDate
                                                );
                                            (o =
                                                (l.determineDaysOfYear(
                                                    e.minYear
                                                ) -
                                                    h +
                                                    1) *
                                                r),
                                                (n = e.minYear + 1),
                                                this.timeScaleArray.push({
                                                    position: o,
                                                    value: n,
                                                    unit: c,
                                                    year: n,
                                                    month: v.monthMod(i + 1),
                                                });
                                        } else
                                            1 === e.minDate &&
                                                0 === e.minMonth &&
                                                this.timeScaleArray.push({
                                                    position: o,
                                                    value: n,
                                                    unit: c,
                                                    year: a,
                                                    month: v.monthMod(i + 1),
                                                });
                                        for (
                                            var d = n, u = o, f = 0;
                                            f < s;
                                            f++
                                        )
                                            d++,
                                                (u =
                                                    l.determineDaysOfYear(
                                                        d - 1
                                                    ) *
                                                        r +
                                                    u),
                                                this.timeScaleArray.push({
                                                    position: u,
                                                    value: d,
                                                    unit: c,
                                                    year: d,
                                                    month: 1,
                                                });
                                    },
                                },
                                {
                                    key: "generateMonthScale",
                                    value: function (t) {
                                        var e = t.firstVal,
                                            i = t.currentMonthDate,
                                            a = t.currentMonth,
                                            r = t.currentYear,
                                            s = t.daysWidthOnXAxis,
                                            n = t.numberOfMonths,
                                            o = a,
                                            l = 0,
                                            c = new I(this.ctx),
                                            h = "month",
                                            d = 0;
                                        if (e.minDate > 1) {
                                            (l =
                                                (c.determineDaysOfMonths(
                                                    a + 1,
                                                    e.minYear
                                                ) -
                                                    i +
                                                    1) *
                                                s),
                                                (o = v.monthMod(a + 1));
                                            var u = r + d,
                                                f = v.monthMod(o),
                                                g = o;
                                            0 === o &&
                                                ((h = "year"),
                                                (g = u),
                                                (f = 1),
                                                (u += d += 1)),
                                                this.timeScaleArray.push({
                                                    position: l,
                                                    value: g,
                                                    unit: h,
                                                    year: u,
                                                    month: f,
                                                });
                                        } else
                                            this.timeScaleArray.push({
                                                position: l,
                                                value: o,
                                                unit: h,
                                                year: r,
                                                month: v.monthMod(a),
                                            });
                                        for (
                                            var p = o + 1, x = l, m = 0, b = 1;
                                            m < n;
                                            m++, b++
                                        ) {
                                            0 === (p = v.monthMod(p))
                                                ? ((h = "year"), (d += 1))
                                                : (h = "month");
                                            var y = this._getYear(r, p, d);
                                            x =
                                                c.determineDaysOfMonths(p, y) *
                                                    s +
                                                x;
                                            var w = 0 === p ? y : p;
                                            this.timeScaleArray.push({
                                                position: x,
                                                value: w,
                                                unit: h,
                                                year: y,
                                                month: 0 === p ? 1 : p,
                                            }),
                                                p++;
                                        }
                                    },
                                },
                                {
                                    key: "generateDayScale",
                                    value: function (t) {
                                        var e = t.firstVal,
                                            i = t.currentMonth,
                                            a = t.currentYear,
                                            r = t.hoursWidthOnXAxis,
                                            s = t.numberOfDays,
                                            n = new I(this.ctx),
                                            o = "day",
                                            l = e.minDate + 1,
                                            c = l,
                                            h = function (t, e, i) {
                                                return t >
                                                    n.determineDaysOfMonths(
                                                        e + 1,
                                                        i
                                                    )
                                                    ? ((c = 1),
                                                      (o = "month"),
                                                      (u = e += 1),
                                                      e)
                                                    : e;
                                            },
                                            d = (24 - e.minHour) * r,
                                            u = l,
                                            f = h(c, i, a);
                                        0 === e.minHour && 1 === e.minDate
                                            ? ((d = 0),
                                              (u = v.monthMod(e.minMonth)),
                                              (o = "month"),
                                              (c = e.minDate),
                                              s++)
                                            : 1 !== e.minDate &&
                                              0 === e.minHour &&
                                              0 === e.minMinute &&
                                              ((d = 0),
                                              (l = e.minDate),
                                              (u = l),
                                              (f = h((c = l), i, a))),
                                            this.timeScaleArray.push({
                                                position: d,
                                                value: u,
                                                unit: o,
                                                year: this._getYear(a, f, 0),
                                                month: v.monthMod(f),
                                                day: c,
                                            });
                                        for (var g = d, p = 0; p < s; p++) {
                                            (o = "day"),
                                                (f = h(
                                                    (c += 1),
                                                    f,
                                                    this._getYear(a, f, 0)
                                                ));
                                            var x = this._getYear(a, f, 0);
                                            g = 24 * r + g;
                                            var m = 1 === c ? v.monthMod(f) : c;
                                            this.timeScaleArray.push({
                                                position: g,
                                                value: m,
                                                unit: o,
                                                year: x,
                                                month: v.monthMod(f),
                                                day: m,
                                            });
                                        }
                                    },
                                },
                                {
                                    key: "generateHourScale",
                                    value: function (t) {
                                        var e = t.firstVal,
                                            i = t.currentDate,
                                            a = t.currentMonth,
                                            r = t.currentYear,
                                            s = t.minutesWidthOnXAxis,
                                            n = t.numberOfHours,
                                            o = new I(this.ctx),
                                            l = "hour",
                                            c = function (t, e) {
                                                return (
                                                    t >
                                                        o.determineDaysOfMonths(
                                                            e + 1,
                                                            r
                                                        ) &&
                                                        ((p = 1), (e += 1)),
                                                    { month: e, date: p }
                                                );
                                            },
                                            h = function (t, e) {
                                                return t >
                                                    o.determineDaysOfMonths(
                                                        e + 1,
                                                        r
                                                    )
                                                    ? (e += 1)
                                                    : e;
                                            },
                                            d =
                                                60 -
                                                (e.minMinute +
                                                    e.minSecond / 60),
                                            u = d * s,
                                            f = e.minHour + 1,
                                            g = f + 1;
                                        60 === d &&
                                            ((u = 0),
                                            (g = (f = e.minHour) + 1));
                                        var p = i,
                                            x = h(p, a);
                                        this.timeScaleArray.push({
                                            position: u,
                                            value: f,
                                            unit: l,
                                            day: p,
                                            hour: g,
                                            year: r,
                                            month: v.monthMod(x),
                                        });
                                        for (var m = u, b = 0; b < n; b++) {
                                            (l = "hour"),
                                                g >= 24 &&
                                                    ((g = 0),
                                                    (l = "day"),
                                                    (x = c((p += 1), x).month),
                                                    (x = h(p, x)));
                                            var y = this._getYear(r, x, 0);
                                            m = 60 * s + m;
                                            var w = 0 === g ? p : g;
                                            this.timeScaleArray.push({
                                                position: m,
                                                value: w,
                                                unit: l,
                                                hour: g,
                                                day: p,
                                                year: y,
                                                month: v.monthMod(x),
                                            }),
                                                g++;
                                        }
                                    },
                                },
                                {
                                    key: "generateMinuteScale",
                                    value: function (t) {
                                        for (
                                            var e = t.currentMillisecond,
                                                i = t.currentSecond,
                                                a = t.currentMinute,
                                                r = t.currentHour,
                                                s = t.currentDate,
                                                n = t.currentMonth,
                                                o = t.currentYear,
                                                l = t.minutesWidthOnXAxis,
                                                c = t.secondsWidthOnXAxis,
                                                h = t.numberOfMinutes,
                                                d = a + 1,
                                                u = s,
                                                f = n,
                                                g = o,
                                                p = r,
                                                x = (60 - i - e / 1e3) * c,
                                                m = 0;
                                            m < h;
                                            m++
                                        )
                                            d >= 60 &&
                                                ((d = 0),
                                                24 === (p += 1) && (p = 0)),
                                                this.timeScaleArray.push({
                                                    position: x,
                                                    value: d,
                                                    unit: "minute",
                                                    hour: p,
                                                    minute: d,
                                                    day: u,
                                                    year: this._getYear(
                                                        g,
                                                        f,
                                                        0
                                                    ),
                                                    month: v.monthMod(f),
                                                }),
                                                (x += l),
                                                d++;
                                    },
                                },
                                {
                                    key: "generateSecondScale",
                                    value: function (t) {
                                        for (
                                            var e = t.currentMillisecond,
                                                i = t.currentSecond,
                                                a = t.currentMinute,
                                                r = t.currentHour,
                                                s = t.currentDate,
                                                n = t.currentMonth,
                                                o = t.currentYear,
                                                l = t.secondsWidthOnXAxis,
                                                c = t.numberOfSeconds,
                                                h = i + 1,
                                                d = a,
                                                u = s,
                                                f = n,
                                                g = o,
                                                p = r,
                                                x = ((1e3 - e) / 1e3) * l,
                                                m = 0;
                                            m < c;
                                            m++
                                        )
                                            h >= 60 &&
                                                ((h = 0),
                                                ++d >= 60 &&
                                                    ((d = 0),
                                                    24 == ++p && (p = 0))),
                                                this.timeScaleArray.push({
                                                    position: x,
                                                    value: h,
                                                    unit: "second",
                                                    hour: p,
                                                    minute: d,
                                                    second: h,
                                                    day: u,
                                                    year: this._getYear(
                                                        g,
                                                        f,
                                                        0
                                                    ),
                                                    month: v.monthMod(f),
                                                }),
                                                (x += l),
                                                h++;
                                    },
                                },
                                {
                                    key: "createRawDateString",
                                    value: function (t, e) {
                                        var i = t.year;
                                        return (
                                            0 === t.month && (t.month = 1),
                                            (i +=
                                                "-" +
                                                (
                                                    "0" + t.month.toString()
                                                ).slice(-2)),
                                            "day" === t.unit
                                                ? (i +=
                                                      "day" === t.unit
                                                          ? "-" +
                                                            ("0" + e).slice(-2)
                                                          : "-01")
                                                : (i +=
                                                      "-" +
                                                      (
                                                          "0" +
                                                          (t.day ? t.day : "1")
                                                      ).slice(-2)),
                                            "hour" === t.unit
                                                ? (i +=
                                                      "hour" === t.unit
                                                          ? "T" +
                                                            ("0" + e).slice(-2)
                                                          : "T00")
                                                : (i +=
                                                      "T" +
                                                      (
                                                          "0" +
                                                          (t.hour
                                                              ? t.hour
                                                              : "0")
                                                      ).slice(-2)),
                                            "minute" === t.unit
                                                ? (i +=
                                                      ":" + ("0" + e).slice(-2))
                                                : (i +=
                                                      ":" +
                                                      (t.minute
                                                          ? (
                                                                "0" + t.minute
                                                            ).slice(-2)
                                                          : "00")),
                                            "second" === t.unit
                                                ? (i +=
                                                      ":" + ("0" + e).slice(-2))
                                                : (i += ":00"),
                                            this.utc && (i += ".000Z"),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "formatDates",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w;
                                        return t.map(function (t) {
                                            var a = t.value.toString(),
                                                r = new I(e.ctx),
                                                s = e.createRawDateString(t, a),
                                                n = r.getDate(r.parseDate(s));
                                            if (
                                                (e.utc ||
                                                    (n = r.getDate(
                                                        r.parseDateWithTimezone(
                                                            s
                                                        )
                                                    )),
                                                void 0 ===
                                                    i.config.xaxis.labels
                                                        .format)
                                            ) {
                                                var o = "dd MMM",
                                                    l =
                                                        i.config.xaxis.labels
                                                            .datetimeFormatter;
                                                "year" === t.unit &&
                                                    (o = l.year),
                                                    "month" === t.unit &&
                                                        (o = l.month),
                                                    "day" === t.unit &&
                                                        (o = l.day),
                                                    "hour" === t.unit &&
                                                        (o = l.hour),
                                                    "minute" === t.unit &&
                                                        (o = l.minute),
                                                    "second" === t.unit &&
                                                        (o = l.second),
                                                    (a = r.formatDate(n, o));
                                            } else a = r.formatDate(n, i.config.xaxis.labels.format);
                                            return {
                                                dateString: s,
                                                position: t.position,
                                                value: a,
                                                unit: t.unit,
                                                year: t.year,
                                                month: t.month,
                                            };
                                        });
                                    },
                                },
                                {
                                    key: "removeOverlappingTS",
                                    value: function (t) {
                                        var e,
                                            i = this,
                                            a = new k(this.ctx),
                                            r = !1;
                                        t.length > 0 &&
                                            t[0].value &&
                                            t.every(function (e) {
                                                return (
                                                    e.value.length ===
                                                    t[0].value.length
                                                );
                                            }) &&
                                            ((r = !0),
                                            (e = a.getTextRects(
                                                t[0].value
                                            ).width));
                                        var s = 0,
                                            n = t.map(function (n, o) {
                                                if (
                                                    o > 0 &&
                                                    i.w.config.xaxis.labels
                                                        .hideOverlappingLabels
                                                ) {
                                                    var l = r
                                                            ? e
                                                            : a.getTextRects(
                                                                  t[s].value
                                                              ).width,
                                                        c = t[s].position;
                                                    return n.position >
                                                        c + l + 10
                                                        ? ((s = o), n)
                                                        : null;
                                                }
                                                return n;
                                            });
                                        return n.filter(function (t) {
                                            return null !== t;
                                        });
                                    },
                                },
                                {
                                    key: "_getYear",
                                    value: function (t, e, i) {
                                        return t + Math.floor(e / 12) + i;
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Yt = (function () {
                        function t(e, i) {
                            o(this, t),
                                (this.ctx = i),
                                (this.w = i.w),
                                (this.el = e);
                        }
                        return (
                            c(t, [
                                {
                                    key: "setupElements",
                                    value: function () {
                                        var t = this.w.globals,
                                            e = this.w.config,
                                            i = e.chart.type;
                                        (t.axisCharts =
                                            [
                                                "line",
                                                "area",
                                                "bar",
                                                "rangeBar",
                                                "rangeArea",
                                                "candlestick",
                                                "boxPlot",
                                                "scatter",
                                                "bubble",
                                                "radar",
                                                "heatmap",
                                                "treemap",
                                            ].indexOf(i) > -1),
                                            (t.xyCharts =
                                                [
                                                    "line",
                                                    "area",
                                                    "bar",
                                                    "rangeBar",
                                                    "rangeArea",
                                                    "candlestick",
                                                    "boxPlot",
                                                    "scatter",
                                                    "bubble",
                                                ].indexOf(i) > -1),
                                            (t.isBarHorizontal =
                                                ("bar" === e.chart.type ||
                                                    "rangeBar" ===
                                                        e.chart.type ||
                                                    "boxPlot" ===
                                                        e.chart.type) &&
                                                e.plotOptions.bar.horizontal),
                                            (t.chartClass =
                                                ".apexcharts" + t.chartID),
                                            (t.dom.baseEl = this.el),
                                            (t.dom.elWrap =
                                                document.createElement("div")),
                                            k.setAttrs(t.dom.elWrap, {
                                                id: t.chartClass.substring(1),
                                                class:
                                                    "apexcharts-canvas " +
                                                    t.chartClass.substring(1),
                                            }),
                                            this.el.appendChild(t.dom.elWrap),
                                            (t.dom.Paper = new window.SVG.Doc(
                                                t.dom.elWrap
                                            )),
                                            t.dom.Paper.attr({
                                                class: "apexcharts-svg",
                                                "xmlns:data": "ApexChartsNS",
                                                transform: "translate("
                                                    .concat(
                                                        e.chart.offsetX,
                                                        ", "
                                                    )
                                                    .concat(
                                                        e.chart.offsetY,
                                                        ")"
                                                    ),
                                            }),
                                            (t.dom.Paper.node.style.background =
                                                e.chart.background),
                                            this.setSVGDimensions(),
                                            (t.dom.elLegendForeign =
                                                document.createElementNS(
                                                    t.SVGNS,
                                                    "foreignObject"
                                                )),
                                            k.setAttrs(t.dom.elLegendForeign, {
                                                x: 0,
                                                y: 0,
                                                width: t.svgWidth,
                                                height: t.svgHeight,
                                            }),
                                            (t.dom.elLegendWrap =
                                                document.createElement("div")),
                                            t.dom.elLegendWrap.classList.add(
                                                "apexcharts-legend"
                                            ),
                                            t.dom.elLegendWrap.setAttribute(
                                                "xmlns",
                                                "http://www.w3.org/1999/xhtml"
                                            ),
                                            t.dom.elLegendForeign.appendChild(
                                                t.dom.elLegendWrap
                                            ),
                                            t.dom.Paper.node.appendChild(
                                                t.dom.elLegendForeign
                                            ),
                                            (t.dom.elGraphical =
                                                t.dom.Paper.group().attr({
                                                    class: "apexcharts-inner apexcharts-graphical",
                                                })),
                                            (t.dom.elDefs = t.dom.Paper.defs()),
                                            t.dom.Paper.add(t.dom.elGraphical),
                                            t.dom.elGraphical.add(t.dom.elDefs);
                                    },
                                },
                                {
                                    key: "plotChartType",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = i.config,
                                            r = i.globals,
                                            s = { series: [], i: [] },
                                            n = { series: [], i: [] },
                                            o = { series: [], i: [] },
                                            l = { series: [], i: [] },
                                            c = { series: [], i: [] },
                                            h = { series: [], i: [] },
                                            d = { series: [], i: [] },
                                            u = { series: [], i: [] },
                                            f = {
                                                series: [],
                                                seriesRangeEnd: [],
                                                i: [],
                                            };
                                        r.series.map(function (e, g) {
                                            var p = 0;
                                            void 0 !== t[g].type
                                                ? ("column" === t[g].type ||
                                                  "bar" === t[g].type
                                                      ? (r.series.length > 1 &&
                                                            a.plotOptions.bar
                                                                .horizontal &&
                                                            console.warn(
                                                                "Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"
                                                            ),
                                                        c.series.push(e),
                                                        c.i.push(g),
                                                        p++,
                                                        (i.globals.columnSeries =
                                                            c.series))
                                                      : "area" === t[g].type
                                                      ? (n.series.push(e),
                                                        n.i.push(g),
                                                        p++)
                                                      : "line" === t[g].type
                                                      ? (s.series.push(e),
                                                        s.i.push(g),
                                                        p++)
                                                      : "scatter" === t[g].type
                                                      ? (o.series.push(e),
                                                        o.i.push(g))
                                                      : "bubble" === t[g].type
                                                      ? (l.series.push(e),
                                                        l.i.push(g),
                                                        p++)
                                                      : "candlestick" ===
                                                        t[g].type
                                                      ? (h.series.push(e),
                                                        h.i.push(g),
                                                        p++)
                                                      : "boxPlot" === t[g].type
                                                      ? (d.series.push(e),
                                                        d.i.push(g),
                                                        p++)
                                                      : "rangeBar" === t[g].type
                                                      ? (u.series.push(e),
                                                        u.i.push(g),
                                                        p++)
                                                      : "rangeArea" ===
                                                        t[g].type
                                                      ? (f.series.push(
                                                            r.seriesRangeStart[
                                                                g
                                                            ]
                                                        ),
                                                        f.seriesRangeEnd.push(
                                                            r.seriesRangeEnd[g]
                                                        ),
                                                        f.i.push(g),
                                                        p++)
                                                      : console.warn(
                                                            "You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble/candlestick/boxPlot/rangeBar/rangeArea"
                                                        ),
                                                  p > 1 && (r.comboCharts = !0))
                                                : (s.series.push(e),
                                                  s.i.push(g));
                                        });
                                        var g = new Ft(this.ctx, e),
                                            p = new Ct(this.ctx, e);
                                        this.ctx.pie = new Mt(this.ctx);
                                        var x = new It(this.ctx);
                                        this.ctx.rangeBar = new Ot(this.ctx, e);
                                        var m = new Et(this.ctx),
                                            b = [];
                                        if (r.comboCharts) {
                                            if (
                                                (n.series.length > 0 &&
                                                    b.push(
                                                        g.draw(
                                                            n.series,
                                                            "area",
                                                            n.i
                                                        )
                                                    ),
                                                c.series.length > 0)
                                            )
                                                if (i.config.chart.stacked) {
                                                    var v = new St(this.ctx, e);
                                                    b.push(
                                                        v.draw(c.series, c.i)
                                                    );
                                                } else
                                                    (this.ctx.bar = new At(
                                                        this.ctx,
                                                        e
                                                    )),
                                                        b.push(
                                                            this.ctx.bar.draw(
                                                                c.series,
                                                                c.i
                                                            )
                                                        );
                                            if (
                                                (f.series.length > 0 &&
                                                    b.push(
                                                        g.draw(
                                                            f.series,
                                                            "rangeArea",
                                                            f.i,
                                                            f.seriesRangeEnd
                                                        )
                                                    ),
                                                s.series.length > 0 &&
                                                    b.push(
                                                        g.draw(
                                                            s.series,
                                                            "line",
                                                            s.i
                                                        )
                                                    ),
                                                h.series.length > 0 &&
                                                    b.push(
                                                        p.draw(
                                                            h.series,
                                                            "candlestick",
                                                            h.i
                                                        )
                                                    ),
                                                d.series.length > 0 &&
                                                    b.push(
                                                        p.draw(
                                                            d.series,
                                                            "boxPlot",
                                                            d.i
                                                        )
                                                    ),
                                                u.series.length > 0 &&
                                                    b.push(
                                                        this.ctx.rangeBar.draw(
                                                            u.series,
                                                            u.i
                                                        )
                                                    ),
                                                o.series.length > 0)
                                            ) {
                                                var y = new Ft(this.ctx, e, !0);
                                                b.push(
                                                    y.draw(
                                                        o.series,
                                                        "scatter",
                                                        o.i
                                                    )
                                                );
                                            }
                                            if (l.series.length > 0) {
                                                var w = new Ft(this.ctx, e, !0);
                                                b.push(
                                                    w.draw(
                                                        l.series,
                                                        "bubble",
                                                        l.i
                                                    )
                                                );
                                            }
                                        } else
                                            switch (a.chart.type) {
                                                case "line":
                                                    b = g.draw(
                                                        r.series,
                                                        "line"
                                                    );
                                                    break;
                                                case "area":
                                                    b = g.draw(
                                                        r.series,
                                                        "area"
                                                    );
                                                    break;
                                                case "bar":
                                                    a.chart.stacked
                                                        ? (b = new St(
                                                              this.ctx,
                                                              e
                                                          ).draw(r.series))
                                                        : ((this.ctx.bar =
                                                              new At(
                                                                  this.ctx,
                                                                  e
                                                              )),
                                                          (b =
                                                              this.ctx.bar.draw(
                                                                  r.series
                                                              )));
                                                    break;
                                                case "candlestick":
                                                    b = new Ct(
                                                        this.ctx,
                                                        e
                                                    ).draw(
                                                        r.series,
                                                        "candlestick"
                                                    );
                                                    break;
                                                case "boxPlot":
                                                    b = new Ct(
                                                        this.ctx,
                                                        e
                                                    ).draw(
                                                        r.series,
                                                        a.chart.type
                                                    );
                                                    break;
                                                case "rangeBar":
                                                    b = this.ctx.rangeBar.draw(
                                                        r.series
                                                    );
                                                    break;
                                                case "rangeArea":
                                                    b = g.draw(
                                                        r.seriesRangeStart,
                                                        "rangeArea",
                                                        void 0,
                                                        r.seriesRangeEnd
                                                    );
                                                    break;
                                                case "heatmap":
                                                    b = new Lt(
                                                        this.ctx,
                                                        e
                                                    ).draw(r.series);
                                                    break;
                                                case "treemap":
                                                    b = new Xt(
                                                        this.ctx,
                                                        e
                                                    ).draw(r.series);
                                                    break;
                                                case "pie":
                                                case "donut":
                                                case "polarArea":
                                                    b = this.ctx.pie.draw(
                                                        r.series
                                                    );
                                                    break;
                                                case "radialBar":
                                                    b = x.draw(r.series);
                                                    break;
                                                case "radar":
                                                    b = m.draw(r.series);
                                                    break;
                                                default:
                                                    b = g.draw(r.series);
                                            }
                                        return b;
                                    },
                                },
                                {
                                    key: "setSVGDimensions",
                                    value: function () {
                                        var t = this.w.globals,
                                            e = this.w.config;
                                        (t.svgWidth = e.chart.width),
                                            (t.svgHeight = e.chart.height);
                                        var i = v.getDimensions(this.el),
                                            a = e.chart.width
                                                .toString()
                                                .split(/[0-9]+/g)
                                                .pop();
                                        "%" === a
                                            ? v.isNumber(i[0]) &&
                                              (0 === i[0].width &&
                                                  (i = v.getDimensions(
                                                      this.el.parentNode
                                                  )),
                                              (t.svgWidth =
                                                  (i[0] *
                                                      parseInt(
                                                          e.chart.width,
                                                          10
                                                      )) /
                                                  100))
                                            : ("px" !== a && "" !== a) ||
                                              (t.svgWidth = parseInt(
                                                  e.chart.width,
                                                  10
                                              ));
                                        var r = e.chart.height
                                            .toString()
                                            .split(/[0-9]+/g)
                                            .pop();
                                        if (
                                            "auto" !== t.svgHeight &&
                                            "" !== t.svgHeight
                                        )
                                            if ("%" === r) {
                                                var s = v.getDimensions(
                                                    this.el.parentNode
                                                );
                                                t.svgHeight =
                                                    (s[1] *
                                                        parseInt(
                                                            e.chart.height,
                                                            10
                                                        )) /
                                                    100;
                                            } else
                                                t.svgHeight = parseInt(
                                                    e.chart.height,
                                                    10
                                                );
                                        else
                                            t.axisCharts
                                                ? (t.svgHeight =
                                                      t.svgWidth / 1.61)
                                                : (t.svgHeight =
                                                      t.svgWidth / 1.2);
                                        if (
                                            (t.svgWidth < 0 && (t.svgWidth = 0),
                                            t.svgHeight < 0 &&
                                                (t.svgHeight = 0),
                                            k.setAttrs(t.dom.Paper.node, {
                                                width: t.svgWidth,
                                                height: t.svgHeight,
                                            }),
                                            "%" !== r)
                                        ) {
                                            var n = e.chart.sparkline.enabled
                                                ? 0
                                                : t.axisCharts
                                                ? e.chart.parentHeightOffset
                                                : 0;
                                            t.dom.Paper.node.parentNode.parentNode.style.minHeight =
                                                t.svgHeight + n + "px";
                                        }
                                        (t.dom.elWrap.style.width =
                                            t.svgWidth + "px"),
                                            (t.dom.elWrap.style.height =
                                                t.svgHeight + "px");
                                    },
                                },
                                {
                                    key: "shiftGraphPosition",
                                    value: function () {
                                        var t = this.w.globals,
                                            e = t.translateY,
                                            i = {
                                                transform:
                                                    "translate(" +
                                                    t.translateX +
                                                    ", " +
                                                    e +
                                                    ")",
                                            };
                                        k.setAttrs(t.dom.elGraphical.node, i);
                                    },
                                },
                                {
                                    key: "resizeNonAxisCharts",
                                    value: function () {
                                        var t = this.w,
                                            e = t.globals,
                                            i = 0,
                                            a = t.config.chart.sparkline.enabled
                                                ? 1
                                                : 15;
                                        (a += t.config.grid.padding.bottom),
                                            ("top" !==
                                                t.config.legend.position &&
                                                "bottom" !==
                                                    t.config.legend.position) ||
                                                !t.config.legend.show ||
                                                t.config.legend.floating ||
                                                (i =
                                                    new dt(
                                                        this.ctx
                                                    ).legendHelpers.getLegendBBox()
                                                        .clwh + 10);
                                        var r =
                                                t.globals.dom.baseEl.querySelector(
                                                    ".apexcharts-radialbar, .apexcharts-pie"
                                                ),
                                            s = 2.05 * t.globals.radialSize;
                                        if (
                                            r &&
                                            !t.config.chart.sparkline.enabled &&
                                            0 !==
                                                t.config.plotOptions.radialBar
                                                    .startAngle
                                        ) {
                                            var n = v.getBoundingClientRect(r);
                                            s = n.bottom;
                                            var o = n.bottom - n.top;
                                            s = Math.max(
                                                2.05 * t.globals.radialSize,
                                                o
                                            );
                                        }
                                        var l = s + e.translateY + i + a;
                                        e.dom.elLegendForeign &&
                                            e.dom.elLegendForeign.setAttribute(
                                                "height",
                                                l
                                            ),
                                            (t.config.chart.height &&
                                                String(
                                                    t.config.chart.height
                                                ).indexOf("%") > 0) ||
                                                ((e.dom.elWrap.style.height =
                                                    l + "px"),
                                                k.setAttrs(e.dom.Paper.node, {
                                                    height: l,
                                                }),
                                                (e.dom.Paper.node.parentNode.parentNode.style.minHeight =
                                                    l + "px"));
                                    },
                                },
                                {
                                    key: "coreCalculations",
                                    value: function () {
                                        new Z(this.ctx).init();
                                    },
                                },
                                {
                                    key: "resetGlobals",
                                    value: function () {
                                        var t = this,
                                            e = function () {
                                                return t.w.config.series.map(
                                                    function (t) {
                                                        return [];
                                                    }
                                                );
                                            },
                                            i = new X(),
                                            a = this.w.globals;
                                        i.initGlobalVars(a),
                                            (a.seriesXvalues = e()),
                                            (a.seriesYvalues = e());
                                    },
                                },
                                {
                                    key: "isMultipleY",
                                    value: function () {
                                        if (
                                            this.w.config.yaxis.constructor ===
                                                Array &&
                                            this.w.config.yaxis.length > 1
                                        )
                                            return (
                                                (this.w.globals.isMultipleYAxis =
                                                    !0),
                                                !0
                                            );
                                    },
                                },
                                {
                                    key: "xySettings",
                                    value: function () {
                                        var t = null,
                                            e = this.w;
                                        if (e.globals.axisCharts) {
                                            if (
                                                ("back" ===
                                                    e.config.xaxis.crosshairs
                                                        .position &&
                                                    new et(
                                                        this.ctx
                                                    ).drawXCrosshairs(),
                                                "back" ===
                                                    e.config.yaxis[0].crosshairs
                                                        .position &&
                                                    new et(
                                                        this.ctx
                                                    ).drawYCrosshairs(),
                                                "datetime" ===
                                                    e.config.xaxis.type &&
                                                    void 0 ===
                                                        e.config.xaxis.labels
                                                            .formatter)
                                            ) {
                                                this.ctx.timeScale = new Rt(
                                                    this.ctx
                                                );
                                                var i = [];
                                                isFinite(e.globals.minX) &&
                                                isFinite(e.globals.maxX) &&
                                                !e.globals.isBarHorizontal
                                                    ? (i =
                                                          this.ctx.timeScale.calculateTimeScaleTicks(
                                                              e.globals.minX,
                                                              e.globals.maxX
                                                          ))
                                                    : e.globals
                                                          .isBarHorizontal &&
                                                      (i =
                                                          this.ctx.timeScale.calculateTimeScaleTicks(
                                                              e.globals.minY,
                                                              e.globals.maxY
                                                          )),
                                                    this.ctx.timeScale.recalcDimensionsBasedOnFormat(
                                                        i
                                                    );
                                            }
                                            t = new A(
                                                this.ctx
                                            ).getCalculatedRatios();
                                        }
                                        return t;
                                    },
                                },
                                {
                                    key: "updateSourceChart",
                                    value: function (t) {
                                        (this.ctx.w.globals.selection = void 0),
                                            this.ctx.updateHelpers._updateOptions(
                                                {
                                                    chart: {
                                                        selection: {
                                                            xaxis: {
                                                                min: t.w.globals
                                                                    .minX,
                                                                max: t.w.globals
                                                                    .maxX,
                                                            },
                                                        },
                                                    },
                                                },
                                                !1,
                                                !1
                                            );
                                    },
                                },
                                {
                                    key: "setupBrushHandler",
                                    value: function () {
                                        var t = this,
                                            e = this.w;
                                        if (
                                            e.config.chart.brush.enabled &&
                                            "function" !=
                                                typeof e.config.chart.events
                                                    .selection
                                        ) {
                                            var i = e.config.chart.brush
                                                .targets || [
                                                e.config.chart.brush.target,
                                            ];
                                            i.forEach(function (e) {
                                                var i =
                                                    ApexCharts.getChartByID(e);
                                                (i.w.globals.brushSource =
                                                    t.ctx),
                                                    "function" !=
                                                        typeof i.w.config.chart
                                                            .events.zoomed &&
                                                        (i.w.config.chart.events.zoomed =
                                                            function () {
                                                                t.updateSourceChart(
                                                                    i
                                                                );
                                                            }),
                                                    "function" !=
                                                        typeof i.w.config.chart
                                                            .events.scrolled &&
                                                        (i.w.config.chart.events.scrolled =
                                                            function () {
                                                                t.updateSourceChart(
                                                                    i
                                                                );
                                                            });
                                            }),
                                                (e.config.chart.events.selection =
                                                    function (t, a) {
                                                        i.forEach(function (t) {
                                                            var i =
                                                                    ApexCharts.getChartByID(
                                                                        t
                                                                    ),
                                                                r = v.clone(
                                                                    e.config
                                                                        .yaxis
                                                                );
                                                            if (
                                                                e.config.chart
                                                                    .brush
                                                                    .autoScaleYaxis &&
                                                                1 ===
                                                                    i.w.globals
                                                                        .series
                                                                        .length
                                                            ) {
                                                                var n = new $(
                                                                    i
                                                                );
                                                                r =
                                                                    n.autoScaleY(
                                                                        i,
                                                                        r,
                                                                        a
                                                                    );
                                                            }
                                                            var o =
                                                                i.w.config.yaxis.reduce(
                                                                    function (
                                                                        t,
                                                                        e,
                                                                        a
                                                                    ) {
                                                                        return [].concat(
                                                                            x(
                                                                                t
                                                                            ),
                                                                            [
                                                                                s(
                                                                                    s(
                                                                                        {},
                                                                                        i
                                                                                            .w
                                                                                            .config
                                                                                            .yaxis[
                                                                                            a
                                                                                        ]
                                                                                    ),
                                                                                    {},
                                                                                    {
                                                                                        min: r[0]
                                                                                            .min,
                                                                                        max: r[0]
                                                                                            .max,
                                                                                    }
                                                                                ),
                                                                            ]
                                                                        );
                                                                    },
                                                                    []
                                                                );
                                                            i.ctx.updateHelpers._updateOptions(
                                                                {
                                                                    xaxis: {
                                                                        min: a
                                                                            .xaxis
                                                                            .min,
                                                                        max: a
                                                                            .xaxis
                                                                            .max,
                                                                    },
                                                                    yaxis: o,
                                                                },
                                                                !1,
                                                                !1,
                                                                !1,
                                                                !1
                                                            );
                                                        });
                                                    });
                                        }
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Ht = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "_updateOptions",
                                    value: function (t) {
                                        var e = this,
                                            i =
                                                arguments.length > 1 &&
                                                void 0 !== arguments[1] &&
                                                arguments[1],
                                            a =
                                                !(
                                                    arguments.length > 2 &&
                                                    void 0 !== arguments[2]
                                                ) || arguments[2],
                                            r =
                                                !(
                                                    arguments.length > 3 &&
                                                    void 0 !== arguments[3]
                                                ) || arguments[3],
                                            s =
                                                arguments.length > 4 &&
                                                void 0 !== arguments[4] &&
                                                arguments[4];
                                        return new Promise(function (o) {
                                            var l = [e.ctx];
                                            r && (l = e.ctx.getSyncedCharts()),
                                                e.ctx.w.globals.isExecCalled &&
                                                    ((l = [e.ctx]),
                                                    (e.ctx.w.globals.isExecCalled =
                                                        !1)),
                                                l.forEach(function (r, c) {
                                                    var h = r.w;
                                                    if (
                                                        ((h.globals.shouldAnimate =
                                                            a),
                                                        i ||
                                                            ((h.globals.resized =
                                                                !0),
                                                            (h.globals.dataChanged =
                                                                !0),
                                                            a &&
                                                                r.series.getPreviousPaths()),
                                                        t &&
                                                            "object" === n(t) &&
                                                            ((r.config = new N(
                                                                t
                                                            )),
                                                            (t =
                                                                A.extendArrayProps(
                                                                    r.config,
                                                                    t,
                                                                    h
                                                                )),
                                                            r.w.globals
                                                                .chartID !==
                                                                e.ctx.w.globals
                                                                    .chartID &&
                                                                delete t.series,
                                                            (h.config =
                                                                v.extend(
                                                                    h.config,
                                                                    t
                                                                )),
                                                            s &&
                                                                ((h.globals.lastXAxis =
                                                                    t.xaxis
                                                                        ? v.clone(
                                                                              t.xaxis
                                                                          )
                                                                        : []),
                                                                (h.globals.lastYAxis =
                                                                    t.yaxis
                                                                        ? v.clone(
                                                                              t.yaxis
                                                                          )
                                                                        : []),
                                                                (h.globals.initialConfig =
                                                                    v.extend(
                                                                        {},
                                                                        h.config
                                                                    )),
                                                                (h.globals.initialSeries =
                                                                    v.clone(
                                                                        h.config
                                                                            .series
                                                                    )),
                                                                t.series)))
                                                    ) {
                                                        for (
                                                            var d = 0;
                                                            d <
                                                            h.globals
                                                                .collapsedSeriesIndices
                                                                .length;
                                                            d++
                                                        ) {
                                                            var u =
                                                                h.config.series[
                                                                    h.globals
                                                                        .collapsedSeriesIndices[
                                                                        d
                                                                    ]
                                                                ];
                                                            h.globals.collapsedSeries[
                                                                d
                                                            ].data = h.globals
                                                                .axisCharts
                                                                ? u.data.slice()
                                                                : u;
                                                        }
                                                        for (
                                                            var f = 0;
                                                            f <
                                                            h.globals
                                                                .ancillaryCollapsedSeriesIndices
                                                                .length;
                                                            f++
                                                        ) {
                                                            var g =
                                                                h.config.series[
                                                                    h.globals
                                                                        .ancillaryCollapsedSeriesIndices[
                                                                        f
                                                                    ]
                                                                ];
                                                            h.globals.ancillaryCollapsedSeries[
                                                                f
                                                            ].data = h.globals
                                                                .axisCharts
                                                                ? g.data.slice()
                                                                : g;
                                                        }
                                                        r.series.emptyCollapsedSeries(
                                                            h.config.series
                                                        );
                                                    }
                                                    return r
                                                        .update(t)
                                                        .then(function () {
                                                            c ===
                                                                l.length - 1 &&
                                                                o(r);
                                                        });
                                                });
                                        });
                                    },
                                },
                                {
                                    key: "_updateSeries",
                                    value: function (t, e) {
                                        var i = this,
                                            a =
                                                arguments.length > 2 &&
                                                void 0 !== arguments[2] &&
                                                arguments[2];
                                        return new Promise(function (r) {
                                            var s,
                                                n = i.w;
                                            return (
                                                (n.globals.shouldAnimate = e),
                                                (n.globals.dataChanged = !0),
                                                e &&
                                                    i.ctx.series.getPreviousPaths(),
                                                n.globals.axisCharts
                                                    ? (0 ===
                                                          (s = t.map(function (
                                                              t,
                                                              e
                                                          ) {
                                                              return i._extendSeries(
                                                                  t,
                                                                  e
                                                              );
                                                          })).length &&
                                                          (s = [{ data: [] }]),
                                                      (n.config.series = s))
                                                    : (n.config.series =
                                                          t.slice()),
                                                a &&
                                                    ((n.globals.initialConfig.series =
                                                        v.clone(
                                                            n.config.series
                                                        )),
                                                    (n.globals.initialSeries =
                                                        v.clone(
                                                            n.config.series
                                                        ))),
                                                i.ctx
                                                    .update()
                                                    .then(function () {
                                                        r(i.ctx);
                                                    })
                                            );
                                        });
                                    },
                                },
                                {
                                    key: "_extendSeries",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = i.config.series[e];
                                        return s(
                                            s({}, i.config.series[e]),
                                            {},
                                            {
                                                name: t.name
                                                    ? t.name
                                                    : a && a.name,
                                                color: t.color
                                                    ? t.color
                                                    : a && a.color,
                                                type: t.type
                                                    ? t.type
                                                    : a && a.type,
                                                data: t.data
                                                    ? t.data
                                                    : a && a.data,
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "toggleDataPointSelection",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = null,
                                            r =
                                                ".apexcharts-series[data\\:realIndex='".concat(
                                                    t,
                                                    "']"
                                                );
                                        return (
                                            i.globals.axisCharts
                                                ? (a =
                                                      i.globals.dom.Paper.select(
                                                          ""
                                                              .concat(
                                                                  r,
                                                                  " path[j='"
                                                              )
                                                              .concat(e, "'], ")
                                                              .concat(
                                                                  r,
                                                                  " circle[j='"
                                                              )
                                                              .concat(e, "'], ")
                                                              .concat(
                                                                  r,
                                                                  " rect[j='"
                                                              )
                                                              .concat(e, "']")
                                                      ).members[0])
                                                : void 0 === e &&
                                                  ((a =
                                                      i.globals.dom.Paper.select(
                                                          ""
                                                              .concat(
                                                                  r,
                                                                  " path[j='"
                                                              )
                                                              .concat(t, "']")
                                                      ).members[0]),
                                                  ("pie" !==
                                                      i.config.chart.type &&
                                                      "polarArea" !==
                                                          i.config.chart.type &&
                                                      "donut" !==
                                                          i.config.chart
                                                              .type) ||
                                                      this.ctx.pie.pieClicked(
                                                          t
                                                      )),
                                            a
                                                ? (new k(
                                                      this.ctx
                                                  ).pathMouseDown(a, null),
                                                  a.node ? a.node : null)
                                                : (console.warn(
                                                      "toggleDataPointSelection: Element not found"
                                                  ),
                                                  null)
                                        );
                                    },
                                },
                                {
                                    key: "forceXAxisUpdate",
                                    value: function (t) {
                                        var e = this.w;
                                        if (
                                            (["min", "max"].forEach(function (
                                                i
                                            ) {
                                                void 0 !== t.xaxis[i] &&
                                                    ((e.config.xaxis[i] =
                                                        t.xaxis[i]),
                                                    (e.globals.lastXAxis[i] =
                                                        t.xaxis[i]));
                                            }),
                                            t.xaxis.categories &&
                                                t.xaxis.categories.length &&
                                                (e.config.xaxis.categories =
                                                    t.xaxis.categories),
                                            e.config.xaxis
                                                .convertedCatToNumeric)
                                        ) {
                                            var i = new D(t);
                                            t = i.convertCatToNumericXaxis(
                                                t,
                                                this.ctx
                                            );
                                        }
                                        return t;
                                    },
                                },
                                {
                                    key: "forceYAxisUpdate",
                                    value: function (t) {
                                        return (
                                            t.chart &&
                                                t.chart.stacked &&
                                                "100%" === t.chart.stackType &&
                                                (Array.isArray(t.yaxis)
                                                    ? t.yaxis.forEach(function (
                                                          e,
                                                          i
                                                      ) {
                                                          (t.yaxis[i].min = 0),
                                                              (t.yaxis[
                                                                  i
                                                              ].max = 100);
                                                      })
                                                    : ((t.yaxis.min = 0),
                                                      (t.yaxis.max = 100))),
                                            t
                                        );
                                    },
                                },
                                {
                                    key: "revertDefaultAxisMinMax",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w,
                                            a = i.globals.lastXAxis,
                                            r = i.globals.lastYAxis;
                                        t && t.xaxis && (a = t.xaxis),
                                            t && t.yaxis && (r = t.yaxis),
                                            (i.config.xaxis.min = a.min),
                                            (i.config.xaxis.max = a.max);
                                        i.config.yaxis.map(function (t, a) {
                                            i.globals.zoomed || void 0 !== r[a]
                                                ? (function (t) {
                                                      void 0 !== r[t] &&
                                                          ((i.config.yaxis[
                                                              t
                                                          ].min = r[t].min),
                                                          (i.config.yaxis[
                                                              t
                                                          ].max = r[t].max));
                                                  })(a)
                                                : void 0 !==
                                                      e.ctx.opts.yaxis[a] &&
                                                  ((t.min =
                                                      e.ctx.opts.yaxis[a].min),
                                                  (t.max =
                                                      e.ctx.opts.yaxis[a].max));
                                        });
                                    },
                                },
                            ]),
                            t
                        );
                    })();
                (Dt = "undefined" != typeof window ? window : void 0),
                    (Nt = function (t, e) {
                        var i = ((void 0 !== this ? this : t).SVG = function (
                            t
                        ) {
                            if (i.supported)
                                return (
                                    (t = new i.Doc(t)),
                                    i.parser.draw || i.prepare(),
                                    t
                                );
                        });
                        if (
                            ((i.ns = "http://www.w3.org/2000/svg"),
                            (i.xmlns = "http://www.w3.org/2000/xmlns/"),
                            (i.xlink = "http://www.w3.org/1999/xlink"),
                            (i.svgjs = "http://svgjs.dev"),
                            (i.supported = !0),
                            !i.supported)
                        )
                            return !1;
                        (i.did = 1e3),
                            (i.eid = function (t) {
                                return "Svgjs" + d(t) + i.did++;
                            }),
                            (i.create = function (t) {
                                var i = e.createElementNS(this.ns, t);
                                return i.setAttribute("id", this.eid(t)), i;
                            }),
                            (i.extend = function () {
                                var t, e;
                                e = (t = [].slice.call(arguments)).pop();
                                for (var a = t.length - 1; a >= 0; a--)
                                    if (t[a])
                                        for (var r in e)
                                            t[a].prototype[r] = e[r];
                                i.Set && i.Set.inherit && i.Set.inherit();
                            }),
                            (i.invent = function (t) {
                                var e =
                                    "function" == typeof t.create
                                        ? t.create
                                        : function () {
                                              this.constructor.call(
                                                  this,
                                                  i.create(t.create)
                                              );
                                          };
                                return (
                                    t.inherit &&
                                        (e.prototype = new t.inherit()),
                                    t.extend && i.extend(e, t.extend),
                                    t.construct &&
                                        i.extend(
                                            t.parent || i.Container,
                                            t.construct
                                        ),
                                    e
                                );
                            }),
                            (i.adopt = function (e) {
                                return e
                                    ? e.instance
                                        ? e.instance
                                        : (((a =
                                              "svg" == e.nodeName
                                                  ? e.parentNode instanceof
                                                    t.SVGElement
                                                      ? new i.Nested()
                                                      : new i.Doc()
                                                  : "linearGradient" ==
                                                    e.nodeName
                                                  ? new i.Gradient("linear")
                                                  : "radialGradient" ==
                                                    e.nodeName
                                                  ? new i.Gradient("radial")
                                                  : i[d(e.nodeName)]
                                                  ? new i[d(e.nodeName)]()
                                                  : new i.Element(e)).type =
                                              e.nodeName),
                                          (a.node = e),
                                          (e.instance = a),
                                          a instanceof i.Doc &&
                                              a.namespace().defs(),
                                          a.setData(
                                              JSON.parse(
                                                  e.getAttribute("svgjs:data")
                                              ) || {}
                                          ),
                                          a)
                                    : null;
                                var a;
                            }),
                            (i.prepare = function () {
                                var t = e.getElementsByTagName("body")[0],
                                    a = (
                                        t
                                            ? new i.Doc(t)
                                            : i
                                                  .adopt(e.documentElement)
                                                  .nested()
                                    ).size(2, 0);
                                i.parser = {
                                    body: t || e.documentElement,
                                    draw: a.style(
                                        "opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden"
                                    ).node,
                                    poly: a.polyline().node,
                                    path: a.path().node,
                                    native: i.create("svg"),
                                };
                            }),
                            (i.parser = { native: i.create("svg") }),
                            e.addEventListener(
                                "DOMContentLoaded",
                                function () {
                                    i.parser.draw || i.prepare();
                                },
                                !1
                            ),
                            (i.regex = {
                                numberAndUnit:
                                    /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
                                hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
                                rgb: /rgb\((\d+),(\d+),(\d+)\)/,
                                reference: /#([a-z0-9\-_]+)/i,
                                transforms: /\)\s*,?\s*/,
                                whitespace: /\s/g,
                                isHex: /^#[a-f0-9]{3,6}$/i,
                                isRgb: /^rgb\(/,
                                isCss: /[^:]+:[^;]+;?/,
                                isBlank: /^(\s+)?$/,
                                isNumber:
                                    /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
                                isPercent: /^-?[\d\.]+%$/,
                                isImage:
                                    /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
                                delimiter: /[\s,]+/,
                                hyphen: /([^e])\-/gi,
                                pathLetters: /[MLHVCSQTAZ]/gi,
                                isPathLetter: /[MLHVCSQTAZ]/i,
                                numbersWithDots:
                                    /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
                                dots: /\./g,
                            }),
                            (i.utils = {
                                map: function (t, e) {
                                    for (
                                        var i = t.length, a = [], r = 0;
                                        r < i;
                                        r++
                                    )
                                        a.push(e(t[r]));
                                    return a;
                                },
                                filter: function (t, e) {
                                    for (
                                        var i = t.length, a = [], r = 0;
                                        r < i;
                                        r++
                                    )
                                        e(t[r]) && a.push(t[r]);
                                    return a;
                                },
                                filterSVGElements: function (e) {
                                    return this.filter(e, function (e) {
                                        return e instanceof t.SVGElement;
                                    });
                                },
                            }),
                            (i.defaults = {
                                attrs: {
                                    "fill-opacity": 1,
                                    "stroke-opacity": 1,
                                    "stroke-width": 0,
                                    "stroke-linejoin": "miter",
                                    "stroke-linecap": "butt",
                                    fill: "#000000",
                                    stroke: "#000000",
                                    opacity: 1,
                                    x: 0,
                                    y: 0,
                                    cx: 0,
                                    cy: 0,
                                    width: 0,
                                    height: 0,
                                    r: 0,
                                    rx: 0,
                                    ry: 0,
                                    offset: 0,
                                    "stop-opacity": 1,
                                    "stop-color": "#000000",
                                    "font-size": 16,
                                    "font-family":
                                        "Helvetica, Arial, sans-serif",
                                    "text-anchor": "start",
                                },
                            }),
                            (i.Color = function (t) {
                                var e, a;
                                (this.r = 0),
                                    (this.g = 0),
                                    (this.b = 0),
                                    t &&
                                        ("string" == typeof t
                                            ? i.regex.isRgb.test(t)
                                                ? ((e = i.regex.rgb.exec(
                                                      t.replace(
                                                          i.regex.whitespace,
                                                          ""
                                                      )
                                                  )),
                                                  (this.r = parseInt(e[1])),
                                                  (this.g = parseInt(e[2])),
                                                  (this.b = parseInt(e[3])))
                                                : i.regex.isHex.test(t) &&
                                                  ((e = i.regex.hex.exec(
                                                      4 == (a = t).length
                                                          ? [
                                                                "#",
                                                                a.substring(
                                                                    1,
                                                                    2
                                                                ),
                                                                a.substring(
                                                                    1,
                                                                    2
                                                                ),
                                                                a.substring(
                                                                    2,
                                                                    3
                                                                ),
                                                                a.substring(
                                                                    2,
                                                                    3
                                                                ),
                                                                a.substring(
                                                                    3,
                                                                    4
                                                                ),
                                                                a.substring(
                                                                    3,
                                                                    4
                                                                ),
                                                            ].join("")
                                                          : a
                                                  )),
                                                  (this.r = parseInt(e[1], 16)),
                                                  (this.g = parseInt(e[2], 16)),
                                                  (this.b = parseInt(e[3], 16)))
                                            : "object" === n(t) &&
                                              ((this.r = t.r),
                                              (this.g = t.g),
                                              (this.b = t.b)));
                            }),
                            i.extend(i.Color, {
                                toString: function () {
                                    return this.toHex();
                                },
                                toHex: function () {
                                    return (
                                        "#" + u(this.r) + u(this.g) + u(this.b)
                                    );
                                },
                                toRgb: function () {
                                    return (
                                        "rgb(" +
                                        [this.r, this.g, this.b].join() +
                                        ")"
                                    );
                                },
                                brightness: function () {
                                    return (
                                        (this.r / 255) * 0.3 +
                                        (this.g / 255) * 0.59 +
                                        (this.b / 255) * 0.11
                                    );
                                },
                                morph: function (t) {
                                    return (
                                        (this.destination = new i.Color(t)),
                                        this
                                    );
                                },
                                at: function (t) {
                                    return this.destination
                                        ? ((t = t < 0 ? 0 : t > 1 ? 1 : t),
                                          new i.Color({
                                              r: ~~(
                                                  this.r +
                                                  (this.destination.r -
                                                      this.r) *
                                                      t
                                              ),
                                              g: ~~(
                                                  this.g +
                                                  (this.destination.g -
                                                      this.g) *
                                                      t
                                              ),
                                              b: ~~(
                                                  this.b +
                                                  (this.destination.b -
                                                      this.b) *
                                                      t
                                              ),
                                          }))
                                        : this;
                                },
                            }),
                            (i.Color.test = function (t) {
                                return (
                                    (t += ""),
                                    i.regex.isHex.test(t) ||
                                        i.regex.isRgb.test(t)
                                );
                            }),
                            (i.Color.isRgb = function (t) {
                                return (
                                    t &&
                                    "number" == typeof t.r &&
                                    "number" == typeof t.g &&
                                    "number" == typeof t.b
                                );
                            }),
                            (i.Color.isColor = function (t) {
                                return i.Color.isRgb(t) || i.Color.test(t);
                            }),
                            (i.Array = function (t, e) {
                                0 == (t = (t || []).valueOf()).length &&
                                    e &&
                                    (t = e.valueOf()),
                                    (this.value = this.parse(t));
                            }),
                            i.extend(i.Array, {
                                toString: function () {
                                    return this.value.join(" ");
                                },
                                valueOf: function () {
                                    return this.value;
                                },
                                parse: function (t) {
                                    return (
                                        (t = t.valueOf()),
                                        Array.isArray(t) ? t : this.split(t)
                                    );
                                },
                            }),
                            (i.PointArray = function (t, e) {
                                i.Array.call(this, t, e || [[0, 0]]);
                            }),
                            (i.PointArray.prototype = new i.Array()),
                            (i.PointArray.prototype.constructor = i.PointArray);
                        for (
                            var a = {
                                    M: function (t, e, i) {
                                        return (
                                            (e.x = i.x = t[0]),
                                            (e.y = i.y = t[1]),
                                            ["M", e.x, e.y]
                                        );
                                    },
                                    L: function (t, e) {
                                        return (
                                            (e.x = t[0]),
                                            (e.y = t[1]),
                                            ["L", t[0], t[1]]
                                        );
                                    },
                                    H: function (t, e) {
                                        return (e.x = t[0]), ["H", t[0]];
                                    },
                                    V: function (t, e) {
                                        return (e.y = t[0]), ["V", t[0]];
                                    },
                                    C: function (t, e) {
                                        return (
                                            (e.x = t[4]),
                                            (e.y = t[5]),
                                            [
                                                "C",
                                                t[0],
                                                t[1],
                                                t[2],
                                                t[3],
                                                t[4],
                                                t[5],
                                            ]
                                        );
                                    },
                                    Q: function (t, e) {
                                        return (
                                            (e.x = t[2]),
                                            (e.y = t[3]),
                                            ["Q", t[0], t[1], t[2], t[3]]
                                        );
                                    },
                                    Z: function (t, e, i) {
                                        return (e.x = i.x), (e.y = i.y), ["Z"];
                                    },
                                },
                                r = "mlhvqtcsaz".split(""),
                                s = 0,
                                o = r.length;
                            s < o;
                            ++s
                        )
                            a[r[s]] = (function (t) {
                                return function (e, i, r) {
                                    if ("H" == t) e[0] = e[0] + i.x;
                                    else if ("V" == t) e[0] = e[0] + i.y;
                                    else if ("A" == t)
                                        (e[5] = e[5] + i.x),
                                            (e[6] = e[6] + i.y);
                                    else
                                        for (
                                            var s = 0, n = e.length;
                                            s < n;
                                            ++s
                                        )
                                            e[s] = e[s] + (s % 2 ? i.y : i.x);
                                    if (a && "function" == typeof a[t])
                                        return a[t](e, i, r);
                                };
                            })(r[s].toUpperCase());
                        (i.PathArray = function (t, e) {
                            i.Array.call(this, t, e || [["M", 0, 0]]);
                        }),
                            (i.PathArray.prototype = new i.Array()),
                            (i.PathArray.prototype.constructor = i.PathArray),
                            i.extend(i.PathArray, {
                                toString: function () {
                                    return (function (t) {
                                        for (
                                            var e = 0, i = t.length, a = "";
                                            e < i;
                                            e++
                                        )
                                            (a += t[e][0]),
                                                null != t[e][1] &&
                                                    ((a += t[e][1]),
                                                    null != t[e][2] &&
                                                        ((a += " "),
                                                        (a += t[e][2]),
                                                        null != t[e][3] &&
                                                            ((a += " "),
                                                            (a += t[e][3]),
                                                            (a += " "),
                                                            (a += t[e][4]),
                                                            null != t[e][5] &&
                                                                ((a += " "),
                                                                (a += t[e][5]),
                                                                (a += " "),
                                                                (a += t[e][6]),
                                                                null !=
                                                                    t[e][7] &&
                                                                    ((a += " "),
                                                                    (a +=
                                                                        t[
                                                                            e
                                                                        ][7]))))));
                                        return a + " ";
                                    })(this.value);
                                },
                                move: function (t, e) {
                                    var i = this.bbox();
                                    return i.x, i.y, this;
                                },
                                at: function (t) {
                                    if (!this.destination) return this;
                                    for (
                                        var e = this.value,
                                            a = this.destination.value,
                                            r = [],
                                            s = new i.PathArray(),
                                            n = 0,
                                            o = e.length;
                                        n < o;
                                        n++
                                    ) {
                                        r[n] = [e[n][0]];
                                        for (
                                            var l = 1, c = e[n].length;
                                            l < c;
                                            l++
                                        )
                                            r[n][l] =
                                                e[n][l] +
                                                (a[n][l] - e[n][l]) * t;
                                        "A" === r[n][0] &&
                                            ((r[n][4] = +(0 != r[n][4])),
                                            (r[n][5] = +(0 != r[n][5])));
                                    }
                                    return (s.value = r), s;
                                },
                                parse: function (t) {
                                    if (t instanceof i.PathArray)
                                        return t.valueOf();
                                    var e,
                                        r = {
                                            M: 2,
                                            L: 2,
                                            H: 1,
                                            V: 1,
                                            C: 6,
                                            S: 4,
                                            Q: 4,
                                            T: 2,
                                            A: 7,
                                            Z: 0,
                                        };
                                    t =
                                        "string" == typeof t
                                            ? t
                                                  .replace(
                                                      i.regex.numbersWithDots,
                                                      c
                                                  )
                                                  .replace(
                                                      i.regex.pathLetters,
                                                      " $& "
                                                  )
                                                  .replace(
                                                      i.regex.hyphen,
                                                      "$1 -"
                                                  )
                                                  .trim()
                                                  .split(i.regex.delimiter)
                                            : t.reduce(function (t, e) {
                                                  return [].concat.call(t, e);
                                              }, []);
                                    var s = [],
                                        n = new i.Point(),
                                        o = new i.Point(),
                                        l = 0,
                                        h = t.length;
                                    do {
                                        i.regex.isPathLetter.test(t[l])
                                            ? ((e = t[l]), ++l)
                                            : "M" == e
                                            ? (e = "L")
                                            : "m" == e && (e = "l"),
                                            s.push(
                                                a[e].call(
                                                    null,
                                                    t
                                                        .slice(
                                                            l,
                                                            (l +=
                                                                r[
                                                                    e.toUpperCase()
                                                                ])
                                                        )
                                                        .map(parseFloat),
                                                    n,
                                                    o
                                                )
                                            );
                                    } while (h > l);
                                    return s;
                                },
                                bbox: function () {
                                    return (
                                        i.parser.draw || i.prepare(),
                                        i.parser.path.setAttribute(
                                            "d",
                                            this.toString()
                                        ),
                                        i.parser.path.getBBox()
                                    );
                                },
                            }),
                            (i.Number = i.invent({
                                create: function (t, e) {
                                    (this.value = 0),
                                        (this.unit = e || ""),
                                        "number" == typeof t
                                            ? (this.value = isNaN(t)
                                                  ? 0
                                                  : isFinite(t)
                                                  ? t
                                                  : t < 0
                                                  ? -34e37
                                                  : 34e37)
                                            : "string" == typeof t
                                            ? (e = t.match(
                                                  i.regex.numberAndUnit
                                              )) &&
                                              ((this.value = parseFloat(e[1])),
                                              "%" == e[5]
                                                  ? (this.value /= 100)
                                                  : "s" == e[5] &&
                                                    (this.value *= 1e3),
                                              (this.unit = e[5]))
                                            : t instanceof i.Number &&
                                              ((this.value = t.valueOf()),
                                              (this.unit = t.unit));
                                },
                                extend: {
                                    toString: function () {
                                        return (
                                            ("%" == this.unit
                                                ? ~~(1e8 * this.value) / 1e6
                                                : "s" == this.unit
                                                ? this.value / 1e3
                                                : this.value) + this.unit
                                        );
                                    },
                                    toJSON: function () {
                                        return this.toString();
                                    },
                                    valueOf: function () {
                                        return this.value;
                                    },
                                    plus: function (t) {
                                        return (
                                            (t = new i.Number(t)),
                                            new i.Number(
                                                this + t,
                                                this.unit || t.unit
                                            )
                                        );
                                    },
                                    minus: function (t) {
                                        return (
                                            (t = new i.Number(t)),
                                            new i.Number(
                                                this - t,
                                                this.unit || t.unit
                                            )
                                        );
                                    },
                                    times: function (t) {
                                        return (
                                            (t = new i.Number(t)),
                                            new i.Number(
                                                this * t,
                                                this.unit || t.unit
                                            )
                                        );
                                    },
                                    divide: function (t) {
                                        return (
                                            (t = new i.Number(t)),
                                            new i.Number(
                                                this / t,
                                                this.unit || t.unit
                                            )
                                        );
                                    },
                                    to: function (t) {
                                        var e = new i.Number(this);
                                        return (
                                            "string" == typeof t &&
                                                (e.unit = t),
                                            e
                                        );
                                    },
                                    morph: function (t) {
                                        return (
                                            (this.destination = new i.Number(
                                                t
                                            )),
                                            t.relative &&
                                                (this.destination.value +=
                                                    this.value),
                                            this
                                        );
                                    },
                                    at: function (t) {
                                        return this.destination
                                            ? new i.Number(this.destination)
                                                  .minus(this)
                                                  .times(t)
                                                  .plus(this)
                                            : this;
                                    },
                                },
                            })),
                            (i.Element = i.invent({
                                create: function (t) {
                                    (this._stroke = i.defaults.attrs.stroke),
                                        (this._event = null),
                                        (this.dom = {}),
                                        (this.node = t) &&
                                            ((this.type = t.nodeName),
                                            (this.node.instance = this),
                                            (this._stroke =
                                                t.getAttribute("stroke") ||
                                                this._stroke));
                                },
                                extend: {
                                    x: function (t) {
                                        return this.attr("x", t);
                                    },
                                    y: function (t) {
                                        return this.attr("y", t);
                                    },
                                    cx: function (t) {
                                        return null == t
                                            ? this.x() + this.width() / 2
                                            : this.x(t - this.width() / 2);
                                    },
                                    cy: function (t) {
                                        return null == t
                                            ? this.y() + this.height() / 2
                                            : this.y(t - this.height() / 2);
                                    },
                                    move: function (t, e) {
                                        return this.x(t).y(e);
                                    },
                                    center: function (t, e) {
                                        return this.cx(t).cy(e);
                                    },
                                    width: function (t) {
                                        return this.attr("width", t);
                                    },
                                    height: function (t) {
                                        return this.attr("height", t);
                                    },
                                    size: function (t, e) {
                                        var a = f(this, t, e);
                                        return this.width(
                                            new i.Number(a.width)
                                        ).height(new i.Number(a.height));
                                    },
                                    clone: function (t) {
                                        this.writeDataToDom();
                                        var e = x(this.node.cloneNode(!0));
                                        return t ? t.add(e) : this.after(e), e;
                                    },
                                    remove: function () {
                                        return (
                                            this.parent() &&
                                                this.parent().removeElement(
                                                    this
                                                ),
                                            this
                                        );
                                    },
                                    replace: function (t) {
                                        return this.after(t).remove(), t;
                                    },
                                    addTo: function (t) {
                                        return t.put(this);
                                    },
                                    putIn: function (t) {
                                        return t.add(this);
                                    },
                                    id: function (t) {
                                        return this.attr("id", t);
                                    },
                                    show: function () {
                                        return this.style("display", "");
                                    },
                                    hide: function () {
                                        return this.style("display", "none");
                                    },
                                    visible: function () {
                                        return "none" != this.style("display");
                                    },
                                    toString: function () {
                                        return this.attr("id");
                                    },
                                    classes: function () {
                                        var t = this.attr("class");
                                        return null == t
                                            ? []
                                            : t.trim().split(i.regex.delimiter);
                                    },
                                    hasClass: function (t) {
                                        return -1 != this.classes().indexOf(t);
                                    },
                                    addClass: function (t) {
                                        if (!this.hasClass(t)) {
                                            var e = this.classes();
                                            e.push(t),
                                                this.attr("class", e.join(" "));
                                        }
                                        return this;
                                    },
                                    removeClass: function (t) {
                                        return (
                                            this.hasClass(t) &&
                                                this.attr(
                                                    "class",
                                                    this.classes()
                                                        .filter(function (e) {
                                                            return e != t;
                                                        })
                                                        .join(" ")
                                                ),
                                            this
                                        );
                                    },
                                    toggleClass: function (t) {
                                        return this.hasClass(t)
                                            ? this.removeClass(t)
                                            : this.addClass(t);
                                    },
                                    reference: function (t) {
                                        return i.get(this.attr(t));
                                    },
                                    parent: function (e) {
                                        var a = this;
                                        if (!a.node.parentNode) return null;
                                        if (
                                            ((a = i.adopt(a.node.parentNode)),
                                            !e)
                                        )
                                            return a;
                                        for (
                                            ;
                                            a && a.node instanceof t.SVGElement;

                                        ) {
                                            if (
                                                "string" == typeof e
                                                    ? a.matches(e)
                                                    : a instanceof e
                                            )
                                                return a;
                                            if (
                                                !a.node.parentNode ||
                                                "#document" ==
                                                    a.node.parentNode.nodeName
                                            )
                                                return null;
                                            a = i.adopt(a.node.parentNode);
                                        }
                                    },
                                    doc: function () {
                                        return this instanceof i.Doc
                                            ? this
                                            : this.parent(i.Doc);
                                    },
                                    parents: function (t) {
                                        var e = [],
                                            i = this;
                                        do {
                                            if (!(i = i.parent(t)) || !i.node)
                                                break;
                                            e.push(i);
                                        } while (i.parent);
                                        return e;
                                    },
                                    matches: function (t) {
                                        return (function (t, e) {
                                            return (
                                                t.matches ||
                                                t.matchesSelector ||
                                                t.msMatchesSelector ||
                                                t.mozMatchesSelector ||
                                                t.webkitMatchesSelector ||
                                                t.oMatchesSelector
                                            ).call(t, e);
                                        })(this.node, t);
                                    },
                                    native: function () {
                                        return this.node;
                                    },
                                    svg: function (t) {
                                        var a = e.createElement("svg");
                                        if (!(t && this instanceof i.Parent))
                                            return (
                                                a.appendChild(
                                                    (t = e.createElement("svg"))
                                                ),
                                                this.writeDataToDom(),
                                                t.appendChild(
                                                    this.node.cloneNode(!0)
                                                ),
                                                a.innerHTML
                                                    .replace(/^<svg>/, "")
                                                    .replace(/<\/svg>$/, "")
                                            );
                                        a.innerHTML =
                                            "<svg>" +
                                            t
                                                .replace(/\n/, "")
                                                .replace(
                                                    /<([\w:-]+)([^<]+?)\/>/g,
                                                    "<$1$2></$1>"
                                                ) +
                                            "</svg>";
                                        for (
                                            var r = 0,
                                                s =
                                                    a.firstChild.childNodes
                                                        .length;
                                            r < s;
                                            r++
                                        )
                                            this.node.appendChild(
                                                a.firstChild.firstChild
                                            );
                                        return this;
                                    },
                                    writeDataToDom: function () {
                                        return (
                                            (this.each || this.lines) &&
                                                (this.each
                                                    ? this
                                                    : this.lines()
                                                ).each(function () {
                                                    this.writeDataToDom();
                                                }),
                                            this.node.removeAttribute(
                                                "svgjs:data"
                                            ),
                                            Object.keys(this.dom).length &&
                                                this.node.setAttribute(
                                                    "svgjs:data",
                                                    JSON.stringify(this.dom)
                                                ),
                                            this
                                        );
                                    },
                                    setData: function (t) {
                                        return (this.dom = t), this;
                                    },
                                    is: function (t) {
                                        return (function (t, e) {
                                            return t instanceof e;
                                        })(this, t);
                                    },
                                },
                            })),
                            (i.easing = {
                                "-": function (t) {
                                    return t;
                                },
                                "<>": function (t) {
                                    return -Math.cos(t * Math.PI) / 2 + 0.5;
                                },
                                ">": function (t) {
                                    return Math.sin((t * Math.PI) / 2);
                                },
                                "<": function (t) {
                                    return 1 - Math.cos((t * Math.PI) / 2);
                                },
                            }),
                            (i.morph = function (t) {
                                return function (e, a) {
                                    return new i.MorphObj(e, a).at(t);
                                };
                            }),
                            (i.Situation = i.invent({
                                create: function (t) {
                                    (this.init = !1),
                                        (this.reversed = !1),
                                        (this.reversing = !1),
                                        (this.duration = new i.Number(
                                            t.duration
                                        ).valueOf()),
                                        (this.delay = new i.Number(
                                            t.delay
                                        ).valueOf()),
                                        (this.start = +new Date() + this.delay),
                                        (this.finish =
                                            this.start + this.duration),
                                        (this.ease = t.ease),
                                        (this.loop = 0),
                                        (this.loops = !1),
                                        (this.animations = {}),
                                        (this.attrs = {}),
                                        (this.styles = {}),
                                        (this.transforms = []),
                                        (this.once = {});
                                },
                            })),
                            (i.FX = i.invent({
                                create: function (t) {
                                    (this._target = t),
                                        (this.situations = []),
                                        (this.active = !1),
                                        (this.situation = null),
                                        (this.paused = !1),
                                        (this.lastPos = 0),
                                        (this.pos = 0),
                                        (this.absPos = 0),
                                        (this._speed = 1);
                                },
                                extend: {
                                    animate: function (t, e, a) {
                                        "object" === n(t) &&
                                            ((e = t.ease),
                                            (a = t.delay),
                                            (t = t.duration));
                                        var r = new i.Situation({
                                            duration: t || 1e3,
                                            delay: a || 0,
                                            ease: i.easing[e || "-"] || e,
                                        });
                                        return this.queue(r), this;
                                    },
                                    target: function (t) {
                                        return t && t instanceof i.Element
                                            ? ((this._target = t), this)
                                            : this._target;
                                    },
                                    timeToAbsPos: function (t) {
                                        return (
                                            (t - this.situation.start) /
                                            (this.situation.duration /
                                                this._speed)
                                        );
                                    },
                                    absPosToTime: function (t) {
                                        return (
                                            (this.situation.duration /
                                                this._speed) *
                                                t +
                                            this.situation.start
                                        );
                                    },
                                    startAnimFrame: function () {
                                        this.stopAnimFrame(),
                                            (this.animationFrame =
                                                t.requestAnimationFrame(
                                                    function () {
                                                        this.step();
                                                    }.bind(this)
                                                ));
                                    },
                                    stopAnimFrame: function () {
                                        t.cancelAnimationFrame(
                                            this.animationFrame
                                        );
                                    },
                                    start: function () {
                                        return (
                                            !this.active &&
                                                this.situation &&
                                                ((this.active = !0),
                                                this.startCurrent()),
                                            this
                                        );
                                    },
                                    startCurrent: function () {
                                        return (
                                            (this.situation.start =
                                                +new Date() +
                                                this.situation.delay /
                                                    this._speed),
                                            (this.situation.finish =
                                                this.situation.start +
                                                this.situation.duration /
                                                    this._speed),
                                            this.initAnimations().step()
                                        );
                                    },
                                    queue: function (t) {
                                        return (
                                            ("function" == typeof t ||
                                                t instanceof i.Situation) &&
                                                this.situations.push(t),
                                            this.situation ||
                                                (this.situation =
                                                    this.situations.shift()),
                                            this
                                        );
                                    },
                                    dequeue: function () {
                                        return (
                                            this.stop(),
                                            (this.situation =
                                                this.situations.shift()),
                                            this.situation &&
                                                (this.situation instanceof
                                                i.Situation
                                                    ? this.start()
                                                    : this.situation.call(
                                                          this
                                                      )),
                                            this
                                        );
                                    },
                                    initAnimations: function () {
                                        var t,
                                            e = this.situation;
                                        if (e.init) return this;
                                        for (var a in e.animations) {
                                            (t = this.target()[a]()),
                                                Array.isArray(t) || (t = [t]),
                                                Array.isArray(
                                                    e.animations[a]
                                                ) ||
                                                    (e.animations[a] = [
                                                        e.animations[a],
                                                    ]);
                                            for (var r = t.length; r--; )
                                                e.animations[a][r] instanceof
                                                    i.Number &&
                                                    (t[r] = new i.Number(t[r])),
                                                    (e.animations[a][r] = t[
                                                        r
                                                    ].morph(
                                                        e.animations[a][r]
                                                    ));
                                        }
                                        for (var a in e.attrs)
                                            e.attrs[a] = new i.MorphObj(
                                                this.target().attr(a),
                                                e.attrs[a]
                                            );
                                        for (var a in e.styles)
                                            e.styles[a] = new i.MorphObj(
                                                this.target().style(a),
                                                e.styles[a]
                                            );
                                        return (
                                            (e.initialTransformation =
                                                this.target().matrixify()),
                                            (e.init = !0),
                                            this
                                        );
                                    },
                                    clearQueue: function () {
                                        return (this.situations = []), this;
                                    },
                                    clearCurrent: function () {
                                        return (this.situation = null), this;
                                    },
                                    stop: function (t, e) {
                                        var i = this.active;
                                        return (
                                            (this.active = !1),
                                            e && this.clearQueue(),
                                            t &&
                                                this.situation &&
                                                (!i && this.startCurrent(),
                                                this.atEnd()),
                                            this.stopAnimFrame(),
                                            this.clearCurrent()
                                        );
                                    },
                                    after: function (t) {
                                        var e = this.last();
                                        return (
                                            this.target().on(
                                                "finished.fx",
                                                function i(a) {
                                                    a.detail.situation == e &&
                                                        (t.call(this, e),
                                                        this.off(
                                                            "finished.fx",
                                                            i
                                                        ));
                                                }
                                            ),
                                            this._callStart()
                                        );
                                    },
                                    during: function (t) {
                                        var e = this.last(),
                                            a = function (a) {
                                                a.detail.situation == e &&
                                                    t.call(
                                                        this,
                                                        a.detail.pos,
                                                        i.morph(a.detail.pos),
                                                        a.detail.eased,
                                                        e
                                                    );
                                            };
                                        return (
                                            this.target()
                                                .off("during.fx", a)
                                                .on("during.fx", a),
                                            this.after(function () {
                                                this.off("during.fx", a);
                                            }),
                                            this._callStart()
                                        );
                                    },
                                    afterAll: function (t) {
                                        var e = function e(i) {
                                            t.call(this),
                                                this.off("allfinished.fx", e);
                                        };
                                        return (
                                            this.target()
                                                .off("allfinished.fx", e)
                                                .on("allfinished.fx", e),
                                            this._callStart()
                                        );
                                    },
                                    last: function () {
                                        return this.situations.length
                                            ? this.situations[
                                                  this.situations.length - 1
                                              ]
                                            : this.situation;
                                    },
                                    add: function (t, e, i) {
                                        return (
                                            (this.last()[i || "animations"][t] =
                                                e),
                                            this._callStart()
                                        );
                                    },
                                    step: function (t) {
                                        var e, i, a;
                                        t ||
                                            (this.absPos = this.timeToAbsPos(
                                                +new Date()
                                            )),
                                            !1 !== this.situation.loops
                                                ? ((e = Math.max(
                                                      this.absPos,
                                                      0
                                                  )),
                                                  (i = Math.floor(e)),
                                                  !0 === this.situation.loops ||
                                                  i < this.situation.loops
                                                      ? ((this.pos = e - i),
                                                        (a =
                                                            this.situation
                                                                .loop),
                                                        (this.situation.loop =
                                                            i))
                                                      : ((this.absPos =
                                                            this.situation.loops),
                                                        (this.pos = 1),
                                                        (a =
                                                            this.situation
                                                                .loop - 1),
                                                        (this.situation.loop =
                                                            this.situation.loops)),
                                                  this.situation.reversing &&
                                                      (this.situation.reversed =
                                                          this.situation
                                                              .reversed !=
                                                          Boolean(
                                                              (this.situation
                                                                  .loop -
                                                                  a) %
                                                                  2
                                                          )))
                                                : ((this.absPos = Math.min(
                                                      this.absPos,
                                                      1
                                                  )),
                                                  (this.pos = this.absPos)),
                                            this.pos < 0 && (this.pos = 0),
                                            this.situation.reversed &&
                                                (this.pos = 1 - this.pos);
                                        var r = this.situation.ease(this.pos);
                                        for (var s in this.situation.once)
                                            s > this.lastPos &&
                                                s <= r &&
                                                (this.situation.once[s].call(
                                                    this.target(),
                                                    this.pos,
                                                    r
                                                ),
                                                delete this.situation.once[s]);
                                        return (
                                            this.active &&
                                                this.target().fire("during", {
                                                    pos: this.pos,
                                                    eased: r,
                                                    fx: this,
                                                    situation: this.situation,
                                                }),
                                            this.situation
                                                ? (this.eachAt(),
                                                  (1 == this.pos &&
                                                      !this.situation
                                                          .reversed) ||
                                                  (this.situation.reversed &&
                                                      0 == this.pos)
                                                      ? (this.stopAnimFrame(),
                                                        this.target().fire(
                                                            "finished",
                                                            {
                                                                fx: this,
                                                                situation:
                                                                    this
                                                                        .situation,
                                                            }
                                                        ),
                                                        this.situations
                                                            .length ||
                                                            (this.target().fire(
                                                                "allfinished"
                                                            ),
                                                            this.situations
                                                                .length ||
                                                                (this.target().off(
                                                                    ".fx"
                                                                ),
                                                                (this.active =
                                                                    !1))),
                                                        this.active
                                                            ? this.dequeue()
                                                            : this.clearCurrent())
                                                      : !this.paused &&
                                                        this.active &&
                                                        this.startAnimFrame(),
                                                  (this.lastPos = r),
                                                  this)
                                                : this
                                        );
                                    },
                                    eachAt: function () {
                                        var t,
                                            e = this,
                                            a = this.target(),
                                            r = this.situation;
                                        for (var s in r.animations)
                                            (t = []
                                                .concat(r.animations[s])
                                                .map(function (t) {
                                                    return "string" !=
                                                        typeof t && t.at
                                                        ? t.at(
                                                              r.ease(e.pos),
                                                              e.pos
                                                          )
                                                        : t;
                                                })),
                                                a[s].apply(a, t);
                                        for (var s in r.attrs)
                                            (t = [s]
                                                .concat(r.attrs[s])
                                                .map(function (t) {
                                                    return "string" !=
                                                        typeof t && t.at
                                                        ? t.at(
                                                              r.ease(e.pos),
                                                              e.pos
                                                          )
                                                        : t;
                                                })),
                                                a.attr.apply(a, t);
                                        for (var s in r.styles)
                                            (t = [s]
                                                .concat(r.styles[s])
                                                .map(function (t) {
                                                    return "string" !=
                                                        typeof t && t.at
                                                        ? t.at(
                                                              r.ease(e.pos),
                                                              e.pos
                                                          )
                                                        : t;
                                                })),
                                                a.style.apply(a, t);
                                        if (r.transforms.length) {
                                            (t = r.initialTransformation),
                                                (s = 0);
                                            for (
                                                var n = r.transforms.length;
                                                s < n;
                                                s++
                                            ) {
                                                var o = r.transforms[s];
                                                o instanceof i.Matrix
                                                    ? (t = o.relative
                                                          ? t.multiply(
                                                                new i.Matrix()
                                                                    .morph(o)
                                                                    .at(
                                                                        r.ease(
                                                                            this
                                                                                .pos
                                                                        )
                                                                    )
                                                            )
                                                          : t
                                                                .morph(o)
                                                                .at(
                                                                    r.ease(
                                                                        this.pos
                                                                    )
                                                                ))
                                                    : (o.relative ||
                                                          o.undo(t.extract()),
                                                      (t = t.multiply(
                                                          o.at(r.ease(this.pos))
                                                      )));
                                            }
                                            a.matrix(t);
                                        }
                                        return this;
                                    },
                                    once: function (t, e, i) {
                                        var a = this.last();
                                        return (
                                            i || (t = a.ease(t)),
                                            (a.once[t] = e),
                                            this
                                        );
                                    },
                                    _callStart: function () {
                                        return (
                                            setTimeout(
                                                function () {
                                                    this.start();
                                                }.bind(this),
                                                0
                                            ),
                                            this
                                        );
                                    },
                                },
                                parent: i.Element,
                                construct: {
                                    animate: function (t, e, a) {
                                        return (
                                            this.fx ||
                                            (this.fx = new i.FX(this))
                                        ).animate(t, e, a);
                                    },
                                    delay: function (t) {
                                        return (
                                            this.fx ||
                                            (this.fx = new i.FX(this))
                                        ).delay(t);
                                    },
                                    stop: function (t, e) {
                                        return (
                                            this.fx && this.fx.stop(t, e), this
                                        );
                                    },
                                    finish: function () {
                                        return (
                                            this.fx && this.fx.finish(), this
                                        );
                                    },
                                },
                            })),
                            (i.MorphObj = i.invent({
                                create: function (t, e) {
                                    return i.Color.isColor(e)
                                        ? new i.Color(t).morph(e)
                                        : i.regex.delimiter.test(t)
                                        ? i.regex.pathLetters.test(t)
                                            ? new i.PathArray(t).morph(e)
                                            : new i.Array(t).morph(e)
                                        : i.regex.numberAndUnit.test(e)
                                        ? new i.Number(t).morph(e)
                                        : ((this.value = t),
                                          void (this.destination = e));
                                },
                                extend: {
                                    at: function (t, e) {
                                        return e < 1
                                            ? this.value
                                            : this.destination;
                                    },
                                    valueOf: function () {
                                        return this.value;
                                    },
                                },
                            })),
                            i.extend(i.FX, {
                                attr: function (t, e, i) {
                                    if ("object" === n(t))
                                        for (var a in t) this.attr(a, t[a]);
                                    else this.add(t, e, "attrs");
                                    return this;
                                },
                                plot: function (t, e, i, a) {
                                    return 4 == arguments.length
                                        ? this.plot([t, e, i, a])
                                        : this.add(
                                              "plot",
                                              new (this.target().morphArray)(t)
                                          );
                                },
                            }),
                            (i.Box = i.invent({
                                create: function (t, e, a, r) {
                                    if (
                                        !(
                                            "object" !== n(t) ||
                                            t instanceof i.Element
                                        )
                                    )
                                        return i.Box.call(
                                            this,
                                            null != t.left ? t.left : t.x,
                                            null != t.top ? t.top : t.y,
                                            t.width,
                                            t.height
                                        );
                                    var s;
                                    4 == arguments.length &&
                                        ((this.x = t),
                                        (this.y = e),
                                        (this.width = a),
                                        (this.height = r)),
                                        null == (s = this).x &&
                                            ((s.x = 0),
                                            (s.y = 0),
                                            (s.width = 0),
                                            (s.height = 0)),
                                        (s.w = s.width),
                                        (s.h = s.height),
                                        (s.x2 = s.x + s.width),
                                        (s.y2 = s.y + s.height),
                                        (s.cx = s.x + s.width / 2),
                                        (s.cy = s.y + s.height / 2);
                                },
                            })),
                            (i.BBox = i.invent({
                                create: function (t) {
                                    if (
                                        (i.Box.apply(
                                            this,
                                            [].slice.call(arguments)
                                        ),
                                        t instanceof i.Element)
                                    ) {
                                        var a;
                                        try {
                                            if (!e.documentElement.contains) {
                                                for (
                                                    var r = t.node;
                                                    r.parentNode;

                                                )
                                                    r = r.parentNode;
                                                if (r != e)
                                                    throw new Error(
                                                        "Element not in the dom"
                                                    );
                                            }
                                            a = t.node.getBBox();
                                        } catch (e) {
                                            if (t instanceof i.Shape) {
                                                i.parser.draw || i.prepare();
                                                var s = t
                                                    .clone(
                                                        i.parser.draw.instance
                                                    )
                                                    .show();
                                                s &&
                                                    s.node &&
                                                    "function" ==
                                                        typeof s.node.getBBox &&
                                                    (a = s.node.getBBox()),
                                                    s &&
                                                        "function" ==
                                                            typeof s.remove &&
                                                        s.remove();
                                            } else
                                                a = {
                                                    x: t.node.clientLeft,
                                                    y: t.node.clientTop,
                                                    width: t.node.clientWidth,
                                                    height: t.node.clientHeight,
                                                };
                                        }
                                        i.Box.call(this, a);
                                    }
                                },
                                inherit: i.Box,
                                parent: i.Element,
                                construct: {
                                    bbox: function () {
                                        return new i.BBox(this);
                                    },
                                },
                            })),
                            (i.BBox.prototype.constructor = i.BBox),
                            (i.Matrix = i.invent({
                                create: function (t) {
                                    var e = p([1, 0, 0, 1, 0, 0]);
                                    t =
                                        null === t
                                            ? e
                                            : t instanceof i.Element
                                            ? t.matrixify()
                                            : "string" == typeof t
                                            ? p(
                                                  t
                                                      .split(i.regex.delimiter)
                                                      .map(parseFloat)
                                              )
                                            : 6 == arguments.length
                                            ? p([].slice.call(arguments))
                                            : Array.isArray(t)
                                            ? p(t)
                                            : t && "object" === n(t)
                                            ? t
                                            : e;
                                    for (var a = b.length - 1; a >= 0; --a)
                                        this[b[a]] =
                                            null != t[b[a]] ? t[b[a]] : e[b[a]];
                                },
                                extend: {
                                    extract: function () {
                                        var t = g(this, 0, 1);
                                        g(this, 1, 0);
                                        var e =
                                            (180 / Math.PI) *
                                                Math.atan2(t.y, t.x) -
                                            90;
                                        return {
                                            x: this.e,
                                            y: this.f,
                                            transformedX:
                                                (this.e *
                                                    Math.cos(
                                                        (e * Math.PI) / 180
                                                    ) +
                                                    this.f *
                                                        Math.sin(
                                                            (e * Math.PI) / 180
                                                        )) /
                                                Math.sqrt(
                                                    this.a * this.a +
                                                        this.b * this.b
                                                ),
                                            transformedY:
                                                (this.f *
                                                    Math.cos(
                                                        (e * Math.PI) / 180
                                                    ) +
                                                    this.e *
                                                        Math.sin(
                                                            (-e * Math.PI) / 180
                                                        )) /
                                                Math.sqrt(
                                                    this.c * this.c +
                                                        this.d * this.d
                                                ),
                                            rotation: e,
                                            a: this.a,
                                            b: this.b,
                                            c: this.c,
                                            d: this.d,
                                            e: this.e,
                                            f: this.f,
                                            matrix: new i.Matrix(this),
                                        };
                                    },
                                    clone: function () {
                                        return new i.Matrix(this);
                                    },
                                    morph: function (t) {
                                        return (
                                            (this.destination = new i.Matrix(
                                                t
                                            )),
                                            this
                                        );
                                    },
                                    multiply: function (t) {
                                        return new i.Matrix(
                                            this.native().multiply(
                                                (function (t) {
                                                    return (
                                                        t instanceof i.Matrix ||
                                                            (t = new i.Matrix(
                                                                t
                                                            )),
                                                        t
                                                    );
                                                })(t).native()
                                            )
                                        );
                                    },
                                    inverse: function () {
                                        return new i.Matrix(
                                            this.native().inverse()
                                        );
                                    },
                                    translate: function (t, e) {
                                        return new i.Matrix(
                                            this.native().translate(
                                                t || 0,
                                                e || 0
                                            )
                                        );
                                    },
                                    native: function () {
                                        for (
                                            var t =
                                                    i.parser.native.createSVGMatrix(),
                                                e = b.length - 1;
                                            e >= 0;
                                            e--
                                        )
                                            t[b[e]] = this[b[e]];
                                        return t;
                                    },
                                    toString: function () {
                                        return (
                                            "matrix(" +
                                            m(this.a) +
                                            "," +
                                            m(this.b) +
                                            "," +
                                            m(this.c) +
                                            "," +
                                            m(this.d) +
                                            "," +
                                            m(this.e) +
                                            "," +
                                            m(this.f) +
                                            ")"
                                        );
                                    },
                                },
                                parent: i.Element,
                                construct: {
                                    ctm: function () {
                                        return new i.Matrix(this.node.getCTM());
                                    },
                                    screenCTM: function () {
                                        if (this instanceof i.Nested) {
                                            var t = this.rect(1, 1),
                                                e = t.node.getScreenCTM();
                                            return t.remove(), new i.Matrix(e);
                                        }
                                        return new i.Matrix(
                                            this.node.getScreenCTM()
                                        );
                                    },
                                },
                            })),
                            (i.Point = i.invent({
                                create: function (t, e) {
                                    var i;
                                    (i = Array.isArray(t)
                                        ? { x: t[0], y: t[1] }
                                        : "object" === n(t)
                                        ? { x: t.x, y: t.y }
                                        : null != t
                                        ? { x: t, y: null != e ? e : t }
                                        : { x: 0, y: 0 }),
                                        (this.x = i.x),
                                        (this.y = i.y);
                                },
                                extend: {
                                    clone: function () {
                                        return new i.Point(this);
                                    },
                                    morph: function (t, e) {
                                        return (
                                            (this.destination = new i.Point(
                                                t,
                                                e
                                            )),
                                            this
                                        );
                                    },
                                },
                            })),
                            i.extend(i.Element, {
                                point: function (t, e) {
                                    return new i.Point(t, e).transform(
                                        this.screenCTM().inverse()
                                    );
                                },
                            }),
                            i.extend(i.Element, {
                                attr: function (t, e, a) {
                                    if (null == t) {
                                        for (
                                            t = {},
                                                a =
                                                    (e = this.node.attributes)
                                                        .length - 1;
                                            a >= 0;
                                            a--
                                        )
                                            t[e[a].nodeName] =
                                                i.regex.isNumber.test(
                                                    e[a].nodeValue
                                                )
                                                    ? parseFloat(e[a].nodeValue)
                                                    : e[a].nodeValue;
                                        return t;
                                    }
                                    if ("object" === n(t))
                                        for (var r in t) this.attr(r, t[r]);
                                    else if (null === e)
                                        this.node.removeAttribute(t);
                                    else {
                                        if (null == e)
                                            return null ==
                                                (e = this.node.getAttribute(t))
                                                ? i.defaults.attrs[t]
                                                : i.regex.isNumber.test(e)
                                                ? parseFloat(e)
                                                : e;
                                        "stroke-width" == t
                                            ? this.attr(
                                                  "stroke",
                                                  parseFloat(e) > 0
                                                      ? this._stroke
                                                      : null
                                              )
                                            : "stroke" == t &&
                                              (this._stroke = e),
                                            ("fill" != t && "stroke" != t) ||
                                                (i.regex.isImage.test(e) &&
                                                    (e = this.doc()
                                                        .defs()
                                                        .image(e, 0, 0)),
                                                e instanceof i.Image &&
                                                    (e = this.doc()
                                                        .defs()
                                                        .pattern(
                                                            0,
                                                            0,
                                                            function () {
                                                                this.add(e);
                                                            }
                                                        ))),
                                            "number" == typeof e
                                                ? (e = new i.Number(e))
                                                : i.Color.isColor(e)
                                                ? (e = new i.Color(e))
                                                : Array.isArray(e) &&
                                                  (e = new i.Array(e)),
                                            "leading" == t
                                                ? this.leading &&
                                                  this.leading(e)
                                                : "string" == typeof a
                                                ? this.node.setAttributeNS(
                                                      a,
                                                      t,
                                                      e.toString()
                                                  )
                                                : this.node.setAttribute(
                                                      t,
                                                      e.toString()
                                                  ),
                                            !this.rebuild ||
                                                ("font-size" != t &&
                                                    "x" != t) ||
                                                this.rebuild(t, e);
                                    }
                                    return this;
                                },
                            }),
                            i.extend(i.Element, {
                                transform: function (t, e) {
                                    var a;
                                    return "object" !== n(t)
                                        ? ((a = new i.Matrix(this).extract()),
                                          "string" == typeof t ? a[t] : a)
                                        : ((a = new i.Matrix(this)),
                                          (e = !!e || !!t.relative),
                                          null != t.a &&
                                              (a = e
                                                  ? a.multiply(new i.Matrix(t))
                                                  : new i.Matrix(t)),
                                          this.attr("transform", a));
                                },
                            }),
                            i.extend(i.Element, {
                                untransform: function () {
                                    return this.attr("transform", null);
                                },
                                matrixify: function () {
                                    return (this.attr("transform") || "")
                                        .split(i.regex.transforms)
                                        .slice(0, -1)
                                        .map(function (t) {
                                            var e = t.trim().split("(");
                                            return [
                                                e[0],
                                                e[1]
                                                    .split(i.regex.delimiter)
                                                    .map(function (t) {
                                                        return parseFloat(t);
                                                    }),
                                            ];
                                        })
                                        .reduce(function (t, e) {
                                            return "matrix" == e[0]
                                                ? t.multiply(p(e[1]))
                                                : t[e[0]].apply(t, e[1]);
                                        }, new i.Matrix());
                                },
                                toParent: function (t) {
                                    if (this == t) return this;
                                    var e = this.screenCTM(),
                                        i = t.screenCTM().inverse();
                                    return (
                                        this.addTo(t)
                                            .untransform()
                                            .transform(i.multiply(e)),
                                        this
                                    );
                                },
                                toDoc: function () {
                                    return this.toParent(this.doc());
                                },
                            }),
                            (i.Transformation = i.invent({
                                create: function (t, e) {
                                    if (
                                        arguments.length > 1 &&
                                        "boolean" != typeof e
                                    )
                                        return this.constructor.call(
                                            this,
                                            [].slice.call(arguments)
                                        );
                                    if (Array.isArray(t))
                                        for (
                                            var i = 0,
                                                a = this.arguments.length;
                                            i < a;
                                            ++i
                                        )
                                            this[this.arguments[i]] = t[i];
                                    else if (t && "object" === n(t))
                                        for (
                                            i = 0, a = this.arguments.length;
                                            i < a;
                                            ++i
                                        )
                                            this[this.arguments[i]] =
                                                t[this.arguments[i]];
                                    (this.inversed = !1),
                                        !0 === e && (this.inversed = !0);
                                },
                            })),
                            (i.Translate = i.invent({
                                parent: i.Matrix,
                                inherit: i.Transformation,
                                create: function (t, e) {
                                    this.constructor.apply(
                                        this,
                                        [].slice.call(arguments)
                                    );
                                },
                                extend: {
                                    arguments: ["transformedX", "transformedY"],
                                    method: "translate",
                                },
                            })),
                            i.extend(i.Element, {
                                style: function (t, e) {
                                    if (0 == arguments.length)
                                        return this.node.style.cssText || "";
                                    if (arguments.length < 2)
                                        if ("object" === n(t))
                                            for (var a in t)
                                                this.style(a, t[a]);
                                        else {
                                            if (!i.regex.isCss.test(t))
                                                return this.node.style[h(t)];
                                            for (
                                                t = t
                                                    .split(/\s*;\s*/)
                                                    .filter(function (t) {
                                                        return !!t;
                                                    })
                                                    .map(function (t) {
                                                        return t.split(
                                                            /\s*:\s*/
                                                        );
                                                    });
                                                (e = t.pop());

                                            )
                                                this.style(e[0], e[1]);
                                        }
                                    else
                                        this.node.style[h(t)] =
                                            null === e ||
                                            i.regex.isBlank.test(e)
                                                ? ""
                                                : e;
                                    return this;
                                },
                            }),
                            (i.Parent = i.invent({
                                create: function (t) {
                                    this.constructor.call(this, t);
                                },
                                inherit: i.Element,
                                extend: {
                                    children: function () {
                                        return i.utils.map(
                                            i.utils.filterSVGElements(
                                                this.node.childNodes
                                            ),
                                            function (t) {
                                                return i.adopt(t);
                                            }
                                        );
                                    },
                                    add: function (t, e) {
                                        return (
                                            null == e
                                                ? this.node.appendChild(t.node)
                                                : t.node !=
                                                      this.node.childNodes[e] &&
                                                  this.node.insertBefore(
                                                      t.node,
                                                      this.node.childNodes[e]
                                                  ),
                                            this
                                        );
                                    },
                                    put: function (t, e) {
                                        return this.add(t, e), t;
                                    },
                                    has: function (t) {
                                        return this.index(t) >= 0;
                                    },
                                    index: function (t) {
                                        return [].slice
                                            .call(this.node.childNodes)
                                            .indexOf(t.node);
                                    },
                                    get: function (t) {
                                        return i.adopt(this.node.childNodes[t]);
                                    },
                                    first: function () {
                                        return this.get(0);
                                    },
                                    last: function () {
                                        return this.get(
                                            this.node.childNodes.length - 1
                                        );
                                    },
                                    each: function (t, e) {
                                        for (
                                            var a = this.children(),
                                                r = 0,
                                                s = a.length;
                                            r < s;
                                            r++
                                        )
                                            a[r] instanceof i.Element &&
                                                t.apply(a[r], [r, a]),
                                                e &&
                                                    a[r] instanceof
                                                        i.Container &&
                                                    a[r].each(t, e);
                                        return this;
                                    },
                                    removeElement: function (t) {
                                        return (
                                            this.node.removeChild(t.node), this
                                        );
                                    },
                                    clear: function () {
                                        for (; this.node.hasChildNodes(); )
                                            this.node.removeChild(
                                                this.node.lastChild
                                            );
                                        return delete this._defs, this;
                                    },
                                    defs: function () {
                                        return this.doc().defs();
                                    },
                                },
                            })),
                            i.extend(i.Parent, {
                                ungroup: function (t, e) {
                                    return (
                                        0 === e ||
                                            this instanceof i.Defs ||
                                            this.node == i.parser.draw ||
                                            ((t =
                                                t ||
                                                (this instanceof i.Doc
                                                    ? this
                                                    : this.parent(i.Parent))),
                                            (e = e || 1 / 0),
                                            this.each(function () {
                                                return this instanceof i.Defs
                                                    ? this
                                                    : this instanceof i.Parent
                                                    ? this.ungroup(t, e - 1)
                                                    : this.toParent(t);
                                            }),
                                            this.node.firstChild ||
                                                this.remove()),
                                        this
                                    );
                                },
                                flatten: function (t, e) {
                                    return this.ungroup(t, e);
                                },
                            }),
                            (i.Container = i.invent({
                                create: function (t) {
                                    this.constructor.call(this, t);
                                },
                                inherit: i.Parent,
                            })),
                            (i.ViewBox = i.invent({
                                parent: i.Container,
                                construct: {},
                            })),
                            [
                                "click",
                                "dblclick",
                                "mousedown",
                                "mouseup",
                                "mouseover",
                                "mouseout",
                                "mousemove",
                                "touchstart",
                                "touchmove",
                                "touchleave",
                                "touchend",
                                "touchcancel",
                            ].forEach(function (t) {
                                i.Element.prototype[t] = function (e) {
                                    return i.on(this.node, t, e), this;
                                };
                            }),
                            (i.listeners = []),
                            (i.handlerMap = []),
                            (i.listenerId = 0),
                            (i.on = function (t, e, a, r, s) {
                                var n = a.bind(r || t.instance || t),
                                    o =
                                        (i.handlerMap.indexOf(t) + 1 ||
                                            i.handlerMap.push(t)) - 1,
                                    l = e.split(".")[0],
                                    c = e.split(".")[1] || "*";
                                (i.listeners[o] = i.listeners[o] || {}),
                                    (i.listeners[o][l] =
                                        i.listeners[o][l] || {}),
                                    (i.listeners[o][l][c] =
                                        i.listeners[o][l][c] || {}),
                                    a._svgjsListenerId ||
                                        (a._svgjsListenerId = ++i.listenerId),
                                    (i.listeners[o][l][c][a._svgjsListenerId] =
                                        n),
                                    t.addEventListener(
                                        l,
                                        n,
                                        s || { passive: !0 }
                                    );
                            }),
                            (i.off = function (t, e, a) {
                                var r = i.handlerMap.indexOf(t),
                                    s = e && e.split(".")[0],
                                    n = e && e.split(".")[1],
                                    o = "";
                                if (-1 != r)
                                    if (a) {
                                        if (
                                            ("function" == typeof a &&
                                                (a = a._svgjsListenerId),
                                            !a)
                                        )
                                            return;
                                        i.listeners[r][s] &&
                                            i.listeners[r][s][n || "*"] &&
                                            (t.removeEventListener(
                                                s,
                                                i.listeners[r][s][n || "*"][a],
                                                !1
                                            ),
                                            delete i.listeners[r][s][n || "*"][
                                                a
                                            ]);
                                    } else if (n && s) {
                                        if (
                                            i.listeners[r][s] &&
                                            i.listeners[r][s][n]
                                        ) {
                                            for (var l in i.listeners[r][s][n])
                                                i.off(t, [s, n].join("."), l);
                                            delete i.listeners[r][s][n];
                                        }
                                    } else if (n)
                                        for (var c in i.listeners[r])
                                            for (var o in i.listeners[r][c])
                                                n === o &&
                                                    i.off(t, [c, n].join("."));
                                    else if (s) {
                                        if (i.listeners[r][s]) {
                                            for (var o in i.listeners[r][s])
                                                i.off(t, [s, o].join("."));
                                            delete i.listeners[r][s];
                                        }
                                    } else {
                                        for (var c in i.listeners[r])
                                            i.off(t, c);
                                        delete i.listeners[r],
                                            delete i.handlerMap[r];
                                    }
                            }),
                            i.extend(i.Element, {
                                on: function (t, e, a, r) {
                                    return i.on(this.node, t, e, a, r), this;
                                },
                                off: function (t, e) {
                                    return i.off(this.node, t, e), this;
                                },
                                fire: function (e, a) {
                                    return (
                                        e instanceof t.Event
                                            ? this.node.dispatchEvent(e)
                                            : this.node.dispatchEvent(
                                                  (e = new i.CustomEvent(e, {
                                                      detail: a,
                                                      cancelable: !0,
                                                  }))
                                              ),
                                        (this._event = e),
                                        this
                                    );
                                },
                                event: function () {
                                    return this._event;
                                },
                            }),
                            (i.Defs = i.invent({
                                create: "defs",
                                inherit: i.Container,
                            })),
                            (i.G = i.invent({
                                create: "g",
                                inherit: i.Container,
                                extend: {
                                    x: function (t) {
                                        return null == t
                                            ? this.transform("x")
                                            : this.transform(
                                                  { x: t - this.x() },
                                                  !0
                                              );
                                    },
                                },
                                construct: {
                                    group: function () {
                                        return this.put(new i.G());
                                    },
                                },
                            })),
                            (i.Doc = i.invent({
                                create: function (t) {
                                    t &&
                                        ("svg" ==
                                        (t =
                                            "string" == typeof t
                                                ? e.getElementById(t)
                                                : t).nodeName
                                            ? this.constructor.call(this, t)
                                            : (this.constructor.call(
                                                  this,
                                                  i.create("svg")
                                              ),
                                              t.appendChild(this.node),
                                              this.size("100%", "100%")),
                                        this.namespace().defs());
                                },
                                inherit: i.Container,
                                extend: {
                                    namespace: function () {
                                        return this.attr({
                                            xmlns: i.ns,
                                            version: "1.1",
                                        })
                                            .attr(
                                                "xmlns:xlink",
                                                i.xlink,
                                                i.xmlns
                                            )
                                            .attr(
                                                "xmlns:svgjs",
                                                i.svgjs,
                                                i.xmlns
                                            );
                                    },
                                    defs: function () {
                                        var t;
                                        return (
                                            this._defs ||
                                                ((t =
                                                    this.node.getElementsByTagName(
                                                        "defs"
                                                    )[0])
                                                    ? (this._defs = i.adopt(t))
                                                    : (this._defs =
                                                          new i.Defs()),
                                                this.node.appendChild(
                                                    this._defs.node
                                                )),
                                            this._defs
                                        );
                                    },
                                    parent: function () {
                                        return this.node.parentNode &&
                                            "#document" !=
                                                this.node.parentNode.nodeName
                                            ? this.node.parentNode
                                            : null;
                                    },
                                    remove: function () {
                                        return (
                                            this.parent() &&
                                                this.parent().removeChild(
                                                    this.node
                                                ),
                                            this
                                        );
                                    },
                                    clear: function () {
                                        for (; this.node.hasChildNodes(); )
                                            this.node.removeChild(
                                                this.node.lastChild
                                            );
                                        return (
                                            delete this._defs,
                                            i.parser.draw &&
                                                !i.parser.draw.parentNode &&
                                                this.node.appendChild(
                                                    i.parser.draw
                                                ),
                                            this
                                        );
                                    },
                                    clone: function (t) {
                                        this.writeDataToDom();
                                        var e = this.node,
                                            i = x(e.cloneNode(!0));
                                        return (
                                            t
                                                ? (t.node || t).appendChild(
                                                      i.node
                                                  )
                                                : e.parentNode.insertBefore(
                                                      i.node,
                                                      e.nextSibling
                                                  ),
                                            i
                                        );
                                    },
                                },
                            })),
                            i.extend(i.Element, {}),
                            (i.Gradient = i.invent({
                                create: function (t) {
                                    this.constructor.call(
                                        this,
                                        i.create(t + "Gradient")
                                    ),
                                        (this.type = t);
                                },
                                inherit: i.Container,
                                extend: {
                                    at: function (t, e, a) {
                                        return this.put(new i.Stop()).update(
                                            t,
                                            e,
                                            a
                                        );
                                    },
                                    update: function (t) {
                                        return (
                                            this.clear(),
                                            "function" == typeof t &&
                                                t.call(this, this),
                                            this
                                        );
                                    },
                                    fill: function () {
                                        return "url(#" + this.id() + ")";
                                    },
                                    toString: function () {
                                        return this.fill();
                                    },
                                    attr: function (t, e, a) {
                                        return (
                                            "transform" == t &&
                                                (t = "gradientTransform"),
                                            i.Container.prototype.attr.call(
                                                this,
                                                t,
                                                e,
                                                a
                                            )
                                        );
                                    },
                                },
                                construct: {
                                    gradient: function (t, e) {
                                        return this.defs().gradient(t, e);
                                    },
                                },
                            })),
                            i.extend(i.Gradient, i.FX, {
                                from: function (t, e) {
                                    return "radial" ==
                                        (this._target || this).type
                                        ? this.attr({
                                              fx: new i.Number(t),
                                              fy: new i.Number(e),
                                          })
                                        : this.attr({
                                              x1: new i.Number(t),
                                              y1: new i.Number(e),
                                          });
                                },
                                to: function (t, e) {
                                    return "radial" ==
                                        (this._target || this).type
                                        ? this.attr({
                                              cx: new i.Number(t),
                                              cy: new i.Number(e),
                                          })
                                        : this.attr({
                                              x2: new i.Number(t),
                                              y2: new i.Number(e),
                                          });
                                },
                            }),
                            i.extend(i.Defs, {
                                gradient: function (t, e) {
                                    return this.put(new i.Gradient(t)).update(
                                        e
                                    );
                                },
                            }),
                            (i.Stop = i.invent({
                                create: "stop",
                                inherit: i.Element,
                                extend: {
                                    update: function (t) {
                                        return (
                                            ("number" == typeof t ||
                                                t instanceof i.Number) &&
                                                (t = {
                                                    offset: arguments[0],
                                                    color: arguments[1],
                                                    opacity: arguments[2],
                                                }),
                                            null != t.opacity &&
                                                this.attr(
                                                    "stop-opacity",
                                                    t.opacity
                                                ),
                                            null != t.color &&
                                                this.attr(
                                                    "stop-color",
                                                    t.color
                                                ),
                                            null != t.offset &&
                                                this.attr(
                                                    "offset",
                                                    new i.Number(t.offset)
                                                ),
                                            this
                                        );
                                    },
                                },
                            })),
                            (i.Pattern = i.invent({
                                create: "pattern",
                                inherit: i.Container,
                                extend: {
                                    fill: function () {
                                        return "url(#" + this.id() + ")";
                                    },
                                    update: function (t) {
                                        return (
                                            this.clear(),
                                            "function" == typeof t &&
                                                t.call(this, this),
                                            this
                                        );
                                    },
                                    toString: function () {
                                        return this.fill();
                                    },
                                    attr: function (t, e, a) {
                                        return (
                                            "transform" == t &&
                                                (t = "patternTransform"),
                                            i.Container.prototype.attr.call(
                                                this,
                                                t,
                                                e,
                                                a
                                            )
                                        );
                                    },
                                },
                                construct: {
                                    pattern: function (t, e, i) {
                                        return this.defs().pattern(t, e, i);
                                    },
                                },
                            })),
                            i.extend(i.Defs, {
                                pattern: function (t, e, a) {
                                    return this.put(new i.Pattern())
                                        .update(a)
                                        .attr({
                                            x: 0,
                                            y: 0,
                                            width: t,
                                            height: e,
                                            patternUnits: "userSpaceOnUse",
                                        });
                                },
                            }),
                            (i.Shape = i.invent({
                                create: function (t) {
                                    this.constructor.call(this, t);
                                },
                                inherit: i.Element,
                            })),
                            (i.Symbol = i.invent({
                                create: "symbol",
                                inherit: i.Container,
                                construct: {
                                    symbol: function () {
                                        return this.put(new i.Symbol());
                                    },
                                },
                            })),
                            (i.Use = i.invent({
                                create: "use",
                                inherit: i.Shape,
                                extend: {
                                    element: function (t, e) {
                                        return this.attr(
                                            "href",
                                            (e || "") + "#" + t,
                                            i.xlink
                                        );
                                    },
                                },
                                construct: {
                                    use: function (t, e) {
                                        return this.put(new i.Use()).element(
                                            t,
                                            e
                                        );
                                    },
                                },
                            })),
                            (i.Rect = i.invent({
                                create: "rect",
                                inherit: i.Shape,
                                construct: {
                                    rect: function (t, e) {
                                        return this.put(new i.Rect()).size(
                                            t,
                                            e
                                        );
                                    },
                                },
                            })),
                            (i.Circle = i.invent({
                                create: "circle",
                                inherit: i.Shape,
                                construct: {
                                    circle: function (t) {
                                        return this.put(new i.Circle())
                                            .rx(new i.Number(t).divide(2))
                                            .move(0, 0);
                                    },
                                },
                            })),
                            i.extend(i.Circle, i.FX, {
                                rx: function (t) {
                                    return this.attr("r", t);
                                },
                                ry: function (t) {
                                    return this.rx(t);
                                },
                            }),
                            (i.Ellipse = i.invent({
                                create: "ellipse",
                                inherit: i.Shape,
                                construct: {
                                    ellipse: function (t, e) {
                                        return this.put(new i.Ellipse())
                                            .size(t, e)
                                            .move(0, 0);
                                    },
                                },
                            })),
                            i.extend(i.Ellipse, i.Rect, i.FX, {
                                rx: function (t) {
                                    return this.attr("rx", t);
                                },
                                ry: function (t) {
                                    return this.attr("ry", t);
                                },
                            }),
                            i.extend(i.Circle, i.Ellipse, {
                                x: function (t) {
                                    return null == t
                                        ? this.cx() - this.rx()
                                        : this.cx(t + this.rx());
                                },
                                y: function (t) {
                                    return null == t
                                        ? this.cy() - this.ry()
                                        : this.cy(t + this.ry());
                                },
                                cx: function (t) {
                                    return null == t
                                        ? this.attr("cx")
                                        : this.attr("cx", t);
                                },
                                cy: function (t) {
                                    return null == t
                                        ? this.attr("cy")
                                        : this.attr("cy", t);
                                },
                                width: function (t) {
                                    return null == t
                                        ? 2 * this.rx()
                                        : this.rx(new i.Number(t).divide(2));
                                },
                                height: function (t) {
                                    return null == t
                                        ? 2 * this.ry()
                                        : this.ry(new i.Number(t).divide(2));
                                },
                                size: function (t, e) {
                                    var a = f(this, t, e);
                                    return this.rx(
                                        new i.Number(a.width).divide(2)
                                    ).ry(new i.Number(a.height).divide(2));
                                },
                            }),
                            (i.Line = i.invent({
                                create: "line",
                                inherit: i.Shape,
                                extend: {
                                    array: function () {
                                        return new i.PointArray([
                                            [this.attr("x1"), this.attr("y1")],
                                            [this.attr("x2"), this.attr("y2")],
                                        ]);
                                    },
                                    plot: function (t, e, a, r) {
                                        return null == t
                                            ? this.array()
                                            : ((t =
                                                  void 0 !== e
                                                      ? {
                                                            x1: t,
                                                            y1: e,
                                                            x2: a,
                                                            y2: r,
                                                        }
                                                      : new i.PointArray(
                                                            t
                                                        ).toLine()),
                                              this.attr(t));
                                    },
                                    move: function (t, e) {
                                        return this.attr(
                                            this.array().move(t, e).toLine()
                                        );
                                    },
                                    size: function (t, e) {
                                        var i = f(this, t, e);
                                        return this.attr(
                                            this.array()
                                                .size(i.width, i.height)
                                                .toLine()
                                        );
                                    },
                                },
                                construct: {
                                    line: function (t, e, a, r) {
                                        return i.Line.prototype.plot.apply(
                                            this.put(new i.Line()),
                                            null != t
                                                ? [t, e, a, r]
                                                : [0, 0, 0, 0]
                                        );
                                    },
                                },
                            })),
                            (i.Polyline = i.invent({
                                create: "polyline",
                                inherit: i.Shape,
                                construct: {
                                    polyline: function (t) {
                                        return this.put(new i.Polyline()).plot(
                                            t || new i.PointArray()
                                        );
                                    },
                                },
                            })),
                            (i.Polygon = i.invent({
                                create: "polygon",
                                inherit: i.Shape,
                                construct: {
                                    polygon: function (t) {
                                        return this.put(new i.Polygon()).plot(
                                            t || new i.PointArray()
                                        );
                                    },
                                },
                            })),
                            i.extend(i.Polyline, i.Polygon, {
                                array: function () {
                                    return (
                                        this._array ||
                                        (this._array = new i.PointArray(
                                            this.attr("points")
                                        ))
                                    );
                                },
                                plot: function (t) {
                                    return null == t
                                        ? this.array()
                                        : this.clear().attr(
                                              "points",
                                              "string" == typeof t
                                                  ? t
                                                  : (this._array =
                                                        new i.PointArray(t))
                                          );
                                },
                                clear: function () {
                                    return delete this._array, this;
                                },
                                move: function (t, e) {
                                    return this.attr(
                                        "points",
                                        this.array().move(t, e)
                                    );
                                },
                                size: function (t, e) {
                                    var i = f(this, t, e);
                                    return this.attr(
                                        "points",
                                        this.array().size(i.width, i.height)
                                    );
                                },
                            }),
                            i.extend(i.Line, i.Polyline, i.Polygon, {
                                morphArray: i.PointArray,
                                x: function (t) {
                                    return null == t
                                        ? this.bbox().x
                                        : this.move(t, this.bbox().y);
                                },
                                y: function (t) {
                                    return null == t
                                        ? this.bbox().y
                                        : this.move(this.bbox().x, t);
                                },
                                width: function (t) {
                                    var e = this.bbox();
                                    return null == t
                                        ? e.width
                                        : this.size(t, e.height);
                                },
                                height: function (t) {
                                    var e = this.bbox();
                                    return null == t
                                        ? e.height
                                        : this.size(e.width, t);
                                },
                            }),
                            (i.Path = i.invent({
                                create: "path",
                                inherit: i.Shape,
                                extend: {
                                    morphArray: i.PathArray,
                                    array: function () {
                                        return (
                                            this._array ||
                                            (this._array = new i.PathArray(
                                                this.attr("d")
                                            ))
                                        );
                                    },
                                    plot: function (t) {
                                        return null == t
                                            ? this.array()
                                            : this.clear().attr(
                                                  "d",
                                                  "string" == typeof t
                                                      ? t
                                                      : (this._array =
                                                            new i.PathArray(t))
                                              );
                                    },
                                    clear: function () {
                                        return delete this._array, this;
                                    },
                                },
                                construct: {
                                    path: function (t) {
                                        return this.put(new i.Path()).plot(
                                            t || new i.PathArray()
                                        );
                                    },
                                },
                            })),
                            (i.Image = i.invent({
                                create: "image",
                                inherit: i.Shape,
                                extend: {
                                    load: function (e) {
                                        if (!e) return this;
                                        var a = this,
                                            r = new t.Image();
                                        return (
                                            i.on(r, "load", function () {
                                                i.off(r);
                                                var t = a.parent(i.Pattern);
                                                null !== t &&
                                                    (0 == a.width() &&
                                                        0 == a.height() &&
                                                        a.size(
                                                            r.width,
                                                            r.height
                                                        ),
                                                    t &&
                                                        0 == t.width() &&
                                                        0 == t.height() &&
                                                        t.size(
                                                            a.width(),
                                                            a.height()
                                                        ),
                                                    "function" ==
                                                        typeof a._loaded &&
                                                        a._loaded.call(a, {
                                                            width: r.width,
                                                            height: r.height,
                                                            ratio:
                                                                r.width /
                                                                r.height,
                                                            url: e,
                                                        }));
                                            }),
                                            i.on(r, "error", function (t) {
                                                i.off(r),
                                                    "function" ==
                                                        typeof a._error &&
                                                        a._error.call(a, t);
                                            }),
                                            this.attr(
                                                "href",
                                                (r.src = this.src = e),
                                                i.xlink
                                            )
                                        );
                                    },
                                    loaded: function (t) {
                                        return (this._loaded = t), this;
                                    },
                                    error: function (t) {
                                        return (this._error = t), this;
                                    },
                                },
                                construct: {
                                    image: function (t, e, a) {
                                        return this.put(new i.Image())
                                            .load(t)
                                            .size(e || 0, a || e || 0);
                                    },
                                },
                            })),
                            (i.Text = i.invent({
                                create: function () {
                                    this.constructor.call(
                                        this,
                                        i.create("text")
                                    ),
                                        (this.dom.leading = new i.Number(1.3)),
                                        (this._rebuild = !0),
                                        (this._build = !1),
                                        this.attr(
                                            "font-family",
                                            i.defaults.attrs["font-family"]
                                        );
                                },
                                inherit: i.Shape,
                                extend: {
                                    x: function (t) {
                                        return null == t
                                            ? this.attr("x")
                                            : this.attr("x", t);
                                    },
                                    text: function (t) {
                                        if (void 0 === t) {
                                            t = "";
                                            for (
                                                var e = this.node.childNodes,
                                                    a = 0,
                                                    r = e.length;
                                                a < r;
                                                ++a
                                            )
                                                0 != a &&
                                                    3 != e[a].nodeType &&
                                                    1 ==
                                                        i.adopt(e[a]).dom
                                                            .newLined &&
                                                    (t += "\n"),
                                                    (t += e[a].textContent);
                                            return t;
                                        }
                                        if (
                                            (this.clear().build(!0),
                                            "function" == typeof t)
                                        )
                                            t.call(this, this);
                                        else {
                                            a = 0;
                                            for (
                                                var s = (t = t.split("\n"))
                                                    .length;
                                                a < s;
                                                a++
                                            )
                                                this.tspan(t[a]).newLine();
                                        }
                                        return this.build(!1).rebuild();
                                    },
                                    size: function (t) {
                                        return this.attr(
                                            "font-size",
                                            t
                                        ).rebuild();
                                    },
                                    leading: function (t) {
                                        return null == t
                                            ? this.dom.leading
                                            : ((this.dom.leading = new i.Number(
                                                  t
                                              )),
                                              this.rebuild());
                                    },
                                    lines: function () {
                                        var t = (
                                                (this.textPath &&
                                                    this.textPath()) ||
                                                this
                                            ).node,
                                            e = i.utils.map(
                                                i.utils.filterSVGElements(
                                                    t.childNodes
                                                ),
                                                function (t) {
                                                    return i.adopt(t);
                                                }
                                            );
                                        return new i.Set(e);
                                    },
                                    rebuild: function (t) {
                                        if (
                                            ("boolean" == typeof t &&
                                                (this._rebuild = t),
                                            this._rebuild)
                                        ) {
                                            var e = this,
                                                a = 0,
                                                r =
                                                    this.dom.leading *
                                                    new i.Number(
                                                        this.attr("font-size")
                                                    );
                                            this.lines().each(function () {
                                                this.dom.newLined &&
                                                    (e.textPath() ||
                                                        this.attr(
                                                            "x",
                                                            e.attr("x")
                                                        ),
                                                    "\n" == this.text()
                                                        ? (a += r)
                                                        : (this.attr(
                                                              "dy",
                                                              r + a
                                                          ),
                                                          (a = 0)));
                                            }),
                                                this.fire("rebuild");
                                        }
                                        return this;
                                    },
                                    build: function (t) {
                                        return (this._build = !!t), this;
                                    },
                                    setData: function (t) {
                                        return (
                                            (this.dom = t),
                                            (this.dom.leading = new i.Number(
                                                t.leading || 1.3
                                            )),
                                            this
                                        );
                                    },
                                },
                                construct: {
                                    text: function (t) {
                                        return this.put(new i.Text()).text(t);
                                    },
                                    plain: function (t) {
                                        return this.put(new i.Text()).plain(t);
                                    },
                                },
                            })),
                            (i.Tspan = i.invent({
                                create: "tspan",
                                inherit: i.Shape,
                                extend: {
                                    text: function (t) {
                                        return null == t
                                            ? this.node.textContent +
                                                  (this.dom.newLined
                                                      ? "\n"
                                                      : "")
                                            : ("function" == typeof t
                                                  ? t.call(this, this)
                                                  : this.plain(t),
                                              this);
                                    },
                                    dx: function (t) {
                                        return this.attr("dx", t);
                                    },
                                    dy: function (t) {
                                        return this.attr("dy", t);
                                    },
                                    newLine: function () {
                                        var t = this.parent(i.Text);
                                        return (
                                            (this.dom.newLined = !0),
                                            this.dy(
                                                t.dom.leading *
                                                    t.attr("font-size")
                                            ).attr("x", t.x())
                                        );
                                    },
                                },
                            })),
                            i.extend(i.Text, i.Tspan, {
                                plain: function (t) {
                                    return (
                                        !1 === this._build && this.clear(),
                                        this.node.appendChild(
                                            e.createTextNode(t)
                                        ),
                                        this
                                    );
                                },
                                tspan: function (t) {
                                    var e = (
                                            (this.textPath &&
                                                this.textPath()) ||
                                            this
                                        ).node,
                                        a = new i.Tspan();
                                    return (
                                        !1 === this._build && this.clear(),
                                        e.appendChild(a.node),
                                        a.text(t)
                                    );
                                },
                                clear: function () {
                                    for (
                                        var t = (
                                            (this.textPath &&
                                                this.textPath()) ||
                                            this
                                        ).node;
                                        t.hasChildNodes();

                                    )
                                        t.removeChild(t.lastChild);
                                    return this;
                                },
                                length: function () {
                                    return this.node.getComputedTextLength();
                                },
                            }),
                            (i.TextPath = i.invent({
                                create: "textPath",
                                inherit: i.Parent,
                                parent: i.Text,
                                construct: {
                                    morphArray: i.PathArray,
                                    array: function () {
                                        var t = this.track();
                                        return t ? t.array() : null;
                                    },
                                    plot: function (t) {
                                        var e = this.track(),
                                            i = null;
                                        return (
                                            e && (i = e.plot(t)),
                                            null == t ? i : this
                                        );
                                    },
                                    track: function () {
                                        var t = this.textPath();
                                        if (t) return t.reference("href");
                                    },
                                    textPath: function () {
                                        if (
                                            this.node.firstChild &&
                                            "textPath" ==
                                                this.node.firstChild.nodeName
                                        )
                                            return i.adopt(
                                                this.node.firstChild
                                            );
                                    },
                                },
                            })),
                            (i.Nested = i.invent({
                                create: function () {
                                    this.constructor.call(
                                        this,
                                        i.create("svg")
                                    ),
                                        this.style("overflow", "visible");
                                },
                                inherit: i.Container,
                                construct: {
                                    nested: function () {
                                        return this.put(new i.Nested());
                                    },
                                },
                            }));
                        var l = {
                            stroke: [
                                "color",
                                "width",
                                "opacity",
                                "linecap",
                                "linejoin",
                                "miterlimit",
                                "dasharray",
                                "dashoffset",
                            ],
                            fill: ["color", "opacity", "rule"],
                            prefix: function (t, e) {
                                return "color" == e ? t : t + "-" + e;
                            },
                        };
                        function c(t, e, a, r) {
                            return a + r.replace(i.regex.dots, " .");
                        }
                        function h(t) {
                            return t
                                .toLowerCase()
                                .replace(/-(.)/g, function (t, e) {
                                    return e.toUpperCase();
                                });
                        }
                        function d(t) {
                            return t.charAt(0).toUpperCase() + t.slice(1);
                        }
                        function u(t) {
                            var e = t.toString(16);
                            return 1 == e.length ? "0" + e : e;
                        }
                        function f(t, e, i) {
                            if (null == e || null == i) {
                                var a = t.bbox();
                                null == e
                                    ? (e = (a.width / a.height) * i)
                                    : null == i &&
                                      (i = (a.height / a.width) * e);
                            }
                            return { width: e, height: i };
                        }
                        function g(t, e, i) {
                            return {
                                x: e * t.a + i * t.c + 0,
                                y: e * t.b + i * t.d + 0,
                            };
                        }
                        function p(t) {
                            return {
                                a: t[0],
                                b: t[1],
                                c: t[2],
                                d: t[3],
                                e: t[4],
                                f: t[5],
                            };
                        }
                        function x(e) {
                            for (var a = e.childNodes.length - 1; a >= 0; a--)
                                e.childNodes[a] instanceof t.SVGElement &&
                                    x(e.childNodes[a]);
                            return i.adopt(e).id(i.eid(e.nodeName));
                        }
                        function m(t) {
                            return Math.abs(t) > 1e-37 ? t : 0;
                        }
                        ["fill", "stroke"].forEach(function (t) {
                            var e = {};
                            (e[t] = function (e) {
                                if (void 0 === e) return this;
                                if (
                                    "string" == typeof e ||
                                    i.Color.isRgb(e) ||
                                    (e && "function" == typeof e.fill)
                                )
                                    this.attr(t, e);
                                else
                                    for (var a = l[t].length - 1; a >= 0; a--)
                                        null != e[l[t][a]] &&
                                            this.attr(
                                                l.prefix(t, l[t][a]),
                                                e[l[t][a]]
                                            );
                                return this;
                            }),
                                i.extend(i.Element, i.FX, e);
                        }),
                            i.extend(i.Element, i.FX, {
                                translate: function (t, e) {
                                    return this.transform({ x: t, y: e });
                                },
                                matrix: function (t) {
                                    return this.attr(
                                        "transform",
                                        new i.Matrix(
                                            6 == arguments.length
                                                ? [].slice.call(arguments)
                                                : t
                                        )
                                    );
                                },
                                opacity: function (t) {
                                    return this.attr("opacity", t);
                                },
                                dx: function (t) {
                                    return this.x(
                                        new i.Number(t).plus(
                                            this instanceof i.FX ? 0 : this.x()
                                        ),
                                        !0
                                    );
                                },
                                dy: function (t) {
                                    return this.y(
                                        new i.Number(t).plus(
                                            this instanceof i.FX ? 0 : this.y()
                                        ),
                                        !0
                                    );
                                },
                            }),
                            i.extend(i.Path, {
                                length: function () {
                                    return this.node.getTotalLength();
                                },
                                pointAt: function (t) {
                                    return this.node.getPointAtLength(t);
                                },
                            }),
                            (i.Set = i.invent({
                                create: function (t) {
                                    Array.isArray(t)
                                        ? (this.members = t)
                                        : this.clear();
                                },
                                extend: {
                                    add: function () {
                                        for (
                                            var t = [].slice.call(arguments),
                                                e = 0,
                                                i = t.length;
                                            e < i;
                                            e++
                                        )
                                            this.members.push(t[e]);
                                        return this;
                                    },
                                    remove: function (t) {
                                        var e = this.index(t);
                                        return (
                                            e > -1 && this.members.splice(e, 1),
                                            this
                                        );
                                    },
                                    each: function (t) {
                                        for (
                                            var e = 0, i = this.members.length;
                                            e < i;
                                            e++
                                        )
                                            t.apply(this.members[e], [
                                                e,
                                                this.members,
                                            ]);
                                        return this;
                                    },
                                    clear: function () {
                                        return (this.members = []), this;
                                    },
                                    length: function () {
                                        return this.members.length;
                                    },
                                    has: function (t) {
                                        return this.index(t) >= 0;
                                    },
                                    index: function (t) {
                                        return this.members.indexOf(t);
                                    },
                                    get: function (t) {
                                        return this.members[t];
                                    },
                                    first: function () {
                                        return this.get(0);
                                    },
                                    last: function () {
                                        return this.get(
                                            this.members.length - 1
                                        );
                                    },
                                    valueOf: function () {
                                        return this.members;
                                    },
                                },
                                construct: {
                                    set: function (t) {
                                        return new i.Set(t);
                                    },
                                },
                            })),
                            (i.FX.Set = i.invent({
                                create: function (t) {
                                    this.set = t;
                                },
                            })),
                            (i.Set.inherit = function () {
                                var t = [];
                                for (var e in i.Shape.prototype)
                                    "function" == typeof i.Shape.prototype[e] &&
                                        "function" !=
                                            typeof i.Set.prototype[e] &&
                                        t.push(e);
                                for (var e in (t.forEach(function (t) {
                                    i.Set.prototype[t] = function () {
                                        for (
                                            var e = 0, a = this.members.length;
                                            e < a;
                                            e++
                                        )
                                            this.members[e] &&
                                                "function" ==
                                                    typeof this.members[e][t] &&
                                                this.members[e][t].apply(
                                                    this.members[e],
                                                    arguments
                                                );
                                        return "animate" == t
                                            ? this.fx ||
                                                  (this.fx = new i.FX.Set(this))
                                            : this;
                                    };
                                }),
                                (t = []),
                                i.FX.prototype))
                                    "function" == typeof i.FX.prototype[e] &&
                                        "function" !=
                                            typeof i.FX.Set.prototype[e] &&
                                        t.push(e);
                                t.forEach(function (t) {
                                    i.FX.Set.prototype[t] = function () {
                                        for (
                                            var e = 0,
                                                i = this.set.members.length;
                                            e < i;
                                            e++
                                        )
                                            this.set.members[e].fx[t].apply(
                                                this.set.members[e].fx,
                                                arguments
                                            );
                                        return this;
                                    };
                                });
                            }),
                            i.extend(i.Element, {}),
                            i.extend(i.Element, {
                                remember: function (t, e) {
                                    if ("object" === n(arguments[0]))
                                        for (var i in t) this.remember(i, t[i]);
                                    else {
                                        if (1 == arguments.length)
                                            return this.memory()[t];
                                        this.memory()[t] = e;
                                    }
                                    return this;
                                },
                                forget: function () {
                                    if (0 == arguments.length)
                                        this._memory = {};
                                    else
                                        for (
                                            var t = arguments.length - 1;
                                            t >= 0;
                                            t--
                                        )
                                            delete this.memory()[arguments[t]];
                                    return this;
                                },
                                memory: function () {
                                    return this._memory || (this._memory = {});
                                },
                            }),
                            (i.get = function (t) {
                                var a = e.getElementById(
                                    (function (t) {
                                        var e = (t || "")
                                            .toString()
                                            .match(i.regex.reference);
                                        if (e) return e[1];
                                    })(t) || t
                                );
                                return i.adopt(a);
                            }),
                            (i.select = function (t, a) {
                                return new i.Set(
                                    i.utils.map(
                                        (a || e).querySelectorAll(t),
                                        function (t) {
                                            return i.adopt(t);
                                        }
                                    )
                                );
                            }),
                            i.extend(i.Parent, {
                                select: function (t) {
                                    return i.select(t, this.node);
                                },
                            });
                        var b = "abcdef".split("");
                        if ("function" != typeof t.CustomEvent) {
                            var v = function (t, i) {
                                i = i || {
                                    bubbles: !1,
                                    cancelable: !1,
                                    detail: void 0,
                                };
                                var a = e.createEvent("CustomEvent");
                                return (
                                    a.initCustomEvent(
                                        t,
                                        i.bubbles,
                                        i.cancelable,
                                        i.detail
                                    ),
                                    a
                                );
                            };
                            (v.prototype = t.Event.prototype),
                                (i.CustomEvent = v);
                        } else i.CustomEvent = t.CustomEvent;
                        return i;
                    }),
                    void 0 !==
                        (a = function () {
                            return Nt(Dt, Dt.document);
                        }.call(e, i, e, t)) && (t.exports = a),
                    function () {
                        (SVG.Filter = SVG.invent({
                            create: "filter",
                            inherit: SVG.Parent,
                            extend: {
                                source: "SourceGraphic",
                                sourceAlpha: "SourceAlpha",
                                background: "BackgroundImage",
                                backgroundAlpha: "BackgroundAlpha",
                                fill: "FillPaint",
                                stroke: "StrokePaint",
                                autoSetIn: !0,
                                put: function (t, e) {
                                    return (
                                        this.add(t, e),
                                        !t.attr("in") &&
                                            this.autoSetIn &&
                                            t.attr("in", this.source),
                                        t.attr("result") || t.attr("result", t),
                                        t
                                    );
                                },
                                blend: function (t, e, i) {
                                    return this.put(
                                        new SVG.BlendEffect(t, e, i)
                                    );
                                },
                                colorMatrix: function (t, e) {
                                    return this.put(
                                        new SVG.ColorMatrixEffect(t, e)
                                    );
                                },
                                convolveMatrix: function (t) {
                                    return this.put(
                                        new SVG.ConvolveMatrixEffect(t)
                                    );
                                },
                                componentTransfer: function (t) {
                                    return this.put(
                                        new SVG.ComponentTransferEffect(t)
                                    );
                                },
                                composite: function (t, e, i) {
                                    return this.put(
                                        new SVG.CompositeEffect(t, e, i)
                                    );
                                },
                                flood: function (t, e) {
                                    return this.put(new SVG.FloodEffect(t, e));
                                },
                                offset: function (t, e) {
                                    return this.put(new SVG.OffsetEffect(t, e));
                                },
                                image: function (t) {
                                    return this.put(new SVG.ImageEffect(t));
                                },
                                merge: function () {
                                    var t = [void 0];
                                    for (var e in arguments)
                                        t.push(arguments[e]);
                                    return this.put(
                                        new (SVG.MergeEffect.bind.apply(
                                            SVG.MergeEffect,
                                            t
                                        ))()
                                    );
                                },
                                gaussianBlur: function (t, e) {
                                    return this.put(
                                        new SVG.GaussianBlurEffect(t, e)
                                    );
                                },
                                morphology: function (t, e) {
                                    return this.put(
                                        new SVG.MorphologyEffect(t, e)
                                    );
                                },
                                diffuseLighting: function (t, e, i) {
                                    return this.put(
                                        new SVG.DiffuseLightingEffect(t, e, i)
                                    );
                                },
                                displacementMap: function (t, e, i, a, r) {
                                    return this.put(
                                        new SVG.DisplacementMapEffect(
                                            t,
                                            e,
                                            i,
                                            a,
                                            r
                                        )
                                    );
                                },
                                specularLighting: function (t, e, i, a) {
                                    return this.put(
                                        new SVG.SpecularLightingEffect(
                                            t,
                                            e,
                                            i,
                                            a
                                        )
                                    );
                                },
                                tile: function () {
                                    return this.put(new SVG.TileEffect());
                                },
                                turbulence: function (t, e, i, a, r) {
                                    return this.put(
                                        new SVG.TurbulenceEffect(t, e, i, a, r)
                                    );
                                },
                                toString: function () {
                                    return "url(#" + this.attr("id") + ")";
                                },
                            },
                        })),
                            SVG.extend(SVG.Defs, {
                                filter: function (t) {
                                    var e = this.put(new SVG.Filter());
                                    return (
                                        "function" == typeof t && t.call(e, e),
                                        e
                                    );
                                },
                            }),
                            SVG.extend(SVG.Container, {
                                filter: function (t) {
                                    return this.defs().filter(t);
                                },
                            }),
                            SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
                                filter: function (t) {
                                    return (
                                        (this.filterer =
                                            t instanceof SVG.Element
                                                ? t
                                                : this.doc().filter(t)),
                                        this.doc() &&
                                            this.filterer.doc() !==
                                                this.doc() &&
                                            this.doc()
                                                .defs()
                                                .add(this.filterer),
                                        this.attr("filter", this.filterer),
                                        this.filterer
                                    );
                                },
                                unfilter: function (t) {
                                    return (
                                        this.filterer &&
                                            !0 === t &&
                                            this.filterer.remove(),
                                        delete this.filterer,
                                        this.attr("filter", null)
                                    );
                                },
                            }),
                            (SVG.Effect = SVG.invent({
                                create: function () {
                                    this.constructor.call(this);
                                },
                                inherit: SVG.Element,
                                extend: {
                                    in: function (t) {
                                        return null == t
                                            ? (this.parent() &&
                                                  this.parent()
                                                      .select(
                                                          '[result="' +
                                                              this.attr("in") +
                                                              '"]'
                                                      )
                                                      .get(0)) ||
                                                  this.attr("in")
                                            : this.attr("in", t);
                                    },
                                    result: function (t) {
                                        return null == t
                                            ? this.attr("result")
                                            : this.attr("result", t);
                                    },
                                    toString: function () {
                                        return this.result();
                                    },
                                },
                            })),
                            (SVG.ParentEffect = SVG.invent({
                                create: function () {
                                    this.constructor.call(this);
                                },
                                inherit: SVG.Parent,
                                extend: {
                                    in: function (t) {
                                        return null == t
                                            ? (this.parent() &&
                                                  this.parent()
                                                      .select(
                                                          '[result="' +
                                                              this.attr("in") +
                                                              '"]'
                                                      )
                                                      .get(0)) ||
                                                  this.attr("in")
                                            : this.attr("in", t);
                                    },
                                    result: function (t) {
                                        return null == t
                                            ? this.attr("result")
                                            : this.attr("result", t);
                                    },
                                    toString: function () {
                                        return this.result();
                                    },
                                },
                            }));
                        var t = {
                            blend: function (t, e) {
                                return (
                                    this.parent() &&
                                    this.parent().blend(this, t, e)
                                );
                            },
                            colorMatrix: function (t, e) {
                                return (
                                    this.parent() &&
                                    this.parent().colorMatrix(t, e).in(this)
                                );
                            },
                            convolveMatrix: function (t) {
                                return (
                                    this.parent() &&
                                    this.parent().convolveMatrix(t).in(this)
                                );
                            },
                            componentTransfer: function (t) {
                                return (
                                    this.parent() &&
                                    this.parent().componentTransfer(t).in(this)
                                );
                            },
                            composite: function (t, e) {
                                return (
                                    this.parent() &&
                                    this.parent().composite(this, t, e)
                                );
                            },
                            flood: function (t, e) {
                                return (
                                    this.parent() && this.parent().flood(t, e)
                                );
                            },
                            offset: function (t, e) {
                                return (
                                    this.parent() &&
                                    this.parent().offset(t, e).in(this)
                                );
                            },
                            image: function (t) {
                                return this.parent() && this.parent().image(t);
                            },
                            merge: function () {
                                return (
                                    this.parent() &&
                                    this.parent().merge.apply(
                                        this.parent(),
                                        [this].concat(arguments)
                                    )
                                );
                            },
                            gaussianBlur: function (t, e) {
                                return (
                                    this.parent() &&
                                    this.parent().gaussianBlur(t, e).in(this)
                                );
                            },
                            morphology: function (t, e) {
                                return (
                                    this.parent() &&
                                    this.parent().morphology(t, e).in(this)
                                );
                            },
                            diffuseLighting: function (t, e, i) {
                                return (
                                    this.parent() &&
                                    this.parent()
                                        .diffuseLighting(t, e, i)
                                        .in(this)
                                );
                            },
                            displacementMap: function (t, e, i, a) {
                                return (
                                    this.parent() &&
                                    this.parent().displacementMap(
                                        this,
                                        t,
                                        e,
                                        i,
                                        a
                                    )
                                );
                            },
                            specularLighting: function (t, e, i, a) {
                                return (
                                    this.parent() &&
                                    this.parent()
                                        .specularLighting(t, e, i, a)
                                        .in(this)
                                );
                            },
                            tile: function () {
                                return (
                                    this.parent() &&
                                    this.parent().tile().in(this)
                                );
                            },
                            turbulence: function (t, e, i, a, r) {
                                return (
                                    this.parent() &&
                                    this.parent()
                                        .turbulence(t, e, i, a, r)
                                        .in(this)
                                );
                            },
                        };
                        SVG.extend(SVG.Effect, t),
                            SVG.extend(SVG.ParentEffect, t),
                            (SVG.ChildEffect = SVG.invent({
                                create: function () {
                                    this.constructor.call(this);
                                },
                                inherit: SVG.Element,
                                extend: {
                                    in: function (t) {
                                        this.attr("in", t);
                                    },
                                },
                            }));
                        var e = {
                                blend: function (t, e, i) {
                                    this.attr({
                                        in: t,
                                        in2: e,
                                        mode: i || "normal",
                                    });
                                },
                                colorMatrix: function (t, e) {
                                    "matrix" == t && (e = r(e)),
                                        this.attr({
                                            type: t,
                                            values: void 0 === e ? null : e,
                                        });
                                },
                                convolveMatrix: function (t) {
                                    (t = r(t)),
                                        this.attr({
                                            order: Math.sqrt(
                                                t.split(" ").length
                                            ),
                                            kernelMatrix: t,
                                        });
                                },
                                composite: function (t, e, i) {
                                    this.attr({ in: t, in2: e, operator: i });
                                },
                                flood: function (t, e) {
                                    this.attr("flood-color", t),
                                        null != e &&
                                            this.attr("flood-opacity", e);
                                },
                                offset: function (t, e) {
                                    this.attr({ dx: t, dy: e });
                                },
                                image: function (t) {
                                    this.attr("href", t, SVG.xlink);
                                },
                                displacementMap: function (t, e, i, a, r) {
                                    this.attr({
                                        in: t,
                                        in2: e,
                                        scale: i,
                                        xChannelSelector: a,
                                        yChannelSelector: r,
                                    });
                                },
                                gaussianBlur: function (t, e) {
                                    null != t || null != e
                                        ? this.attr(
                                              "stdDeviation",
                                              (function (t) {
                                                  if (!Array.isArray(t))
                                                      return t;
                                                  for (
                                                      var e = 0,
                                                          i = t.length,
                                                          a = [];
                                                      e < i;
                                                      e++
                                                  )
                                                      a.push(t[e]);
                                                  return a.join(" ");
                                              })(
                                                  Array.prototype.slice.call(
                                                      arguments
                                                  )
                                              )
                                          )
                                        : this.attr("stdDeviation", "0 0");
                                },
                                morphology: function (t, e) {
                                    this.attr({ operator: t, radius: e });
                                },
                                tile: function () {},
                                turbulence: function (t, e, i, a, r) {
                                    this.attr({
                                        numOctaves: e,
                                        seed: i,
                                        stitchTiles: a,
                                        baseFrequency: t,
                                        type: r,
                                    });
                                },
                            },
                            i = {
                                merge: function () {
                                    var t;
                                    if (arguments[0] instanceof SVG.Set) {
                                        var e = this;
                                        arguments[0].each(function (t) {
                                            this instanceof SVG.MergeNode
                                                ? e.put(this)
                                                : (this instanceof SVG.Effect ||
                                                      this instanceof
                                                          SVG.ParentEffect) &&
                                                  e.put(
                                                      new SVG.MergeNode(this)
                                                  );
                                        });
                                    } else {
                                        t = Array.isArray(arguments[0])
                                            ? arguments[0]
                                            : arguments;
                                        for (var i = 0; i < t.length; i++)
                                            t[i] instanceof SVG.MergeNode
                                                ? this.put(t[i])
                                                : this.put(
                                                      new SVG.MergeNode(t[i])
                                                  );
                                    }
                                },
                                componentTransfer: function (t) {
                                    if (
                                        ((this.rgb = new SVG.Set()),
                                        ["r", "g", "b", "a"].forEach(
                                            function (t) {
                                                (this[t] = new SVG[
                                                    "Func" + t.toUpperCase()
                                                ]("identity")),
                                                    this.rgb.add(this[t]),
                                                    this.node.appendChild(
                                                        this[t].node
                                                    );
                                            }.bind(this)
                                        ),
                                        t)
                                    )
                                        for (var e in (t.rgb &&
                                            (["r", "g", "b"].forEach(
                                                function (e) {
                                                    this[e].attr(t.rgb);
                                                }.bind(this)
                                            ),
                                            delete t.rgb),
                                        t))
                                            this[e].attr(t[e]);
                                },
                                diffuseLighting: function (t, e, i) {
                                    this.attr({
                                        surfaceScale: t,
                                        diffuseConstant: e,
                                        kernelUnitLength: i,
                                    });
                                },
                                specularLighting: function (t, e, i, a) {
                                    this.attr({
                                        surfaceScale: t,
                                        diffuseConstant: e,
                                        specularExponent: i,
                                        kernelUnitLength: a,
                                    });
                                },
                            },
                            a = {
                                distantLight: function (t, e) {
                                    this.attr({ azimuth: t, elevation: e });
                                },
                                pointLight: function (t, e, i) {
                                    this.attr({ x: t, y: e, z: i });
                                },
                                spotLight: function (t, e, i, a, r, s) {
                                    this.attr({
                                        x: t,
                                        y: e,
                                        z: i,
                                        pointsAtX: a,
                                        pointsAtY: r,
                                        pointsAtZ: s,
                                    });
                                },
                                mergeNode: function (t) {
                                    this.attr("in", t);
                                },
                            };
                        function r(t) {
                            return (
                                Array.isArray(t) && (t = new SVG.Array(t)),
                                t
                                    .toString()
                                    .replace(/^\s+/, "")
                                    .replace(/\s+$/, "")
                                    .replace(/\s+/g, " ")
                            );
                        }
                        function s() {
                            var t = function () {};
                            for (var e in ("function" ==
                                typeof arguments[arguments.length - 1] &&
                                ((t = arguments[arguments.length - 1]),
                                Array.prototype.splice.call(
                                    arguments,
                                    arguments.length - 1,
                                    1
                                )),
                            arguments))
                                for (var i in arguments[e])
                                    t(arguments[e][i], i, arguments[e]);
                        }
                        ["r", "g", "b", "a"].forEach(function (t) {
                            a["Func" + t.toUpperCase()] = function (t) {
                                switch ((this.attr("type", t), t)) {
                                    case "table":
                                        this.attr("tableValues", arguments[1]);
                                        break;
                                    case "linear":
                                        this.attr("slope", arguments[1]),
                                            this.attr(
                                                "intercept",
                                                arguments[2]
                                            );
                                        break;
                                    case "gamma":
                                        this.attr("amplitude", arguments[1]),
                                            this.attr("exponent", arguments[2]),
                                            this.attr("offset", arguments[2]);
                                }
                            };
                        }),
                            s(e, function (t, e) {
                                var i = e.charAt(0).toUpperCase() + e.slice(1);
                                SVG[i + "Effect"] = SVG.invent({
                                    create: function () {
                                        this.constructor.call(
                                            this,
                                            SVG.create("fe" + i)
                                        ),
                                            t.apply(this, arguments),
                                            this.result(
                                                this.attr("id") + "Out"
                                            );
                                    },
                                    inherit: SVG.Effect,
                                    extend: {},
                                });
                            }),
                            s(i, function (t, e) {
                                var i = e.charAt(0).toUpperCase() + e.slice(1);
                                SVG[i + "Effect"] = SVG.invent({
                                    create: function () {
                                        this.constructor.call(
                                            this,
                                            SVG.create("fe" + i)
                                        ),
                                            t.apply(this, arguments),
                                            this.result(
                                                this.attr("id") + "Out"
                                            );
                                    },
                                    inherit: SVG.ParentEffect,
                                    extend: {},
                                });
                            }),
                            s(a, function (t, e) {
                                var i = e.charAt(0).toUpperCase() + e.slice(1);
                                SVG[i] = SVG.invent({
                                    create: function () {
                                        this.constructor.call(
                                            this,
                                            SVG.create("fe" + i)
                                        ),
                                            t.apply(this, arguments);
                                    },
                                    inherit: SVG.ChildEffect,
                                    extend: {},
                                });
                            }),
                            SVG.extend(SVG.MergeEffect, {
                                in: function (t) {
                                    return (
                                        t instanceof SVG.MergeNode
                                            ? this.add(t, 0)
                                            : this.add(new SVG.MergeNode(t), 0),
                                        this
                                    );
                                },
                            }),
                            SVG.extend(
                                SVG.CompositeEffect,
                                SVG.BlendEffect,
                                SVG.DisplacementMapEffect,
                                {
                                    in2: function (t) {
                                        return null == t
                                            ? (this.parent() &&
                                                  this.parent()
                                                      .select(
                                                          '[result="' +
                                                              this.attr("in2") +
                                                              '"]'
                                                      )
                                                      .get(0)) ||
                                                  this.attr("in2")
                                            : this.attr("in2", t);
                                    },
                                }
                            ),
                            (SVG.filter = {
                                sepiatone: [
                                    0.343, 0.669, 0.119, 0, 0, 0.249, 0.626,
                                    0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0, 0,
                                    0, 1, 0,
                                ],
                            });
                    }.call(void 0),
                    (function () {
                        function t(t, r, s, n, o, l, c) {
                            for (
                                var h = t.slice(r, s || c),
                                    d = n.slice(o, l || c),
                                    u = 0,
                                    f = { pos: [0, 0], start: [0, 0] },
                                    g = { pos: [0, 0], start: [0, 0] };
                                (h[u] = e.call(f, h[u])),
                                    (d[u] = e.call(g, d[u])),
                                    h[u][0] != d[u][0] ||
                                    "M" == h[u][0] ||
                                    ("A" == h[u][0] &&
                                        (h[u][4] != d[u][4] ||
                                            h[u][5] != d[u][5]))
                                        ? (Array.prototype.splice.apply(
                                              h,
                                              [u, 1].concat(a.call(f, h[u]))
                                          ),
                                          Array.prototype.splice.apply(
                                              d,
                                              [u, 1].concat(a.call(g, d[u]))
                                          ))
                                        : ((h[u] = i.call(f, h[u])),
                                          (d[u] = i.call(g, d[u]))),
                                    ++u != h.length || u != d.length;

                            )
                                u == h.length &&
                                    h.push([
                                        "C",
                                        f.pos[0],
                                        f.pos[1],
                                        f.pos[0],
                                        f.pos[1],
                                        f.pos[0],
                                        f.pos[1],
                                    ]),
                                    u == d.length &&
                                        d.push([
                                            "C",
                                            g.pos[0],
                                            g.pos[1],
                                            g.pos[0],
                                            g.pos[1],
                                            g.pos[0],
                                            g.pos[1],
                                        ]);
                            return { start: h, dest: d };
                        }
                        function e(t) {
                            switch (t[0]) {
                                case "z":
                                case "Z":
                                    (t[0] = "L"),
                                        (t[1] = this.start[0]),
                                        (t[2] = this.start[1]);
                                    break;
                                case "H":
                                    (t[0] = "L"), (t[2] = this.pos[1]);
                                    break;
                                case "V":
                                    (t[0] = "L"),
                                        (t[2] = t[1]),
                                        (t[1] = this.pos[0]);
                                    break;
                                case "T":
                                    (t[0] = "Q"),
                                        (t[3] = t[1]),
                                        (t[4] = t[2]),
                                        (t[1] = this.reflection[1]),
                                        (t[2] = this.reflection[0]);
                                    break;
                                case "S":
                                    (t[0] = "C"),
                                        (t[6] = t[4]),
                                        (t[5] = t[3]),
                                        (t[4] = t[2]),
                                        (t[3] = t[1]),
                                        (t[2] = this.reflection[1]),
                                        (t[1] = this.reflection[0]);
                            }
                            return t;
                        }
                        function i(t) {
                            var e = t.length;
                            return (
                                (this.pos = [t[e - 2], t[e - 1]]),
                                -1 != "SCQT".indexOf(t[0]) &&
                                    (this.reflection = [
                                        2 * this.pos[0] - t[e - 4],
                                        2 * this.pos[1] - t[e - 3],
                                    ]),
                                t
                            );
                        }
                        function a(t) {
                            var e = [t];
                            switch (t[0]) {
                                case "M":
                                    return (
                                        (this.pos = this.start = [t[1], t[2]]),
                                        e
                                    );
                                case "L":
                                    (t[5] = t[3] = t[1]),
                                        (t[6] = t[4] = t[2]),
                                        (t[1] = this.pos[0]),
                                        (t[2] = this.pos[1]);
                                    break;
                                case "Q":
                                    (t[6] = t[4]),
                                        (t[5] = t[3]),
                                        (t[4] =
                                            (1 * t[4]) / 3 + (2 * t[2]) / 3),
                                        (t[3] =
                                            (1 * t[3]) / 3 + (2 * t[1]) / 3),
                                        (t[2] =
                                            (1 * this.pos[1]) / 3 +
                                            (2 * t[2]) / 3),
                                        (t[1] =
                                            (1 * this.pos[0]) / 3 +
                                            (2 * t[1]) / 3);
                                    break;
                                case "A":
                                    (e = (function (t, e) {
                                        var i,
                                            a,
                                            r,
                                            s,
                                            n,
                                            o,
                                            l,
                                            c,
                                            h,
                                            d,
                                            u,
                                            f,
                                            g,
                                            p,
                                            x,
                                            m,
                                            b,
                                            v,
                                            y,
                                            w,
                                            k,
                                            A,
                                            S,
                                            C,
                                            P,
                                            L,
                                            T = Math.abs(e[1]),
                                            M = Math.abs(e[2]),
                                            E = e[3] % 360,
                                            I = e[4],
                                            O = e[5],
                                            z = e[6],
                                            F = e[7],
                                            D = new SVG.Point(t),
                                            N = new SVG.Point(z, F),
                                            X = [];
                                        if (
                                            0 === T ||
                                            0 === M ||
                                            (D.x === N.x && D.y === N.y)
                                        )
                                            return [
                                                [
                                                    "C",
                                                    D.x,
                                                    D.y,
                                                    N.x,
                                                    N.y,
                                                    N.x,
                                                    N.y,
                                                ],
                                            ];
                                        for (
                                            (a =
                                                ((i = new SVG.Point(
                                                    (D.x - N.x) / 2,
                                                    (D.y - N.y) / 2
                                                ).transform(
                                                    new SVG.Matrix().rotate(E)
                                                )).x *
                                                    i.x) /
                                                    (T * T) +
                                                (i.y * i.y) / (M * M)) > 1 &&
                                                ((T *= a = Math.sqrt(a)),
                                                (M *= a)),
                                                r = new SVG.Matrix()
                                                    .rotate(E)
                                                    .scale(1 / T, 1 / M)
                                                    .rotate(-E),
                                                D = D.transform(r),
                                                o =
                                                    (s = [
                                                        (N = N.transform(r)).x -
                                                            D.x,
                                                        N.y - D.y,
                                                    ])[0] *
                                                        s[0] +
                                                    s[1] * s[1],
                                                n = Math.sqrt(o),
                                                s[0] /= n,
                                                s[1] /= n,
                                                l =
                                                    o < 4
                                                        ? Math.sqrt(1 - o / 4)
                                                        : 0,
                                                I === O && (l *= -1),
                                                c = new SVG.Point(
                                                    (N.x + D.x) / 2 + l * -s[1],
                                                    (N.y + D.y) / 2 + l * s[0]
                                                ),
                                                h = new SVG.Point(
                                                    D.x - c.x,
                                                    D.y - c.y
                                                ),
                                                d = new SVG.Point(
                                                    N.x - c.x,
                                                    N.y - c.y
                                                ),
                                                u = Math.acos(
                                                    h.x /
                                                        Math.sqrt(
                                                            h.x * h.x +
                                                                h.y * h.y
                                                        )
                                                ),
                                                h.y < 0 && (u *= -1),
                                                f = Math.acos(
                                                    d.x /
                                                        Math.sqrt(
                                                            d.x * d.x +
                                                                d.y * d.y
                                                        )
                                                ),
                                                d.y < 0 && (f *= -1),
                                                O &&
                                                    u > f &&
                                                    (f += 2 * Math.PI),
                                                !O &&
                                                    u < f &&
                                                    (f -= 2 * Math.PI),
                                                m = [],
                                                b = u,
                                                g =
                                                    (f - u) /
                                                    (p = Math.ceil(
                                                        (2 * Math.abs(u - f)) /
                                                            Math.PI
                                                    )),
                                                x = (4 * Math.tan(g / 4)) / 3,
                                                k = 0;
                                            k <= p;
                                            k++
                                        )
                                            (y = Math.cos(b)),
                                                (v = Math.sin(b)),
                                                (w = new SVG.Point(
                                                    c.x + y,
                                                    c.y + v
                                                )),
                                                (m[k] = [
                                                    new SVG.Point(
                                                        w.x + x * v,
                                                        w.y - x * y
                                                    ),
                                                    w,
                                                    new SVG.Point(
                                                        w.x - x * v,
                                                        w.y + x * y
                                                    ),
                                                ]),
                                                (b += g);
                                        for (
                                            m[0][0] = m[0][1].clone(),
                                                m[m.length - 1][2] =
                                                    m[m.length - 1][1].clone(),
                                                r = new SVG.Matrix()
                                                    .rotate(E)
                                                    .scale(T, M)
                                                    .rotate(-E),
                                                k = 0,
                                                A = m.length;
                                            k < A;
                                            k++
                                        )
                                            (m[k][0] = m[k][0].transform(r)),
                                                (m[k][1] =
                                                    m[k][1].transform(r)),
                                                (m[k][2] =
                                                    m[k][2].transform(r));
                                        for (k = 1, A = m.length; k < A; k++)
                                            (S = (w = m[k - 1][2]).x),
                                                (C = w.y),
                                                (P = (w = m[k][0]).x),
                                                (L = w.y),
                                                (z = (w = m[k][1]).x),
                                                (F = w.y),
                                                X.push(["C", S, C, P, L, z, F]);
                                        return X;
                                    })(this.pos, t)),
                                        (t = e[0]);
                            }
                            return (
                                (t[0] = "C"),
                                (this.pos = [t[5], t[6]]),
                                (this.reflection = [
                                    2 * t[5] - t[3],
                                    2 * t[6] - t[4],
                                ]),
                                e
                            );
                        }
                        function r(t, e) {
                            if (!1 === e) return !1;
                            for (var i = e, a = t.length; i < a; ++i)
                                if ("M" == t[i][0]) return i;
                            return !1;
                        }
                        SVG.extend(SVG.PathArray, {
                            morph: function (e) {
                                for (
                                    var i = this.value,
                                        a = this.parse(e),
                                        s = 0,
                                        n = 0,
                                        o = !1,
                                        l = !1;
                                    !1 !== s || !1 !== n;

                                ) {
                                    var c;
                                    (o = r(i, !1 !== s && s + 1)),
                                        (l = r(a, !1 !== n && n + 1)),
                                        !1 === s &&
                                            (s =
                                                0 ==
                                                    (c = new SVG.PathArray(
                                                        h.start
                                                    ).bbox()).height ||
                                                0 == c.width
                                                    ? i.push(i[0]) - 1
                                                    : i.push([
                                                          "M",
                                                          c.x + c.width / 2,
                                                          c.y + c.height / 2,
                                                      ]) - 1),
                                        !1 === n &&
                                            (n =
                                                0 ==
                                                    (c = new SVG.PathArray(
                                                        h.dest
                                                    ).bbox()).height ||
                                                0 == c.width
                                                    ? a.push(a[0]) - 1
                                                    : a.push([
                                                          "M",
                                                          c.x + c.width / 2,
                                                          c.y + c.height / 2,
                                                      ]) - 1);
                                    var h = t(i, s, o, a, n, l);
                                    (i = i
                                        .slice(0, s)
                                        .concat(
                                            h.start,
                                            !1 === o ? [] : i.slice(o)
                                        )),
                                        (a = a
                                            .slice(0, n)
                                            .concat(
                                                h.dest,
                                                !1 === l ? [] : a.slice(l)
                                            )),
                                        (s = !1 !== o && s + h.start.length),
                                        (n = !1 !== l && n + h.dest.length);
                                }
                                return (
                                    (this.value = i),
                                    (this.destination = new SVG.PathArray()),
                                    (this.destination.value = a),
                                    this
                                );
                            },
                        });
                    })(),
                    function () {
                        function t(t) {
                            t.remember("_draggable", this), (this.el = t);
                        }
                        (t.prototype.init = function (t, e) {
                            var i = this;
                            (this.constraint = t),
                                (this.value = e),
                                this.el.on("mousedown.drag", function (t) {
                                    i.start(t);
                                }),
                                this.el.on("touchstart.drag", function (t) {
                                    i.start(t);
                                });
                        }),
                            (t.prototype.transformPoint = function (t, e) {
                                var i =
                                    ((t = t || window.event).changedTouches &&
                                        t.changedTouches[0]) ||
                                    t;
                                return (
                                    (this.p.x = i.clientX - (e || 0)),
                                    (this.p.y = i.clientY),
                                    this.p.matrixTransform(this.m)
                                );
                            }),
                            (t.prototype.getBBox = function () {
                                var t = this.el.bbox();
                                return (
                                    this.el instanceof SVG.Nested &&
                                        (t = this.el.rbox()),
                                    (this.el instanceof SVG.G ||
                                        this.el instanceof SVG.Use ||
                                        this.el instanceof SVG.Nested) &&
                                        ((t.x = this.el.x()),
                                        (t.y = this.el.y())),
                                    t
                                );
                            }),
                            (t.prototype.start = function (t) {
                                if (
                                    ("click" != t.type &&
                                        "mousedown" != t.type &&
                                        "mousemove" != t.type) ||
                                    1 == (t.which || t.buttons)
                                ) {
                                    var e = this;
                                    if (
                                        (this.el.fire("beforedrag", {
                                            event: t,
                                            handler: this,
                                        }),
                                        !this.el.event().defaultPrevented)
                                    ) {
                                        t.preventDefault(),
                                            t.stopPropagation(),
                                            (this.parent =
                                                this.parent ||
                                                this.el.parent(SVG.Nested) ||
                                                this.el.parent(SVG.Doc)),
                                            (this.p =
                                                this.parent.node.createSVGPoint()),
                                            (this.m = this.el.node
                                                .getScreenCTM()
                                                .inverse());
                                        var i,
                                            a = this.getBBox();
                                        if (this.el instanceof SVG.Text)
                                            switch (
                                                ((i =
                                                    this.el.node.getComputedTextLength()),
                                                this.el.attr("text-anchor"))
                                            ) {
                                                case "middle":
                                                    i /= 2;
                                                    break;
                                                case "start":
                                                    i = 0;
                                            }
                                        (this.startPoints = {
                                            point: this.transformPoint(t, i),
                                            box: a,
                                            transform: this.el.transform(),
                                        }),
                                            SVG.on(
                                                window,
                                                "mousemove.drag",
                                                function (t) {
                                                    e.drag(t);
                                                }
                                            ),
                                            SVG.on(
                                                window,
                                                "touchmove.drag",
                                                function (t) {
                                                    e.drag(t);
                                                }
                                            ),
                                            SVG.on(
                                                window,
                                                "mouseup.drag",
                                                function (t) {
                                                    e.end(t);
                                                }
                                            ),
                                            SVG.on(
                                                window,
                                                "touchend.drag",
                                                function (t) {
                                                    e.end(t);
                                                }
                                            ),
                                            this.el.fire("dragstart", {
                                                event: t,
                                                p: this.startPoints.point,
                                                m: this.m,
                                                handler: this,
                                            });
                                    }
                                }
                            }),
                            (t.prototype.drag = function (t) {
                                var e = this.getBBox(),
                                    i = this.transformPoint(t),
                                    a =
                                        this.startPoints.box.x +
                                        i.x -
                                        this.startPoints.point.x,
                                    r =
                                        this.startPoints.box.y +
                                        i.y -
                                        this.startPoints.point.y,
                                    s = this.constraint,
                                    n = i.x - this.startPoints.point.x,
                                    o = i.y - this.startPoints.point.y;
                                if (
                                    (this.el.fire("dragmove", {
                                        event: t,
                                        p: i,
                                        m: this.m,
                                        handler: this,
                                    }),
                                    this.el.event().defaultPrevented)
                                )
                                    return i;
                                if ("function" == typeof s) {
                                    var l = s.call(this.el, a, r, this.m);
                                    "boolean" == typeof l &&
                                        (l = { x: l, y: l }),
                                        !0 === l.x
                                            ? this.el.x(a)
                                            : !1 !== l.x && this.el.x(l.x),
                                        !0 === l.y
                                            ? this.el.y(r)
                                            : !1 !== l.y && this.el.y(l.y);
                                } else
                                    "object" == typeof s &&
                                        (null != s.minX && a < s.minX
                                            ? (n =
                                                  (a = s.minX) -
                                                  this.startPoints.box.x)
                                            : null != s.maxX &&
                                              a > s.maxX - e.width &&
                                              (n =
                                                  (a = s.maxX - e.width) -
                                                  this.startPoints.box.x),
                                        null != s.minY && r < s.minY
                                            ? (o =
                                                  (r = s.minY) -
                                                  this.startPoints.box.y)
                                            : null != s.maxY &&
                                              r > s.maxY - e.height &&
                                              (o =
                                                  (r = s.maxY - e.height) -
                                                  this.startPoints.box.y),
                                        null != s.snapToGrid &&
                                            ((a -= a % s.snapToGrid),
                                            (r -= r % s.snapToGrid),
                                            (n -= n % s.snapToGrid),
                                            (o -= o % s.snapToGrid)),
                                        this.el instanceof SVG.G
                                            ? this.el
                                                  .matrix(
                                                      this.startPoints.transform
                                                  )
                                                  .transform({ x: n, y: o }, !0)
                                            : this.el.move(a, r));
                                return i;
                            }),
                            (t.prototype.end = function (t) {
                                var e = this.drag(t);
                                this.el.fire("dragend", {
                                    event: t,
                                    p: e,
                                    m: this.m,
                                    handler: this,
                                }),
                                    SVG.off(window, "mousemove.drag"),
                                    SVG.off(window, "touchmove.drag"),
                                    SVG.off(window, "mouseup.drag"),
                                    SVG.off(window, "touchend.drag");
                            }),
                            SVG.extend(SVG.Element, {
                                draggable: function (e, i) {
                                    ("function" != typeof e &&
                                        "object" != typeof e) ||
                                        ((i = e), (e = !0));
                                    var a =
                                        this.remember("_draggable") ||
                                        new t(this);
                                    return (
                                        (e = void 0 === e || e)
                                            ? a.init(i || {}, e)
                                            : (this.off("mousedown.drag"),
                                              this.off("touchstart.drag")),
                                        this
                                    );
                                },
                            });
                    }.call(void 0),
                    (function () {
                        function t(t) {
                            (this.el = t),
                                t.remember("_selectHandler", this),
                                (this.pointSelection = { isSelected: !1 }),
                                (this.rectSelection = { isSelected: !1 }),
                                (this.pointsList = {
                                    lt: [0, 0],
                                    rt: ["width", 0],
                                    rb: ["width", "height"],
                                    lb: [0, "height"],
                                    t: ["width", 0],
                                    r: ["width", "height"],
                                    b: ["width", "height"],
                                    l: [0, "height"],
                                }),
                                (this.pointCoord = function (t, e, i) {
                                    var a = "string" != typeof t ? t : e[t];
                                    return i ? a / 2 : a;
                                }),
                                (this.pointCoords = function (t, e) {
                                    var i = this.pointsList[t];
                                    return {
                                        x: this.pointCoord(
                                            i[0],
                                            e,
                                            "t" === t || "b" === t
                                        ),
                                        y: this.pointCoord(
                                            i[1],
                                            e,
                                            "r" === t || "l" === t
                                        ),
                                    };
                                });
                        }
                        (t.prototype.init = function (t, e) {
                            var i = this.el.bbox();
                            this.options = {};
                            var a = this.el.selectize.defaults.points;
                            for (var r in this.el.selectize.defaults)
                                (this.options[r] =
                                    this.el.selectize.defaults[r]),
                                    void 0 !== e[r] && (this.options[r] = e[r]);
                            var s = ["points", "pointsExclude"];
                            for (var r in s) {
                                var n = this.options[s[r]];
                                "string" == typeof n
                                    ? (n =
                                          n.length > 0
                                              ? n.split(/\s*,\s*/i)
                                              : [])
                                    : "boolean" == typeof n &&
                                      "points" === s[r] &&
                                      (n = n ? a : []),
                                    (this.options[s[r]] = n);
                            }
                            (this.options.points = [
                                a,
                                this.options.points,
                            ].reduce(function (t, e) {
                                return t.filter(function (t) {
                                    return e.indexOf(t) > -1;
                                });
                            })),
                                (this.options.points = [
                                    this.options.points,
                                    this.options.pointsExclude,
                                ].reduce(function (t, e) {
                                    return t.filter(function (t) {
                                        return e.indexOf(t) < 0;
                                    });
                                })),
                                (this.parent = this.el.parent()),
                                (this.nested =
                                    this.nested || this.parent.group()),
                                this.nested.matrix(
                                    new SVG.Matrix(this.el).translate(i.x, i.y)
                                ),
                                this.options.deepSelect &&
                                -1 !==
                                    ["line", "polyline", "polygon"].indexOf(
                                        this.el.type
                                    )
                                    ? this.selectPoints(t)
                                    : this.selectRect(t),
                                this.observe(),
                                this.cleanup();
                        }),
                            (t.prototype.selectPoints = function (t) {
                                return (
                                    (this.pointSelection.isSelected = t),
                                    this.pointSelection.set ||
                                        ((this.pointSelection.set =
                                            this.parent.set()),
                                        this.drawPoints()),
                                    this
                                );
                            }),
                            (t.prototype.getPointArray = function () {
                                var t = this.el.bbox();
                                return this.el
                                    .array()
                                    .valueOf()
                                    .map(function (e) {
                                        return [e[0] - t.x, e[1] - t.y];
                                    });
                            }),
                            (t.prototype.drawPoints = function () {
                                for (
                                    var t = this,
                                        e = this.getPointArray(),
                                        i = 0,
                                        a = e.length;
                                    i < a;
                                    ++i
                                ) {
                                    var r = (function (e) {
                                            return function (i) {
                                                (i = i || window.event)
                                                    .preventDefault
                                                    ? i.preventDefault()
                                                    : (i.returnValue = !1),
                                                    i.stopPropagation();
                                                var a =
                                                        i.pageX ||
                                                        i.touches[0].pageX,
                                                    r =
                                                        i.pageY ||
                                                        i.touches[0].pageY;
                                                t.el.fire("point", {
                                                    x: a,
                                                    y: r,
                                                    i: e,
                                                    event: i,
                                                });
                                            };
                                        })(i),
                                        s = this.drawPoint(e[i][0], e[i][1])
                                            .addClass(this.options.classPoints)
                                            .addClass(
                                                this.options.classPoints +
                                                    "_point"
                                            )
                                            .on("touchstart", r)
                                            .on("mousedown", r);
                                    this.pointSelection.set.add(s);
                                }
                            }),
                            (t.prototype.drawPoint = function (t, e) {
                                var i = this.options.pointType;
                                switch (i) {
                                    case "circle":
                                        return this.drawCircle(t, e);
                                    case "rect":
                                        return this.drawRect(t, e);
                                    default:
                                        if ("function" == typeof i)
                                            return i.call(this, t, e);
                                        throw new Error(
                                            "Unknown " + i + " point type!"
                                        );
                                }
                            }),
                            (t.prototype.drawCircle = function (t, e) {
                                return this.nested
                                    .circle(this.options.pointSize)
                                    .center(t, e);
                            }),
                            (t.prototype.drawRect = function (t, e) {
                                return this.nested
                                    .rect(
                                        this.options.pointSize,
                                        this.options.pointSize
                                    )
                                    .center(t, e);
                            }),
                            (t.prototype.updatePointSelection = function () {
                                var t = this.getPointArray();
                                this.pointSelection.set.each(function (e) {
                                    (this.cx() === t[e][0] &&
                                        this.cy() === t[e][1]) ||
                                        this.center(t[e][0], t[e][1]);
                                });
                            }),
                            (t.prototype.updateRectSelection = function () {
                                var t = this,
                                    e = this.el.bbox();
                                if (
                                    (this.rectSelection.set
                                        .get(0)
                                        .attr({
                                            width: e.width,
                                            height: e.height,
                                        }),
                                    this.options.points.length &&
                                        this.options.points.map(function (
                                            i,
                                            a
                                        ) {
                                            var r = t.pointCoords(i, e);
                                            t.rectSelection.set
                                                .get(a + 1)
                                                .center(r.x, r.y);
                                        }),
                                    this.options.rotationPoint)
                                ) {
                                    var i = this.rectSelection.set.length();
                                    this.rectSelection.set
                                        .get(i - 1)
                                        .center(e.width / 2, 20);
                                }
                            }),
                            (t.prototype.selectRect = function (t) {
                                var e = this,
                                    i = this.el.bbox();
                                function a(t) {
                                    return function (i) {
                                        (i = i || window.event).preventDefault
                                            ? i.preventDefault()
                                            : (i.returnValue = !1),
                                            i.stopPropagation();
                                        var a = i.pageX || i.touches[0].pageX,
                                            r = i.pageY || i.touches[0].pageY;
                                        e.el.fire(t, { x: a, y: r, event: i });
                                    };
                                }
                                if (
                                    ((this.rectSelection.isSelected = t),
                                    (this.rectSelection.set =
                                        this.rectSelection.set ||
                                        this.parent.set()),
                                    this.rectSelection.set.get(0) ||
                                        this.rectSelection.set.add(
                                            this.nested
                                                .rect(i.width, i.height)
                                                .addClass(
                                                    this.options.classRect
                                                )
                                        ),
                                    this.options.points.length &&
                                        this.rectSelection.set.length() < 2 &&
                                        (this.options.points.map(function (
                                            t,
                                            r
                                        ) {
                                            var s = e.pointCoords(t, i),
                                                n = e
                                                    .drawPoint(s.x, s.y)
                                                    .attr(
                                                        "class",
                                                        e.options.classPoints +
                                                            "_" +
                                                            t
                                                    )
                                                    .on("mousedown", a(t))
                                                    .on("touchstart", a(t));
                                            e.rectSelection.set.add(n);
                                        }),
                                        this.rectSelection.set.each(
                                            function () {
                                                this.addClass(
                                                    e.options.classPoints
                                                );
                                            }
                                        )),
                                    this.options.rotationPoint &&
                                        ((this.options.points &&
                                            !this.rectSelection.set.get(9)) ||
                                            (!this.options.points &&
                                                !this.rectSelection.set.get(
                                                    1
                                                ))))
                                ) {
                                    var r = function (t) {
                                            (t = t || window.event)
                                                .preventDefault
                                                ? t.preventDefault()
                                                : (t.returnValue = !1),
                                                t.stopPropagation();
                                            var i =
                                                    t.pageX ||
                                                    t.touches[0].pageX,
                                                a =
                                                    t.pageY ||
                                                    t.touches[0].pageY;
                                            e.el.fire("rot", {
                                                x: i,
                                                y: a,
                                                event: t,
                                            });
                                        },
                                        s = this.drawPoint(i.width / 2, 20)
                                            .attr(
                                                "class",
                                                this.options.classPoints +
                                                    "_rot"
                                            )
                                            .on("touchstart", r)
                                            .on("mousedown", r);
                                    this.rectSelection.set.add(s);
                                }
                            }),
                            (t.prototype.handler = function () {
                                var t = this.el.bbox();
                                this.nested.matrix(
                                    new SVG.Matrix(this.el).translate(t.x, t.y)
                                ),
                                    this.rectSelection.isSelected &&
                                        this.updateRectSelection(),
                                    this.pointSelection.isSelected &&
                                        this.updatePointSelection();
                            }),
                            (t.prototype.observe = function () {
                                var t = this;
                                if (MutationObserver)
                                    if (
                                        this.rectSelection.isSelected ||
                                        this.pointSelection.isSelected
                                    )
                                        (this.observerInst =
                                            this.observerInst ||
                                            new MutationObserver(function () {
                                                t.handler();
                                            })),
                                            this.observerInst.observe(
                                                this.el.node,
                                                { attributes: !0 }
                                            );
                                    else
                                        try {
                                            this.observerInst.disconnect(),
                                                delete this.observerInst;
                                        } catch (t) {}
                                else
                                    this.el.off("DOMAttrModified.select"),
                                        (this.rectSelection.isSelected ||
                                            this.pointSelection.isSelected) &&
                                            this.el.on(
                                                "DOMAttrModified.select",
                                                function () {
                                                    t.handler();
                                                }
                                            );
                            }),
                            (t.prototype.cleanup = function () {
                                !this.rectSelection.isSelected &&
                                    this.rectSelection.set &&
                                    (this.rectSelection.set.each(function () {
                                        this.remove();
                                    }),
                                    this.rectSelection.set.clear(),
                                    delete this.rectSelection.set),
                                    !this.pointSelection.isSelected &&
                                        this.pointSelection.set &&
                                        (this.pointSelection.set.each(
                                            function () {
                                                this.remove();
                                            }
                                        ),
                                        this.pointSelection.set.clear(),
                                        delete this.pointSelection.set),
                                    this.pointSelection.isSelected ||
                                        this.rectSelection.isSelected ||
                                        (this.nested.remove(),
                                        delete this.nested);
                            }),
                            SVG.extend(SVG.Element, {
                                selectize: function (e, i) {
                                    return (
                                        "object" == typeof e &&
                                            ((i = e), (e = !0)),
                                        (
                                            this.remember("_selectHandler") ||
                                            new t(this)
                                        ).init(void 0 === e || e, i || {}),
                                        this
                                    );
                                },
                            }),
                            (SVG.Element.prototype.selectize.defaults = {
                                points: [
                                    "lt",
                                    "rt",
                                    "rb",
                                    "lb",
                                    "t",
                                    "r",
                                    "b",
                                    "l",
                                ],
                                pointsExclude: [],
                                classRect: "svg_select_boundingRect",
                                classPoints: "svg_select_points",
                                pointSize: 7,
                                rotationPoint: !0,
                                deepSelect: !1,
                                pointType: "circle",
                            });
                    })(),
                    (function () {
                        (function () {
                            function t(t) {
                                t.remember("_resizeHandler", this),
                                    (this.el = t),
                                    (this.parameters = {}),
                                    (this.lastUpdateCall = null),
                                    (this.p = t.doc().node.createSVGPoint());
                            }
                            (t.prototype.transformPoint = function (t, e, i) {
                                return (
                                    (this.p.x =
                                        t -
                                        (this.offset.x - window.pageXOffset)),
                                    (this.p.y =
                                        e -
                                        (this.offset.y - window.pageYOffset)),
                                    this.p.matrixTransform(i || this.m)
                                );
                            }),
                                (t.prototype._extractPosition = function (t) {
                                    return {
                                        x:
                                            null != t.clientX
                                                ? t.clientX
                                                : t.touches[0].clientX,
                                        y:
                                            null != t.clientY
                                                ? t.clientY
                                                : t.touches[0].clientY,
                                    };
                                }),
                                (t.prototype.init = function (t) {
                                    var e = this;
                                    if ((this.stop(), "stop" !== t)) {
                                        for (var i in ((this.options = {}),
                                        this.el.resize.defaults))
                                            (this.options[i] =
                                                this.el.resize.defaults[i]),
                                                void 0 !== t[i] &&
                                                    (this.options[i] = t[i]);
                                        this.el.on("lt.resize", function (t) {
                                            e.resize(t || window.event);
                                        }),
                                            this.el.on(
                                                "rt.resize",
                                                function (t) {
                                                    e.resize(t || window.event);
                                                }
                                            ),
                                            this.el.on(
                                                "rb.resize",
                                                function (t) {
                                                    e.resize(t || window.event);
                                                }
                                            ),
                                            this.el.on(
                                                "lb.resize",
                                                function (t) {
                                                    e.resize(t || window.event);
                                                }
                                            ),
                                            this.el.on(
                                                "t.resize",
                                                function (t) {
                                                    e.resize(t || window.event);
                                                }
                                            ),
                                            this.el.on(
                                                "r.resize",
                                                function (t) {
                                                    e.resize(t || window.event);
                                                }
                                            ),
                                            this.el.on(
                                                "b.resize",
                                                function (t) {
                                                    e.resize(t || window.event);
                                                }
                                            ),
                                            this.el.on(
                                                "l.resize",
                                                function (t) {
                                                    e.resize(t || window.event);
                                                }
                                            ),
                                            this.el.on(
                                                "rot.resize",
                                                function (t) {
                                                    e.resize(t || window.event);
                                                }
                                            ),
                                            this.el.on(
                                                "point.resize",
                                                function (t) {
                                                    e.resize(t || window.event);
                                                }
                                            ),
                                            this.update();
                                    }
                                }),
                                (t.prototype.stop = function () {
                                    return (
                                        this.el.off("lt.resize"),
                                        this.el.off("rt.resize"),
                                        this.el.off("rb.resize"),
                                        this.el.off("lb.resize"),
                                        this.el.off("t.resize"),
                                        this.el.off("r.resize"),
                                        this.el.off("b.resize"),
                                        this.el.off("l.resize"),
                                        this.el.off("rot.resize"),
                                        this.el.off("point.resize"),
                                        this
                                    );
                                }),
                                (t.prototype.resize = function (t) {
                                    var e = this;
                                    (this.m = this.el.node
                                        .getScreenCTM()
                                        .inverse()),
                                        (this.offset = {
                                            x: window.pageXOffset,
                                            y: window.pageYOffset,
                                        });
                                    var i = this._extractPosition(
                                        t.detail.event
                                    );
                                    if (
                                        ((this.parameters = {
                                            type: this.el.type,
                                            p: this.transformPoint(i.x, i.y),
                                            x: t.detail.x,
                                            y: t.detail.y,
                                            box: this.el.bbox(),
                                            rotation:
                                                this.el.transform().rotation,
                                        }),
                                        "text" === this.el.type &&
                                            (this.parameters.fontSize =
                                                this.el.attr()["font-size"]),
                                        void 0 !== t.detail.i)
                                    ) {
                                        var a = this.el.array().valueOf();
                                        (this.parameters.i = t.detail.i),
                                            (this.parameters.pointCoords = [
                                                a[t.detail.i][0],
                                                a[t.detail.i][1],
                                            ]);
                                    }
                                    switch (t.type) {
                                        case "lt":
                                            this.calc = function (t, e) {
                                                var i = this.snapToGrid(t, e);
                                                if (
                                                    this.parameters.box.width -
                                                        i[0] >
                                                        0 &&
                                                    this.parameters.box.height -
                                                        i[1] >
                                                        0
                                                ) {
                                                    if (
                                                        "text" ===
                                                        this.parameters.type
                                                    )
                                                        return (
                                                            this.el.move(
                                                                this.parameters
                                                                    .box.x +
                                                                    i[0],
                                                                this.parameters
                                                                    .box.y
                                                            ),
                                                            void this.el.attr(
                                                                "font-size",
                                                                this.parameters
                                                                    .fontSize -
                                                                    i[0]
                                                            )
                                                        );
                                                    (i =
                                                        this.checkAspectRatio(
                                                            i
                                                        )),
                                                        this.el
                                                            .move(
                                                                this.parameters
                                                                    .box.x +
                                                                    i[0],
                                                                this.parameters
                                                                    .box.y +
                                                                    i[1]
                                                            )
                                                            .size(
                                                                this.parameters
                                                                    .box.width -
                                                                    i[0],
                                                                this.parameters
                                                                    .box
                                                                    .height -
                                                                    i[1]
                                                            );
                                                }
                                            };
                                            break;
                                        case "rt":
                                            this.calc = function (t, e) {
                                                var i = this.snapToGrid(
                                                    t,
                                                    e,
                                                    2
                                                );
                                                if (
                                                    this.parameters.box.width +
                                                        i[0] >
                                                        0 &&
                                                    this.parameters.box.height -
                                                        i[1] >
                                                        0
                                                ) {
                                                    if (
                                                        "text" ===
                                                        this.parameters.type
                                                    )
                                                        return (
                                                            this.el.move(
                                                                this.parameters
                                                                    .box.x -
                                                                    i[0],
                                                                this.parameters
                                                                    .box.y
                                                            ),
                                                            void this.el.attr(
                                                                "font-size",
                                                                this.parameters
                                                                    .fontSize +
                                                                    i[0]
                                                            )
                                                        );
                                                    (i = this.checkAspectRatio(
                                                        i,
                                                        !0
                                                    )),
                                                        this.el
                                                            .move(
                                                                this.parameters
                                                                    .box.x,
                                                                this.parameters
                                                                    .box.y +
                                                                    i[1]
                                                            )
                                                            .size(
                                                                this.parameters
                                                                    .box.width +
                                                                    i[0],
                                                                this.parameters
                                                                    .box
                                                                    .height -
                                                                    i[1]
                                                            );
                                                }
                                            };
                                            break;
                                        case "rb":
                                            this.calc = function (t, e) {
                                                var i = this.snapToGrid(
                                                    t,
                                                    e,
                                                    0
                                                );
                                                if (
                                                    this.parameters.box.width +
                                                        i[0] >
                                                        0 &&
                                                    this.parameters.box.height +
                                                        i[1] >
                                                        0
                                                ) {
                                                    if (
                                                        "text" ===
                                                        this.parameters.type
                                                    )
                                                        return (
                                                            this.el.move(
                                                                this.parameters
                                                                    .box.x -
                                                                    i[0],
                                                                this.parameters
                                                                    .box.y
                                                            ),
                                                            void this.el.attr(
                                                                "font-size",
                                                                this.parameters
                                                                    .fontSize +
                                                                    i[0]
                                                            )
                                                        );
                                                    (i =
                                                        this.checkAspectRatio(
                                                            i
                                                        )),
                                                        this.el
                                                            .move(
                                                                this.parameters
                                                                    .box.x,
                                                                this.parameters
                                                                    .box.y
                                                            )
                                                            .size(
                                                                this.parameters
                                                                    .box.width +
                                                                    i[0],
                                                                this.parameters
                                                                    .box
                                                                    .height +
                                                                    i[1]
                                                            );
                                                }
                                            };
                                            break;
                                        case "lb":
                                            this.calc = function (t, e) {
                                                var i = this.snapToGrid(
                                                    t,
                                                    e,
                                                    1
                                                );
                                                if (
                                                    this.parameters.box.width -
                                                        i[0] >
                                                        0 &&
                                                    this.parameters.box.height +
                                                        i[1] >
                                                        0
                                                ) {
                                                    if (
                                                        "text" ===
                                                        this.parameters.type
                                                    )
                                                        return (
                                                            this.el.move(
                                                                this.parameters
                                                                    .box.x +
                                                                    i[0],
                                                                this.parameters
                                                                    .box.y
                                                            ),
                                                            void this.el.attr(
                                                                "font-size",
                                                                this.parameters
                                                                    .fontSize -
                                                                    i[0]
                                                            )
                                                        );
                                                    (i = this.checkAspectRatio(
                                                        i,
                                                        !0
                                                    )),
                                                        this.el
                                                            .move(
                                                                this.parameters
                                                                    .box.x +
                                                                    i[0],
                                                                this.parameters
                                                                    .box.y
                                                            )
                                                            .size(
                                                                this.parameters
                                                                    .box.width -
                                                                    i[0],
                                                                this.parameters
                                                                    .box
                                                                    .height +
                                                                    i[1]
                                                            );
                                                }
                                            };
                                            break;
                                        case "t":
                                            this.calc = function (t, e) {
                                                var i = this.snapToGrid(
                                                    t,
                                                    e,
                                                    2
                                                );
                                                if (
                                                    this.parameters.box.height -
                                                        i[1] >
                                                    0
                                                ) {
                                                    if (
                                                        "text" ===
                                                        this.parameters.type
                                                    )
                                                        return;
                                                    this.el
                                                        .move(
                                                            this.parameters.box
                                                                .x,
                                                            this.parameters.box
                                                                .y + i[1]
                                                        )
                                                        .height(
                                                            this.parameters.box
                                                                .height - i[1]
                                                        );
                                                }
                                            };
                                            break;
                                        case "r":
                                            this.calc = function (t, e) {
                                                var i = this.snapToGrid(
                                                    t,
                                                    e,
                                                    0
                                                );
                                                if (
                                                    this.parameters.box.width +
                                                        i[0] >
                                                    0
                                                ) {
                                                    if (
                                                        "text" ===
                                                        this.parameters.type
                                                    )
                                                        return;
                                                    this.el
                                                        .move(
                                                            this.parameters.box
                                                                .x,
                                                            this.parameters.box
                                                                .y
                                                        )
                                                        .width(
                                                            this.parameters.box
                                                                .width + i[0]
                                                        );
                                                }
                                            };
                                            break;
                                        case "b":
                                            this.calc = function (t, e) {
                                                var i = this.snapToGrid(
                                                    t,
                                                    e,
                                                    0
                                                );
                                                if (
                                                    this.parameters.box.height +
                                                        i[1] >
                                                    0
                                                ) {
                                                    if (
                                                        "text" ===
                                                        this.parameters.type
                                                    )
                                                        return;
                                                    this.el
                                                        .move(
                                                            this.parameters.box
                                                                .x,
                                                            this.parameters.box
                                                                .y
                                                        )
                                                        .height(
                                                            this.parameters.box
                                                                .height + i[1]
                                                        );
                                                }
                                            };
                                            break;
                                        case "l":
                                            this.calc = function (t, e) {
                                                var i = this.snapToGrid(
                                                    t,
                                                    e,
                                                    1
                                                );
                                                if (
                                                    this.parameters.box.width -
                                                        i[0] >
                                                    0
                                                ) {
                                                    if (
                                                        "text" ===
                                                        this.parameters.type
                                                    )
                                                        return;
                                                    this.el
                                                        .move(
                                                            this.parameters.box
                                                                .x + i[0],
                                                            this.parameters.box
                                                                .y
                                                        )
                                                        .width(
                                                            this.parameters.box
                                                                .width - i[0]
                                                        );
                                                }
                                            };
                                            break;
                                        case "rot":
                                            this.calc = function (t, e) {
                                                var i = t + this.parameters.p.x,
                                                    a = e + this.parameters.p.y,
                                                    r = Math.atan2(
                                                        this.parameters.p.y -
                                                            this.parameters.box
                                                                .y -
                                                            this.parameters.box
                                                                .height /
                                                                2,
                                                        this.parameters.p.x -
                                                            this.parameters.box
                                                                .x -
                                                            this.parameters.box
                                                                .width /
                                                                2
                                                    ),
                                                    s = Math.atan2(
                                                        a -
                                                            this.parameters.box
                                                                .y -
                                                            this.parameters.box
                                                                .height /
                                                                2,
                                                        i -
                                                            this.parameters.box
                                                                .x -
                                                            this.parameters.box
                                                                .width /
                                                                2
                                                    ),
                                                    n =
                                                        this.parameters
                                                            .rotation +
                                                        (180 * (s - r)) /
                                                            Math.PI +
                                                        this.options
                                                            .snapToAngle /
                                                            2;
                                                this.el
                                                    .center(
                                                        this.parameters.box.cx,
                                                        this.parameters.box.cy
                                                    )
                                                    .rotate(
                                                        n -
                                                            (n %
                                                                this.options
                                                                    .snapToAngle),
                                                        this.parameters.box.cx,
                                                        this.parameters.box.cy
                                                    );
                                            };
                                            break;
                                        case "point":
                                            this.calc = function (t, e) {
                                                var i = this.snapToGrid(
                                                        t,
                                                        e,
                                                        this.parameters
                                                            .pointCoords[0],
                                                        this.parameters
                                                            .pointCoords[1]
                                                    ),
                                                    a = this.el
                                                        .array()
                                                        .valueOf();
                                                (a[this.parameters.i][0] =
                                                    this.parameters
                                                        .pointCoords[0] + i[0]),
                                                    (a[this.parameters.i][1] =
                                                        this.parameters
                                                            .pointCoords[1] +
                                                        i[1]),
                                                    this.el.plot(a);
                                            };
                                    }
                                    this.el.fire("resizestart", {
                                        dx: this.parameters.x,
                                        dy: this.parameters.y,
                                        event: t,
                                    }),
                                        SVG.on(
                                            window,
                                            "touchmove.resize",
                                            function (t) {
                                                e.update(t || window.event);
                                            }
                                        ),
                                        SVG.on(
                                            window,
                                            "touchend.resize",
                                            function () {
                                                e.done();
                                            }
                                        ),
                                        SVG.on(
                                            window,
                                            "mousemove.resize",
                                            function (t) {
                                                e.update(t || window.event);
                                            }
                                        ),
                                        SVG.on(
                                            window,
                                            "mouseup.resize",
                                            function () {
                                                e.done();
                                            }
                                        );
                                }),
                                (t.prototype.update = function (t) {
                                    if (t) {
                                        var e = this._extractPosition(t),
                                            i = this.transformPoint(e.x, e.y),
                                            a = i.x - this.parameters.p.x,
                                            r = i.y - this.parameters.p.y;
                                        (this.lastUpdateCall = [a, r]),
                                            this.calc(a, r),
                                            this.el.fire("resizing", {
                                                dx: a,
                                                dy: r,
                                                event: t,
                                            });
                                    } else
                                        this.lastUpdateCall &&
                                            this.calc(
                                                this.lastUpdateCall[0],
                                                this.lastUpdateCall[1]
                                            );
                                }),
                                (t.prototype.done = function () {
                                    (this.lastUpdateCall = null),
                                        SVG.off(window, "mousemove.resize"),
                                        SVG.off(window, "mouseup.resize"),
                                        SVG.off(window, "touchmove.resize"),
                                        SVG.off(window, "touchend.resize"),
                                        this.el.fire("resizedone");
                                }),
                                (t.prototype.snapToGrid = function (
                                    t,
                                    e,
                                    i,
                                    a
                                ) {
                                    var r;
                                    return (
                                        void 0 !== a
                                            ? (r = [
                                                  (i + t) %
                                                      this.options.snapToGrid,
                                                  (a + e) %
                                                      this.options.snapToGrid,
                                              ])
                                            : ((i = null == i ? 3 : i),
                                              (r = [
                                                  (this.parameters.box.x +
                                                      t +
                                                      (1 & i
                                                          ? 0
                                                          : this.parameters.box
                                                                .width)) %
                                                      this.options.snapToGrid,
                                                  (this.parameters.box.y +
                                                      e +
                                                      (2 & i
                                                          ? 0
                                                          : this.parameters.box
                                                                .height)) %
                                                      this.options.snapToGrid,
                                              ])),
                                        t < 0 &&
                                            (r[0] -= this.options.snapToGrid),
                                        e < 0 &&
                                            (r[1] -= this.options.snapToGrid),
                                        (t -=
                                            Math.abs(r[0]) <
                                            this.options.snapToGrid / 2
                                                ? r[0]
                                                : r[0] -
                                                  (t < 0
                                                      ? -this.options.snapToGrid
                                                      : this.options
                                                            .snapToGrid)),
                                        (e -=
                                            Math.abs(r[1]) <
                                            this.options.snapToGrid / 2
                                                ? r[1]
                                                : r[1] -
                                                  (e < 0
                                                      ? -this.options.snapToGrid
                                                      : this.options
                                                            .snapToGrid)),
                                        this.constraintToBox(t, e, i, a)
                                    );
                                }),
                                (t.prototype.constraintToBox = function (
                                    t,
                                    e,
                                    i,
                                    a
                                ) {
                                    var r,
                                        s,
                                        n = this.options.constraint || {};
                                    return (
                                        void 0 !== a
                                            ? ((r = i), (s = a))
                                            : ((r =
                                                  this.parameters.box.x +
                                                  (1 & i
                                                      ? 0
                                                      : this.parameters.box
                                                            .width)),
                                              (s =
                                                  this.parameters.box.y +
                                                  (2 & i
                                                      ? 0
                                                      : this.parameters.box
                                                            .height))),
                                        void 0 !== n.minX &&
                                            r + t < n.minX &&
                                            (t = n.minX - r),
                                        void 0 !== n.maxX &&
                                            r + t > n.maxX &&
                                            (t = n.maxX - r),
                                        void 0 !== n.minY &&
                                            s + e < n.minY &&
                                            (e = n.minY - s),
                                        void 0 !== n.maxY &&
                                            s + e > n.maxY &&
                                            (e = n.maxY - s),
                                        [t, e]
                                    );
                                }),
                                (t.prototype.checkAspectRatio = function (
                                    t,
                                    e
                                ) {
                                    if (!this.options.saveAspectRatio) return t;
                                    var i = t.slice(),
                                        a =
                                            this.parameters.box.width /
                                            this.parameters.box.height,
                                        r = this.parameters.box.width + t[0],
                                        s = this.parameters.box.height - t[1],
                                        n = r / s;
                                    return (
                                        n < a
                                            ? ((i[1] =
                                                  r / a -
                                                  this.parameters.box.height),
                                              e && (i[1] = -i[1]))
                                            : n > a &&
                                              ((i[0] =
                                                  this.parameters.box.width -
                                                  s * a),
                                              e && (i[0] = -i[0])),
                                        i
                                    );
                                }),
                                SVG.extend(SVG.Element, {
                                    resize: function (e) {
                                        return (
                                            (
                                                this.remember(
                                                    "_resizeHandler"
                                                ) || new t(this)
                                            ).init(e || {}),
                                            this
                                        );
                                    },
                                }),
                                (SVG.Element.prototype.resize.defaults = {
                                    snapToAngle: 0.1,
                                    snapToGrid: 1,
                                    constraint: {},
                                    saveAspectRatio: !1,
                                });
                        }).call(this);
                    })(),
                    void 0 === window.Apex && (window.Apex = {});
                var Wt = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "initModules",
                                    value: function () {
                                        (this.ctx.publicMethods = [
                                            "updateOptions",
                                            "updateSeries",
                                            "appendData",
                                            "appendSeries",
                                            "toggleSeries",
                                            "showSeries",
                                            "hideSeries",
                                            "setLocale",
                                            "resetSeries",
                                            "zoomX",
                                            "toggleDataPointSelection",
                                            "dataURI",
                                            "exportToCSV",
                                            "addXaxisAnnotation",
                                            "addYaxisAnnotation",
                                            "addPointAnnotation",
                                            "clearAnnotations",
                                            "removeAnnotation",
                                            "paper",
                                            "destroy",
                                        ]),
                                            (this.ctx.eventList = [
                                                "click",
                                                "mousedown",
                                                "mousemove",
                                                "mouseleave",
                                                "touchstart",
                                                "touchmove",
                                                "touchleave",
                                                "mouseup",
                                                "touchend",
                                            ]),
                                            (this.ctx.animations = new y(
                                                this.ctx
                                            )),
                                            (this.ctx.axes = new tt(this.ctx)),
                                            (this.ctx.core = new Yt(
                                                this.ctx.el,
                                                this.ctx
                                            )),
                                            (this.ctx.config = new N({})),
                                            (this.ctx.data = new G(this.ctx)),
                                            (this.ctx.grid = new q(this.ctx)),
                                            (this.ctx.graphics = new k(
                                                this.ctx
                                            )),
                                            (this.ctx.coreUtils = new A(
                                                this.ctx
                                            )),
                                            (this.ctx.crosshairs = new et(
                                                this.ctx
                                            )),
                                            (this.ctx.events = new Q(this.ctx)),
                                            (this.ctx.exports = new _(
                                                this.ctx
                                            )),
                                            (this.ctx.localization = new K(
                                                this.ctx
                                            )),
                                            (this.ctx.options = new M()),
                                            (this.ctx.responsive = new it(
                                                this.ctx
                                            )),
                                            (this.ctx.series = new V(this.ctx)),
                                            (this.ctx.theme = new at(this.ctx)),
                                            (this.ctx.formatters = new O(
                                                this.ctx
                                            )),
                                            (this.ctx.titleSubtitle = new rt(
                                                this.ctx
                                            )),
                                            (this.ctx.legend = new dt(
                                                this.ctx
                                            )),
                                            (this.ctx.toolbar = new ut(
                                                this.ctx
                                            )),
                                            (this.ctx.tooltip = new yt(
                                                this.ctx
                                            )),
                                            (this.ctx.dimensions = new ct(
                                                this.ctx
                                            )),
                                            (this.ctx.updateHelpers = new Ht(
                                                this.ctx
                                            )),
                                            (this.ctx.zoomPanSelection = new ft(
                                                this.ctx
                                            )),
                                            (this.ctx.w.globals.tooltip =
                                                new yt(this.ctx));
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Bt = (function () {
                        function t(e) {
                            o(this, t), (this.ctx = e), (this.w = e.w);
                        }
                        return (
                            c(t, [
                                {
                                    key: "clear",
                                    value: function (t) {
                                        var e = t.isUpdating;
                                        this.ctx.zoomPanSelection &&
                                            this.ctx.zoomPanSelection.destroy(),
                                            this.ctx.toolbar &&
                                                this.ctx.toolbar.destroy(),
                                            (this.ctx.animations = null),
                                            (this.ctx.axes = null),
                                            (this.ctx.annotations = null),
                                            (this.ctx.core = null),
                                            (this.ctx.data = null),
                                            (this.ctx.grid = null),
                                            (this.ctx.series = null),
                                            (this.ctx.responsive = null),
                                            (this.ctx.theme = null),
                                            (this.ctx.formatters = null),
                                            (this.ctx.titleSubtitle = null),
                                            (this.ctx.legend = null),
                                            (this.ctx.dimensions = null),
                                            (this.ctx.options = null),
                                            (this.ctx.crosshairs = null),
                                            (this.ctx.zoomPanSelection = null),
                                            (this.ctx.updateHelpers = null),
                                            (this.ctx.toolbar = null),
                                            (this.ctx.localization = null),
                                            (this.ctx.w.globals.tooltip = null),
                                            this.clearDomElements({
                                                isUpdating: e,
                                            });
                                    },
                                },
                                {
                                    key: "killSVG",
                                    value: function (t) {
                                        t.each(function (t, e) {
                                            this.removeClass("*"),
                                                this.off(),
                                                this.stop();
                                        }, !0),
                                            t.ungroup(),
                                            t.clear();
                                    },
                                },
                                {
                                    key: "clearDomElements",
                                    value: function (t) {
                                        var e = this,
                                            i = t.isUpdating,
                                            a = this.w.globals.dom.Paper.node;
                                        a.parentNode &&
                                            a.parentNode.parentNode &&
                                            !i &&
                                            (a.parentNode.parentNode.style.minHeight =
                                                "unset");
                                        var r = this.w.globals.dom.baseEl;
                                        r &&
                                            this.ctx.eventList.forEach(
                                                function (t) {
                                                    r.removeEventListener(
                                                        t,
                                                        e.ctx.events
                                                            .documentEvent
                                                    );
                                                }
                                            );
                                        var s = this.w.globals.dom;
                                        if (null !== this.ctx.el)
                                            for (; this.ctx.el.firstChild; )
                                                this.ctx.el.removeChild(
                                                    this.ctx.el.firstChild
                                                );
                                        this.killSVG(s.Paper),
                                            s.Paper.remove(),
                                            (s.elWrap = null),
                                            (s.elGraphical = null),
                                            (s.elLegendWrap = null),
                                            (s.elLegendForeign = null),
                                            (s.baseEl = null),
                                            (s.elGridRect = null),
                                            (s.elGridRectMask = null),
                                            (s.elGridRectMarkerMask = null),
                                            (s.elForecastMask = null),
                                            (s.elNonForecastMask = null),
                                            (s.elDefs = null);
                                    },
                                },
                            ]),
                            t
                        );
                    })(),
                    Vt = new WeakMap(),
                    Gt = (function () {
                        function t(e, i) {
                            o(this, t),
                                (this.opts = i),
                                (this.ctx = this),
                                (this.w = new R(i).init()),
                                (this.el = e),
                                (this.w.globals.cuid = v.randomId()),
                                (this.w.globals.chartID = this.w.config.chart.id
                                    ? v.escapeString(this.w.config.chart.id)
                                    : this.w.globals.cuid),
                                new Wt(this).initModules(),
                                (this.create = v.bind(this.create, this)),
                                (this.windowResizeHandler =
                                    this._windowResizeHandler.bind(this)),
                                (this.parentResizeHandler =
                                    this._parentResizeCallback.bind(this));
                        }
                        return (
                            c(
                                t,
                                [
                                    {
                                        key: "render",
                                        value: function () {
                                            var t = this;
                                            return new Promise(function (e, i) {
                                                if (null !== t.el) {
                                                    void 0 ===
                                                        Apex._chartInstances &&
                                                        (Apex._chartInstances =
                                                            []),
                                                        t.w.config.chart.id &&
                                                            Apex._chartInstances.push(
                                                                {
                                                                    id: t.w
                                                                        .globals
                                                                        .chartID,
                                                                    group: t.w
                                                                        .config
                                                                        .chart
                                                                        .group,
                                                                    chart: t,
                                                                }
                                                            ),
                                                        t.setLocale(
                                                            t.w.config.chart
                                                                .defaultLocale
                                                        );
                                                    var a =
                                                        t.w.config.chart.events
                                                            .beforeMount;
                                                    if (
                                                        ("function" ==
                                                            typeof a &&
                                                            a(t, t.w),
                                                        t.events.fireEvent(
                                                            "beforeMount",
                                                            [t, t.w]
                                                        ),
                                                        window.addEventListener(
                                                            "resize",
                                                            t.windowResizeHandler
                                                        ),
                                                        (function (t, e) {
                                                            var i = !1;
                                                            if (
                                                                t.nodeType !==
                                                                Node.DOCUMENT_FRAGMENT_NODE
                                                            ) {
                                                                var a =
                                                                    t.getBoundingClientRect();
                                                                ("none" !==
                                                                    t.style
                                                                        .display &&
                                                                    0 !==
                                                                        a.width) ||
                                                                    (i = !0);
                                                            }
                                                            var r =
                                                                new ResizeObserver(
                                                                    function (
                                                                        a
                                                                    ) {
                                                                        i &&
                                                                            e.call(
                                                                                t,
                                                                                a
                                                                            ),
                                                                            (i =
                                                                                !0);
                                                                    }
                                                                );
                                                            t.nodeType ===
                                                            Node.DOCUMENT_FRAGMENT_NODE
                                                                ? Array.from(
                                                                      t.children
                                                                  ).forEach(
                                                                      function (
                                                                          t
                                                                      ) {
                                                                          return r.observe(
                                                                              t
                                                                          );
                                                                      }
                                                                  )
                                                                : r.observe(t),
                                                                Vt.set(e, r);
                                                        })(
                                                            t.el.parentNode,
                                                            t.parentResizeHandler
                                                        ),
                                                        !t.css)
                                                    ) {
                                                        var r =
                                                                t.el
                                                                    .getRootNode &&
                                                                t.el.getRootNode(),
                                                            s = v.is(
                                                                "ShadowRoot",
                                                                r
                                                            ),
                                                            n =
                                                                t.el
                                                                    .ownerDocument,
                                                            o =
                                                                n.getElementById(
                                                                    "apexcharts-css"
                                                                );
                                                        (!s && o) ||
                                                            ((t.css =
                                                                document.createElement(
                                                                    "style"
                                                                )),
                                                            (t.css.id =
                                                                "apexcharts-css"),
                                                            (t.css.textContent =
                                                                '@keyframes opaque {\n  0% {\n      opacity: 0\n  }\n\n  to {\n      opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n  0%,to {\n      opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0,0,0,.5);\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\n.legend-mouseover-inactive {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-legend-text {\n  padding-left: 15px;\n  margin-left: -15px;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255,255,255,.96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30,30,30,.8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0,0,0,.7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,.apexcharts-tooltip-text-y-value,.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,.apexcharts-tooltip-text-goals-value:empty,.apexcharts-tooltip-text-y-label:empty,.apexcharts-tooltip-text-y-value:empty,.apexcharts-tooltip-text-z-value:empty,.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0;\n  margin-right: 10px;\n  border-radius: 50%\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0!important\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_boundingRect,.svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_boundingRect,.apexcharts-selection-rect+g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_points_l,.apexcharts-selection-rect+g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,.apexcharts-pan-icon,.apexcharts-reset-icon,.apexcharts-selection-icon,.apexcharts-toolbar-custom-icon,.apexcharts-zoom-icon,.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,.apexcharts-reset-icon svg,.apexcharts-zoom-icon svg,.apexcharts-zoomin-icon svg,.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,.apexcharts-theme-dark .apexcharts-pan-icon svg,.apexcharts-theme-dark .apexcharts-reset-icon svg,.apexcharts-theme-dark .apexcharts-selection-icon svg,.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,.apexcharts-theme-dark .apexcharts-zoom-icon svg,.apexcharts-theme-dark .apexcharts-zoomin-icon svg,.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,.apexcharts-theme-light .apexcharts-reset-icon:hover svg,.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,.apexcharts-reset-icon,.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0,0,0,.7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n      opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,.apexcharts-datalabel.apexcharts-element-hidden,.apexcharts-hide .apexcharts-series-points {\n  opacity: 0\n}\n\n.apexcharts-hidden-element-shown {\n  opacity: 1;\n  transition: 0.25s ease all;\n}\n.apexcharts-datalabel,.apexcharts-datalabel-label,.apexcharts-datalabel-value,.apexcharts-datalabels,.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-annotation-rect,.apexcharts-area-series .apexcharts-area,.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-gridline,.apexcharts-line,.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-point-annotation-label,.apexcharts-radar-series path,.apexcharts-radar-series polygon,.apexcharts-toolbar svg,.apexcharts-tooltip .apexcharts-marker,.apexcharts-xaxis-annotation-label,.apexcharts-yaxis-annotation-label,.apexcharts-zoom-rect {\n  pointer-events: none\n}\n\n.apexcharts-marker {\n  transition: .15s ease all\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,.resize-triggers,.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}\n'),
                                                            s
                                                                ? r.prepend(
                                                                      t.css
                                                                  )
                                                                : n.head.appendChild(
                                                                      t.css
                                                                  ));
                                                    }
                                                    var l = t.create(
                                                        t.w.config.series,
                                                        {}
                                                    );
                                                    if (!l) return e(t);
                                                    t.mount(l)
                                                        .then(function () {
                                                            "function" ==
                                                                typeof t.w
                                                                    .config
                                                                    .chart
                                                                    .events
                                                                    .mounted &&
                                                                t.w.config.chart.events.mounted(
                                                                    t,
                                                                    t.w
                                                                ),
                                                                t.events.fireEvent(
                                                                    "mounted",
                                                                    [t, t.w]
                                                                ),
                                                                e(l);
                                                        })
                                                        .catch(function (t) {
                                                            i(t);
                                                        });
                                                } else
                                                    i(
                                                        new Error(
                                                            "Element not found"
                                                        )
                                                    );
                                            });
                                        },
                                    },
                                    {
                                        key: "create",
                                        value: function (t, e) {
                                            var i = this.w;
                                            new Wt(this).initModules();
                                            var a = this.w.globals;
                                            if (
                                                ((a.noData = !1),
                                                (a.animationEnded = !1),
                                                this.responsive.checkResponsiveConfig(
                                                    e
                                                ),
                                                i.config.xaxis
                                                    .convertedCatToNumeric &&
                                                    new D(
                                                        i.config
                                                    ).convertCatToNumericXaxis(
                                                        i.config,
                                                        this.ctx
                                                    ),
                                                null === this.el)
                                            )
                                                return (
                                                    (a.animationEnded = !0),
                                                    null
                                                );
                                            if (
                                                (this.core.setupElements(),
                                                "treemap" ===
                                                    i.config.chart.type &&
                                                    ((i.config.grid.show = !1),
                                                    (i.config.yaxis[0].show =
                                                        !1)),
                                                0 === a.svgWidth)
                                            )
                                                return (
                                                    (a.animationEnded = !0),
                                                    null
                                                );
                                            var r = A.checkComboSeries(t);
                                            (a.comboCharts = r.comboCharts),
                                                (a.comboBarCount =
                                                    r.comboBarCount);
                                            var s = t.every(function (t) {
                                                return (
                                                    t.data &&
                                                    0 === t.data.length
                                                );
                                            });
                                            (0 === t.length || s) &&
                                                this.series.handleNoData(),
                                                this.events.setupEventHandlers(),
                                                this.data.parseData(t),
                                                this.theme.init(),
                                                new H(
                                                    this
                                                ).setGlobalMarkerSize(),
                                                this.formatters.setLabelFormatters(),
                                                this.titleSubtitle.draw(),
                                                (a.noData &&
                                                    a.collapsedSeries.length !==
                                                        a.series.length &&
                                                    !i.config.legend
                                                        .showForSingleSeries) ||
                                                    this.legend.init(),
                                                this.series.hasAllSeriesEqualX(),
                                                a.axisCharts &&
                                                    (this.core.coreCalculations(),
                                                    "category" !==
                                                        i.config.xaxis.type &&
                                                        this.formatters.setLabelFormatters(),
                                                    (this.ctx.toolbar.minX =
                                                        i.globals.minX),
                                                    (this.ctx.toolbar.maxX =
                                                        i.globals.maxX)),
                                                this.formatters.heatmapLabelFormatters(),
                                                new A(
                                                    this
                                                ).getLargestMarkerSize(),
                                                this.dimensions.plotCoords();
                                            var n = this.core.xySettings();
                                            this.grid.createGridMask();
                                            var o = this.core.plotChartType(
                                                    t,
                                                    n
                                                ),
                                                l = new B(this);
                                            return (
                                                l.bringForward(),
                                                i.config.dataLabels.background
                                                    .enabled &&
                                                    l.dataLabelsBackground(),
                                                this.core.shiftGraphPosition(),
                                                {
                                                    elGraph: o,
                                                    xyRatios: n,
                                                    dimensions: {
                                                        plot: {
                                                            left: i.globals
                                                                .translateX,
                                                            top: i.globals
                                                                .translateY,
                                                            width: i.globals
                                                                .gridWidth,
                                                            height: i.globals
                                                                .gridHeight,
                                                        },
                                                    },
                                                }
                                            );
                                        },
                                    },
                                    {
                                        key: "mount",
                                        value: function () {
                                            var t = this,
                                                e =
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                        ? arguments[0]
                                                        : null,
                                                i = this,
                                                a = i.w;
                                            return new Promise(function (r, s) {
                                                if (null === i.el)
                                                    return s(
                                                        new Error(
                                                            "Not enough data to display or target element not found"
                                                        )
                                                    );
                                                (null === e ||
                                                    a.globals
                                                        .allSeriesCollapsed) &&
                                                    i.series.handleNoData(),
                                                    (i.grid = new q(i));
                                                var n = i.grid.drawGrid();
                                                if (
                                                    ((i.annotations = new E(i)),
                                                    i.annotations.drawImageAnnos(),
                                                    i.annotations.drawTextAnnos(),
                                                    "back" ===
                                                        a.config.grid
                                                            .position &&
                                                        n &&
                                                        a.globals.dom.elGraphical.add(
                                                            n.el
                                                        ),
                                                    Array.isArray(e.elGraph))
                                                )
                                                    for (
                                                        var o = 0;
                                                        o < e.elGraph.length;
                                                        o++
                                                    )
                                                        a.globals.dom.elGraphical.add(
                                                            e.elGraph[o]
                                                        );
                                                else
                                                    a.globals.dom.elGraphical.add(
                                                        e.elGraph
                                                    );
                                                "front" ===
                                                    a.config.grid.position &&
                                                    n &&
                                                    a.globals.dom.elGraphical.add(
                                                        n.el
                                                    ),
                                                    n &&
                                                        n.elGridBorders &&
                                                        n.elGridBorders.node &&
                                                        a.globals.dom.elGraphical.add(
                                                            n.elGridBorders
                                                        ),
                                                    "front" ===
                                                        a.config.xaxis
                                                            .crosshairs
                                                            .position &&
                                                        i.crosshairs.drawXCrosshairs(),
                                                    "front" ===
                                                        a.config.yaxis[0]
                                                            .crosshairs
                                                            .position &&
                                                        i.crosshairs.drawYCrosshairs(),
                                                    "treemap" !==
                                                        a.config.chart.type &&
                                                        i.axes.drawAxis(
                                                            a.config.chart.type,
                                                            n
                                                        );
                                                var l = new U(t.ctx, n),
                                                    c = new J(t.ctx, n);
                                                if (
                                                    (null !== n &&
                                                        (l.xAxisLabelCorrections(
                                                            n.xAxisTickWidth
                                                        ),
                                                        c.setYAxisTextAlignments(),
                                                        a.config.yaxis.map(
                                                            function (t, e) {
                                                                -1 ===
                                                                    a.globals.ignoreYAxisIndexes.indexOf(
                                                                        e
                                                                    ) &&
                                                                    c.yAxisTitleRotate(
                                                                        e,
                                                                        t.opposite
                                                                    );
                                                            }
                                                        )),
                                                    i.annotations.drawAxesAnnotations(),
                                                    !a.globals.noData)
                                                ) {
                                                    if (
                                                        (a.config.tooltip
                                                            .enabled &&
                                                            !a.globals.noData &&
                                                            i.w.globals.tooltip.drawTooltip(
                                                                e.xyRatios
                                                            ),
                                                        a.globals.axisCharts &&
                                                            (a.globals
                                                                .isXNumeric ||
                                                                a.config.xaxis
                                                                    .convertedCatToNumeric ||
                                                                a.globals
                                                                    .isRangeBar))
                                                    )
                                                        (a.config.chart.zoom
                                                            .enabled ||
                                                            (a.config.chart
                                                                .selection &&
                                                                a.config.chart
                                                                    .selection
                                                                    .enabled) ||
                                                            (a.config.chart
                                                                .pan &&
                                                                a.config.chart
                                                                    .pan
                                                                    .enabled)) &&
                                                            i.zoomPanSelection.init(
                                                                {
                                                                    xyRatios:
                                                                        e.xyRatios,
                                                                }
                                                            );
                                                    else {
                                                        var h =
                                                            a.config.chart
                                                                .toolbar.tools;
                                                        [
                                                            "zoom",
                                                            "zoomin",
                                                            "zoomout",
                                                            "selection",
                                                            "pan",
                                                            "reset",
                                                        ].forEach(function (t) {
                                                            h[t] = !1;
                                                        });
                                                    }
                                                    a.config.chart.toolbar
                                                        .show &&
                                                        !a.globals
                                                            .allSeriesCollapsed &&
                                                        i.toolbar.createToolbar();
                                                }
                                                a.globals.memory.methodsToExec
                                                    .length > 0 &&
                                                    a.globals.memory.methodsToExec.forEach(
                                                        function (t) {
                                                            t.method(
                                                                t.params,
                                                                !1,
                                                                t.context
                                                            );
                                                        }
                                                    ),
                                                    a.globals.axisCharts ||
                                                        a.globals.noData ||
                                                        i.core.resizeNonAxisCharts(),
                                                    r(i);
                                            });
                                        },
                                    },
                                    {
                                        key: "destroy",
                                        value: function () {
                                            var t, e;
                                            window.removeEventListener(
                                                "resize",
                                                this.windowResizeHandler
                                            ),
                                                this.el.parentNode,
                                                (t = this.parentResizeHandler),
                                                (e = Vt.get(t)) &&
                                                    (e.disconnect(),
                                                    Vt.delete(t));
                                            var i = this.w.config.chart.id;
                                            i &&
                                                Apex._chartInstances.forEach(
                                                    function (t, e) {
                                                        t.id ===
                                                            v.escapeString(i) &&
                                                            Apex._chartInstances.splice(
                                                                e,
                                                                1
                                                            );
                                                    }
                                                ),
                                                new Bt(this.ctx).clear({
                                                    isUpdating: !1,
                                                });
                                        },
                                    },
                                    {
                                        key: "updateOptions",
                                        value: function (t) {
                                            var e = this,
                                                i =
                                                    arguments.length > 1 &&
                                                    void 0 !== arguments[1] &&
                                                    arguments[1],
                                                a =
                                                    !(
                                                        arguments.length > 2 &&
                                                        void 0 !== arguments[2]
                                                    ) || arguments[2],
                                                r =
                                                    !(
                                                        arguments.length > 3 &&
                                                        void 0 !== arguments[3]
                                                    ) || arguments[3],
                                                s =
                                                    !(
                                                        arguments.length > 4 &&
                                                        void 0 !== arguments[4]
                                                    ) || arguments[4],
                                                n = this.w;
                                            return (
                                                (n.globals.selection = void 0),
                                                t.series &&
                                                    (this.series.resetSeries(
                                                        !1,
                                                        !0,
                                                        !1
                                                    ),
                                                    t.series.length &&
                                                        t.series[0].data &&
                                                        (t.series =
                                                            t.series.map(
                                                                function (
                                                                    t,
                                                                    i
                                                                ) {
                                                                    return e.updateHelpers._extendSeries(
                                                                        t,
                                                                        i
                                                                    );
                                                                }
                                                            )),
                                                    this.updateHelpers.revertDefaultAxisMinMax()),
                                                t.xaxis &&
                                                    (t =
                                                        this.updateHelpers.forceXAxisUpdate(
                                                            t
                                                        )),
                                                t.yaxis &&
                                                    (t =
                                                        this.updateHelpers.forceYAxisUpdate(
                                                            t
                                                        )),
                                                n.globals.collapsedSeriesIndices
                                                    .length > 0 &&
                                                    this.series.clearPreviousPaths(),
                                                t.theme &&
                                                    (t =
                                                        this.theme.updateThemeOptions(
                                                            t
                                                        )),
                                                this.updateHelpers._updateOptions(
                                                    t,
                                                    i,
                                                    a,
                                                    r,
                                                    s
                                                )
                                            );
                                        },
                                    },
                                    {
                                        key: "updateSeries",
                                        value: function () {
                                            var t =
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                        ? arguments[0]
                                                        : [],
                                                e =
                                                    !(
                                                        arguments.length > 1 &&
                                                        void 0 !== arguments[1]
                                                    ) || arguments[1],
                                                i =
                                                    !(
                                                        arguments.length > 2 &&
                                                        void 0 !== arguments[2]
                                                    ) || arguments[2];
                                            return (
                                                this.series.resetSeries(!1),
                                                this.updateHelpers.revertDefaultAxisMinMax(),
                                                this.updateHelpers._updateSeries(
                                                    t,
                                                    e,
                                                    i
                                                )
                                            );
                                        },
                                    },
                                    {
                                        key: "appendSeries",
                                        value: function (t) {
                                            var e =
                                                    !(
                                                        arguments.length > 1 &&
                                                        void 0 !== arguments[1]
                                                    ) || arguments[1],
                                                i =
                                                    !(
                                                        arguments.length > 2 &&
                                                        void 0 !== arguments[2]
                                                    ) || arguments[2],
                                                a =
                                                    this.w.config.series.slice();
                                            return (
                                                a.push(t),
                                                this.series.resetSeries(!1),
                                                this.updateHelpers.revertDefaultAxisMinMax(),
                                                this.updateHelpers._updateSeries(
                                                    a,
                                                    e,
                                                    i
                                                )
                                            );
                                        },
                                    },
                                    {
                                        key: "appendData",
                                        value: function (t) {
                                            var e =
                                                    !(
                                                        arguments.length > 1 &&
                                                        void 0 !== arguments[1]
                                                    ) || arguments[1],
                                                i = this;
                                            (i.w.globals.dataChanged = !0),
                                                i.series.getPreviousPaths();
                                            for (
                                                var a =
                                                        i.w.config.series.slice(),
                                                    r = 0;
                                                r < a.length;
                                                r++
                                            )
                                                if (
                                                    null !== t[r] &&
                                                    void 0 !== t[r]
                                                )
                                                    for (
                                                        var s = 0;
                                                        s < t[r].data.length;
                                                        s++
                                                    )
                                                        a[r].data.push(
                                                            t[r].data[s]
                                                        );
                                            return (
                                                (i.w.config.series = a),
                                                e &&
                                                    (i.w.globals.initialSeries =
                                                        v.clone(
                                                            i.w.config.series
                                                        )),
                                                this.update()
                                            );
                                        },
                                    },
                                    {
                                        key: "update",
                                        value: function (t) {
                                            var e = this;
                                            return new Promise(function (i, a) {
                                                new Bt(e.ctx).clear({
                                                    isUpdating: !0,
                                                });
                                                var r = e.create(
                                                    e.w.config.series,
                                                    t
                                                );
                                                if (!r) return i(e);
                                                e.mount(r)
                                                    .then(function () {
                                                        "function" ==
                                                            typeof e.w.config
                                                                .chart.events
                                                                .updated &&
                                                            e.w.config.chart.events.updated(
                                                                e,
                                                                e.w
                                                            ),
                                                            e.events.fireEvent(
                                                                "updated",
                                                                [e, e.w]
                                                            ),
                                                            (e.w.globals.isDirty =
                                                                !0),
                                                            i(e);
                                                    })
                                                    .catch(function (t) {
                                                        a(t);
                                                    });
                                            });
                                        },
                                    },
                                    {
                                        key: "getSyncedCharts",
                                        value: function () {
                                            var t = this.getGroupedCharts(),
                                                e = [this];
                                            return (
                                                t.length &&
                                                    ((e = []),
                                                    t.forEach(function (t) {
                                                        e.push(t);
                                                    })),
                                                e
                                            );
                                        },
                                    },
                                    {
                                        key: "getGroupedCharts",
                                        value: function () {
                                            var t = this;
                                            return Apex._chartInstances
                                                .filter(function (t) {
                                                    if (t.group) return !0;
                                                })
                                                .map(function (e) {
                                                    return t.w.config.chart
                                                        .group === e.group
                                                        ? e.chart
                                                        : t;
                                                });
                                        },
                                    },
                                    {
                                        key: "toggleSeries",
                                        value: function (t) {
                                            return this.series.toggleSeries(t);
                                        },
                                    },
                                    {
                                        key: "highlightSeriesOnLegendHover",
                                        value: function (t, e) {
                                            return this.series.toggleSeriesOnHover(
                                                t,
                                                e
                                            );
                                        },
                                    },
                                    {
                                        key: "showSeries",
                                        value: function (t) {
                                            this.series.showSeries(t);
                                        },
                                    },
                                    {
                                        key: "hideSeries",
                                        value: function (t) {
                                            this.series.hideSeries(t);
                                        },
                                    },
                                    {
                                        key: "resetSeries",
                                        value: function () {
                                            var t =
                                                    !(
                                                        arguments.length > 0 &&
                                                        void 0 !== arguments[0]
                                                    ) || arguments[0],
                                                e =
                                                    !(
                                                        arguments.length > 1 &&
                                                        void 0 !== arguments[1]
                                                    ) || arguments[1];
                                            this.series.resetSeries(t, e);
                                        },
                                    },
                                    {
                                        key: "addEventListener",
                                        value: function (t, e) {
                                            this.events.addEventListener(t, e);
                                        },
                                    },
                                    {
                                        key: "removeEventListener",
                                        value: function (t, e) {
                                            this.events.removeEventListener(
                                                t,
                                                e
                                            );
                                        },
                                    },
                                    {
                                        key: "addXaxisAnnotation",
                                        value: function (t) {
                                            var e =
                                                    !(
                                                        arguments.length > 1 &&
                                                        void 0 !== arguments[1]
                                                    ) || arguments[1],
                                                i =
                                                    arguments.length > 2 &&
                                                    void 0 !== arguments[2]
                                                        ? arguments[2]
                                                        : void 0,
                                                a = this;
                                            i && (a = i),
                                                a.annotations.addXaxisAnnotationExternal(
                                                    t,
                                                    e,
                                                    a
                                                );
                                        },
                                    },
                                    {
                                        key: "addYaxisAnnotation",
                                        value: function (t) {
                                            var e =
                                                    !(
                                                        arguments.length > 1 &&
                                                        void 0 !== arguments[1]
                                                    ) || arguments[1],
                                                i =
                                                    arguments.length > 2 &&
                                                    void 0 !== arguments[2]
                                                        ? arguments[2]
                                                        : void 0,
                                                a = this;
                                            i && (a = i),
                                                a.annotations.addYaxisAnnotationExternal(
                                                    t,
                                                    e,
                                                    a
                                                );
                                        },
                                    },
                                    {
                                        key: "addPointAnnotation",
                                        value: function (t) {
                                            var e =
                                                    !(
                                                        arguments.length > 1 &&
                                                        void 0 !== arguments[1]
                                                    ) || arguments[1],
                                                i =
                                                    arguments.length > 2 &&
                                                    void 0 !== arguments[2]
                                                        ? arguments[2]
                                                        : void 0,
                                                a = this;
                                            i && (a = i),
                                                a.annotations.addPointAnnotationExternal(
                                                    t,
                                                    e,
                                                    a
                                                );
                                        },
                                    },
                                    {
                                        key: "clearAnnotations",
                                        value: function () {
                                            var t =
                                                    arguments.length > 0 &&
                                                    void 0 !== arguments[0]
                                                        ? arguments[0]
                                                        : void 0,
                                                e = this;
                                            t && (e = t),
                                                e.annotations.clearAnnotations(
                                                    e
                                                );
                                        },
                                    },
                                    {
                                        key: "removeAnnotation",
                                        value: function (t) {
                                            var e =
                                                    arguments.length > 1 &&
                                                    void 0 !== arguments[1]
                                                        ? arguments[1]
                                                        : void 0,
                                                i = this;
                                            e && (i = e),
                                                i.annotations.removeAnnotation(
                                                    i,
                                                    t
                                                );
                                        },
                                    },
                                    {
                                        key: "getChartArea",
                                        value: function () {
                                            return this.w.globals.dom.baseEl.querySelector(
                                                ".apexcharts-inner"
                                            );
                                        },
                                    },
                                    {
                                        key: "getSeriesTotalXRange",
                                        value: function (t, e) {
                                            return this.coreUtils.getSeriesTotalsXRange(
                                                t,
                                                e
                                            );
                                        },
                                    },
                                    {
                                        key: "getHighestValueInSeries",
                                        value: function () {
                                            var t =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0;
                                            return new Z(this.ctx).getMinYMaxY(
                                                t
                                            ).highestY;
                                        },
                                    },
                                    {
                                        key: "getLowestValueInSeries",
                                        value: function () {
                                            var t =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : 0;
                                            return new Z(this.ctx).getMinYMaxY(
                                                t
                                            ).lowestY;
                                        },
                                    },
                                    {
                                        key: "getSeriesTotal",
                                        value: function () {
                                            return this.w.globals.seriesTotals;
                                        },
                                    },
                                    {
                                        key: "toggleDataPointSelection",
                                        value: function (t, e) {
                                            return this.updateHelpers.toggleDataPointSelection(
                                                t,
                                                e
                                            );
                                        },
                                    },
                                    {
                                        key: "zoomX",
                                        value: function (t, e) {
                                            this.ctx.toolbar.zoomUpdateOptions(
                                                t,
                                                e
                                            );
                                        },
                                    },
                                    {
                                        key: "setLocale",
                                        value: function (t) {
                                            this.localization.setCurrentLocaleValues(
                                                t
                                            );
                                        },
                                    },
                                    {
                                        key: "dataURI",
                                        value: function (t) {
                                            return new _(this.ctx).dataURI(t);
                                        },
                                    },
                                    {
                                        key: "exportToCSV",
                                        value: function () {
                                            var t =
                                                arguments.length > 0 &&
                                                void 0 !== arguments[0]
                                                    ? arguments[0]
                                                    : {};
                                            return new _(this.ctx).exportToCSV(
                                                t
                                            );
                                        },
                                    },
                                    {
                                        key: "paper",
                                        value: function () {
                                            return this.w.globals.dom.Paper;
                                        },
                                    },
                                    {
                                        key: "_parentResizeCallback",
                                        value: function () {
                                            this.w.globals.animationEnded &&
                                                this.w.config.chart
                                                    .redrawOnParentResize &&
                                                this._windowResize();
                                        },
                                    },
                                    {
                                        key: "_windowResize",
                                        value: function () {
                                            var t = this;
                                            clearTimeout(
                                                this.w.globals.resizeTimer
                                            ),
                                                (this.w.globals.resizeTimer =
                                                    window.setTimeout(
                                                        function () {
                                                            (t.w.globals.resized =
                                                                !0),
                                                                (t.w.globals.dataChanged =
                                                                    !1),
                                                                t.ctx.update();
                                                        },
                                                        150
                                                    ));
                                        },
                                    },
                                    {
                                        key: "_windowResizeHandler",
                                        value: function () {
                                            var t =
                                                this.w.config.chart
                                                    .redrawOnWindowResize;
                                            "function" == typeof t && (t = t()),
                                                t && this._windowResize();
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "getChartByID",
                                        value: function (t) {
                                            var e = v.escapeString(t),
                                                i = Apex._chartInstances.filter(
                                                    function (t) {
                                                        return t.id === e;
                                                    }
                                                )[0];
                                            return i && i.chart;
                                        },
                                    },
                                    {
                                        key: "initOnLoad",
                                        value: function () {
                                            for (
                                                var e =
                                                        document.querySelectorAll(
                                                            "[data-apexcharts]"
                                                        ),
                                                    i = 0;
                                                i < e.length;
                                                i++
                                            )
                                                new t(
                                                    e[i],
                                                    JSON.parse(
                                                        e[i].getAttribute(
                                                            "data-options"
                                                        )
                                                    )
                                                ).render();
                                        },
                                    },
                                    {
                                        key: "exec",
                                        value: function (t, e) {
                                            var i = this.getChartByID(t);
                                            if (i) {
                                                i.w.globals.isExecCalled = !0;
                                                var a = null;
                                                if (
                                                    -1 !==
                                                    i.publicMethods.indexOf(e)
                                                ) {
                                                    for (
                                                        var r =
                                                                arguments.length,
                                                            s = new Array(
                                                                r > 2
                                                                    ? r - 2
                                                                    : 0
                                                            ),
                                                            n = 2;
                                                        n < r;
                                                        n++
                                                    )
                                                        s[n - 2] = arguments[n];
                                                    a = i[e].apply(i, s);
                                                }
                                                return a;
                                            }
                                        },
                                    },
                                    {
                                        key: "merge",
                                        value: function (t, e) {
                                            return v.extend(t, e);
                                        },
                                    },
                                ]
                            ),
                            t
                        );
                    })();
                t.exports = Gt;
            },
            669: (t, e, i) => {
                t.exports = i(609);
            },
            448: (t, e, i) => {
                "use strict";
                var a = i(867),
                    r = i(26),
                    s = i(372),
                    n = i(327),
                    o = i(97),
                    l = i(109),
                    c = i(985),
                    h = i(61);
                t.exports = function (t) {
                    return new Promise(function (e, i) {
                        var d = t.data,
                            u = t.headers,
                            f = t.responseType;
                        a.isFormData(d) && delete u["Content-Type"];
                        var g = new XMLHttpRequest();
                        if (t.auth) {
                            var p = t.auth.username || "",
                                x = t.auth.password
                                    ? unescape(
                                          encodeURIComponent(t.auth.password)
                                      )
                                    : "";
                            u.Authorization = "Basic " + btoa(p + ":" + x);
                        }
                        var m = o(t.baseURL, t.url);
                        function b() {
                            if (g) {
                                var a =
                                        "getAllResponseHeaders" in g
                                            ? l(g.getAllResponseHeaders())
                                            : null,
                                    s = {
                                        data:
                                            f && "text" !== f && "json" !== f
                                                ? g.response
                                                : g.responseText,
                                        status: g.status,
                                        statusText: g.statusText,
                                        headers: a,
                                        config: t,
                                        request: g,
                                    };
                                r(e, i, s), (g = null);
                            }
                        }
                        if (
                            (g.open(
                                t.method.toUpperCase(),
                                n(m, t.params, t.paramsSerializer),
                                !0
                            ),
                            (g.timeout = t.timeout),
                            "onloadend" in g
                                ? (g.onloadend = b)
                                : (g.onreadystatechange = function () {
                                      g &&
                                          4 === g.readyState &&
                                          (0 !== g.status ||
                                              (g.responseURL &&
                                                  0 ===
                                                      g.responseURL.indexOf(
                                                          "file:"
                                                      ))) &&
                                          setTimeout(b);
                                  }),
                            (g.onabort = function () {
                                g &&
                                    (i(
                                        h(
                                            "Request aborted",
                                            t,
                                            "ECONNABORTED",
                                            g
                                        )
                                    ),
                                    (g = null));
                            }),
                            (g.onerror = function () {
                                i(h("Network Error", t, null, g)), (g = null);
                            }),
                            (g.ontimeout = function () {
                                var e =
                                    "timeout of " + t.timeout + "ms exceeded";
                                t.timeoutErrorMessage &&
                                    (e = t.timeoutErrorMessage),
                                    i(
                                        h(
                                            e,
                                            t,
                                            t.transitional &&
                                                t.transitional
                                                    .clarifyTimeoutError
                                                ? "ETIMEDOUT"
                                                : "ECONNABORTED",
                                            g
                                        )
                                    ),
                                    (g = null);
                            }),
                            a.isStandardBrowserEnv())
                        ) {
                            var v =
                                (t.withCredentials || c(m)) && t.xsrfCookieName
                                    ? s.read(t.xsrfCookieName)
                                    : void 0;
                            v && (u[t.xsrfHeaderName] = v);
                        }
                        "setRequestHeader" in g &&
                            a.forEach(u, function (t, e) {
                                void 0 === d &&
                                "content-type" === e.toLowerCase()
                                    ? delete u[e]
                                    : g.setRequestHeader(e, t);
                            }),
                            a.isUndefined(t.withCredentials) ||
                                (g.withCredentials = !!t.withCredentials),
                            f &&
                                "json" !== f &&
                                (g.responseType = t.responseType),
                            "function" == typeof t.onDownloadProgress &&
                                g.addEventListener(
                                    "progress",
                                    t.onDownloadProgress
                                ),
                            "function" == typeof t.onUploadProgress &&
                                g.upload &&
                                g.upload.addEventListener(
                                    "progress",
                                    t.onUploadProgress
                                ),
                            t.cancelToken &&
                                t.cancelToken.promise.then(function (t) {
                                    g && (g.abort(), i(t), (g = null));
                                }),
                            d || (d = null),
                            g.send(d);
                    });
                };
            },
            609: (t, e, i) => {
                "use strict";
                var a = i(867),
                    r = i(849),
                    s = i(321),
                    n = i(185);
                function o(t) {
                    var e = new s(t),
                        i = r(s.prototype.request, e);
                    return a.extend(i, s.prototype, e), a.extend(i, e), i;
                }
                var l = o(i(655));
                (l.Axios = s),
                    (l.create = function (t) {
                        return o(n(l.defaults, t));
                    }),
                    (l.Cancel = i(263)),
                    (l.CancelToken = i(972)),
                    (l.isCancel = i(502)),
                    (l.all = function (t) {
                        return Promise.all(t);
                    }),
                    (l.spread = i(713)),
                    (l.isAxiosError = i(268)),
                    (t.exports = l),
                    (t.exports.default = l);
            },
            263: (t) => {
                "use strict";
                function e(t) {
                    this.message = t;
                }
                (e.prototype.toString = function () {
                    return "Cancel" + (this.message ? ": " + this.message : "");
                }),
                    (e.prototype.__CANCEL__ = !0),
                    (t.exports = e);
            },
            972: (t, e, i) => {
                "use strict";
                var a = i(263);
                function r(t) {
                    if ("function" != typeof t)
                        throw new TypeError("executor must be a function.");
                    var e;
                    this.promise = new Promise(function (t) {
                        e = t;
                    });
                    var i = this;
                    t(function (t) {
                        i.reason || ((i.reason = new a(t)), e(i.reason));
                    });
                }
                (r.prototype.throwIfRequested = function () {
                    if (this.reason) throw this.reason;
                }),
                    (r.source = function () {
                        var t;
                        return {
                            token: new r(function (e) {
                                t = e;
                            }),
                            cancel: t,
                        };
                    }),
                    (t.exports = r);
            },
            502: (t) => {
                "use strict";
                t.exports = function (t) {
                    return !(!t || !t.__CANCEL__);
                };
            },
            321: (t, e, i) => {
                "use strict";
                var a = i(867),
                    r = i(327),
                    s = i(782),
                    n = i(572),
                    o = i(185),
                    l = i(875),
                    c = l.validators;
                function h(t) {
                    (this.defaults = t),
                        (this.interceptors = {
                            request: new s(),
                            response: new s(),
                        });
                }
                (h.prototype.request = function (t) {
                    "string" == typeof t
                        ? ((t = arguments[1] || {}).url = arguments[0])
                        : (t = t || {}),
                        (t = o(this.defaults, t)).method
                            ? (t.method = t.method.toLowerCase())
                            : this.defaults.method
                            ? (t.method = this.defaults.method.toLowerCase())
                            : (t.method = "get");
                    var e = t.transitional;
                    void 0 !== e &&
                        l.assertOptions(
                            e,
                            {
                                silentJSONParsing: c.transitional(
                                    c.boolean,
                                    "1.0.0"
                                ),
                                forcedJSONParsing: c.transitional(
                                    c.boolean,
                                    "1.0.0"
                                ),
                                clarifyTimeoutError: c.transitional(
                                    c.boolean,
                                    "1.0.0"
                                ),
                            },
                            !1
                        );
                    var i = [],
                        a = !0;
                    this.interceptors.request.forEach(function (e) {
                        ("function" == typeof e.runWhen &&
                            !1 === e.runWhen(t)) ||
                            ((a = a && e.synchronous),
                            i.unshift(e.fulfilled, e.rejected));
                    });
                    var r,
                        s = [];
                    if (
                        (this.interceptors.response.forEach(function (t) {
                            s.push(t.fulfilled, t.rejected);
                        }),
                        !a)
                    ) {
                        var h = [n, void 0];
                        for (
                            Array.prototype.unshift.apply(h, i),
                                h = h.concat(s),
                                r = Promise.resolve(t);
                            h.length;

                        )
                            r = r.then(h.shift(), h.shift());
                        return r;
                    }
                    for (var d = t; i.length; ) {
                        var u = i.shift(),
                            f = i.shift();
                        try {
                            d = u(d);
                        } catch (t) {
                            f(t);
                            break;
                        }
                    }
                    try {
                        r = n(d);
                    } catch (t) {
                        return Promise.reject(t);
                    }
                    for (; s.length; ) r = r.then(s.shift(), s.shift());
                    return r;
                }),
                    (h.prototype.getUri = function (t) {
                        return (
                            (t = o(this.defaults, t)),
                            r(t.url, t.params, t.paramsSerializer).replace(
                                /^\?/,
                                ""
                            )
                        );
                    }),
                    a.forEach(
                        ["delete", "get", "head", "options"],
                        function (t) {
                            h.prototype[t] = function (e, i) {
                                return this.request(
                                    o(i || {}, {
                                        method: t,
                                        url: e,
                                        data: (i || {}).data,
                                    })
                                );
                            };
                        }
                    ),
                    a.forEach(["post", "put", "patch"], function (t) {
                        h.prototype[t] = function (e, i, a) {
                            return this.request(
                                o(a || {}, { method: t, url: e, data: i })
                            );
                        };
                    }),
                    (t.exports = h);
            },
            782: (t, e, i) => {
                "use strict";
                var a = i(867);
                function r() {
                    this.handlers = [];
                }
                (r.prototype.use = function (t, e, i) {
                    return (
                        this.handlers.push({
                            fulfilled: t,
                            rejected: e,
                            synchronous: !!i && i.synchronous,
                            runWhen: i ? i.runWhen : null,
                        }),
                        this.handlers.length - 1
                    );
                }),
                    (r.prototype.eject = function (t) {
                        this.handlers[t] && (this.handlers[t] = null);
                    }),
                    (r.prototype.forEach = function (t) {
                        a.forEach(this.handlers, function (e) {
                            null !== e && t(e);
                        });
                    }),
                    (t.exports = r);
            },
            97: (t, e, i) => {
                "use strict";
                var a = i(793),
                    r = i(303);
                t.exports = function (t, e) {
                    return t && !a(e) ? r(t, e) : e;
                };
            },
            61: (t, e, i) => {
                "use strict";
                var a = i(481);
                t.exports = function (t, e, i, r, s) {
                    var n = new Error(t);
                    return a(n, e, i, r, s);
                };
            },
            572: (t, e, i) => {
                "use strict";
                var a = i(867),
                    r = i(527),
                    s = i(502),
                    n = i(655);
                function o(t) {
                    t.cancelToken && t.cancelToken.throwIfRequested();
                }
                t.exports = function (t) {
                    return (
                        o(t),
                        (t.headers = t.headers || {}),
                        (t.data = r.call(
                            t,
                            t.data,
                            t.headers,
                            t.transformRequest
                        )),
                        (t.headers = a.merge(
                            t.headers.common || {},
                            t.headers[t.method] || {},
                            t.headers
                        )),
                        a.forEach(
                            [
                                "delete",
                                "get",
                                "head",
                                "post",
                                "put",
                                "patch",
                                "common",
                            ],
                            function (e) {
                                delete t.headers[e];
                            }
                        ),
                        (t.adapter || n.adapter)(t).then(
                            function (e) {
                                return (
                                    o(t),
                                    (e.data = r.call(
                                        t,
                                        e.data,
                                        e.headers,
                                        t.transformResponse
                                    )),
                                    e
                                );
                            },
                            function (e) {
                                return (
                                    s(e) ||
                                        (o(t),
                                        e &&
                                            e.response &&
                                            (e.response.data = r.call(
                                                t,
                                                e.response.data,
                                                e.response.headers,
                                                t.transformResponse
                                            ))),
                                    Promise.reject(e)
                                );
                            }
                        )
                    );
                };
            },
            481: (t) => {
                "use strict";
                t.exports = function (t, e, i, a, r) {
                    return (
                        (t.config = e),
                        i && (t.code = i),
                        (t.request = a),
                        (t.response = r),
                        (t.isAxiosError = !0),
                        (t.toJSON = function () {
                            return {
                                message: this.message,
                                name: this.name,
                                description: this.description,
                                number: this.number,
                                fileName: this.fileName,
                                lineNumber: this.lineNumber,
                                columnNumber: this.columnNumber,
                                stack: this.stack,
                                config: this.config,
                                code: this.code,
                            };
                        }),
                        t
                    );
                };
            },
            185: (t, e, i) => {
                "use strict";
                var a = i(867);
                t.exports = function (t, e) {
                    e = e || {};
                    var i = {},
                        r = ["url", "method", "data"],
                        s = ["headers", "auth", "proxy", "params"],
                        n = [
                            "baseURL",
                            "transformRequest",
                            "transformResponse",
                            "paramsSerializer",
                            "timeout",
                            "timeoutMessage",
                            "withCredentials",
                            "adapter",
                            "responseType",
                            "xsrfCookieName",
                            "xsrfHeaderName",
                            "onUploadProgress",
                            "onDownloadProgress",
                            "decompress",
                            "maxContentLength",
                            "maxBodyLength",
                            "maxRedirects",
                            "transport",
                            "httpAgent",
                            "httpsAgent",
                            "cancelToken",
                            "socketPath",
                            "responseEncoding",
                        ],
                        o = ["validateStatus"];
                    function l(t, e) {
                        return a.isPlainObject(t) && a.isPlainObject(e)
                            ? a.merge(t, e)
                            : a.isPlainObject(e)
                            ? a.merge({}, e)
                            : a.isArray(e)
                            ? e.slice()
                            : e;
                    }
                    function c(r) {
                        a.isUndefined(e[r])
                            ? a.isUndefined(t[r]) || (i[r] = l(void 0, t[r]))
                            : (i[r] = l(t[r], e[r]));
                    }
                    a.forEach(r, function (t) {
                        a.isUndefined(e[t]) || (i[t] = l(void 0, e[t]));
                    }),
                        a.forEach(s, c),
                        a.forEach(n, function (r) {
                            a.isUndefined(e[r])
                                ? a.isUndefined(t[r]) ||
                                  (i[r] = l(void 0, t[r]))
                                : (i[r] = l(void 0, e[r]));
                        }),
                        a.forEach(o, function (a) {
                            a in e
                                ? (i[a] = l(t[a], e[a]))
                                : a in t && (i[a] = l(void 0, t[a]));
                        });
                    var h = r.concat(s).concat(n).concat(o),
                        d = Object.keys(t)
                            .concat(Object.keys(e))
                            .filter(function (t) {
                                return -1 === h.indexOf(t);
                            });
                    return a.forEach(d, c), i;
                };
            },
            26: (t, e, i) => {
                "use strict";
                var a = i(61);
                t.exports = function (t, e, i) {
                    var r = i.config.validateStatus;
                    i.status && r && !r(i.status)
                        ? e(
                              a(
                                  "Request failed with status code " + i.status,
                                  i.config,
                                  null,
                                  i.request,
                                  i
                              )
                          )
                        : t(i);
                };
            },
            527: (t, e, i) => {
                "use strict";
                var a = i(867),
                    r = i(655);
                t.exports = function (t, e, i) {
                    var s = this || r;
                    return (
                        a.forEach(i, function (i) {
                            t = i.call(s, t, e);
                        }),
                        t
                    );
                };
            },
            655: (t, e, i) => {
                "use strict";
                var a = i(155),
                    r = i(867),
                    s = i(16),
                    n = i(481),
                    o = { "Content-Type": "application/x-www-form-urlencoded" };
                function l(t, e) {
                    !r.isUndefined(t) &&
                        r.isUndefined(t["Content-Type"]) &&
                        (t["Content-Type"] = e);
                }
                var c,
                    h = {
                        transitional: {
                            silentJSONParsing: !0,
                            forcedJSONParsing: !0,
                            clarifyTimeoutError: !1,
                        },
                        adapter:
                            (("undefined" != typeof XMLHttpRequest ||
                                (void 0 !== a &&
                                    "[object process]" ===
                                        Object.prototype.toString.call(a))) &&
                                (c = i(448)),
                            c),
                        transformRequest: [
                            function (t, e) {
                                return (
                                    s(e, "Accept"),
                                    s(e, "Content-Type"),
                                    r.isFormData(t) ||
                                    r.isArrayBuffer(t) ||
                                    r.isBuffer(t) ||
                                    r.isStream(t) ||
                                    r.isFile(t) ||
                                    r.isBlob(t)
                                        ? t
                                        : r.isArrayBufferView(t)
                                        ? t.buffer
                                        : r.isURLSearchParams(t)
                                        ? (l(
                                              e,
                                              "application/x-www-form-urlencoded;charset=utf-8"
                                          ),
                                          t.toString())
                                        : r.isObject(t) ||
                                          (e &&
                                              "application/json" ===
                                                  e["Content-Type"])
                                        ? (l(e, "application/json"),
                                          (function (t, e, i) {
                                              if (r.isString(t))
                                                  try {
                                                      return (
                                                          (e || JSON.parse)(t),
                                                          r.trim(t)
                                                      );
                                                  } catch (t) {
                                                      if (
                                                          "SyntaxError" !==
                                                          t.name
                                                      )
                                                          throw t;
                                                  }
                                              return (i || JSON.stringify)(t);
                                          })(t))
                                        : t
                                );
                            },
                        ],
                        transformResponse: [
                            function (t) {
                                var e = this.transitional,
                                    i = e && e.silentJSONParsing,
                                    a = e && e.forcedJSONParsing,
                                    s = !i && "json" === this.responseType;
                                if (s || (a && r.isString(t) && t.length))
                                    try {
                                        return JSON.parse(t);
                                    } catch (t) {
                                        if (s) {
                                            if ("SyntaxError" === t.name)
                                                throw n(
                                                    t,
                                                    this,
                                                    "E_JSON_PARSE"
                                                );
                                            throw t;
                                        }
                                    }
                                return t;
                            },
                        ],
                        timeout: 0,
                        xsrfCookieName: "XSRF-TOKEN",
                        xsrfHeaderName: "X-XSRF-TOKEN",
                        maxContentLength: -1,
                        maxBodyLength: -1,
                        validateStatus: function (t) {
                            return t >= 200 && t < 300;
                        },
                    };
                (h.headers = {
                    common: { Accept: "application/json, text/plain, */*" },
                }),
                    r.forEach(["delete", "get", "head"], function (t) {
                        h.headers[t] = {};
                    }),
                    r.forEach(["post", "put", "patch"], function (t) {
                        h.headers[t] = r.merge(o);
                    }),
                    (t.exports = h);
            },
            849: (t) => {
                "use strict";
                t.exports = function (t, e) {
                    return function () {
                        for (
                            var i = new Array(arguments.length), a = 0;
                            a < i.length;
                            a++
                        )
                            i[a] = arguments[a];
                        return t.apply(e, i);
                    };
                };
            },
            327: (t, e, i) => {
                "use strict";
                var a = i(867);
                function r(t) {
                    return encodeURIComponent(t)
                        .replace(/%3A/gi, ":")
                        .replace(/%24/g, "$")
                        .replace(/%2C/gi, ",")
                        .replace(/%20/g, "+")
                        .replace(/%5B/gi, "[")
                        .replace(/%5D/gi, "]");
                }
                t.exports = function (t, e, i) {
                    if (!e) return t;
                    var s;
                    if (i) s = i(e);
                    else if (a.isURLSearchParams(e)) s = e.toString();
                    else {
                        var n = [];
                        a.forEach(e, function (t, e) {
                            null != t &&
                                (a.isArray(t) ? (e += "[]") : (t = [t]),
                                a.forEach(t, function (t) {
                                    a.isDate(t)
                                        ? (t = t.toISOString())
                                        : a.isObject(t) &&
                                          (t = JSON.stringify(t)),
                                        n.push(r(e) + "=" + r(t));
                                }));
                        }),
                            (s = n.join("&"));
                    }
                    if (s) {
                        var o = t.indexOf("#");
                        -1 !== o && (t = t.slice(0, o)),
                            (t += (-1 === t.indexOf("?") ? "?" : "&") + s);
                    }
                    return t;
                };
            },
            303: (t) => {
                "use strict";
                t.exports = function (t, e) {
                    return e
                        ? t.replace(/\/+$/, "") + "/" + e.replace(/^\/+/, "")
                        : t;
                };
            },
            372: (t, e, i) => {
                "use strict";
                var a = i(867);
                t.exports = a.isStandardBrowserEnv()
                    ? {
                          write: function (t, e, i, r, s, n) {
                              var o = [];
                              o.push(t + "=" + encodeURIComponent(e)),
                                  a.isNumber(i) &&
                                      o.push(
                                          "expires=" + new Date(i).toGMTString()
                                      ),
                                  a.isString(r) && o.push("path=" + r),
                                  a.isString(s) && o.push("domain=" + s),
                                  !0 === n && o.push("secure"),
                                  (document.cookie = o.join("; "));
                          },
                          read: function (t) {
                              var e = document.cookie.match(
                                  new RegExp("(^|;\\s*)(" + t + ")=([^;]*)")
                              );
                              return e ? decodeURIComponent(e[3]) : null;
                          },
                          remove: function (t) {
                              this.write(t, "", Date.now() - 864e5);
                          },
                      }
                    : {
                          write: function () {},
                          read: function () {
                              return null;
                          },
                          remove: function () {},
                      };
            },
            793: (t) => {
                "use strict";
                t.exports = function (t) {
                    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t);
                };
            },
            268: (t) => {
                "use strict";
                t.exports = function (t) {
                    return "object" == typeof t && !0 === t.isAxiosError;
                };
            },
            985: (t, e, i) => {
                "use strict";
                var a = i(867);
                t.exports = a.isStandardBrowserEnv()
                    ? (function () {
                          var t,
                              e = /(msie|trident)/i.test(navigator.userAgent),
                              i = document.createElement("a");
                          function r(t) {
                              var a = t;
                              return (
                                  e &&
                                      (i.setAttribute("href", a), (a = i.href)),
                                  i.setAttribute("href", a),
                                  {
                                      href: i.href,
                                      protocol: i.protocol
                                          ? i.protocol.replace(/:$/, "")
                                          : "",
                                      host: i.host,
                                      search: i.search
                                          ? i.search.replace(/^\?/, "")
                                          : "",
                                      hash: i.hash
                                          ? i.hash.replace(/^#/, "")
                                          : "",
                                      hostname: i.hostname,
                                      port: i.port,
                                      pathname:
                                          "/" === i.pathname.charAt(0)
                                              ? i.pathname
                                              : "/" + i.pathname,
                                  }
                              );
                          }
                          return (
                              (t = r(window.location.href)),
                              function (e) {
                                  var i = a.isString(e) ? r(e) : e;
                                  return (
                                      i.protocol === t.protocol &&
                                      i.host === t.host
                                  );
                              }
                          );
                      })()
                    : function () {
                          return !0;
                      };
            },
            16: (t, e, i) => {
                "use strict";
                var a = i(867);
                t.exports = function (t, e) {
                    a.forEach(t, function (i, a) {
                        a !== e &&
                            a.toUpperCase() === e.toUpperCase() &&
                            ((t[e] = i), delete t[a]);
                    });
                };
            },
            109: (t, e, i) => {
                "use strict";
                var a = i(867),
                    r = [
                        "age",
                        "authorization",
                        "content-length",
                        "content-type",
                        "etag",
                        "expires",
                        "from",
                        "host",
                        "if-modified-since",
                        "if-unmodified-since",
                        "last-modified",
                        "location",
                        "max-forwards",
                        "proxy-authorization",
                        "referer",
                        "retry-after",
                        "user-agent",
                    ];
                t.exports = function (t) {
                    var e,
                        i,
                        s,
                        n = {};
                    return t
                        ? (a.forEach(t.split("\n"), function (t) {
                              if (
                                  ((s = t.indexOf(":")),
                                  (e = a.trim(t.substr(0, s)).toLowerCase()),
                                  (i = a.trim(t.substr(s + 1))),
                                  e)
                              ) {
                                  if (n[e] && r.indexOf(e) >= 0) return;
                                  n[e] =
                                      "set-cookie" === e
                                          ? (n[e] ? n[e] : []).concat([i])
                                          : n[e]
                                          ? n[e] + ", " + i
                                          : i;
                              }
                          }),
                          n)
                        : n;
                };
            },
            713: (t) => {
                "use strict";
                t.exports = function (t) {
                    return function (e) {
                        return t.apply(null, e);
                    };
                };
            },
            875: (t, e, i) => {
                "use strict";
                var a = i(593),
                    r = {};
                [
                    "object",
                    "boolean",
                    "number",
                    "function",
                    "string",
                    "symbol",
                ].forEach(function (t, e) {
                    r[t] = function (i) {
                        return typeof i === t || "a" + (e < 1 ? "n " : " ") + t;
                    };
                });
                var s = {},
                    n = a.version.split(".");
                function o(t, e) {
                    for (
                        var i = e ? e.split(".") : n, a = t.split("."), r = 0;
                        r < 3;
                        r++
                    ) {
                        if (i[r] > a[r]) return !0;
                        if (i[r] < a[r]) return !1;
                    }
                    return !1;
                }
                (r.transitional = function (t, e, i) {
                    var r = e && o(e);
                    function n(t, e) {
                        return (
                            "[Axios v" +
                            a.version +
                            "] Transitional option '" +
                            t +
                            "'" +
                            e +
                            (i ? ". " + i : "")
                        );
                    }
                    return function (i, a, o) {
                        if (!1 === t)
                            throw new Error(n(a, " has been removed in " + e));
                        return (
                            r &&
                                !s[a] &&
                                ((s[a] = !0),
                                console.warn(
                                    n(
                                        a,
                                        " has been deprecated since v" +
                                            e +
                                            " and will be removed in the near future"
                                    )
                                )),
                            !t || t(i, a, o)
                        );
                    };
                }),
                    (t.exports = {
                        isOlderVersion: o,
                        assertOptions: function (t, e, i) {
                            if ("object" != typeof t)
                                throw new TypeError(
                                    "options must be an object"
                                );
                            for (
                                var a = Object.keys(t), r = a.length;
                                r-- > 0;

                            ) {
                                var s = a[r],
                                    n = e[s];
                                if (n) {
                                    var o = t[s],
                                        l = void 0 === o || n(o, s, t);
                                    if (!0 !== l)
                                        throw new TypeError(
                                            "option " + s + " must be " + l
                                        );
                                } else if (!0 !== i)
                                    throw Error("Unknown option " + s);
                            }
                        },
                        validators: r,
                    });
            },
            867: (t, e, i) => {
                "use strict";
                var a = i(849),
                    r = Object.prototype.toString;
                function s(t) {
                    return "[object Array]" === r.call(t);
                }
                function n(t) {
                    return void 0 === t;
                }
                function o(t) {
                    return null !== t && "object" == typeof t;
                }
                function l(t) {
                    if ("[object Object]" !== r.call(t)) return !1;
                    var e = Object.getPrototypeOf(t);
                    return null === e || e === Object.prototype;
                }
                function c(t) {
                    return "[object Function]" === r.call(t);
                }
                function h(t, e) {
                    if (null != t)
                        if (("object" != typeof t && (t = [t]), s(t)))
                            for (var i = 0, a = t.length; i < a; i++)
                                e.call(null, t[i], i, t);
                        else
                            for (var r in t)
                                Object.prototype.hasOwnProperty.call(t, r) &&
                                    e.call(null, t[r], r, t);
                }
                t.exports = {
                    isArray: s,
                    isArrayBuffer: function (t) {
                        return "[object ArrayBuffer]" === r.call(t);
                    },
                    isBuffer: function (t) {
                        return (
                            null !== t &&
                            !n(t) &&
                            null !== t.constructor &&
                            !n(t.constructor) &&
                            "function" == typeof t.constructor.isBuffer &&
                            t.constructor.isBuffer(t)
                        );
                    },
                    isFormData: function (t) {
                        return (
                            "undefined" != typeof FormData &&
                            t instanceof FormData
                        );
                    },
                    isArrayBufferView: function (t) {
                        return "undefined" != typeof ArrayBuffer &&
                            ArrayBuffer.isView
                            ? ArrayBuffer.isView(t)
                            : t && t.buffer && t.buffer instanceof ArrayBuffer;
                    },
                    isString: function (t) {
                        return "string" == typeof t;
                    },
                    isNumber: function (t) {
                        return "number" == typeof t;
                    },
                    isObject: o,
                    isPlainObject: l,
                    isUndefined: n,
                    isDate: function (t) {
                        return "[object Date]" === r.call(t);
                    },
                    isFile: function (t) {
                        return "[object File]" === r.call(t);
                    },
                    isBlob: function (t) {
                        return "[object Blob]" === r.call(t);
                    },
                    isFunction: c,
                    isStream: function (t) {
                        return o(t) && c(t.pipe);
                    },
                    isURLSearchParams: function (t) {
                        return (
                            "undefined" != typeof URLSearchParams &&
                            t instanceof URLSearchParams
                        );
                    },
                    isStandardBrowserEnv: function () {
                        return (
                            ("undefined" == typeof navigator ||
                                ("ReactNative" !== navigator.product &&
                                    "NativeScript" !== navigator.product &&
                                    "NS" !== navigator.product)) &&
                            "undefined" != typeof window &&
                            "undefined" != typeof document
                        );
                    },
                    forEach: h,
                    merge: function t() {
                        var e = {};
                        function i(i, a) {
                            l(e[a]) && l(i)
                                ? (e[a] = t(e[a], i))
                                : l(i)
                                ? (e[a] = t({}, i))
                                : s(i)
                                ? (e[a] = i.slice())
                                : (e[a] = i);
                        }
                        for (var a = 0, r = arguments.length; a < r; a++)
                            h(arguments[a], i);
                        return e;
                    },
                    extend: function (t, e, i) {
                        return (
                            h(e, function (e, r) {
                                t[r] =
                                    i && "function" == typeof e ? a(e, i) : e;
                            }),
                            t
                        );
                    },
                    trim: function (t) {
                        return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
                    },
                    stripBOM: function (t) {
                        return 65279 === t.charCodeAt(0) && (t = t.slice(1)), t;
                    },
                };
            },
            211: (t, e, i) => {
                "use strict";
                var a = {};
                i.r(a),
                    i.d(a, {
                        afterMain: () => F,
                        afterRead: () => I,
                        afterWrite: () => X,
                        applyStyles: () => G,
                        arrow: () => ht,
                        auto: () => v,
                        basePlacements: () => y,
                        beforeMain: () => O,
                        beforeRead: () => M,
                        beforeWrite: () => D,
                        bottom: () => x,
                        clippingParents: () => A,
                        computeStyles: () => gt,
                        createPopper: () => Gt,
                        createPopperBase: () => Vt,
                        createPopperLite: () => jt,
                        detectOverflow: () => Et,
                        end: () => k,
                        eventListeners: () => xt,
                        flip: () => It,
                        hide: () => Ft,
                        left: () => b,
                        main: () => z,
                        modifierPhases: () => R,
                        offset: () => Dt,
                        placements: () => T,
                        popper: () => C,
                        popperGenerator: () => Bt,
                        popperOffsets: () => Nt,
                        preventOverflow: () => Xt,
                        read: () => E,
                        reference: () => P,
                        right: () => m,
                        start: () => w,
                        top: () => p,
                        variationPlacements: () => L,
                        viewport: () => S,
                        write: () => N,
                    });
                var r = i(553),
                    s = i.n(r),
                    n = i(669),
                    o = i.n(n),
                    l = i(484),
                    c = i.n(l);
                const h = {
                    cutText: function (t, e) {
                        if (t.split(" ").length > 1) {
                            var i = t.substring(0, e).split(" ");
                            return i.pop(), i.join(" ") + "...";
                        }
                        return t;
                    },
                    formatDate: function (t, e) {
                        return c()(t).format(e);
                    },
                    capitalizeFirstLetter: function (t) {
                        if (t) return t.charAt(0).toUpperCase() + t.slice(1);
                    },
                    onlyNumber: function (t) {
                        return t ? t.replace(/\D/g, "") : "";
                    },
                    formatCurrency: function (t) {
                        if (t) {
                            var e = t.toString().replace(/\D/g, ""),
                                i = e.length % 3,
                                a = e.substr(0, i),
                                r = e.substr(i).match(/\d{3}/g);
                            return r && (a += (i ? "." : "") + r.join(".")), a;
                        }
                        return "";
                    },
                    timeAgo: function (t) {
                        var e = new Date(
                                (t || "")
                                    .replace(/-/g, "/")
                                    .replace(/[TZ]/g, " ")
                            ),
                            i = (new Date().getTime() - e.getTime()) / 1e3,
                            a = Math.floor(i / 86400);
                        return isNaN(a) || a < 0 || a >= 31
                            ? c()(t).format("MMMM DD, YYYY")
                            : (0 == a &&
                                  ((i < 60
                                      ? "just now"
                                      : i < 120 && "1 minute ago") ||
                                      (i < 3600 &&
                                          Math.floor(i / 60) +
                                              " minutes ago") ||
                                      (i < 7200 && "1 hour ago") ||
                                      (i < 86400 &&
                                          Math.floor(i / 3600) +
                                              " hours ago"))) ||
                                  (1 == a && "Yesterday") ||
                                  (a < 7 && a + " days ago") ||
                                  (a < 31 && Math.ceil(a / 7) + " weeks ago");
                    },
                    diffTimeByNow: function (t) {
                        var e = c()(
                                c()().format("YYYY-MM-DD HH:mm:ss").toString()
                            ),
                            i = c()(
                                c()(t).format("YYYY-MM-DD HH:mm:ss").toString()
                            ),
                            a = c().duration(i.diff(e)),
                            r = Math.floor(a.asMilliseconds()),
                            s = Math.round(r / 864e5),
                            n = Math.round((r % 864e5) / 36e5),
                            o = Math.round(((r % 864e5) % 36e5) / 6e4),
                            l = Math.round((((r % 864e5) % 36e5) % 6e4) / 1e3);
                        return (
                            l < 30 && l >= 0 && (o += 1),
                            {
                                days: s.toString().length < 2 ? "0" + s : s,
                                hours: n.toString().length < 2 ? "0" + n : n,
                                minutes: o.toString().length < 2 ? "0" + o : o,
                                seconds: l.toString().length < 2 ? "0" + l : l,
                            }
                        );
                    },
                    isset: function (t) {
                        return Object.keys(t).length;
                    },
                    assign: function (t) {
                        return JSON.parse(JSON.stringify(t));
                    },
                    delay: function (t) {
                        return new Promise(function (e, i) {
                            setTimeout(function () {
                                e();
                            }, t);
                        });
                    },
                    randomNumbers: function (t, e, i) {
                        for (var a = [0], r = 1; r < i; r++)
                            a.push(Math.ceil(Math.random() * (t - e) + e));
                        return a;
                    },
                    replaceAll: function (t, e, i) {
                        return t.replace(new RegExp(e, "g"), i);
                    },
                };
                var d = i(641),
                    u = i.n(d),
                    f = i(927),
                    g = i.n(f),
                    p = "top",
                    x = "bottom",
                    m = "right",
                    b = "left",
                    v = "auto",
                    y = [p, x, m, b],
                    w = "start",
                    k = "end",
                    A = "clippingParents",
                    S = "viewport",
                    C = "popper",
                    P = "reference",
                    L = y.reduce(function (t, e) {
                        return t.concat([e + "-" + w, e + "-" + k]);
                    }, []),
                    T = [].concat(y, [v]).reduce(function (t, e) {
                        return t.concat([e, e + "-" + w, e + "-" + k]);
                    }, []),
                    M = "beforeRead",
                    E = "read",
                    I = "afterRead",
                    O = "beforeMain",
                    z = "main",
                    F = "afterMain",
                    D = "beforeWrite",
                    N = "write",
                    X = "afterWrite",
                    R = [M, E, I, O, z, F, D, N, X];
                function Y(t) {
                    return t ? (t.nodeName || "").toLowerCase() : null;
                }
                function H(t) {
                    if (null == t) return window;
                    if ("[object Window]" !== t.toString()) {
                        var e = t.ownerDocument;
                        return (e && e.defaultView) || window;
                    }
                    return t;
                }
                function W(t) {
                    return t instanceof H(t).Element || t instanceof Element;
                }
                function B(t) {
                    return (
                        t instanceof H(t).HTMLElement ||
                        t instanceof HTMLElement
                    );
                }
                function V(t) {
                    return (
                        "undefined" != typeof ShadowRoot &&
                        (t instanceof H(t).ShadowRoot ||
                            t instanceof ShadowRoot)
                    );
                }
                const G = {
                    name: "applyStyles",
                    enabled: !0,
                    phase: "write",
                    fn: function (t) {
                        var e = t.state;
                        Object.keys(e.elements).forEach(function (t) {
                            var i = e.styles[t] || {},
                                a = e.attributes[t] || {},
                                r = e.elements[t];
                            B(r) &&
                                Y(r) &&
                                (Object.assign(r.style, i),
                                Object.keys(a).forEach(function (t) {
                                    var e = a[t];
                                    !1 === e
                                        ? r.removeAttribute(t)
                                        : r.setAttribute(t, !0 === e ? "" : e);
                                }));
                        });
                    },
                    effect: function (t) {
                        var e = t.state,
                            i = {
                                popper: {
                                    position: e.options.strategy,
                                    left: "0",
                                    top: "0",
                                    margin: "0",
                                },
                                arrow: { position: "absolute" },
                                reference: {},
                            };
                        return (
                            Object.assign(e.elements.popper.style, i.popper),
                            (e.styles = i),
                            e.elements.arrow &&
                                Object.assign(e.elements.arrow.style, i.arrow),
                            function () {
                                Object.keys(e.elements).forEach(function (t) {
                                    var a = e.elements[t],
                                        r = e.attributes[t] || {},
                                        s = Object.keys(
                                            e.styles.hasOwnProperty(t)
                                                ? e.styles[t]
                                                : i[t]
                                        ).reduce(function (t, e) {
                                            return (t[e] = ""), t;
                                        }, {});
                                    B(a) &&
                                        Y(a) &&
                                        (Object.assign(a.style, s),
                                        Object.keys(r).forEach(function (t) {
                                            a.removeAttribute(t);
                                        }));
                                });
                            }
                        );
                    },
                    requires: ["computeStyles"],
                };
                function j(t) {
                    return t.split("-")[0];
                }
                var _ = Math.max,
                    U = Math.min,
                    q = Math.round;
                function $() {
                    var t = navigator.userAgentData;
                    return null != t && t.brands && Array.isArray(t.brands)
                        ? t.brands
                              .map(function (t) {
                                  return t.brand + "/" + t.version;
                              })
                              .join(" ")
                        : navigator.userAgent;
                }
                function Z() {
                    return !/^((?!chrome|android).)*safari/i.test($());
                }
                function J(t, e, i) {
                    void 0 === e && (e = !1), void 0 === i && (i = !1);
                    var a = t.getBoundingClientRect(),
                        r = 1,
                        s = 1;
                    e &&
                        B(t) &&
                        ((r =
                            (t.offsetWidth > 0 && q(a.width) / t.offsetWidth) ||
                            1),
                        (s =
                            (t.offsetHeight > 0 &&
                                q(a.height) / t.offsetHeight) ||
                            1));
                    var n = (W(t) ? H(t) : window).visualViewport,
                        o = !Z() && i,
                        l = (a.left + (o && n ? n.offsetLeft : 0)) / r,
                        c = (a.top + (o && n ? n.offsetTop : 0)) / s,
                        h = a.width / r,
                        d = a.height / s;
                    return {
                        width: h,
                        height: d,
                        top: c,
                        right: l + h,
                        bottom: c + d,
                        left: l,
                        x: l,
                        y: c,
                    };
                }
                function Q(t) {
                    var e = J(t),
                        i = t.offsetWidth,
                        a = t.offsetHeight;
                    return (
                        Math.abs(e.width - i) <= 1 && (i = e.width),
                        Math.abs(e.height - a) <= 1 && (a = e.height),
                        { x: t.offsetLeft, y: t.offsetTop, width: i, height: a }
                    );
                }
                function K(t, e) {
                    var i = e.getRootNode && e.getRootNode();
                    if (t.contains(e)) return !0;
                    if (i && V(i)) {
                        var a = e;
                        do {
                            if (a && t.isSameNode(a)) return !0;
                            a = a.parentNode || a.host;
                        } while (a);
                    }
                    return !1;
                }
                function tt(t) {
                    return H(t).getComputedStyle(t);
                }
                function et(t) {
                    return ["table", "td", "th"].indexOf(Y(t)) >= 0;
                }
                function it(t) {
                    return (
                        (W(t) ? t.ownerDocument : t.document) || window.document
                    ).documentElement;
                }
                function at(t) {
                    return "html" === Y(t)
                        ? t
                        : t.assignedSlot ||
                              t.parentNode ||
                              (V(t) ? t.host : null) ||
                              it(t);
                }
                function rt(t) {
                    return B(t) && "fixed" !== tt(t).position
                        ? t.offsetParent
                        : null;
                }
                function st(t) {
                    for (
                        var e = H(t), i = rt(t);
                        i && et(i) && "static" === tt(i).position;

                    )
                        i = rt(i);
                    return i &&
                        ("html" === Y(i) ||
                            ("body" === Y(i) && "static" === tt(i).position))
                        ? e
                        : i ||
                              (function (t) {
                                  var e = /firefox/i.test($());
                                  if (
                                      /Trident/i.test($()) &&
                                      B(t) &&
                                      "fixed" === tt(t).position
                                  )
                                      return null;
                                  var i = at(t);
                                  for (
                                      V(i) && (i = i.host);
                                      B(i) &&
                                      ["html", "body"].indexOf(Y(i)) < 0;

                                  ) {
                                      var a = tt(i);
                                      if (
                                          "none" !== a.transform ||
                                          "none" !== a.perspective ||
                                          "paint" === a.contain ||
                                          -1 !==
                                              [
                                                  "transform",
                                                  "perspective",
                                              ].indexOf(a.willChange) ||
                                          (e && "filter" === a.willChange) ||
                                          (e && a.filter && "none" !== a.filter)
                                      )
                                          return i;
                                      i = i.parentNode;
                                  }
                                  return null;
                              })(t) ||
                              e;
                }
                function nt(t) {
                    return ["top", "bottom"].indexOf(t) >= 0 ? "x" : "y";
                }
                function ot(t, e, i) {
                    return _(t, U(e, i));
                }
                function lt(t) {
                    return Object.assign(
                        {},
                        { top: 0, right: 0, bottom: 0, left: 0 },
                        t
                    );
                }
                function ct(t, e) {
                    return e.reduce(function (e, i) {
                        return (e[i] = t), e;
                    }, {});
                }
                const ht = {
                    name: "arrow",
                    enabled: !0,
                    phase: "main",
                    fn: function (t) {
                        var e,
                            i = t.state,
                            a = t.name,
                            r = t.options,
                            s = i.elements.arrow,
                            n = i.modifiersData.popperOffsets,
                            o = j(i.placement),
                            l = nt(o),
                            c = [b, m].indexOf(o) >= 0 ? "height" : "width";
                        if (s && n) {
                            var h = (function (t, e) {
                                    return lt(
                                        "number" !=
                                            typeof (t =
                                                "function" == typeof t
                                                    ? t(
                                                          Object.assign(
                                                              {},
                                                              e.rects,
                                                              {
                                                                  placement:
                                                                      e.placement,
                                                              }
                                                          )
                                                      )
                                                    : t)
                                            ? t
                                            : ct(t, y)
                                    );
                                })(r.padding, i),
                                d = Q(s),
                                u = "y" === l ? p : b,
                                f = "y" === l ? x : m,
                                g =
                                    i.rects.reference[c] +
                                    i.rects.reference[l] -
                                    n[l] -
                                    i.rects.popper[c],
                                v = n[l] - i.rects.reference[l],
                                w = st(s),
                                k = w
                                    ? "y" === l
                                        ? w.clientHeight || 0
                                        : w.clientWidth || 0
                                    : 0,
                                A = g / 2 - v / 2,
                                S = h[u],
                                C = k - d[c] - h[f],
                                P = k / 2 - d[c] / 2 + A,
                                L = ot(S, P, C),
                                T = l;
                            i.modifiersData[a] =
                                (((e = {})[T] = L),
                                (e.centerOffset = L - P),
                                e);
                        }
                    },
                    effect: function (t) {
                        var e = t.state,
                            i = t.options.element,
                            a = void 0 === i ? "[data-popper-arrow]" : i;
                        null != a &&
                            ("string" != typeof a ||
                                (a = e.elements.popper.querySelector(a))) &&
                            K(e.elements.popper, a) &&
                            (e.elements.arrow = a);
                    },
                    requires: ["popperOffsets"],
                    requiresIfExists: ["preventOverflow"],
                };
                function dt(t) {
                    return t.split("-")[1];
                }
                var ut = {
                    top: "auto",
                    right: "auto",
                    bottom: "auto",
                    left: "auto",
                };
                function ft(t) {
                    var e,
                        i = t.popper,
                        a = t.popperRect,
                        r = t.placement,
                        s = t.variation,
                        n = t.offsets,
                        o = t.position,
                        l = t.gpuAcceleration,
                        c = t.adaptive,
                        h = t.roundOffsets,
                        d = t.isFixed,
                        u = n.x,
                        f = void 0 === u ? 0 : u,
                        g = n.y,
                        v = void 0 === g ? 0 : g,
                        y =
                            "function" == typeof h
                                ? h({ x: f, y: v })
                                : { x: f, y: v };
                    (f = y.x), (v = y.y);
                    var w = n.hasOwnProperty("x"),
                        A = n.hasOwnProperty("y"),
                        S = b,
                        C = p,
                        P = window;
                    if (c) {
                        var L = st(i),
                            T = "clientHeight",
                            M = "clientWidth";
                        if (
                            (L === H(i) &&
                                "static" !== tt((L = it(i))).position &&
                                "absolute" === o &&
                                ((T = "scrollHeight"), (M = "scrollWidth")),
                            r === p || ((r === b || r === m) && s === k))
                        )
                            (C = x),
                                (v -=
                                    (d && L === P && P.visualViewport
                                        ? P.visualViewport.height
                                        : L[T]) - a.height),
                                (v *= l ? 1 : -1);
                        if (r === b || ((r === p || r === x) && s === k))
                            (S = m),
                                (f -=
                                    (d && L === P && P.visualViewport
                                        ? P.visualViewport.width
                                        : L[M]) - a.width),
                                (f *= l ? 1 : -1);
                    }
                    var E,
                        I = Object.assign({ position: o }, c && ut),
                        O =
                            !0 === h
                                ? (function (t, e) {
                                      var i = t.x,
                                          a = t.y,
                                          r = e.devicePixelRatio || 1;
                                      return {
                                          x: q(i * r) / r || 0,
                                          y: q(a * r) / r || 0,
                                      };
                                  })({ x: f, y: v }, H(i))
                                : { x: f, y: v };
                    return (
                        (f = O.x),
                        (v = O.y),
                        l
                            ? Object.assign(
                                  {},
                                  I,
                                  (((E = {})[C] = A ? "0" : ""),
                                  (E[S] = w ? "0" : ""),
                                  (E.transform =
                                      (P.devicePixelRatio || 1) <= 1
                                          ? "translate(" +
                                            f +
                                            "px, " +
                                            v +
                                            "px)"
                                          : "translate3d(" +
                                            f +
                                            "px, " +
                                            v +
                                            "px, 0)"),
                                  E)
                              )
                            : Object.assign(
                                  {},
                                  I,
                                  (((e = {})[C] = A ? v + "px" : ""),
                                  (e[S] = w ? f + "px" : ""),
                                  (e.transform = ""),
                                  e)
                              )
                    );
                }
                const gt = {
                    name: "computeStyles",
                    enabled: !0,
                    phase: "beforeWrite",
                    fn: function (t) {
                        var e = t.state,
                            i = t.options,
                            a = i.gpuAcceleration,
                            r = void 0 === a || a,
                            s = i.adaptive,
                            n = void 0 === s || s,
                            o = i.roundOffsets,
                            l = void 0 === o || o,
                            c = {
                                placement: j(e.placement),
                                variation: dt(e.placement),
                                popper: e.elements.popper,
                                popperRect: e.rects.popper,
                                gpuAcceleration: r,
                                isFixed: "fixed" === e.options.strategy,
                            };
                        null != e.modifiersData.popperOffsets &&
                            (e.styles.popper = Object.assign(
                                {},
                                e.styles.popper,
                                ft(
                                    Object.assign({}, c, {
                                        offsets: e.modifiersData.popperOffsets,
                                        position: e.options.strategy,
                                        adaptive: n,
                                        roundOffsets: l,
                                    })
                                )
                            )),
                            null != e.modifiersData.arrow &&
                                (e.styles.arrow = Object.assign(
                                    {},
                                    e.styles.arrow,
                                    ft(
                                        Object.assign({}, c, {
                                            offsets: e.modifiersData.arrow,
                                            position: "absolute",
                                            adaptive: !1,
                                            roundOffsets: l,
                                        })
                                    )
                                )),
                            (e.attributes.popper = Object.assign(
                                {},
                                e.attributes.popper,
                                { "data-popper-placement": e.placement }
                            ));
                    },
                    data: {},
                };
                var pt = { passive: !0 };
                const xt = {
                    name: "eventListeners",
                    enabled: !0,
                    phase: "write",
                    fn: function () {},
                    effect: function (t) {
                        var e = t.state,
                            i = t.instance,
                            a = t.options,
                            r = a.scroll,
                            s = void 0 === r || r,
                            n = a.resize,
                            o = void 0 === n || n,
                            l = H(e.elements.popper),
                            c = [].concat(
                                e.scrollParents.reference,
                                e.scrollParents.popper
                            );
                        return (
                            s &&
                                c.forEach(function (t) {
                                    t.addEventListener("scroll", i.update, pt);
                                }),
                            o && l.addEventListener("resize", i.update, pt),
                            function () {
                                s &&
                                    c.forEach(function (t) {
                                        t.removeEventListener(
                                            "scroll",
                                            i.update,
                                            pt
                                        );
                                    }),
                                    o &&
                                        l.removeEventListener(
                                            "resize",
                                            i.update,
                                            pt
                                        );
                            }
                        );
                    },
                    data: {},
                };
                var mt = {
                    left: "right",
                    right: "left",
                    bottom: "top",
                    top: "bottom",
                };
                function bt(t) {
                    return t.replace(/left|right|bottom|top/g, function (t) {
                        return mt[t];
                    });
                }
                var vt = { start: "end", end: "start" };
                function yt(t) {
                    return t.replace(/start|end/g, function (t) {
                        return vt[t];
                    });
                }
                function wt(t) {
                    var e = H(t);
                    return {
                        scrollLeft: e.pageXOffset,
                        scrollTop: e.pageYOffset,
                    };
                }
                function kt(t) {
                    return J(it(t)).left + wt(t).scrollLeft;
                }
                function At(t) {
                    var e = tt(t),
                        i = e.overflow,
                        a = e.overflowX,
                        r = e.overflowY;
                    return /auto|scroll|overlay|hidden/.test(i + r + a);
                }
                function St(t) {
                    return ["html", "body", "#document"].indexOf(Y(t)) >= 0
                        ? t.ownerDocument.body
                        : B(t) && At(t)
                        ? t
                        : St(at(t));
                }
                function Ct(t, e) {
                    var i;
                    void 0 === e && (e = []);
                    var a = St(t),
                        r =
                            a ===
                            (null == (i = t.ownerDocument) ? void 0 : i.body),
                        s = H(a),
                        n = r
                            ? [s].concat(s.visualViewport || [], At(a) ? a : [])
                            : a,
                        o = e.concat(n);
                    return r ? o : o.concat(Ct(at(n)));
                }
                function Pt(t) {
                    return Object.assign({}, t, {
                        left: t.x,
                        top: t.y,
                        right: t.x + t.width,
                        bottom: t.y + t.height,
                    });
                }
                function Lt(t, e, i) {
                    return e === S
                        ? Pt(
                              (function (t, e) {
                                  var i = H(t),
                                      a = it(t),
                                      r = i.visualViewport,
                                      s = a.clientWidth,
                                      n = a.clientHeight,
                                      o = 0,
                                      l = 0;
                                  if (r) {
                                      (s = r.width), (n = r.height);
                                      var c = Z();
                                      (c || (!c && "fixed" === e)) &&
                                          ((o = r.offsetLeft),
                                          (l = r.offsetTop));
                                  }
                                  return {
                                      width: s,
                                      height: n,
                                      x: o + kt(t),
                                      y: l,
                                  };
                              })(t, i)
                          )
                        : W(e)
                        ? (function (t, e) {
                              var i = J(t, !1, "fixed" === e);
                              return (
                                  (i.top = i.top + t.clientTop),
                                  (i.left = i.left + t.clientLeft),
                                  (i.bottom = i.top + t.clientHeight),
                                  (i.right = i.left + t.clientWidth),
                                  (i.width = t.clientWidth),
                                  (i.height = t.clientHeight),
                                  (i.x = i.left),
                                  (i.y = i.top),
                                  i
                              );
                          })(e, i)
                        : Pt(
                              (function (t) {
                                  var e,
                                      i = it(t),
                                      a = wt(t),
                                      r =
                                          null == (e = t.ownerDocument)
                                              ? void 0
                                              : e.body,
                                      s = _(
                                          i.scrollWidth,
                                          i.clientWidth,
                                          r ? r.scrollWidth : 0,
                                          r ? r.clientWidth : 0
                                      ),
                                      n = _(
                                          i.scrollHeight,
                                          i.clientHeight,
                                          r ? r.scrollHeight : 0,
                                          r ? r.clientHeight : 0
                                      ),
                                      o = -a.scrollLeft + kt(t),
                                      l = -a.scrollTop;
                                  return (
                                      "rtl" === tt(r || i).direction &&
                                          (o +=
                                              _(
                                                  i.clientWidth,
                                                  r ? r.clientWidth : 0
                                              ) - s),
                                      { width: s, height: n, x: o, y: l }
                                  );
                              })(it(t))
                          );
                }
                function Tt(t, e, i, a) {
                    var r =
                            "clippingParents" === e
                                ? (function (t) {
                                      var e = Ct(at(t)),
                                          i =
                                              ["absolute", "fixed"].indexOf(
                                                  tt(t).position
                                              ) >= 0 && B(t)
                                                  ? st(t)
                                                  : t;
                                      return W(i)
                                          ? e.filter(function (t) {
                                                return (
                                                    W(t) &&
                                                    K(t, i) &&
                                                    "body" !== Y(t)
                                                );
                                            })
                                          : [];
                                  })(t)
                                : [].concat(e),
                        s = [].concat(r, [i]),
                        n = s[0],
                        o = s.reduce(function (e, i) {
                            var r = Lt(t, i, a);
                            return (
                                (e.top = _(r.top, e.top)),
                                (e.right = U(r.right, e.right)),
                                (e.bottom = U(r.bottom, e.bottom)),
                                (e.left = _(r.left, e.left)),
                                e
                            );
                        }, Lt(t, n, a));
                    return (
                        (o.width = o.right - o.left),
                        (o.height = o.bottom - o.top),
                        (o.x = o.left),
                        (o.y = o.top),
                        o
                    );
                }
                function Mt(t) {
                    var e,
                        i = t.reference,
                        a = t.element,
                        r = t.placement,
                        s = r ? j(r) : null,
                        n = r ? dt(r) : null,
                        o = i.x + i.width / 2 - a.width / 2,
                        l = i.y + i.height / 2 - a.height / 2;
                    switch (s) {
                        case p:
                            e = { x: o, y: i.y - a.height };
                            break;
                        case x:
                            e = { x: o, y: i.y + i.height };
                            break;
                        case m:
                            e = { x: i.x + i.width, y: l };
                            break;
                        case b:
                            e = { x: i.x - a.width, y: l };
                            break;
                        default:
                            e = { x: i.x, y: i.y };
                    }
                    var c = s ? nt(s) : null;
                    if (null != c) {
                        var h = "y" === c ? "height" : "width";
                        switch (n) {
                            case w:
                                e[c] = e[c] - (i[h] / 2 - a[h] / 2);
                                break;
                            case k:
                                e[c] = e[c] + (i[h] / 2 - a[h] / 2);
                        }
                    }
                    return e;
                }
                function Et(t, e) {
                    void 0 === e && (e = {});
                    var i = e,
                        a = i.placement,
                        r = void 0 === a ? t.placement : a,
                        s = i.strategy,
                        n = void 0 === s ? t.strategy : s,
                        o = i.boundary,
                        l = void 0 === o ? A : o,
                        c = i.rootBoundary,
                        h = void 0 === c ? S : c,
                        d = i.elementContext,
                        u = void 0 === d ? C : d,
                        f = i.altBoundary,
                        g = void 0 !== f && f,
                        b = i.padding,
                        v = void 0 === b ? 0 : b,
                        w = lt("number" != typeof v ? v : ct(v, y)),
                        k = u === C ? P : C,
                        L = t.rects.popper,
                        T = t.elements[g ? k : u],
                        M = Tt(
                            W(T)
                                ? T
                                : T.contextElement || it(t.elements.popper),
                            l,
                            h,
                            n
                        ),
                        E = J(t.elements.reference),
                        I = Mt({
                            reference: E,
                            element: L,
                            strategy: "absolute",
                            placement: r,
                        }),
                        O = Pt(Object.assign({}, L, I)),
                        z = u === C ? O : E,
                        F = {
                            top: M.top - z.top + w.top,
                            bottom: z.bottom - M.bottom + w.bottom,
                            left: M.left - z.left + w.left,
                            right: z.right - M.right + w.right,
                        },
                        D = t.modifiersData.offset;
                    if (u === C && D) {
                        var N = D[r];
                        Object.keys(F).forEach(function (t) {
                            var e = [m, x].indexOf(t) >= 0 ? 1 : -1,
                                i = [p, x].indexOf(t) >= 0 ? "y" : "x";
                            F[t] += N[i] * e;
                        });
                    }
                    return F;
                }
                const It = {
                    name: "flip",
                    enabled: !0,
                    phase: "main",
                    fn: function (t) {
                        var e = t.state,
                            i = t.options,
                            a = t.name;
                        if (!e.modifiersData[a]._skip) {
                            for (
                                var r = i.mainAxis,
                                    s = void 0 === r || r,
                                    n = i.altAxis,
                                    o = void 0 === n || n,
                                    l = i.fallbackPlacements,
                                    c = i.padding,
                                    h = i.boundary,
                                    d = i.rootBoundary,
                                    u = i.altBoundary,
                                    f = i.flipVariations,
                                    g = void 0 === f || f,
                                    k = i.allowedAutoPlacements,
                                    A = e.options.placement,
                                    S = j(A),
                                    C =
                                        l ||
                                        (S === A || !g
                                            ? [bt(A)]
                                            : (function (t) {
                                                  if (j(t) === v) return [];
                                                  var e = bt(t);
                                                  return [yt(t), e, yt(e)];
                                              })(A)),
                                    P = [A].concat(C).reduce(function (t, i) {
                                        return t.concat(
                                            j(i) === v
                                                ? (function (t, e) {
                                                      void 0 === e && (e = {});
                                                      var i = e,
                                                          a = i.placement,
                                                          r = i.boundary,
                                                          s = i.rootBoundary,
                                                          n = i.padding,
                                                          o = i.flipVariations,
                                                          l =
                                                              i.allowedAutoPlacements,
                                                          c =
                                                              void 0 === l
                                                                  ? T
                                                                  : l,
                                                          h = dt(a),
                                                          d = h
                                                              ? o
                                                                  ? L
                                                                  : L.filter(
                                                                        function (
                                                                            t
                                                                        ) {
                                                                            return (
                                                                                dt(
                                                                                    t
                                                                                ) ===
                                                                                h
                                                                            );
                                                                        }
                                                                    )
                                                              : y,
                                                          u = d.filter(
                                                              function (t) {
                                                                  return (
                                                                      c.indexOf(
                                                                          t
                                                                      ) >= 0
                                                                  );
                                                              }
                                                          );
                                                      0 === u.length && (u = d);
                                                      var f = u.reduce(
                                                          function (e, i) {
                                                              return (
                                                                  (e[i] = Et(
                                                                      t,
                                                                      {
                                                                          placement:
                                                                              i,
                                                                          boundary:
                                                                              r,
                                                                          rootBoundary:
                                                                              s,
                                                                          padding:
                                                                              n,
                                                                      }
                                                                  )[j(i)]),
                                                                  e
                                                              );
                                                          },
                                                          {}
                                                      );
                                                      return Object.keys(
                                                          f
                                                      ).sort(function (t, e) {
                                                          return f[t] - f[e];
                                                      });
                                                  })(e, {
                                                      placement: i,
                                                      boundary: h,
                                                      rootBoundary: d,
                                                      padding: c,
                                                      flipVariations: g,
                                                      allowedAutoPlacements: k,
                                                  })
                                                : i
                                        );
                                    }, []),
                                    M = e.rects.reference,
                                    E = e.rects.popper,
                                    I = new Map(),
                                    O = !0,
                                    z = P[0],
                                    F = 0;
                                F < P.length;
                                F++
                            ) {
                                var D = P[F],
                                    N = j(D),
                                    X = dt(D) === w,
                                    R = [p, x].indexOf(N) >= 0,
                                    Y = R ? "width" : "height",
                                    H = Et(e, {
                                        placement: D,
                                        boundary: h,
                                        rootBoundary: d,
                                        altBoundary: u,
                                        padding: c,
                                    }),
                                    W = R ? (X ? m : b) : X ? x : p;
                                M[Y] > E[Y] && (W = bt(W));
                                var B = bt(W),
                                    V = [];
                                if (
                                    (s && V.push(H[N] <= 0),
                                    o && V.push(H[W] <= 0, H[B] <= 0),
                                    V.every(function (t) {
                                        return t;
                                    }))
                                ) {
                                    (z = D), (O = !1);
                                    break;
                                }
                                I.set(D, V);
                            }
                            if (O)
                                for (
                                    var G = function (t) {
                                            var e = P.find(function (e) {
                                                var i = I.get(e);
                                                if (i)
                                                    return i
                                                        .slice(0, t)
                                                        .every(function (t) {
                                                            return t;
                                                        });
                                            });
                                            if (e) return (z = e), "break";
                                        },
                                        _ = g ? 3 : 1;
                                    _ > 0;
                                    _--
                                ) {
                                    if ("break" === G(_)) break;
                                }
                            e.placement !== z &&
                                ((e.modifiersData[a]._skip = !0),
                                (e.placement = z),
                                (e.reset = !0));
                        }
                    },
                    requiresIfExists: ["offset"],
                    data: { _skip: !1 },
                };
                function Ot(t, e, i) {
                    return (
                        void 0 === i && (i = { x: 0, y: 0 }),
                        {
                            top: t.top - e.height - i.y,
                            right: t.right - e.width + i.x,
                            bottom: t.bottom - e.height + i.y,
                            left: t.left - e.width - i.x,
                        }
                    );
                }
                function zt(t) {
                    return [p, m, x, b].some(function (e) {
                        return t[e] >= 0;
                    });
                }
                const Ft = {
                    name: "hide",
                    enabled: !0,
                    phase: "main",
                    requiresIfExists: ["preventOverflow"],
                    fn: function (t) {
                        var e = t.state,
                            i = t.name,
                            a = e.rects.reference,
                            r = e.rects.popper,
                            s = e.modifiersData.preventOverflow,
                            n = Et(e, { elementContext: "reference" }),
                            o = Et(e, { altBoundary: !0 }),
                            l = Ot(n, a),
                            c = Ot(o, r, s),
                            h = zt(l),
                            d = zt(c);
                        (e.modifiersData[i] = {
                            referenceClippingOffsets: l,
                            popperEscapeOffsets: c,
                            isReferenceHidden: h,
                            hasPopperEscaped: d,
                        }),
                            (e.attributes.popper = Object.assign(
                                {},
                                e.attributes.popper,
                                {
                                    "data-popper-reference-hidden": h,
                                    "data-popper-escaped": d,
                                }
                            ));
                    },
                };
                const Dt = {
                    name: "offset",
                    enabled: !0,
                    phase: "main",
                    requires: ["popperOffsets"],
                    fn: function (t) {
                        var e = t.state,
                            i = t.options,
                            a = t.name,
                            r = i.offset,
                            s = void 0 === r ? [0, 0] : r,
                            n = T.reduce(function (t, i) {
                                return (
                                    (t[i] = (function (t, e, i) {
                                        var a = j(t),
                                            r = [b, p].indexOf(a) >= 0 ? -1 : 1,
                                            s =
                                                "function" == typeof i
                                                    ? i(
                                                          Object.assign({}, e, {
                                                              placement: t,
                                                          })
                                                      )
                                                    : i,
                                            n = s[0],
                                            o = s[1];
                                        return (
                                            (n = n || 0),
                                            (o = (o || 0) * r),
                                            [b, m].indexOf(a) >= 0
                                                ? { x: o, y: n }
                                                : { x: n, y: o }
                                        );
                                    })(i, e.rects, s)),
                                    t
                                );
                            }, {}),
                            o = n[e.placement],
                            l = o.x,
                            c = o.y;
                        null != e.modifiersData.popperOffsets &&
                            ((e.modifiersData.popperOffsets.x += l),
                            (e.modifiersData.popperOffsets.y += c)),
                            (e.modifiersData[a] = n);
                    },
                };
                const Nt = {
                    name: "popperOffsets",
                    enabled: !0,
                    phase: "read",
                    fn: function (t) {
                        var e = t.state,
                            i = t.name;
                        e.modifiersData[i] = Mt({
                            reference: e.rects.reference,
                            element: e.rects.popper,
                            strategy: "absolute",
                            placement: e.placement,
                        });
                    },
                    data: {},
                };
                const Xt = {
                    name: "preventOverflow",
                    enabled: !0,
                    phase: "main",
                    fn: function (t) {
                        var e = t.state,
                            i = t.options,
                            a = t.name,
                            r = i.mainAxis,
                            s = void 0 === r || r,
                            n = i.altAxis,
                            o = void 0 !== n && n,
                            l = i.boundary,
                            c = i.rootBoundary,
                            h = i.altBoundary,
                            d = i.padding,
                            u = i.tether,
                            f = void 0 === u || u,
                            g = i.tetherOffset,
                            v = void 0 === g ? 0 : g,
                            y = Et(e, {
                                boundary: l,
                                rootBoundary: c,
                                padding: d,
                                altBoundary: h,
                            }),
                            k = j(e.placement),
                            A = dt(e.placement),
                            S = !A,
                            C = nt(k),
                            P = "x" === C ? "y" : "x",
                            L = e.modifiersData.popperOffsets,
                            T = e.rects.reference,
                            M = e.rects.popper,
                            E =
                                "function" == typeof v
                                    ? v(
                                          Object.assign({}, e.rects, {
                                              placement: e.placement,
                                          })
                                      )
                                    : v,
                            I =
                                "number" == typeof E
                                    ? { mainAxis: E, altAxis: E }
                                    : Object.assign(
                                          { mainAxis: 0, altAxis: 0 },
                                          E
                                      ),
                            O = e.modifiersData.offset
                                ? e.modifiersData.offset[e.placement]
                                : null,
                            z = { x: 0, y: 0 };
                        if (L) {
                            if (s) {
                                var F,
                                    D = "y" === C ? p : b,
                                    N = "y" === C ? x : m,
                                    X = "y" === C ? "height" : "width",
                                    R = L[C],
                                    Y = R + y[D],
                                    H = R - y[N],
                                    W = f ? -M[X] / 2 : 0,
                                    B = A === w ? T[X] : M[X],
                                    V = A === w ? -M[X] : -T[X],
                                    G = e.elements.arrow,
                                    q = f && G ? Q(G) : { width: 0, height: 0 },
                                    $ = e.modifiersData["arrow#persistent"]
                                        ? e.modifiersData["arrow#persistent"]
                                              .padding
                                        : {
                                              top: 0,
                                              right: 0,
                                              bottom: 0,
                                              left: 0,
                                          },
                                    Z = $[D],
                                    J = $[N],
                                    K = ot(0, T[X], q[X]),
                                    tt = S
                                        ? T[X] / 2 - W - K - Z - I.mainAxis
                                        : B - K - Z - I.mainAxis,
                                    et = S
                                        ? -T[X] / 2 + W + K + J + I.mainAxis
                                        : V + K + J + I.mainAxis,
                                    it =
                                        e.elements.arrow &&
                                        st(e.elements.arrow),
                                    at = it
                                        ? "y" === C
                                            ? it.clientTop || 0
                                            : it.clientLeft || 0
                                        : 0,
                                    rt =
                                        null != (F = null == O ? void 0 : O[C])
                                            ? F
                                            : 0,
                                    lt = R + et - rt,
                                    ct = ot(
                                        f ? U(Y, R + tt - rt - at) : Y,
                                        R,
                                        f ? _(H, lt) : H
                                    );
                                (L[C] = ct), (z[C] = ct - R);
                            }
                            if (o) {
                                var ht,
                                    ut = "x" === C ? p : b,
                                    ft = "x" === C ? x : m,
                                    gt = L[P],
                                    pt = "y" === P ? "height" : "width",
                                    xt = gt + y[ut],
                                    mt = gt - y[ft],
                                    bt = -1 !== [p, b].indexOf(k),
                                    vt =
                                        null != (ht = null == O ? void 0 : O[P])
                                            ? ht
                                            : 0,
                                    yt = bt
                                        ? xt
                                        : gt - T[pt] - M[pt] - vt + I.altAxis,
                                    wt = bt
                                        ? gt + T[pt] + M[pt] - vt - I.altAxis
                                        : mt,
                                    kt =
                                        f && bt
                                            ? (function (t, e, i) {
                                                  var a = ot(t, e, i);
                                                  return a > i ? i : a;
                                              })(yt, gt, wt)
                                            : ot(f ? yt : xt, gt, f ? wt : mt);
                                (L[P] = kt), (z[P] = kt - gt);
                            }
                            e.modifiersData[a] = z;
                        }
                    },
                    requiresIfExists: ["offset"],
                };
                function Rt(t, e, i) {
                    void 0 === i && (i = !1);
                    var a,
                        r,
                        s = B(e),
                        n =
                            B(e) &&
                            (function (t) {
                                var e = t.getBoundingClientRect(),
                                    i = q(e.width) / t.offsetWidth || 1,
                                    a = q(e.height) / t.offsetHeight || 1;
                                return 1 !== i || 1 !== a;
                            })(e),
                        o = it(e),
                        l = J(t, n, i),
                        c = { scrollLeft: 0, scrollTop: 0 },
                        h = { x: 0, y: 0 };
                    return (
                        (s || (!s && !i)) &&
                            (("body" !== Y(e) || At(o)) &&
                                (c =
                                    (a = e) !== H(a) && B(a)
                                        ? {
                                              scrollLeft: (r = a).scrollLeft,
                                              scrollTop: r.scrollTop,
                                          }
                                        : wt(a)),
                            B(e)
                                ? (((h = J(e, !0)).x += e.clientLeft),
                                  (h.y += e.clientTop))
                                : o && (h.x = kt(o))),
                        {
                            x: l.left + c.scrollLeft - h.x,
                            y: l.top + c.scrollTop - h.y,
                            width: l.width,
                            height: l.height,
                        }
                    );
                }
                function Yt(t) {
                    var e = new Map(),
                        i = new Set(),
                        a = [];
                    function r(t) {
                        i.add(t.name),
                            []
                                .concat(
                                    t.requires || [],
                                    t.requiresIfExists || []
                                )
                                .forEach(function (t) {
                                    if (!i.has(t)) {
                                        var a = e.get(t);
                                        a && r(a);
                                    }
                                }),
                            a.push(t);
                    }
                    return (
                        t.forEach(function (t) {
                            e.set(t.name, t);
                        }),
                        t.forEach(function (t) {
                            i.has(t.name) || r(t);
                        }),
                        a
                    );
                }
                var Ht = {
                    placement: "bottom",
                    modifiers: [],
                    strategy: "absolute",
                };
                function Wt() {
                    for (
                        var t = arguments.length, e = new Array(t), i = 0;
                        i < t;
                        i++
                    )
                        e[i] = arguments[i];
                    return !e.some(function (t) {
                        return !(
                            t && "function" == typeof t.getBoundingClientRect
                        );
                    });
                }
                function Bt(t) {
                    void 0 === t && (t = {});
                    var e = t,
                        i = e.defaultModifiers,
                        a = void 0 === i ? [] : i,
                        r = e.defaultOptions,
                        s = void 0 === r ? Ht : r;
                    return function (t, e, i) {
                        void 0 === i && (i = s);
                        var r,
                            n,
                            o = {
                                placement: "bottom",
                                orderedModifiers: [],
                                options: Object.assign({}, Ht, s),
                                modifiersData: {},
                                elements: { reference: t, popper: e },
                                attributes: {},
                                styles: {},
                            },
                            l = [],
                            c = !1,
                            h = {
                                state: o,
                                setOptions: function (i) {
                                    var r =
                                        "function" == typeof i
                                            ? i(o.options)
                                            : i;
                                    d(),
                                        (o.options = Object.assign(
                                            {},
                                            s,
                                            o.options,
                                            r
                                        )),
                                        (o.scrollParents = {
                                            reference: W(t)
                                                ? Ct(t)
                                                : t.contextElement
                                                ? Ct(t.contextElement)
                                                : [],
                                            popper: Ct(e),
                                        });
                                    var n,
                                        c,
                                        u = (function (t) {
                                            var e = Yt(t);
                                            return R.reduce(function (t, i) {
                                                return t.concat(
                                                    e.filter(function (t) {
                                                        return t.phase === i;
                                                    })
                                                );
                                            }, []);
                                        })(
                                            ((n = [].concat(
                                                a,
                                                o.options.modifiers
                                            )),
                                            (c = n.reduce(function (t, e) {
                                                var i = t[e.name];
                                                return (
                                                    (t[e.name] = i
                                                        ? Object.assign(
                                                              {},
                                                              i,
                                                              e,
                                                              {
                                                                  options:
                                                                      Object.assign(
                                                                          {},
                                                                          i.options,
                                                                          e.options
                                                                      ),
                                                                  data: Object.assign(
                                                                      {},
                                                                      i.data,
                                                                      e.data
                                                                  ),
                                                              }
                                                          )
                                                        : e),
                                                    t
                                                );
                                            }, {})),
                                            Object.keys(c).map(function (t) {
                                                return c[t];
                                            }))
                                        );
                                    return (
                                        (o.orderedModifiers = u.filter(
                                            function (t) {
                                                return t.enabled;
                                            }
                                        )),
                                        o.orderedModifiers.forEach(function (
                                            t
                                        ) {
                                            var e = t.name,
                                                i = t.options,
                                                a = void 0 === i ? {} : i,
                                                r = t.effect;
                                            if ("function" == typeof r) {
                                                var s = r({
                                                        state: o,
                                                        name: e,
                                                        instance: h,
                                                        options: a,
                                                    }),
                                                    n = function () {};
                                                l.push(s || n);
                                            }
                                        }),
                                        h.update()
                                    );
                                },
                                forceUpdate: function () {
                                    if (!c) {
                                        var t = o.elements,
                                            e = t.reference,
                                            i = t.popper;
                                        if (Wt(e, i)) {
                                            (o.rects = {
                                                reference: Rt(
                                                    e,
                                                    st(i),
                                                    "fixed" ===
                                                        o.options.strategy
                                                ),
                                                popper: Q(i),
                                            }),
                                                (o.reset = !1),
                                                (o.placement =
                                                    o.options.placement),
                                                o.orderedModifiers.forEach(
                                                    function (t) {
                                                        return (o.modifiersData[
                                                            t.name
                                                        ] = Object.assign(
                                                            {},
                                                            t.data
                                                        ));
                                                    }
                                                );
                                            for (
                                                var a = 0;
                                                a < o.orderedModifiers.length;
                                                a++
                                            )
                                                if (!0 !== o.reset) {
                                                    var r =
                                                            o.orderedModifiers[
                                                                a
                                                            ],
                                                        s = r.fn,
                                                        n = r.options,
                                                        l =
                                                            void 0 === n
                                                                ? {}
                                                                : n,
                                                        d = r.name;
                                                    "function" == typeof s &&
                                                        (o =
                                                            s({
                                                                state: o,
                                                                options: l,
                                                                name: d,
                                                                instance: h,
                                                            }) || o);
                                                } else (o.reset = !1), (a = -1);
                                        }
                                    }
                                },
                                update:
                                    ((r = function () {
                                        return new Promise(function (t) {
                                            h.forceUpdate(), t(o);
                                        });
                                    }),
                                    function () {
                                        return (
                                            n ||
                                                (n = new Promise(function (t) {
                                                    Promise.resolve().then(
                                                        function () {
                                                            (n = void 0),
                                                                t(r());
                                                        }
                                                    );
                                                })),
                                            n
                                        );
                                    }),
                                destroy: function () {
                                    d(), (c = !0);
                                },
                            };
                        if (!Wt(t, e)) return h;
                        function d() {
                            l.forEach(function (t) {
                                return t();
                            }),
                                (l = []);
                        }
                        return (
                            h.setOptions(i).then(function (t) {
                                !c && i.onFirstUpdate && i.onFirstUpdate(t);
                            }),
                            h
                        );
                    };
                }
                var Vt = Bt(),
                    Gt = Bt({
                        defaultModifiers: [xt, Nt, gt, G, Dt, It, Xt, ht, Ft],
                    }),
                    jt = Bt({ defaultModifiers: [xt, Nt, gt, G] });
                (window.cash = s()),
                    (window.axios = o()),
                    (window.helper = h),
                    (window.Velocity = u()),
                    (window.Popper = a),
                    (window.ApexCharts = g());
                var _t = document.head.querySelector('meta[name="csrf-token"]');
                _t
                    ? (window.axios.defaults.headers.common["X-CSRF-TOKEN"] =
                          _t.content)
                    : console.error(
                          "CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token"
                      ),
                    (function (t) {
                        let e = (function e(i) {
                            return (
                                t("[data-loading-icon]").each(function () {
                                    let e =
                                            void 0 !== t(this).data("color")
                                                ? t(this).data("color")
                                                : t("body").css("color"),
                                        i =
                                            void 0 !== t(this).attr("class")
                                                ? t(this).attr("class")
                                                : "";
                                    [
                                        {
                                            name: "audio",
                                            svg: `\n                    <svg width="15" viewBox="0 0 55 80" xmlns="http://www.w3.org/2000/svg" fill="${e}" class="${i}">\n                        <g transform="matrix(1 0 0 -1 0 80)">\n                            <rect width="10" height="20" rx="3">\n                                <animate attributeName="height"\n                                    begin="0s" dur="4.3s"\n                                    values="20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20" calcMode="linear"\n                                    repeatCount="indefinite" />\n                            </rect>\n                            <rect x="15" width="10" height="80" rx="3">\n                                <animate attributeName="height"\n                                    begin="0s" dur="2s"\n                                    values="80;55;33;5;75;23;73;33;12;14;60;80" calcMode="linear"\n                                    repeatCount="indefinite" />\n                            </rect>\n                            <rect x="30" width="10" height="50" rx="3">\n                                <animate attributeName="height"\n                                    begin="0s" dur="1.4s"\n                                    values="50;34;78;23;56;23;34;76;80;54;21;50" calcMode="linear"\n                                    repeatCount="indefinite" />\n                            </rect>\n                            <rect x="45" width="10" height="30" rx="3">\n                                <animate attributeName="height"\n                                    begin="0s" dur="2s"\n                                    values="30;45;13;80;56;72;45;76;34;23;67;30" calcMode="linear"\n                                    repeatCount="indefinite" />\n                            </rect>\n                        </g>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "ball-triangle",
                                            svg: `\n                    <svg width="20" viewBox="0 0 57 57" xmlns="http://www.w3.org/2000/svg" class="${i}">\n                        <g fill="none" fill-rule="evenodd">\n                            <g transform="translate(1 1)">\n                                <circle cx="5" cy="50" r="5" fill="${e}">\n                                    <animate attributeName="cy"\n                                        begin="0s" dur="2.2s"\n                                        values="50;5;50;50"\n                                        calcMode="linear"\n                                        repeatCount="indefinite" />\n                                    <animate attributeName="cx"\n                                        begin="0s" dur="2.2s"\n                                        values="5;27;49;5"\n                                        calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                                <circle cx="27" cy="5" r="5" fill="${e}">\n                                    <animate attributeName="cy"\n                                        begin="0s" dur="2.2s"\n                                        from="5" to="5"\n                                        values="5;50;50;5"\n                                        calcMode="linear"\n                                        repeatCount="indefinite" />\n                                    <animate attributeName="cx"\n                                        begin="0s" dur="2.2s"\n                                        from="27" to="27"\n                                        values="27;49;5;27"\n                                        calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                                <circle cx="49" cy="50" r="5" fill="${e}">\n                                    <animate attributeName="cy"\n                                        begin="0s" dur="2.2s"\n                                        values="50;50;5;50"\n                                        calcMode="linear"\n                                        repeatCount="indefinite" />\n                                    <animate attributeName="cx"\n                                        from="49" to="49"\n                                        begin="0s" dur="2.2s"\n                                        values="49;5;27;49"\n                                        calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                            </g>\n                        </g>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "bars",
                                            svg: `\n                    <svg width="20" viewBox="0 0 135 140" xmlns="http://www.w3.org/2000/svg" fill="${e}" class="${i}">\n                        <rect y="10" width="15" height="120" rx="6">\n                            <animate attributeName="height"\n                                begin="0.5s" dur="1s"\n                                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                                repeatCount="indefinite" />\n                            <animate attributeName="y"\n                                begin="0.5s" dur="1s"\n                                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                                repeatCount="indefinite" />\n                        </rect>\n                        <rect x="30" y="10" width="15" height="120" rx="6">\n                            <animate attributeName="height"\n                                begin="0.25s" dur="1s"\n                                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                                repeatCount="indefinite" />\n                            <animate attributeName="y"\n                                begin="0.25s" dur="1s"\n                                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                                repeatCount="indefinite" />\n                        </rect>\n                        <rect x="60" width="15" height="140" rx="6">\n                            <animate attributeName="height"\n                                begin="0s" dur="1s"\n                                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                                repeatCount="indefinite" />\n                            <animate attributeName="y"\n                                begin="0s" dur="1s"\n                                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                                repeatCount="indefinite" />\n                        </rect>\n                        <rect x="90" y="10" width="15" height="120" rx="6">\n                            <animate attributeName="height"\n                                begin="0.25s" dur="1s"\n                                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                                repeatCount="indefinite" />\n                            <animate attributeName="y"\n                                begin="0.25s" dur="1s"\n                                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                                repeatCount="indefinite" />\n                        </rect>\n                        <rect x="120" y="10" width="15" height="120" rx="6">\n                            <animate attributeName="height"\n                                begin="0.5s" dur="1s"\n                                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                                repeatCount="indefinite" />\n                            <animate attributeName="y"\n                                begin="0.5s" dur="1s"\n                                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                                repeatCount="indefinite" />\n                        </rect>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "circles",
                                            svg: `\n                    <svg width="20" viewBox="0 0 135 135" xmlns="http://www.w3.org/2000/svg" fill="${e}" class="${i}">\n                        <path d="M67.447 58c5.523 0 10-4.477 10-10s-4.477-10-10-10-10 4.477-10 10 4.477 10 10 10zm9.448 9.447c0 5.523 4.477 10 10 10 5.522 0 10-4.477 10-10s-4.478-10-10-10c-5.523 0-10 4.477-10 10zm-9.448 9.448c-5.523 0-10 4.477-10 10 0 5.522 4.477 10 10 10s10-4.478 10-10c0-5.523-4.477-10-10-10zM58 67.447c0-5.523-4.477-10-10-10s-10 4.477-10 10 4.477 10 10 10 10-4.477 10-10z">\n                            <animateTransform\n                                attributeName="transform"\n                                type="rotate"\n                                from="0 67 67"\n                                to="-360 67 67"\n                                dur="2.5s"\n                                repeatCount="indefinite"/>\n                        </path>\n                        <path d="M28.19 40.31c6.627 0 12-5.374 12-12 0-6.628-5.373-12-12-12-6.628 0-12 5.372-12 12 0 6.626 5.372 12 12 12zm30.72-19.825c4.686 4.687 12.284 4.687 16.97 0 4.686-4.686 4.686-12.284 0-16.97-4.686-4.687-12.284-4.687-16.97 0-4.687 4.686-4.687 12.284 0 16.97zm35.74 7.705c0 6.627 5.37 12 12 12 6.626 0 12-5.373 12-12 0-6.628-5.374-12-12-12-6.63 0-12 5.372-12 12zm19.822 30.72c-4.686 4.686-4.686 12.284 0 16.97 4.687 4.686 12.285 4.686 16.97 0 4.687-4.686 4.687-12.284 0-16.97-4.685-4.687-12.283-4.687-16.97 0zm-7.704 35.74c-6.627 0-12 5.37-12 12 0 6.626 5.373 12 12 12s12-5.374 12-12c0-6.63-5.373-12-12-12zm-30.72 19.822c-4.686-4.686-12.284-4.686-16.97 0-4.686 4.687-4.686 12.285 0 16.97 4.686 4.687 12.284 4.687 16.97 0 4.687-4.685 4.687-12.283 0-16.97zm-35.74-7.704c0-6.627-5.372-12-12-12-6.626 0-12 5.373-12 12s5.374 12 12 12c6.628 0 12-5.373 12-12zm-19.823-30.72c4.687-4.686 4.687-12.284 0-16.97-4.686-4.686-12.284-4.686-16.97 0-4.687 4.686-4.687 12.284 0 16.97 4.686 4.687 12.284 4.687 16.97 0z">\n                            <animateTransform\n                                attributeName="transform"\n                                type="rotate"\n                                from="0 67 67"\n                                to="360 67 67"\n                                dur="8s"\n                                repeatCount="indefinite"/>\n                        </path>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "grid",
                                            svg: `\n                    <svg width="20" viewBox="0 0 105 105" xmlns="http://www.w3.org/2000/svg" fill="${e}" class="${i}">\n                        <circle cx="12.5" cy="12.5" r="12.5">\n                            <animate attributeName="fill-opacity"\n                            begin="0s" dur="1s"\n                            values="1;.2;1" calcMode="linear"\n                            repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="12.5" cy="52.5" r="12.5" fill-opacity=".5">\n                            <animate attributeName="fill-opacity"\n                            begin="100ms" dur="1s"\n                            values="1;.2;1" calcMode="linear"\n                            repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="52.5" cy="12.5" r="12.5">\n                            <animate attributeName="fill-opacity"\n                            begin="300ms" dur="1s"\n                            values="1;.2;1" calcMode="linear"\n                            repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="52.5" cy="52.5" r="12.5">\n                            <animate attributeName="fill-opacity"\n                            begin="600ms" dur="1s"\n                            values="1;.2;1" calcMode="linear"\n                            repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="92.5" cy="12.5" r="12.5">\n                            <animate attributeName="fill-opacity"\n                            begin="800ms" dur="1s"\n                            values="1;.2;1" calcMode="linear"\n                            repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="92.5" cy="52.5" r="12.5">\n                            <animate attributeName="fill-opacity"\n                            begin="400ms" dur="1s"\n                            values="1;.2;1" calcMode="linear"\n                            repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="12.5" cy="92.5" r="12.5">\n                            <animate attributeName="fill-opacity"\n                            begin="700ms" dur="1s"\n                            values="1;.2;1" calcMode="linear"\n                            repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="52.5" cy="92.5" r="12.5">\n                            <animate attributeName="fill-opacity"\n                            begin="500ms" dur="1s"\n                            values="1;.2;1" calcMode="linear"\n                            repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="92.5" cy="92.5" r="12.5">\n                            <animate attributeName="fill-opacity"\n                            begin="200ms" dur="1s"\n                            values="1;.2;1" calcMode="linear"\n                            repeatCount="indefinite" />\n                        </circle>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "hearts",
                                            svg: `\n                    <svg width="30" viewBox="0 0 140 64" xmlns="http://www.w3.org/2000/svg" fill="${e}" class="${i}">\n                        <path d="M30.262 57.02L7.195 40.723c-5.84-3.976-7.56-12.06-3.842-18.063 3.715-6 11.467-7.65 17.306-3.68l4.52 3.76 2.6-5.274c3.717-6.002 11.47-7.65 17.305-3.68 5.84 3.97 7.56 12.054 3.842 18.062L34.49 56.118c-.897 1.512-2.793 1.915-4.228.9z" fill-opacity=".5">\n                            <animate attributeName="fill-opacity"\n                                begin="0s" dur="1.4s"\n                                values="0.5;1;0.5"\n                                calcMode="linear"\n                                repeatCount="indefinite" />\n                        </path>\n                        <path d="M105.512 56.12l-14.44-24.272c-3.716-6.008-1.996-14.093 3.843-18.062 5.835-3.97 13.588-2.322 17.306 3.68l2.6 5.274 4.52-3.76c5.84-3.97 13.592-2.32 17.307 3.68 3.718 6.003 1.998 14.088-3.842 18.064L109.74 57.02c-1.434 1.014-3.33.61-4.228-.9z" fill-opacity=".5">\n                            <animate attributeName="fill-opacity"\n                                begin="0.7s" dur="1.4s"\n                                values="0.5;1;0.5"\n                                calcMode="linear"\n                                repeatCount="indefinite" />\n                        </path>\n                        <path d="M67.408 57.834l-23.01-24.98c-5.864-6.15-5.864-16.108 0-22.248 5.86-6.14 15.37-6.14 21.234 0L70 16.168l4.368-5.562c5.863-6.14 15.375-6.14 21.235 0 5.863 6.14 5.863 16.098 0 22.247l-23.007 24.98c-1.43 1.556-3.757 1.556-5.188 0z" />\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "oval",
                                            svg: `\n                    <svg width="25" viewBox="-2 -2 42 42" xmlns="http://www.w3.org/2000/svg" stroke="${e}" class="${i}">\n                        <g fill="none" fill-rule="evenodd">\n                            <g transform="translate(1 1)" stroke-width="4">\n                                <circle stroke-opacity=".5" cx="18" cy="18" r="18"/>\n                                <path d="M36 18c0-9.94-8.06-18-18-18">\n                                    <animateTransform\n                                        attributeName="transform"\n                                        type="rotate"\n                                        from="0 18 18"\n                                        to="360 18 18"\n                                        dur="1s"\n                                        repeatCount="indefinite"/>\n                                </path>\n                            </g>\n                        </g>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "puff",
                                            svg: `\n                    <svg width="25" viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg" stroke="${e}" class="${i}">\n                        <g fill="none" fill-rule="evenodd" stroke-width="4">\n                            <circle cx="22" cy="22" r="1">\n                                <animate attributeName="r"\n                                    begin="0s" dur="1.8s"\n                                    values="1; 20"\n                                    calcMode="spline"\n                                    keyTimes="0; 1"\n                                    keySplines="0.165, 0.84, 0.44, 1"\n                                    repeatCount="indefinite" />\n                                <animate attributeName="stroke-opacity"\n                                    begin="0s" dur="1.8s"\n                                    values="1; 0"\n                                    calcMode="spline"\n                                    keyTimes="0; 1"\n                                    keySplines="0.3, 0.61, 0.355, 1"\n                                    repeatCount="indefinite" />\n                            </circle>\n                            <circle cx="22" cy="22" r="1">\n                                <animate attributeName="r"\n                                    begin="-0.9s" dur="1.8s"\n                                    values="1; 20"\n                                    calcMode="spline"\n                                    keyTimes="0; 1"\n                                    keySplines="0.165, 0.84, 0.44, 1"\n                                    repeatCount="indefinite" />\n                                <animate attributeName="stroke-opacity"\n                                    begin="-0.9s" dur="1.8s"\n                                    values="1; 0"\n                                    calcMode="spline"\n                                    keyTimes="0; 1"\n                                    keySplines="0.3, 0.61, 0.355, 1"\n                                    repeatCount="indefinite" />\n                            </circle>\n                        </g>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "rings",
                                            svg: `\n                    <svg width="30" viewBox="0 0 45 45" xmlns="http://www.w3.org/2000/svg" stroke="${e}" class="${i}">\n                        <g fill="none" fill-rule="evenodd" transform="translate(1 1)" stroke-width="3">\n                            <circle cx="22" cy="22" r="6" stroke-opacity="0">\n                                <animate attributeName="r"\n                                    begin="1.5s" dur="3s"\n                                    values="6;22"\n                                    calcMode="linear"\n                                    repeatCount="indefinite" />\n                                <animate attributeName="stroke-opacity"\n                                    begin="1.5s" dur="3s"\n                                    values="1;0" calcMode="linear"\n                                    repeatCount="indefinite" />\n                                <animate attributeName="stroke-width"\n                                    begin="1.5s" dur="3s"\n                                    values="2;0" calcMode="linear"\n                                    repeatCount="indefinite" />\n                            </circle>\n                            <circle cx="22" cy="22" r="6" stroke-opacity="0">\n                                <animate attributeName="r"\n                                    begin="3s" dur="3s"\n                                    values="6;22"\n                                    calcMode="linear"\n                                    repeatCount="indefinite" />\n                                <animate attributeName="stroke-opacity"\n                                    begin="3s" dur="3s"\n                                    values="1;0" calcMode="linear"\n                                    repeatCount="indefinite" />\n                                <animate attributeName="stroke-width"\n                                    begin="3s" dur="3s"\n                                    values="2;0" calcMode="linear"\n                                    repeatCount="indefinite" />\n                            </circle>\n                            <circle cx="22" cy="22" r="8">\n                                <animate attributeName="r"\n                                    begin="0s" dur="1.5s"\n                                    values="6;1;2;3;4;5;6"\n                                    calcMode="linear"\n                                    repeatCount="indefinite" />\n                            </circle>\n                        </g>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "spinning-circles",
                                            svg: `\n                    <svg width="20" viewBox="0 0 58 58" xmlns="http://www.w3.org/2000/svg" class="${i}">\n                        <g fill="none" fill-rule="evenodd">\n                            <g transform="translate(2 1)" stroke="${e}" stroke-width="1.5">\n                                <circle cx="42.601" cy="11.462" r="5" fill-opacity="1" fill="${e}">\n                                    <animate attributeName="fill-opacity"\n                                        begin="0s" dur="1.3s"\n                                        values="1;0;0;0;0;0;0;0" calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                                <circle cx="49.063" cy="27.063" r="5" fill-opacity="0" fill="${e}">\n                                    <animate attributeName="fill-opacity"\n                                        begin="0s" dur="1.3s"\n                                        values="0;1;0;0;0;0;0;0" calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                                <circle cx="42.601" cy="42.663" r="5" fill-opacity="0" fill="${e}">\n                                    <animate attributeName="fill-opacity"\n                                        begin="0s" dur="1.3s"\n                                        values="0;0;1;0;0;0;0;0" calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                                <circle cx="27" cy="49.125" r="5" fill-opacity="0" fill="${e}">\n                                    <animate attributeName="fill-opacity"\n                                        begin="0s" dur="1.3s"\n                                        values="0;0;0;1;0;0;0;0" calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                                <circle cx="11.399" cy="42.663" r="5" fill-opacity="0" fill="${e}">\n                                    <animate attributeName="fill-opacity"\n                                        begin="0s" dur="1.3s"\n                                        values="0;0;0;0;1;0;0;0" calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                                <circle cx="4.938" cy="27.063" r="5" fill-opacity="0" fill="${e}">\n                                    <animate attributeName="fill-opacity"\n                                        begin="0s" dur="1.3s"\n                                        values="0;0;0;0;0;1;0;0" calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                                <circle cx="11.399" cy="11.462" r="5" fill-opacity="0" fill="${e}">\n                                    <animate attributeName="fill-opacity"\n                                        begin="0s" dur="1.3s"\n                                        values="0;0;0;0;0;0;1;0" calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                                <circle cx="27" cy="5" r="5" fill-opacity="0" fill="${e}">\n                                    <animate attributeName="fill-opacity"\n                                        begin="0s" dur="1.3s"\n                                        values="0;0;0;0;0;0;0;1" calcMode="linear"\n                                        repeatCount="indefinite" />\n                                </circle>\n                            </g>\n                        </g>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "tail-spin",
                                            svg: `\n                    <svg width="20" viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg" class="${i}">\n                        <defs>\n                            <linearGradient x1="8.042%" y1="0%" x2="65.682%" y2="23.865%" id="a">\n                                <stop stop-color="${e}" stop-opacity="0" offset="0%"/>\n                                <stop stop-color="${e}" stop-opacity=".631" offset="63.146%"/>\n                                <stop stop-color="${e}" offset="100%"/>\n                            </linearGradient>\n                        </defs>\n                        <g fill="none" fill-rule="evenodd">\n                            <g transform="translate(1 1)">\n                                <path d="M36 18c0-9.94-8.06-18-18-18" id="Oval-2" stroke="url(#a)" stroke-width="3">\n                                    <animateTransform\n                                        attributeName="transform"\n                                        type="rotate"\n                                        from="0 18 18"\n                                        to="360 18 18"\n                                        dur="0.9s"\n                                        repeatCount="indefinite" />\n                                </path>\n                                <circle fill="${e}" cx="36" cy="18" r="1">\n                                    <animateTransform\n                                        attributeName="transform"\n                                        type="rotate"\n                                        from="0 18 18"\n                                        to="360 18 18"\n                                        dur="0.9s"\n                                        repeatCount="indefinite" />\n                                </circle>\n                            </g>\n                        </g>\n                    </svg>\n                `,
                                        },
                                        {
                                            name: "three-dots",
                                            svg: `\n                    <svg width="25" viewBox="0 0 120 30" xmlns="http://www.w3.org/2000/svg" fill="${e}" class="${i}">\n                        <circle cx="15" cy="15" r="15">\n                            <animate attributeName="r" from="15" to="15"\n                                    begin="0s" dur="0.8s"\n                                    values="15;9;15" calcMode="linear"\n                                    repeatCount="indefinite" />\n                            <animate attributeName="fill-opacity" from="1" to="1"\n                                    begin="0s" dur="0.8s"\n                                    values="1;.5;1" calcMode="linear"\n                                    repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="60" cy="15" r="9" fill-opacity="0.3">\n                            <animate attributeName="r" from="9" to="9"\n                                    begin="0s" dur="0.8s"\n                                    values="9;15;9" calcMode="linear"\n                                    repeatCount="indefinite" />\n                            <animate attributeName="fill-opacity" from="0.5" to="0.5"\n                                    begin="0s" dur="0.8s"\n                                    values=".5;1;.5" calcMode="linear"\n                                    repeatCount="indefinite" />\n                        </circle>\n                        <circle cx="105" cy="15" r="15">\n                            <animate attributeName="r" from="15" to="15"\n                                    begin="0s" dur="0.8s"\n                                    values="15;9;15" calcMode="linear"\n                                    repeatCount="indefinite" />\n                            <animate attributeName="fill-opacity" from="1" to="1"\n                                    begin="0s" dur="0.8s"\n                                    values="1;.5;1" calcMode="linear"\n                                    repeatCount="indefinite" />\n                        </circle>\n                    </svg>\n                `,
                                        },
                                    ].forEach((e) => {
                                        t(this).data("loading-icon") ==
                                            e.name &&
                                            t(this).replaceWith(e.svg);
                                    });
                                }),
                                e
                            );
                        })();
                        t.fn.svgLoader = function () {
                            e();
                        };
                    })(s()),
                    (function (t) {
                        t("body").on("click", ".accordion-button", function () {
                            u()(
                                t(this)
                                    .closest(".accordion")
                                    .find(".accordion-collapse"),
                                "slideUp",
                                {
                                    duration: 300,
                                    complete: function (e) {
                                        t(e).removeClass("show"),
                                            t(e)
                                                .closest(".accordion-item")
                                                .find(".accordion-button")
                                                .addClass("collapsed")
                                                .attr("aria-expanded", !1);
                                    },
                                }
                            ),
                                t(this).hasClass("collapsed")
                                    ? u()(
                                          t(this)
                                              .closest(".accordion-item")
                                              .find(".accordion-collapse"),
                                          "slideDown",
                                          {
                                              duration: 300,
                                              complete: function (e) {
                                                  t(e).addClass("show"),
                                                      t(e)
                                                          .closest(
                                                              ".accordion-item"
                                                          )
                                                          .find(
                                                              ".accordion-button"
                                                          )
                                                          .removeClass(
                                                              "collapsed"
                                                          )
                                                          .attr(
                                                              "aria-expanded",
                                                              !0
                                                          );
                                              },
                                          }
                                      )
                                    : u()(
                                          t(this)
                                              .closest(".accordion-item")
                                              .find(".accordion-collapse"),
                                          "slideUp",
                                          {
                                              duration: 300,
                                              complete: function (e) {
                                                  t(e).removeClass("show"),
                                                      t(e)
                                                          .closest(
                                                              ".accordion-item"
                                                          )
                                                          .find(
                                                              ".accordion-button"
                                                          )
                                                          .addClass("collapsed")
                                                          .attr(
                                                              "aria-expanded",
                                                              !1
                                                          );
                                              },
                                          }
                                      );
                        });
                    })(s()),
                    (function (t) {
                        t("body").on("click", ".btn-close", function () {
                            u()(t(this).closest(".alert"), "fadeOut", {
                                duration: 300,
                                complete: function (e) {
                                    t(e).removeClass("show");
                                },
                            });
                        });
                    })(s()),
                    (function (t) {
                        function e() {
                            t(".dropdown-menu").each(async function () {
                                if (
                                    void 0 !== t(this).attr("id") &&
                                    t(
                                        '[data-dropdown-replacer="' +
                                            t(this).attr("id") +
                                            '"]'
                                    ).length &&
                                    void 0 ===
                                        t(this).data(
                                            "dropdown-programmatically"
                                        )
                                ) {
                                    let e = t(this).attr("id"),
                                        i = t(
                                            '[data-dropdown-replacer="' +
                                                e +
                                                '"]'
                                        )
                                            .parent()
                                            .find(".dropdown-toggle");
                                    t(this).removeClass("show"),
                                        await setTimeout(() => {
                                            t(
                                                '[data-dropdown-replacer="' +
                                                    e +
                                                    '"]'
                                            ).replaceWith(this),
                                                t(this).removeAttr("style"),
                                                t(this).removeAttr(
                                                    "data-popper-placement"
                                                ),
                                                t(i).attr("aria-expanded", !1);
                                        }, 200);
                                } else void 0 !== t(this).attr("id") && !t('[data-dropdown-replacer="' + t(this).attr("id") + '"]').length && t(this).hasClass("show") && void 0 === t(this).data("dropdown-programmatically") ? t(this).remove() : "initiate" == t(this).data("dropdown-programmatically") ? t(this).attr("data-dropdown-programmatically", "showed") : "showed" == t(this).data("dropdown-programmatically") && t(this).removeAttr("data-dropdown-programmatically");
                            });
                        }
                        function i(i) {
                            let a = t(i).find(".dropdown-menu").first(),
                                r = (function (t) {
                                    return t.filter(
                                        (t, e) => null !== e.offsetParent
                                    );
                                })(t(i).find(".dropdown-toggle")),
                                s = t(i).data("placement")
                                    ? t(i).data("placement")
                                    : "bottom-end",
                                n =
                                    "_" +
                                    Math.random().toString(36).substr(2, 9);
                            e(),
                                t(a).length &&
                                    (t(r).attr("aria-expanded", !0),
                                    "static" == t(i).css("position") &&
                                        t(i).css("position", "relative"),
                                    t(a).css("width", t(a).css("width")),
                                    t(
                                        '<div data-dropdown-replacer="' +
                                            n +
                                            '"></div>'
                                    ).insertAfter(a),
                                    t(a).attr("id", n).appendTo("body"),
                                    t(".modal.show").each(function () {
                                        t(this).find(
                                            '[data-dropdown-replacer="' +
                                                n +
                                                '"]'
                                        ) &&
                                            t(a).css(
                                                "z-index",
                                                t(this).css("z-index")
                                            );
                                    }),
                                    Gt(r[0], a[0], { placement: s }),
                                    t(a).addClass("show"));
                        }
                        function a(e) {
                            if (t(e).find(".dropdown-menu").length)
                                t(e)
                                    .find(".dropdown-menu")
                                    .attr(
                                        "data-dropdown-programmatically",
                                        "initiate"
                                    );
                            else {
                                let e = t("[data-dropdown-replacer]").data(
                                    "dropdown-replacer"
                                );
                                t("#" + e).attr(
                                    "data-dropdown-programmatically",
                                    "initiate"
                                );
                            }
                            i(e);
                        }
                        t("body").on("click", function (a) {
                            let r = t(a.target).closest(".dropdown"),
                                s = t(r).find(".dropdown-toggle"),
                                n = t(r).find(".dropdown-menu").first(),
                                o = t(a.target)
                                    .closest(".dropdown-menu")
                                    .first(),
                                l = t(a.target).data("dismiss");
                            (!t(r).length && !t(o).length) ||
                            (t(s).length && !t(n).length) ||
                            "dropdown" == l
                                ? e()
                                : t(o).length || i(r);
                        }),
                            document.addEventListener("keydown", function (t) {
                                "Escape" == t.code && e();
                            }),
                            (t.fn.dropdown = function (i) {
                                "show" == i
                                    ? a(this)
                                    : "hide" == i
                                    ? e()
                                    : "toggle" == i &&
                                      (function (i) {
                                          let r = t(i)
                                              .find(".dropdown-menu")
                                              .first();
                                          t(r).length ? a(i) : e();
                                      })(this);
                            });
                    })(s()),
                    (function (t) {
                        let e = [];
                        function i() {
                            let e = 9999;
                            return (
                                t(".modal").each(function () {
                                    "auto" !== t(this).css("z-index") &&
                                        t(this).css("z-index") > e &&
                                        (e = parseInt(t(this).css("z-index")));
                                }),
                                e
                            );
                        }
                        function a(e) {
                            return window.innerWidth - t(e)[0].clientWidth;
                        }
                        function r(r) {
                            t("[data-modal-replacer='" + t(r).attr("id") + "']")
                                .length ||
                                (t(
                                    '<div data-modal-replacer="' +
                                        t(r).attr("id") +
                                        '"></div>'
                                ).insertAfter(r),
                                t(r).css({ "margin-top": 0, "margin-left": 0 }),
                                t(r).attr("aria-hidden", !1).appendTo("body"),
                                setTimeout(() => {
                                    t(r)
                                        .addClass("show")
                                        .css("z-index", i() + 1);
                                }, 200),
                                t("body")
                                    .css(
                                        "padding-right",
                                        parseInt(
                                            t("body").css("padding-right")
                                        ) +
                                            a("html") +
                                            "px"
                                    )
                                    .addClass("overflow-y-hidden"),
                                t(".modal")
                                    .removeClass("overflow-y-auto")
                                    .css("padding-left", "0px"),
                                t(r)
                                    .addClass("overflow-y-auto")
                                    .css("padding-left", a(r) + "px")
                                    .addClass(
                                        t(".modal.show").length
                                            ? "modal-overlap"
                                            : ""
                                    ),
                                e.forEach(function (i, a) {
                                    t(r).attr("id") == t(i.el).attr("id") &&
                                        "on.show" == i.event &&
                                        (e[a].triggerCallback = !0);
                                }));
                        }
                        function s(r) {
                            if (
                                t(r).hasClass("modal") &&
                                t(r).hasClass("show")
                            ) {
                                let s =
                                    1e3 *
                                    parseFloat(
                                        t(r)
                                            .css("transition-duration")
                                            .split(",")[1]
                                    );
                                t(r)
                                    .attr("aria-hidden", !0)
                                    .removeClass("show"),
                                    setTimeout(() => {
                                        t(r)
                                            .removeAttr("style")
                                            .removeClass("modal-overlap")
                                            .removeClass("overflow-y-auto"),
                                            t(".modal").each(function () {
                                                parseInt(
                                                    t(this).css("z-index")
                                                ) === i() &&
                                                    t(this)
                                                        .addClass(
                                                            "overflow-y-auto"
                                                        )
                                                        .css(
                                                            "padding-left",
                                                            a(this) + "px"
                                                        );
                                            }),
                                            9999 == i() &&
                                                t("body")
                                                    .removeClass(
                                                        "overflow-y-hidden"
                                                    )
                                                    .css("padding-right", ""),
                                            t(
                                                '[data-modal-replacer="' +
                                                    t(r).attr("id") +
                                                    '"]'
                                            ).replaceWith(r);
                                    }, s),
                                    e.forEach(function (i, a) {
                                        t(r).attr("id") == t(i.el).attr("id") &&
                                            "on.hide" == i.event &&
                                            (e[a].triggerCallback = !0);
                                    });
                            }
                        }
                        t("body").on(
                            "click",
                            'a[data-toggle="modal"]',
                            function () {
                                r(t(this).attr("data-target"));
                            }
                        ),
                            t("body").on("click", function (e) {
                                t(e.target).hasClass("modal") &&
                                    t(e.target).hasClass("show") &&
                                    (void 0 === t(e.target).data("backdrop")
                                        ? s(e.target)
                                        : (t(e.target).addClass("modal-static"),
                                          setTimeout(() => {
                                              t(e.target).removeClass(
                                                  "modal-static"
                                              );
                                          }, 600)));
                            }),
                            t("body").on(
                                "click",
                                '[data-dismiss="modal"]',
                                function () {
                                    s(t(this).closest(".modal")[0]);
                                }
                            ),
                            setInterval(function () {
                                e.forEach(function (t, i) {
                                    (("on.show" == t.event &&
                                        t.triggerCallback) ||
                                        ("on.hide" == t.event &&
                                            t.triggerCallback)) &&
                                        (t.callback(),
                                        (e[i].triggerCallback = !1));
                                });
                            }, 300),
                            document.addEventListener("keydown", function (e) {
                                if ("Escape" == e.code) {
                                    let e = t(".modal.show").last();
                                    t(e).hasClass("modal") &&
                                        t(e).hasClass("show") &&
                                        (void 0 === t(e).data("backdrop")
                                            ? s(e)
                                            : (t(e).addClass("modal-static"),
                                              setTimeout(() => {
                                                  t(e).removeClass(
                                                      "modal-static"
                                                  );
                                              }, 600)));
                                }
                            }),
                            (t.fn.modal = function (i, a) {
                                var n;
                                "show" == i
                                    ? r(this)
                                    : "hide" == i
                                    ? s(this)
                                    : "toggle" == i
                                    ? t((n = this)).hasClass("modal") &&
                                      t(n).hasClass("show")
                                        ? s(n)
                                        : r(n)
                                    : "on.show" == i
                                    ? (function (t, i) {
                                          e[e.length] = {
                                              el: t,
                                              event: "on.show",
                                              triggerCallback: !1,
                                              callback: i,
                                          };
                                      })(this, a)
                                    : "on.hide" == i &&
                                      (function (t, i) {
                                          e[e.length] = {
                                              el: t,
                                              event: "on.hide",
                                              triggerCallback: !1,
                                              callback: i,
                                          };
                                      })(this, a);
                            });
                    })(s()),
                    (function (t) {
                        t("body").on(
                            "click",
                            'a[data-toggle="tab"]',
                            function (e, i) {
                                t(this)
                                    .closest(".nav-tabs")
                                    .find('a[data-toggle="tab"]')
                                    .removeClass("active")
                                    .attr("aria-selected", !1),
                                    t(this)
                                        .addClass("active")
                                        .attr("aria-selected", !0);
                                let a = t(this).attr("data-target"),
                                    r = t(a).closest(".tab-content").width();
                                t(a)
                                    .closest(".tab-content")
                                    .children(".tab-pane")
                                    .removeAttr("style")
                                    .removeClass("active"),
                                    t(a)
                                        .css("width", r + "px")
                                        .addClass("active");
                            }
                        );
                    })(s()),
                    (function (t) {
                        t(".side-menu").on("click", function () {
                            t(this).parent().find("ul").length &&
                                (null !==
                                t(this).parent().find("ul").first()[0]
                                    .offsetParent
                                    ? (t(this)
                                          .find(".side-menu__sub-icon")
                                          .removeClass("transform rotate-180"),
                                      t(this).removeClass("side-menu--open"),
                                      u()(
                                          t(this).parent().find("ul").first(),
                                          "slideUp",
                                          {
                                              duration: 300,
                                              complete: function (e) {
                                                  t(e).removeClass(
                                                      "side-menu__sub-open"
                                                  );
                                              },
                                          }
                                      ))
                                    : (t(this)
                                          .find(".side-menu__sub-icon")
                                          .addClass("transform rotate-180"),
                                      t(this).addClass("side-menu--open"),
                                      u()(
                                          t(this).parent().find("ul").first(),
                                          "slideDown",
                                          {
                                              duration: 300,
                                              complete: function (e) {
                                                  t(e).addClass(
                                                      "side-menu__sub-open"
                                                  );
                                              },
                                          }
                                      )));
                        });
                    })(i(553)),
                    (function (t) {
                        t("#mobile-menu-toggler").on("click", function () {
                            null !==
                            t(".mobile-menu").find("ul").first()[0].offsetParent
                                ? u()(
                                      t(".mobile-menu").find("ul").first(),
                                      "slideUp"
                                  )
                                : u()(
                                      t(".mobile-menu").find("ul").first(),
                                      "slideDown"
                                  );
                        }),
                            t(".mobile-menu")
                                .find(".menu")
                                .on("click", function () {
                                    t(this).parent().find("ul").length &&
                                        (null !==
                                        t(this).parent().find("ul").first()[0]
                                            .offsetParent
                                            ? (t(this)
                                                  .find(".menu__sub-icon")
                                                  .removeClass(
                                                      "transform rotate-180"
                                                  ),
                                              u()(
                                                  t(this)
                                                      .parent()
                                                      .find("ul")
                                                      .first(),
                                                  "slideUp",
                                                  {
                                                      duration: 300,
                                                      complete: function (e) {
                                                          t(this).removeClass(
                                                              "menu__sub-open"
                                                          );
                                                      },
                                                  }
                                              ))
                                            : (t(this)
                                                  .find(".menu__sub-icon")
                                                  .addClass(
                                                      "transform rotate-180"
                                                  ),
                                              u()(
                                                  t(this)
                                                      .parent()
                                                      .find("ul")
                                                      .first(),
                                                  "slideDown",
                                                  {
                                                      duration: 300,
                                                      complete: function (e) {
                                                          t(this).addClass(
                                                              "menu__sub-open"
                                                          );
                                                      },
                                                  }
                                              )));
                                });
                    })(i(553));
                var Ut = "tippy-content",
                    qt = "tippy-backdrop",
                    $t = "tippy-arrow",
                    Zt = "tippy-svg-arrow",
                    Jt = { passive: !0, capture: !0 },
                    Qt = function () {
                        return document.body;
                    };
                function Kt(t, e, i) {
                    if (Array.isArray(t)) {
                        var a = t[e];
                        return null == a ? (Array.isArray(i) ? i[e] : i) : a;
                    }
                    return t;
                }
                function te(t, e) {
                    var i = {}.toString.call(t);
                    return (
                        0 === i.indexOf("[object") && i.indexOf(e + "]") > -1
                    );
                }
                function ee(t, e) {
                    return "function" == typeof t ? t.apply(void 0, e) : t;
                }
                function ie(t, e) {
                    return 0 === e
                        ? t
                        : function (a) {
                              clearTimeout(i),
                                  (i = setTimeout(function () {
                                      t(a);
                                  }, e));
                          };
                    var i;
                }
                function ae(t) {
                    return [].concat(t);
                }
                function re(t, e) {
                    -1 === t.indexOf(e) && t.push(e);
                }
                function se(t) {
                    return t.split("-")[0];
                }
                function ne(t) {
                    return [].slice.call(t);
                }
                function oe(t) {
                    return Object.keys(t).reduce(function (e, i) {
                        return void 0 !== t[i] && (e[i] = t[i]), e;
                    }, {});
                }
                function le() {
                    return document.createElement("div");
                }
                function ce(t) {
                    return ["Element", "Fragment"].some(function (e) {
                        return te(t, e);
                    });
                }
                function he(t) {
                    return te(t, "MouseEvent");
                }
                function de(t) {
                    return !(!t || !t._tippy || t._tippy.reference !== t);
                }
                function ue(t) {
                    return ce(t)
                        ? [t]
                        : (function (t) {
                              return te(t, "NodeList");
                          })(t)
                        ? ne(t)
                        : Array.isArray(t)
                        ? t
                        : ne(document.querySelectorAll(t));
                }
                function fe(t, e) {
                    t.forEach(function (t) {
                        t && (t.style.transitionDuration = e + "ms");
                    });
                }
                function ge(t, e) {
                    t.forEach(function (t) {
                        t && t.setAttribute("data-state", e);
                    });
                }
                function pe(t) {
                    var e,
                        i = ae(t)[0];
                    return null != i && null != (e = i.ownerDocument) && e.body
                        ? i.ownerDocument
                        : document;
                }
                function xe(t, e, i) {
                    var a = e + "EventListener";
                    ["transitionend", "webkitTransitionEnd"].forEach(function (
                        e
                    ) {
                        t[a](e, i);
                    });
                }
                function me(t, e) {
                    for (var i = e; i; ) {
                        var a;
                        if (t.contains(i)) return !0;
                        i =
                            null == i.getRootNode ||
                            null == (a = i.getRootNode())
                                ? void 0
                                : a.host;
                    }
                    return !1;
                }
                var be = { isTouch: !1 },
                    ve = 0;
                function ye() {
                    be.isTouch ||
                        ((be.isTouch = !0),
                        window.performance &&
                            document.addEventListener("mousemove", we));
                }
                function we() {
                    var t = performance.now();
                    t - ve < 20 &&
                        ((be.isTouch = !1),
                        document.removeEventListener("mousemove", we)),
                        (ve = t);
                }
                function ke() {
                    var t = document.activeElement;
                    if (de(t)) {
                        var e = t._tippy;
                        t.blur && !e.state.isVisible && t.blur();
                    }
                }
                var Ae =
                    !!(
                        "undefined" != typeof window &&
                        "undefined" != typeof document
                    ) && !!window.msCrypto;
                var Se = {
                        animateFill: !1,
                        followCursor: !1,
                        inlinePositioning: !1,
                        sticky: !1,
                    },
                    Ce = Object.assign(
                        {
                            appendTo: Qt,
                            aria: { content: "auto", expanded: "auto" },
                            delay: 0,
                            duration: [300, 250],
                            getReferenceClientRect: null,
                            hideOnClick: !0,
                            ignoreAttributes: !1,
                            interactive: !1,
                            interactiveBorder: 2,
                            interactiveDebounce: 0,
                            moveTransition: "",
                            offset: [0, 10],
                            onAfterUpdate: function () {},
                            onBeforeUpdate: function () {},
                            onCreate: function () {},
                            onDestroy: function () {},
                            onHidden: function () {},
                            onHide: function () {},
                            onMount: function () {},
                            onShow: function () {},
                            onShown: function () {},
                            onTrigger: function () {},
                            onUntrigger: function () {},
                            onClickOutside: function () {},
                            placement: "top",
                            plugins: [],
                            popperOptions: {},
                            render: null,
                            showOnCreate: !1,
                            touch: !0,
                            trigger: "mouseenter focus",
                            triggerTarget: null,
                        },
                        Se,
                        {
                            allowHTML: !1,
                            animation: "fade",
                            arrow: !0,
                            content: "",
                            inertia: !1,
                            maxWidth: 350,
                            role: "tooltip",
                            theme: "",
                            zIndex: 9999,
                        }
                    ),
                    Pe = Object.keys(Ce);
                function Le(t) {
                    var e = (t.plugins || []).reduce(function (e, i) {
                        var a,
                            r = i.name,
                            s = i.defaultValue;
                        r &&
                            (e[r] =
                                void 0 !== t[r]
                                    ? t[r]
                                    : null != (a = Ce[r])
                                    ? a
                                    : s);
                        return e;
                    }, {});
                    return Object.assign({}, t, e);
                }
                function Te(t, e) {
                    var i = Object.assign(
                        {},
                        e,
                        { content: ee(e.content, [t]) },
                        e.ignoreAttributes
                            ? {}
                            : (function (t, e) {
                                  return (
                                      e
                                          ? Object.keys(
                                                Le(
                                                    Object.assign({}, Ce, {
                                                        plugins: e,
                                                    })
                                                )
                                            )
                                          : Pe
                                  ).reduce(function (e, i) {
                                      var a = (
                                          t.getAttribute("data-tippy-" + i) ||
                                          ""
                                      ).trim();
                                      if (!a) return e;
                                      if ("content" === i) e[i] = a;
                                      else
                                          try {
                                              e[i] = JSON.parse(a);
                                          } catch (t) {
                                              e[i] = a;
                                          }
                                      return e;
                                  }, {});
                              })(t, e.plugins)
                    );
                    return (
                        (i.aria = Object.assign({}, Ce.aria, i.aria)),
                        (i.aria = {
                            expanded:
                                "auto" === i.aria.expanded
                                    ? e.interactive
                                    : i.aria.expanded,
                            content:
                                "auto" === i.aria.content
                                    ? e.interactive
                                        ? null
                                        : "describedby"
                                    : i.aria.content,
                        }),
                        i
                    );
                }
                var Me = function () {
                    return "innerHTML";
                };
                function Ee(t, e) {
                    t[Me()] = e;
                }
                function Ie(t) {
                    var e = le();
                    return (
                        !0 === t
                            ? (e.className = $t)
                            : ((e.className = Zt),
                              ce(t) ? e.appendChild(t) : Ee(e, t)),
                        e
                    );
                }
                function Oe(t, e) {
                    ce(e.content)
                        ? (Ee(t, ""), t.appendChild(e.content))
                        : "function" != typeof e.content &&
                          (e.allowHTML
                              ? Ee(t, e.content)
                              : (t.textContent = e.content));
                }
                function ze(t) {
                    var e = t.firstElementChild,
                        i = ne(e.children);
                    return {
                        box: e,
                        content: i.find(function (t) {
                            return t.classList.contains(Ut);
                        }),
                        arrow: i.find(function (t) {
                            return (
                                t.classList.contains($t) ||
                                t.classList.contains(Zt)
                            );
                        }),
                        backdrop: i.find(function (t) {
                            return t.classList.contains(qt);
                        }),
                    };
                }
                function Fe(t) {
                    var e = le(),
                        i = le();
                    (i.className = "tippy-box"),
                        i.setAttribute("data-state", "hidden"),
                        i.setAttribute("tabindex", "-1");
                    var a = le();
                    function r(i, a) {
                        var r = ze(e),
                            s = r.box,
                            n = r.content,
                            o = r.arrow;
                        a.theme
                            ? s.setAttribute("data-theme", a.theme)
                            : s.removeAttribute("data-theme"),
                            "string" == typeof a.animation
                                ? s.setAttribute("data-animation", a.animation)
                                : s.removeAttribute("data-animation"),
                            a.inertia
                                ? s.setAttribute("data-inertia", "")
                                : s.removeAttribute("data-inertia"),
                            (s.style.maxWidth =
                                "number" == typeof a.maxWidth
                                    ? a.maxWidth + "px"
                                    : a.maxWidth),
                            a.role
                                ? s.setAttribute("role", a.role)
                                : s.removeAttribute("role"),
                            (i.content === a.content &&
                                i.allowHTML === a.allowHTML) ||
                                Oe(n, t.props),
                            a.arrow
                                ? o
                                    ? i.arrow !== a.arrow &&
                                      (s.removeChild(o),
                                      s.appendChild(Ie(a.arrow)))
                                    : s.appendChild(Ie(a.arrow))
                                : o && s.removeChild(o);
                    }
                    return (
                        (a.className = Ut),
                        a.setAttribute("data-state", "hidden"),
                        Oe(a, t.props),
                        e.appendChild(i),
                        i.appendChild(a),
                        r(t.props, t.props),
                        { popper: e, onUpdate: r }
                    );
                }
                Fe.$$tippy = !0;
                var De = 1,
                    Ne = [],
                    Xe = [];
                function Re(t, e) {
                    var i,
                        a,
                        r,
                        s,
                        n,
                        o,
                        l,
                        c,
                        h = Te(t, Object.assign({}, Ce, Le(oe(e)))),
                        d = !1,
                        u = !1,
                        f = !1,
                        g = !1,
                        p = [],
                        x = ie(U, h.interactiveDebounce),
                        m = De++,
                        b = (c = h.plugins).filter(function (t, e) {
                            return c.indexOf(t) === e;
                        }),
                        v = {
                            id: m,
                            reference: t,
                            popper: le(),
                            popperInstance: null,
                            props: h,
                            state: {
                                isEnabled: !0,
                                isVisible: !1,
                                isDestroyed: !1,
                                isMounted: !1,
                                isShown: !1,
                            },
                            plugins: b,
                            clearDelayTimeouts: function () {
                                clearTimeout(i),
                                    clearTimeout(a),
                                    cancelAnimationFrame(r);
                            },
                            setProps: function (e) {
                                0;
                                if (v.state.isDestroyed) return;
                                z("onBeforeUpdate", [v, e]), j();
                                var i = v.props,
                                    a = Te(
                                        t,
                                        Object.assign({}, i, oe(e), {
                                            ignoreAttributes: !0,
                                        })
                                    );
                                (v.props = a),
                                    G(),
                                    i.interactiveDebounce !==
                                        a.interactiveDebounce &&
                                        (N(),
                                        (x = ie(U, a.interactiveDebounce)));
                                i.triggerTarget && !a.triggerTarget
                                    ? ae(i.triggerTarget).forEach(function (t) {
                                          t.removeAttribute("aria-expanded");
                                      })
                                    : a.triggerTarget &&
                                      t.removeAttribute("aria-expanded");
                                D(), O(), k && k(i, a);
                                v.popperInstance &&
                                    (J(),
                                    K().forEach(function (t) {
                                        requestAnimationFrame(
                                            t._tippy.popperInstance.forceUpdate
                                        );
                                    }));
                                z("onAfterUpdate", [v, e]);
                            },
                            setContent: function (t) {
                                v.setProps({ content: t });
                            },
                            show: function () {
                                0;
                                var t = v.state.isVisible,
                                    e = v.state.isDestroyed,
                                    i = !v.state.isEnabled,
                                    a = be.isTouch && !v.props.touch,
                                    r = Kt(v.props.duration, 0, Ce.duration);
                                if (t || e || i || a) return;
                                if (T().hasAttribute("disabled")) return;
                                if (
                                    (z("onShow", [v], !1),
                                    !1 === v.props.onShow(v))
                                )
                                    return;
                                (v.state.isVisible = !0),
                                    L() && (w.style.visibility = "visible");
                                O(),
                                    H(),
                                    v.state.isMounted ||
                                        (w.style.transition = "none");
                                if (L()) {
                                    var s = E();
                                    fe([s.box, s.content], 0);
                                }
                                (o = function () {
                                    var t;
                                    if (v.state.isVisible && !g) {
                                        if (
                                            ((g = !0),
                                            w.offsetHeight,
                                            (w.style.transition =
                                                v.props.moveTransition),
                                            L() && v.props.animation)
                                        ) {
                                            var e = E(),
                                                i = e.box,
                                                a = e.content;
                                            fe([i, a], r),
                                                ge([i, a], "visible");
                                        }
                                        F(),
                                            D(),
                                            re(Xe, v),
                                            null == (t = v.popperInstance) ||
                                                t.forceUpdate(),
                                            z("onMount", [v]),
                                            v.props.animation &&
                                                L() &&
                                                (function (t, e) {
                                                    B(t, e);
                                                })(r, function () {
                                                    (v.state.isShown = !0),
                                                        z("onShown", [v]);
                                                });
                                    }
                                }),
                                    (function () {
                                        var t,
                                            e = v.props.appendTo,
                                            i = T();
                                        t =
                                            (v.props.interactive && e === Qt) ||
                                            "parent" === e
                                                ? i.parentNode
                                                : ee(e, [i]);
                                        t.contains(w) || t.appendChild(w);
                                        (v.state.isMounted = !0), J(), !1;
                                    })();
                            },
                            hide: function () {
                                0;
                                var t = !v.state.isVisible,
                                    e = v.state.isDestroyed,
                                    i = !v.state.isEnabled,
                                    a = Kt(v.props.duration, 1, Ce.duration);
                                if (t || e || i) return;
                                if (
                                    (z("onHide", [v], !1),
                                    !1 === v.props.onHide(v))
                                )
                                    return;
                                (v.state.isVisible = !1),
                                    (v.state.isShown = !1),
                                    (g = !1),
                                    (d = !1),
                                    L() && (w.style.visibility = "hidden");
                                if ((N(), W(), O(!0), L())) {
                                    var r = E(),
                                        s = r.box,
                                        n = r.content;
                                    v.props.animation &&
                                        (fe([s, n], a), ge([s, n], "hidden"));
                                }
                                F(),
                                    D(),
                                    v.props.animation
                                        ? L() &&
                                          (function (t, e) {
                                              B(t, function () {
                                                  !v.state.isVisible &&
                                                      w.parentNode &&
                                                      w.parentNode.contains(
                                                          w
                                                      ) &&
                                                      e();
                                              });
                                          })(a, v.unmount)
                                        : v.unmount();
                            },
                            hideWithInteractivity: function (t) {
                                0;
                                M().addEventListener("mousemove", x),
                                    re(Ne, x),
                                    x(t);
                            },
                            enable: function () {
                                v.state.isEnabled = !0;
                            },
                            disable: function () {
                                v.hide(), (v.state.isEnabled = !1);
                            },
                            unmount: function () {
                                0;
                                v.state.isVisible && v.hide();
                                if (!v.state.isMounted) return;
                                Q(),
                                    K().forEach(function (t) {
                                        t._tippy.unmount();
                                    }),
                                    w.parentNode && w.parentNode.removeChild(w);
                                (Xe = Xe.filter(function (t) {
                                    return t !== v;
                                })),
                                    (v.state.isMounted = !1),
                                    z("onHidden", [v]);
                            },
                            destroy: function () {
                                0;
                                if (v.state.isDestroyed) return;
                                v.clearDelayTimeouts(),
                                    v.unmount(),
                                    j(),
                                    delete t._tippy,
                                    (v.state.isDestroyed = !0),
                                    z("onDestroy", [v]);
                            },
                        };
                    if (!h.render) return v;
                    var y = h.render(v),
                        w = y.popper,
                        k = y.onUpdate;
                    w.setAttribute("data-tippy-root", ""),
                        (w.id = "tippy-" + v.id),
                        (v.popper = w),
                        (t._tippy = v),
                        (w._tippy = v);
                    var A = b.map(function (t) {
                            return t.fn(v);
                        }),
                        S = t.hasAttribute("aria-expanded");
                    return (
                        G(),
                        D(),
                        O(),
                        z("onCreate", [v]),
                        h.showOnCreate && tt(),
                        w.addEventListener("mouseenter", function () {
                            v.props.interactive &&
                                v.state.isVisible &&
                                v.clearDelayTimeouts();
                        }),
                        w.addEventListener("mouseleave", function () {
                            v.props.interactive &&
                                v.props.trigger.indexOf("mouseenter") >= 0 &&
                                M().addEventListener("mousemove", x);
                        }),
                        v
                    );
                    function C() {
                        var t = v.props.touch;
                        return Array.isArray(t) ? t : [t, 0];
                    }
                    function P() {
                        return "hold" === C()[0];
                    }
                    function L() {
                        var t;
                        return !(null == (t = v.props.render) || !t.$$tippy);
                    }
                    function T() {
                        return l || t;
                    }
                    function M() {
                        var t = T().parentNode;
                        return t ? pe(t) : document;
                    }
                    function E() {
                        return ze(w);
                    }
                    function I(t) {
                        return (v.state.isMounted && !v.state.isVisible) ||
                            be.isTouch ||
                            (s && "focus" === s.type)
                            ? 0
                            : Kt(v.props.delay, t ? 0 : 1, Ce.delay);
                    }
                    function O(t) {
                        void 0 === t && (t = !1),
                            (w.style.pointerEvents =
                                v.props.interactive && !t ? "" : "none"),
                            (w.style.zIndex = "" + v.props.zIndex);
                    }
                    function z(t, e, i) {
                        var a;
                        (void 0 === i && (i = !0),
                        A.forEach(function (i) {
                            i[t] && i[t].apply(i, e);
                        }),
                        i) && (a = v.props)[t].apply(a, e);
                    }
                    function F() {
                        var e = v.props.aria;
                        if (e.content) {
                            var i = "aria-" + e.content,
                                a = w.id;
                            ae(v.props.triggerTarget || t).forEach(function (
                                t
                            ) {
                                var e = t.getAttribute(i);
                                if (v.state.isVisible)
                                    t.setAttribute(i, e ? e + " " + a : a);
                                else {
                                    var r = e && e.replace(a, "").trim();
                                    r
                                        ? t.setAttribute(i, r)
                                        : t.removeAttribute(i);
                                }
                            });
                        }
                    }
                    function D() {
                        !S &&
                            v.props.aria.expanded &&
                            ae(v.props.triggerTarget || t).forEach(function (
                                t
                            ) {
                                v.props.interactive
                                    ? t.setAttribute(
                                          "aria-expanded",
                                          v.state.isVisible && t === T()
                                              ? "true"
                                              : "false"
                                      )
                                    : t.removeAttribute("aria-expanded");
                            });
                    }
                    function N() {
                        M().removeEventListener("mousemove", x),
                            (Ne = Ne.filter(function (t) {
                                return t !== x;
                            }));
                    }
                    function X(e) {
                        if (!be.isTouch || (!f && "mousedown" !== e.type)) {
                            var i =
                                (e.composedPath && e.composedPath()[0]) ||
                                e.target;
                            if (!v.props.interactive || !me(w, i)) {
                                if (
                                    ae(v.props.triggerTarget || t).some(
                                        function (t) {
                                            return me(t, i);
                                        }
                                    )
                                ) {
                                    if (be.isTouch) return;
                                    if (
                                        v.state.isVisible &&
                                        v.props.trigger.indexOf("click") >= 0
                                    )
                                        return;
                                } else z("onClickOutside", [v, e]);
                                !0 === v.props.hideOnClick &&
                                    (v.clearDelayTimeouts(),
                                    v.hide(),
                                    (u = !0),
                                    setTimeout(function () {
                                        u = !1;
                                    }),
                                    v.state.isMounted || W());
                            }
                        }
                    }
                    function R() {
                        f = !0;
                    }
                    function Y() {
                        f = !1;
                    }
                    function H() {
                        var t = M();
                        t.addEventListener("mousedown", X, !0),
                            t.addEventListener("touchend", X, Jt),
                            t.addEventListener("touchstart", Y, Jt),
                            t.addEventListener("touchmove", R, Jt);
                    }
                    function W() {
                        var t = M();
                        t.removeEventListener("mousedown", X, !0),
                            t.removeEventListener("touchend", X, Jt),
                            t.removeEventListener("touchstart", Y, Jt),
                            t.removeEventListener("touchmove", R, Jt);
                    }
                    function B(t, e) {
                        var i = E().box;
                        function a(t) {
                            t.target === i && (xe(i, "remove", a), e());
                        }
                        if (0 === t) return e();
                        xe(i, "remove", n), xe(i, "add", a), (n = a);
                    }
                    function V(e, i, a) {
                        void 0 === a && (a = !1),
                            ae(v.props.triggerTarget || t).forEach(function (
                                t
                            ) {
                                t.addEventListener(e, i, a),
                                    p.push({
                                        node: t,
                                        eventType: e,
                                        handler: i,
                                        options: a,
                                    });
                            });
                    }
                    function G() {
                        var t;
                        P() &&
                            (V("touchstart", _, { passive: !0 }),
                            V("touchend", q, { passive: !0 })),
                            ((t = v.props.trigger),
                            t.split(/\s+/).filter(Boolean)).forEach(function (
                                t
                            ) {
                                if ("manual" !== t)
                                    switch ((V(t, _), t)) {
                                        case "mouseenter":
                                            V("mouseleave", q);
                                            break;
                                        case "focus":
                                            V(Ae ? "focusout" : "blur", $);
                                            break;
                                        case "focusin":
                                            V("focusout", $);
                                    }
                            });
                    }
                    function j() {
                        p.forEach(function (t) {
                            var e = t.node,
                                i = t.eventType,
                                a = t.handler,
                                r = t.options;
                            e.removeEventListener(i, a, r);
                        }),
                            (p = []);
                    }
                    function _(t) {
                        var e,
                            i = !1;
                        if (v.state.isEnabled && !Z(t) && !u) {
                            var a =
                                "focus" === (null == (e = s) ? void 0 : e.type);
                            (s = t),
                                (l = t.currentTarget),
                                D(),
                                !v.state.isVisible &&
                                    he(t) &&
                                    Ne.forEach(function (e) {
                                        return e(t);
                                    }),
                                "click" === t.type &&
                                (v.props.trigger.indexOf("mouseenter") < 0 ||
                                    d) &&
                                !1 !== v.props.hideOnClick &&
                                v.state.isVisible
                                    ? (i = !0)
                                    : tt(t),
                                "click" === t.type && (d = !i),
                                i && !a && et(t);
                        }
                    }
                    function U(t) {
                        var e = t.target,
                            i = T().contains(e) || w.contains(e);
                        if ("mousemove" !== t.type || !i) {
                            var a = K()
                                .concat(w)
                                .map(function (t) {
                                    var e,
                                        i =
                                            null ==
                                            (e = t._tippy.popperInstance)
                                                ? void 0
                                                : e.state;
                                    return i
                                        ? {
                                              popperRect:
                                                  t.getBoundingClientRect(),
                                              popperState: i,
                                              props: h,
                                          }
                                        : null;
                                })
                                .filter(Boolean);
                            (function (t, e) {
                                var i = e.clientX,
                                    a = e.clientY;
                                return t.every(function (t) {
                                    var e = t.popperRect,
                                        r = t.popperState,
                                        s = t.props.interactiveBorder,
                                        n = se(r.placement),
                                        o = r.modifiersData.offset;
                                    if (!o) return !0;
                                    var l = "bottom" === n ? o.top.y : 0,
                                        c = "top" === n ? o.bottom.y : 0,
                                        h = "right" === n ? o.left.x : 0,
                                        d = "left" === n ? o.right.x : 0,
                                        u = e.top - a + l > s,
                                        f = a - e.bottom - c > s,
                                        g = e.left - i + h > s,
                                        p = i - e.right - d > s;
                                    return u || f || g || p;
                                });
                            })(a, t) && (N(), et(t));
                        }
                    }
                    function q(t) {
                        Z(t) ||
                            (v.props.trigger.indexOf("click") >= 0 && d) ||
                            (v.props.interactive
                                ? v.hideWithInteractivity(t)
                                : et(t));
                    }
                    function $(t) {
                        (v.props.trigger.indexOf("focusin") < 0 &&
                            t.target !== T()) ||
                            (v.props.interactive &&
                                t.relatedTarget &&
                                w.contains(t.relatedTarget)) ||
                            et(t);
                    }
                    function Z(t) {
                        return (
                            !!be.isTouch && P() !== t.type.indexOf("touch") >= 0
                        );
                    }
                    function J() {
                        Q();
                        var e = v.props,
                            i = e.popperOptions,
                            a = e.placement,
                            r = e.offset,
                            s = e.getReferenceClientRect,
                            n = e.moveTransition,
                            l = L() ? ze(w).arrow : null,
                            c = s
                                ? {
                                      getBoundingClientRect: s,
                                      contextElement: s.contextElement || T(),
                                  }
                                : t,
                            h = {
                                name: "$$tippy",
                                enabled: !0,
                                phase: "beforeWrite",
                                requires: ["computeStyles"],
                                fn: function (t) {
                                    var e = t.state;
                                    if (L()) {
                                        var i = E().box;
                                        [
                                            "placement",
                                            "reference-hidden",
                                            "escaped",
                                        ].forEach(function (t) {
                                            "placement" === t
                                                ? i.setAttribute(
                                                      "data-placement",
                                                      e.placement
                                                  )
                                                : e.attributes.popper[
                                                      "data-popper-" + t
                                                  ]
                                                ? i.setAttribute(
                                                      "data-" + t,
                                                      ""
                                                  )
                                                : i.removeAttribute(
                                                      "data-" + t
                                                  );
                                        }),
                                            (e.attributes.popper = {});
                                    }
                                },
                            },
                            d = [
                                { name: "offset", options: { offset: r } },
                                {
                                    name: "preventOverflow",
                                    options: {
                                        padding: {
                                            top: 2,
                                            bottom: 2,
                                            left: 5,
                                            right: 5,
                                        },
                                    },
                                },
                                { name: "flip", options: { padding: 5 } },
                                {
                                    name: "computeStyles",
                                    options: { adaptive: !n },
                                },
                                h,
                            ];
                        L() &&
                            l &&
                            d.push({
                                name: "arrow",
                                options: { element: l, padding: 3 },
                            }),
                            d.push.apply(
                                d,
                                (null == i ? void 0 : i.modifiers) || []
                            ),
                            (v.popperInstance = Gt(
                                c,
                                w,
                                Object.assign({}, i, {
                                    placement: a,
                                    onFirstUpdate: o,
                                    modifiers: d,
                                })
                            ));
                    }
                    function Q() {
                        v.popperInstance &&
                            (v.popperInstance.destroy(),
                            (v.popperInstance = null));
                    }
                    function K() {
                        return ne(w.querySelectorAll("[data-tippy-root]"));
                    }
                    function tt(t) {
                        v.clearDelayTimeouts(),
                            t && z("onTrigger", [v, t]),
                            H();
                        var e = I(!0),
                            a = C(),
                            r = a[0],
                            s = a[1];
                        be.isTouch && "hold" === r && s && (e = s),
                            e
                                ? (i = setTimeout(function () {
                                      v.show();
                                  }, e))
                                : v.show();
                    }
                    function et(t) {
                        if (
                            (v.clearDelayTimeouts(),
                            z("onUntrigger", [v, t]),
                            v.state.isVisible)
                        ) {
                            if (
                                !(
                                    v.props.trigger.indexOf("mouseenter") >=
                                        0 &&
                                    v.props.trigger.indexOf("click") >= 0 &&
                                    ["mouseleave", "mousemove"].indexOf(
                                        t.type
                                    ) >= 0 &&
                                    d
                                )
                            ) {
                                var e = I(!1);
                                e
                                    ? (a = setTimeout(function () {
                                          v.state.isVisible && v.hide();
                                      }, e))
                                    : (r = requestAnimationFrame(function () {
                                          v.hide();
                                      }));
                            }
                        } else W();
                    }
                }
                function Ye(t, e) {
                    void 0 === e && (e = {});
                    var i = Ce.plugins.concat(e.plugins || []);
                    document.addEventListener("touchstart", ye, Jt),
                        window.addEventListener("blur", ke);
                    var a = Object.assign({}, e, { plugins: i }),
                        r = ue(t).reduce(function (t, e) {
                            var i = e && Re(e, a);
                            return i && t.push(i), t;
                        }, []);
                    return ce(t) ? r[0] : r;
                }
                (Ye.defaultProps = Ce),
                    (Ye.setDefaultProps = function (t) {
                        Object.keys(t).forEach(function (e) {
                            Ce[e] = t[e];
                        });
                    }),
                    (Ye.currentInput = be);
                Object.assign({}, G, {
                    effect: function (t) {
                        var e = t.state,
                            i = {
                                popper: {
                                    position: e.options.strategy,
                                    left: "0",
                                    top: "0",
                                    margin: "0",
                                },
                                arrow: { position: "absolute" },
                                reference: {},
                            };
                        Object.assign(e.elements.popper.style, i.popper),
                            (e.styles = i),
                            e.elements.arrow &&
                                Object.assign(e.elements.arrow.style, i.arrow);
                    },
                });
                Ye.setDefaultProps({ render: Fe });
                const He = Ye;
                !(function (t) {
                    var e = (function e() {
                        return (
                            t(".side-menu").each(function () {
                                if (null == this._tippy) {
                                    var e = t(this)
                                        .find(".side-menu__title")
                                        .html()
                                        .replace(/<[^>]*>?/gm, "")
                                        .trim();
                                    He(this, {
                                        content: e,
                                        arrow: '<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',
                                        animation: "shift-away",
                                        placement: "right",
                                    });
                                }
                                t(window).width() <= 1260 ||
                                t(this)
                                    .closest(".side-nav")
                                    .hasClass("side-nav--simple")
                                    ? this._tippy.enable()
                                    : this._tippy.disable();
                            }),
                            e
                        );
                    })();
                    window.addEventListener("resize", function () {
                        e();
                    });
                })(i(553));
                i(294);
                var We = window,
                    Be =
                        (We.requestAnimationFrame ||
                            We.webkitRequestAnimationFrame ||
                            We.mozRequestAnimationFrame ||
                            We.msRequestAnimationFrame,
                        window);
                Be.cancelAnimationFrame || Be.mozCancelAnimationFrame,
                    document.documentElement;
                document.createElement("_");
                try {
                    var Ve = Object.defineProperty({}, "passive", {
                        get: function () {
                            !0;
                        },
                    });
                    window.addEventListener("test", null, Ve);
                } catch (t) {}
                Object.keys ||
                    (Object.keys = function (t) {
                        var e = [];
                        for (var i in t)
                            Object.prototype.hasOwnProperty.call(t, i) &&
                                e.push(i);
                        return e;
                    }),
                    "remove" in Element.prototype ||
                        (Element.prototype.remove = function () {
                            this.parentNode &&
                                this.parentNode.removeChild(this);
                        });
                function Ge(t) {
                    return (
                        (Ge =
                            "function" == typeof Symbol &&
                            "symbol" == typeof Symbol.iterator
                                ? function (t) {
                                      return typeof t;
                                  }
                                : function (t) {
                                      return t &&
                                          "function" == typeof Symbol &&
                                          t.constructor === Symbol &&
                                          t !== Symbol.prototype
                                          ? "symbol"
                                          : typeof t;
                                  }),
                        Ge(t)
                    );
                }
                function je(t, e, i) {
                    return (
                        (e = (function (t) {
                            var e = (function (t, e) {
                                if ("object" !== Ge(t) || null === t) return t;
                                var i = t[Symbol.toPrimitive];
                                if (void 0 !== i) {
                                    var a = i.call(t, e || "default");
                                    if ("object" !== Ge(a)) return a;
                                    throw new TypeError(
                                        "@@toPrimitive must return a primitive value."
                                    );
                                }
                                return ("string" === e ? String : Number)(t);
                            })(t, "string");
                            return "symbol" === Ge(e) ? e : String(e);
                        })(e)) in t
                            ? Object.defineProperty(t, e, {
                                  value: i,
                                  enumerable: !0,
                                  configurable: !0,
                                  writable: !0,
                              })
                            : (t[e] = i),
                        t
                    );
                }
                !(function (t) {
                    var e = parseInt(t(".persentase-penerimaan").html());
                    e > 100 && (e = 100);
                    var i = t("#chart-performance-keseluruhan"),
                        a = new Gauge(i[0]).setOptions({
                            angle: 0.1,
                            lineWidth: 0.1,
                            radiusScale: 1,
                            pointer: {
                                length: 0.6,
                                strokeWidth: 0.035,
                                color: "#e9e9f0",
                            },
                            width: "auto",
                            limitMax: !1,
                            limitMin: !1,
                            generateGradient: !0,
                            highDpiSupport: !0,
                            staticZones: [
                                { strokeStyle: "#f07f31", min: 0, max: 25 },
                                { strokeStyle: "#f2d62c", min: 25, max: 50 },
                                { strokeStyle: "#8cc540", min: 50, max: 75 },
                                { strokeStyle: "#20b349", min: 75, max: 100 },
                            ],
                        });
                    (a.maxValue = 100),
                        a.setMinValue(0),
                        (a.animationSpeed = 32),
                        a.set(e);
                    var r = {
                            series: t("#chart-per-pajak").data("series"),
                            colors: pallete,
                            chart: {
                                id: "chart-per-pajak",
                                type: "bar",
                                height: 200,
                                fontFamily: "Roboto, sans-serif",
                                toolbar: { show: !1 },
                            },
                            plotOptions: {
                                bar: {
                                    horizontal: !1,
                                    columnWidth: "55%",
                                    endingShape: "rounded",
                                    distributed: !0,
                                },
                            },
                            dataLabels: { enabled: !1 },
                            stroke: {
                                show: !0,
                                width: 2,
                                colors: ["transparent"],
                            },
                            xaxis: {
                                type: "category",
                                title: {
                                    text: "Kelurahan / Desa",
                                    style: { fontWeight: 700 },
                                },
                                labels: { style: { fontSize: "11px" } },
                            },
                            yaxis: {
                                title: {
                                    text: "Penerimaan (Rp.)",
                                    style: { fontWeight: 700 },
                                },
                                labels: {
                                    formatter: function (t) {
                                        return t >= 1e12
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  minimumFractionDigits: 2,
                                              }).format(t / 1e12) + " T"
                                            : t >= 1e9
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  minimumFractionDigits: 2,
                                              }).format(t / 1e9) + " M"
                                            : t >= 1e6
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  minimumFractionDigits: 2,
                                              }).format(t / 1e6) + " JT"
                                            : new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  minimumFractionDigits: 2,
                                              }).format(t);
                                    },
                                },
                            },
                            fill: { opacity: 1 },
                            tooltip: {
                                intersect: !1,
                                y: {
                                    formatter: function (t) {
                                        return t >= 1e12
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  minimumFractionDigits: 2,
                                              }).format(t / 1e12) + " triliun"
                                            : t >= 1e9
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  minimumFractionDigits: 2,
                                              }).format(t / 1e9) + " miliar"
                                            : t >= 1e6
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  minimumFractionDigits: 2,
                                              }).format(t / 1e6) + " juta"
                                            : new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  minimumFractionDigits: 2,
                                              }).format(t);
                                    },
                                },
                            },
                            noData: { text: "Tidak Ada Data..." },
                        },
                        s = new ApexCharts(
                            document.querySelector("#chart-per-pajak"),
                            r
                        );
                    s.render();
                    var n = {
                            series: t("#chart-kontribusi-per-pajak").data(
                                "series"
                            ),
                            colors: pallete,
                            chart: {
                                id: "chart",
                                type: "pie",
                                height: 500,
                                animations: { enabled: !1 },
                            },
                            labels: [
                                "Hotel",
                                "Restoran",
                                "Hiburan",
                                "Reklame",
                                "PPJ",
                                "MBLB",
                                "Parkir",
                                "PAT",
                                "Walet",
                                "BPHTB",
                                "PBB",
                            ],
                            dataLabels: { enabled: !0 },
                            fill: { opacity: 1 },
                            tooltip: {
                                shared: !0,
                                intersect: !1,
                                y: {
                                    formatter: function (t) {
                                        return t >= 1e12
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t / 1e12) + " triliun"
                                            : t >= 1e9
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t / 1e9) + " miliar"
                                            : t >= 1e6
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t / 1e6) + " juta"
                                            : new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t);
                                    },
                                },
                            },
                            noData: { text: "Tidak Ada Data..." },
                        },
                        o = new ApexCharts(
                            document.querySelector(
                                "#chart-kontribusi-per-pajak"
                            ),
                            n
                        );
                    o.render();
                    var l = t("#chart-per-bulan").data("series"),
                        c = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        h = [],
                        d = 0;
                    l.forEach(function (t) {
                        var e = t.data,
                            i = [];
                        e.forEach(function (t, e) {
                            i.push(t.y),
                                (c[e] += parseInt(t.y)),
                                d < c[e] && (d = c[e]);
                        }),
                            h.push({
                                name: t.name,
                                type: "bar",
                                stacked: !0,
                                data: i,
                            });
                    });
                    for (var u = 1; d > 100; ) (u *= 10), (d /= 10);
                    (d = Math.ceil(d) * u),
                        h.push({ name: "Total", type: "line", data: c });
                    var f = {
                            series: h,
                            colors: pallete,
                            chart: je(
                                {
                                    id: "chart-per-bulan",
                                    type: "line",
                                    stacked: !0,
                                    height: 200,
                                    redrawOnParentResize: !0,
                                    toolbar: { show: !0 },
                                    zoom: { enabled: !0 },
                                    fontFamily: "Roboto, sans-serif",
                                },
                                "toolbar",
                                { show: !1 }
                            ),
                            dataLabels: { enabled: !1 },
                            plotOptions: { bar: { horizontal: !1 } },
                            stroke: { show: !0, width: 2 },
                            xaxis: {
                                categories: [
                                    "Jan",
                                    "Feb",
                                    "Mar",
                                    "Apr",
                                    "Mei",
                                    "Jun",
                                    "Jul",
                                    "Agu",
                                    "Sep",
                                    "Okt",
                                    "Nov",
                                    "Des",
                                ],
                                type: "category",
                                title: { text: "Bulan" },
                            },
                            yaxis: {
                                max: d,
                                title: { text: "Penerimaan (Rp.)" },
                                labels: {
                                    formatter: function (t) {
                                        return t >= 1e12
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t / 1e12) + " T"
                                            : t >= 1e9
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t / 1e9) + " M"
                                            : t >= 1e6
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t / 1e6) + " JT"
                                            : new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t);
                                    },
                                },
                                tickAmount: 4,
                            },
                            fill: { opacity: 1 },
                            tooltip: {
                                shared: !0,
                                intersect: !1,
                                y: {
                                    formatter: function (t) {
                                        return t >= 1e12
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t / 1e12) + " triliun"
                                            : t >= 1e9
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t / 1e9) + " miliar"
                                            : t >= 1e6
                                            ? new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t / 1e6) + " juta"
                                            : new Intl.NumberFormat("id-ID", {
                                                  style: "decimal",
                                                  maximumFractionDigits: 2,
                                              }).format(t);
                                    },
                                },
                            },
                            noData: { text: "Tidak Ada Data..." },
                            legend: {
                                position: "top",
                                horizontalAlign: "left",
                            },
                            grid: {
                                strokeDashArray: 4,
                                yaxis: { lines: { show: !0 } },
                                padding: {
                                    top: 0,
                                    right: 0,
                                    bottom: 0,
                                    left: 0,
                                },
                            },
                        },
                        g = new ApexCharts(
                            document.querySelector("#chart-per-bulan"),
                            f
                        );
                    g.render();
                    var p = t('[id^="performance-"]'),
                        x = [];
                    p.each(function (e, i) {
                        var a = {
                            series: [t(i).data("series")],
                            colors: [pallete[t(i).data("counter")]],
                            chart: {
                                height: 150,
                                width: 100,
                                type: "radialBar",
                            },
                            plotOptions: {
                                radialBar: {
                                    dataLabels: { show: !1 },
                                    hollow: { size: "60%" },
                                },
                            },
                        };
                        (x[e] = new ApexCharts(i, a)), x[e].render();
                    }),
                        (window.formatNumber = function (t) {
                            var e =
                                arguments.length > 1 && void 0 !== arguments[1]
                                    ? arguments[1]
                                    : 0;
                            return new Intl.NumberFormat("id-ID", {
                                style: "decimal",
                                maximumFractionDigits: e,
                            }).format(t);
                        }),
                        (window.refreshData = function () {
                            axios({
                                method: "GET",
                                url: route("dashboard.data"),
                            }).then(function (e) {
                                var r,
                                    n = e.data,
                                    c = n.targetPenerimaan,
                                    f = n.penerimaanPerPajak,
                                    p = n.kontribusiPerPajak,
                                    m = n.penerimaanPerBulan,
                                    b = n.trenPenerimaanPerBulan,
                                    v = 0,
                                    y = 0;
                                c.forEach(function (e, i) {
                                    (r = t("#table-realisasi").find(
                                        '[data-row="' + e.kode_pajak + '"]'
                                    ))
                                        .find('[data-col="target"]')
                                        .html(formatNumber(e.nilai)),
                                        r
                                            .find('[data-col="penerimaan"]')
                                            .html(formatNumber(e.penerimaan));
                                    var a = 0;
                                    e.nilai > 0 &&
                                        (a = (e.penerimaan / e.nilai) * 100),
                                        r
                                            .find('[data-col="progress"]')
                                            .html(formatNumber(a, 2) + "%"),
                                        (v += parseInt(e.nilai)),
                                        (y += parseInt(e.penerimaan));
                                }),
                                    (r =
                                        t("#table-realisasi").find(
                                            '[data-row="total"]'
                                        ))
                                        .find('[data-col="target"]')
                                        .html(formatNumber(v)),
                                    r
                                        .find('[data-col="penerimaan"]')
                                        .html(formatNumber(y));
                                var w = 0;
                                v > 0 && (w = (y / v) * 100),
                                    r
                                        .find('[data-col="progress"]')
                                        .html(formatNumber(w, 2) + "%"),
                                    s.updateOptions({ series: f }),
                                    o.updateSeries(p);
                                var k = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                                for (
                                    m.forEach(function (e, i) {
                                        (r = t(
                                            "#table-penerimaan-per-bulan"
                                        ).find('[data-row="' + e.name + '"]')),
                                            e.data.forEach(function (t, e) {
                                                r
                                                    .find(
                                                        '[data-col="' + e + '"]'
                                                    )
                                                    .html(formatNumber(t.y)),
                                                    (k[e] += parseInt(t.y));
                                            });
                                    }),
                                        r = t(
                                            "#table-penerimaan-per-bulan"
                                        ).find('[data-row="total"]'),
                                        k.forEach(function (t, e) {
                                            r.find(
                                                '[data-col="' + e + '"]'
                                            ).html(formatNumber(t));
                                        }),
                                        k = [
                                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                        ],
                                        h = [],
                                        d = 0,
                                        (l = b).forEach(function (t) {
                                            var e = t.data,
                                                i = [];
                                            e.forEach(function (t, e) {
                                                i.push(t.y),
                                                    (k[e] += parseInt(t.y)),
                                                    d < k[e] && (d = k[e]);
                                            }),
                                                h.push({
                                                    name: t.name,
                                                    type: "bar",
                                                    stacked: !0,
                                                    data: i,
                                                });
                                        }),
                                        u = 1;
                                    d > 100;

                                )
                                    (u *= 10), (d /= 10);
                                (d = Math.ceil(d) * u),
                                    h.push({
                                        name: "Total",
                                        type: "line",
                                        data: k,
                                    }),
                                    g.updateOptions({ series: h }, !1),
                                    x.forEach(function (e, i) {
                                        var a = 0;
                                        c[i].nilai > 0 &&
                                            (a =
                                                (c[i].penerimaan / c[i].nilai) *
                                                100),
                                            t(e.el)
                                                .closest(".box")
                                                .find(".persentase-per-pajak")
                                                .html(formatNumber(a, 2) + "%"),
                                            e.updateSeries([a]);
                                    }),
                                    console.log(w),
                                    i
                                        .closest(".box")
                                        .find(".total-penerimaan")
                                        .html(formatNumber(y, 0)),
                                    i
                                        .closest(".box")
                                        .find(".persentase-penerimaan")
                                        .html(formatNumber(w, 2)),
                                    a.set(w);
                            });
                        });
                    setInterval(refreshData, 6e4);
                })(i(553));
            },
            294: (t, e, i) => {
                !(function (t) {
                    "use strict";
                    t(".dark-mode-switcher").on("click", function () {
                        var e = t(this).find(".dark-mode-switcher__toggle");
                        t(e).hasClass("dark-mode-switcher__toggle--active")
                            ? t(e).removeClass(
                                  "dark-mode-switcher__toggle--active"
                              )
                            : t(e).addClass(
                                  "dark-mode-switcher__toggle--active"
                              ),
                            setTimeout(function () {
                                var e = t(".dark-mode-switcher").data("url");
                                window.location.href = e;
                            }, 500);
                    });
                })(i(553));
            },
            553: (t) => {
                !(function () {
                    "use strict";
                    var e = document,
                        i = window,
                        a = e.documentElement,
                        r = e.createElement.bind(e),
                        s = r("div"),
                        n = r("table"),
                        o = r("tbody"),
                        l = r("tr"),
                        c = Array.isArray,
                        h = Array.prototype,
                        d = h.concat,
                        u = h.filter,
                        f = h.indexOf,
                        g = h.map,
                        p = h.push,
                        x = h.slice,
                        m = h.some,
                        b = h.splice,
                        v = /^#(?:[\w-]|\\.|[^\x00-\xa0])*$/,
                        y = /^\.(?:[\w-]|\\.|[^\x00-\xa0])*$/,
                        w = /<.+>/,
                        k = /^\w+$/;
                    function A(t, e) {
                        var i,
                            a = !!(i = e) && 11 === i.nodeType;
                        return t && (a || M(e) || E(e))
                            ? !a && y.test(t)
                                ? e.getElementsByClassName(
                                      t.slice(1).replace(/\\/g, "")
                                  )
                                : !a && k.test(t)
                                ? e.getElementsByTagName(t)
                                : e.querySelectorAll(t)
                            : [];
                    }
                    var S = (function () {
                            function t(t, a) {
                                if (t) {
                                    if (L(t)) return t;
                                    var r = t;
                                    if (O(t)) {
                                        var s = a || e;
                                        if (
                                            !(r =
                                                v.test(t) && M(s)
                                                    ? s.getElementById(
                                                          t
                                                              .slice(1)
                                                              .replace(
                                                                  /\\/g,
                                                                  ""
                                                              )
                                                      )
                                                    : w.test(t)
                                                    ? Q(t)
                                                    : L(s)
                                                    ? s.find(t)
                                                    : O(s)
                                                    ? P(s).find(t)
                                                    : A(t, s))
                                        )
                                            return;
                                    } else if (I(t)) return this.ready(t);
                                    (r.nodeType || r === i) && (r = [r]),
                                        (this.length = r.length);
                                    for (var n = 0, o = this.length; n < o; n++)
                                        this[n] = r[n];
                                }
                            }
                            return (
                                (t.prototype.init = function (e, i) {
                                    return new t(e, i);
                                }),
                                t
                            );
                        })(),
                        C = S.prototype,
                        P = C.init;
                    function L(t) {
                        return t instanceof S;
                    }
                    function T(t) {
                        return !!t && t === t.window;
                    }
                    function M(t) {
                        return !!t && 9 === t.nodeType;
                    }
                    function E(t) {
                        return !!t && 1 === t.nodeType;
                    }
                    function I(t) {
                        return "function" == typeof t;
                    }
                    function O(t) {
                        return "string" == typeof t;
                    }
                    function z(t) {
                        return void 0 === t;
                    }
                    function F(t) {
                        return null === t;
                    }
                    function D(t) {
                        return !isNaN(parseFloat(t)) && isFinite(t);
                    }
                    function N(t) {
                        if ("object" != typeof t || null === t) return !1;
                        var e = Object.getPrototypeOf(t);
                        return null === e || e === Object.prototype;
                    }
                    function X(t, e, i) {
                        if (i) {
                            for (var a = t.length; a--; )
                                if (!1 === e.call(t[a], a, t[a])) return t;
                        } else if (N(t))
                            for (
                                var r = Object.keys(t), s = ((a = 0), r.length);
                                a < s;
                                a++
                            ) {
                                var n = r[a];
                                if (!1 === e.call(t[n], n, t[n])) return t;
                            }
                        else
                            for (a = 0, s = t.length; a < s; a++)
                                if (!1 === e.call(t[a], a, t[a])) return t;
                        return t;
                    }
                    function R() {
                        for (var t = [], e = 0; e < arguments.length; e++)
                            t[e] = arguments[e];
                        var i = "boolean" == typeof t[0] && t.shift(),
                            a = t.shift(),
                            r = t.length;
                        if (!a) return {};
                        if (!r) return R(i, P, a);
                        for (var s = 0; s < r; s++) {
                            var n = t[s];
                            for (var o in n)
                                i && (c(n[o]) || N(n[o]))
                                    ? ((a[o] &&
                                          a[o].constructor ===
                                              n[o].constructor) ||
                                          (a[o] = new n[o].constructor()),
                                      R(i, a[o], n[o]))
                                    : (a[o] = n[o]);
                        }
                        return a;
                    }
                    (P.fn = P.prototype = C),
                        (C.length = 0),
                        (C.splice = b),
                        "function" == typeof Symbol &&
                            (C[Symbol.iterator] = h[Symbol.iterator]),
                        (P.isWindow = T),
                        (P.isFunction = I),
                        (P.isArray = c),
                        (P.isNumeric = D),
                        (P.isPlainObject = N),
                        (P.each = X),
                        (C.each = function (t) {
                            return X(this, t);
                        }),
                        (C.empty = function () {
                            return this.each(function (t, e) {
                                for (; e.firstChild; )
                                    e.removeChild(e.firstChild);
                            });
                        }),
                        (P.extend = R),
                        (C.extend = function (t) {
                            return R(C, t);
                        });
                    var Y = /\S+/g;
                    function H(t) {
                        return (O(t) && t.match(Y)) || [];
                    }
                    function W(t, e, a) {
                        if (E(t)) {
                            var r = i.getComputedStyle(t, null);
                            return a
                                ? r.getPropertyValue(e) || void 0
                                : r[e] || t.style[e];
                        }
                    }
                    function B(t, e) {
                        return parseInt(W(t, e), 10) || 0;
                    }
                    function V(t, e) {
                        return (
                            B(t, "border".concat(e ? "Left" : "Top", "Width")) +
                            B(t, "padding".concat(e ? "Left" : "Top")) +
                            B(t, "padding".concat(e ? "Right" : "Bottom")) +
                            B(
                                t,
                                "border".concat(e ? "Right" : "Bottom", "Width")
                            )
                        );
                    }
                    (C.toggleClass = function (t, e) {
                        var i = H(t),
                            a = !z(e);
                        return this.each(function (t, r) {
                            E(r) &&
                                X(i, function (t, i) {
                                    a
                                        ? e
                                            ? r.classList.add(i)
                                            : r.classList.remove(i)
                                        : r.classList.toggle(i);
                                });
                        });
                    }),
                        (C.addClass = function (t) {
                            return this.toggleClass(t, !0);
                        }),
                        (C.removeAttr = function (t) {
                            var e = H(t);
                            return this.each(function (t, i) {
                                E(i) &&
                                    X(e, function (t, e) {
                                        i.removeAttribute(e);
                                    });
                            });
                        }),
                        (C.attr = function (t, e) {
                            if (t) {
                                if (O(t)) {
                                    if (arguments.length < 2) {
                                        if (!this[0] || !E(this[0])) return;
                                        var i = this[0].getAttribute(t);
                                        return F(i) ? void 0 : i;
                                    }
                                    return z(e)
                                        ? this
                                        : F(e)
                                        ? this.removeAttr(t)
                                        : this.each(function (i, a) {
                                              E(a) && a.setAttribute(t, e);
                                          });
                                }
                                for (var a in t) this.attr(a, t[a]);
                                return this;
                            }
                        }),
                        (C.removeClass = function (t) {
                            return arguments.length
                                ? this.toggleClass(t, !1)
                                : this.attr("class", "");
                        }),
                        (C.hasClass = function (t) {
                            return (
                                !!t &&
                                m.call(this, function (e) {
                                    return E(e) && e.classList.contains(t);
                                })
                            );
                        }),
                        (C.get = function (t) {
                            return z(t)
                                ? x.call(this)
                                : this[
                                      (t = Number(t)) < 0 ? t + this.length : t
                                  ];
                        }),
                        (C.eq = function (t) {
                            return P(this.get(t));
                        }),
                        (C.first = function () {
                            return this.eq(0);
                        }),
                        (C.last = function () {
                            return this.eq(-1);
                        }),
                        (C.text = function (t) {
                            return z(t)
                                ? this.get()
                                      .map(function (t) {
                                          return E(t) ||
                                              ((e = t) && 3 === e.nodeType)
                                              ? t.textContent
                                              : "";
                                          var e;
                                      })
                                      .join("")
                                : this.each(function (e, i) {
                                      E(i) && (i.textContent = t);
                                  });
                        });
                    var G = {};
                    function j(t) {
                        return "none" === W(t, "display");
                    }
                    function _(t, e) {
                        var i =
                            t &&
                            (t.matches ||
                                t.webkitMatchesSelector ||
                                t.msMatchesSelector);
                        return !!i && !!e && i.call(t, e);
                    }
                    function U(t) {
                        return O(t)
                            ? function (e, i) {
                                  return _(i, t);
                              }
                            : I(t)
                            ? t
                            : L(t)
                            ? function (e, i) {
                                  return t.is(i);
                              }
                            : t
                            ? function (e, i) {
                                  return i === t;
                              }
                            : function () {
                                  return !1;
                              };
                    }
                    function q(t, e) {
                        return e ? t.filter(e) : t;
                    }
                    (C.filter = function (t) {
                        var e = U(t);
                        return P(
                            u.call(this, function (t, i) {
                                return e.call(t, i, t);
                            })
                        );
                    }),
                        (C.detach = function (t) {
                            return (
                                q(this, t).each(function (t, e) {
                                    e.parentNode && e.parentNode.removeChild(e);
                                }),
                                this
                            );
                        });
                    var $ = /^\s*<(\w+)[^>]*>/,
                        Z = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
                        J = {
                            "*": s,
                            tr: o,
                            td: l,
                            th: l,
                            thead: n,
                            tbody: n,
                            tfoot: n,
                        };
                    function Q(t) {
                        if (!O(t)) return [];
                        if (Z.test(t)) return [r(RegExp.$1)];
                        var e = $.test(t) && RegExp.$1,
                            i = J[e] || J["*"];
                        return (
                            (i.innerHTML = t), P(i.childNodes).detach().get()
                        );
                    }
                    function K(t, e, i, a) {
                        for (
                            var r = [],
                                s = I(e),
                                n = a && U(a),
                                o = 0,
                                l = t.length;
                            o < l;
                            o++
                        )
                            if (s) {
                                var c = e(t[o]);
                                c.length && p.apply(r, c);
                            } else
                                for (
                                    var h = t[o][e];
                                    !(null == h || (a && n(-1, h)));

                                )
                                    r.push(h), (h = i ? h[e] : null);
                        return r;
                    }
                    function tt(t) {
                        return t.multiple && t.options
                            ? K(
                                  u.call(t.options, function (t) {
                                      return (
                                          t.selected &&
                                          !t.disabled &&
                                          !t.parentNode.disabled
                                      );
                                  }),
                                  "value"
                              )
                            : t.value || "";
                    }
                    function et(t) {
                        return t.length > 1
                            ? u.call(t, function (t, e, i) {
                                  return f.call(i, t) === e;
                              })
                            : t;
                    }
                    (P.parseHTML = Q),
                        (C.has = function (t) {
                            var e = O(t)
                                ? function (e, i) {
                                      return A(t, i).length;
                                  }
                                : function (e, i) {
                                      return i.contains(t);
                                  };
                            return this.filter(e);
                        }),
                        (C.not = function (t) {
                            var e = U(t);
                            return this.filter(function (i, a) {
                                return (!O(t) || E(a)) && !e.call(a, i, a);
                            });
                        }),
                        (C.val = function (t) {
                            return arguments.length
                                ? this.each(function (e, i) {
                                      var a = i.multiple && i.options;
                                      if (a || Ft.test(i.type)) {
                                          var r = c(t)
                                              ? g.call(t, String)
                                              : F(t)
                                              ? []
                                              : [String(t)];
                                          a
                                              ? X(
                                                    i.options,
                                                    function (t, e) {
                                                        e.selected =
                                                            r.indexOf(
                                                                e.value
                                                            ) >= 0;
                                                    },
                                                    !0
                                                )
                                              : (i.checked =
                                                    r.indexOf(i.value) >= 0);
                                      } else i.value = z(t) || F(t) ? "" : t;
                                  })
                                : this[0] && tt(this[0]);
                        }),
                        (C.is = function (t) {
                            var e = U(t);
                            return m.call(this, function (t, i) {
                                return e.call(t, i, t);
                            });
                        }),
                        (P.guid = 1),
                        (P.unique = et),
                        (C.add = function (t, e) {
                            return P(et(this.get().concat(P(t, e).get())));
                        }),
                        (C.children = function (t) {
                            return q(
                                P(
                                    et(
                                        K(this, function (t) {
                                            return t.children;
                                        })
                                    )
                                ),
                                t
                            );
                        }),
                        (C.parent = function (t) {
                            return q(P(et(K(this, "parentNode"))), t);
                        }),
                        (C.index = function (t) {
                            var e = t ? P(t)[0] : this[0],
                                i = t ? this : P(e).parent().children();
                            return f.call(i, e);
                        }),
                        (C.closest = function (t) {
                            var e = this.filter(t);
                            if (e.length) return e;
                            var i = this.parent();
                            return i.length ? i.closest(t) : e;
                        }),
                        (C.siblings = function (t) {
                            return q(
                                P(
                                    et(
                                        K(this, function (t) {
                                            return P(t)
                                                .parent()
                                                .children()
                                                .not(t);
                                        })
                                    )
                                ),
                                t
                            );
                        }),
                        (C.find = function (t) {
                            return P(
                                et(
                                    K(this, function (e) {
                                        return A(t, e);
                                    })
                                )
                            );
                        });
                    var it = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
                        at = /^$|^module$|\/(java|ecma)script/i,
                        rt = ["type", "src", "nonce", "noModule"];
                    function st(t, e, i, s, n) {
                        s
                            ? t.insertBefore(e, i ? t.firstChild : null)
                            : "HTML" === t.nodeName
                            ? t.parentNode.replaceChild(e, t)
                            : t.parentNode.insertBefore(
                                  e,
                                  i ? t : t.nextSibling
                              ),
                            n &&
                                (function (t, e) {
                                    var i = P(t);
                                    i.filter("script")
                                        .add(i.find("script"))
                                        .each(function (t, i) {
                                            if (
                                                at.test(i.type) &&
                                                a.contains(i)
                                            ) {
                                                var s = r("script");
                                                (s.text = i.textContent.replace(
                                                    it,
                                                    ""
                                                )),
                                                    X(rt, function (t, e) {
                                                        i[e] && (s[e] = i[e]);
                                                    }),
                                                    e.head.insertBefore(
                                                        s,
                                                        null
                                                    ),
                                                    e.head.removeChild(s);
                                            }
                                        });
                                })(e, t.ownerDocument);
                    }
                    function nt(t, e, i, a, r, s, n, o) {
                        return (
                            X(
                                t,
                                function (t, s) {
                                    X(
                                        P(s),
                                        function (t, s) {
                                            X(
                                                P(e),
                                                function (e, n) {
                                                    var o = i ? n : s,
                                                        l = i ? t : e;
                                                    st(
                                                        i ? s : n,
                                                        l ? o.cloneNode(!0) : o,
                                                        a,
                                                        r,
                                                        !l
                                                    );
                                                },
                                                o
                                            );
                                        },
                                        n
                                    );
                                },
                                s
                            ),
                            e
                        );
                    }
                    (C.after = function () {
                        return nt(arguments, this, !1, !1, !1, !0, !0);
                    }),
                        (C.append = function () {
                            return nt(arguments, this, !1, !1, !0);
                        }),
                        (C.html = function (t) {
                            if (!arguments.length)
                                return this[0] && this[0].innerHTML;
                            if (z(t)) return this;
                            var e = /<script[\s>]/.test(t);
                            return this.each(function (i, a) {
                                E(a) &&
                                    (e
                                        ? P(a).empty().append(t)
                                        : (a.innerHTML = t));
                            });
                        }),
                        (C.appendTo = function (t) {
                            return nt(arguments, this, !0, !1, !0);
                        }),
                        (C.wrapInner = function (t) {
                            return this.each(function (e, i) {
                                var a = P(i),
                                    r = a.contents();
                                r.length ? r.wrapAll(t) : a.append(t);
                            });
                        }),
                        (C.before = function () {
                            return nt(arguments, this, !1, !0);
                        }),
                        (C.wrapAll = function (t) {
                            for (var e = P(t), i = e[0]; i.children.length; )
                                i = i.firstElementChild;
                            return this.first().before(e), this.appendTo(i);
                        }),
                        (C.wrap = function (t) {
                            return this.each(function (e, i) {
                                var a = P(t)[0];
                                P(i).wrapAll(e ? a.cloneNode(!0) : a);
                            });
                        }),
                        (C.insertAfter = function (t) {
                            return nt(arguments, this, !0, !1, !1, !1, !1, !0);
                        }),
                        (C.insertBefore = function (t) {
                            return nt(arguments, this, !0, !0);
                        }),
                        (C.prepend = function () {
                            return nt(arguments, this, !1, !0, !0, !0, !0);
                        }),
                        (C.prependTo = function (t) {
                            return nt(arguments, this, !0, !0, !0, !1, !1, !0);
                        }),
                        (C.contents = function () {
                            return P(
                                et(
                                    K(this, function (t) {
                                        return "IFRAME" === t.tagName
                                            ? [t.contentDocument]
                                            : "TEMPLATE" === t.tagName
                                            ? t.content.childNodes
                                            : t.childNodes;
                                    })
                                )
                            );
                        }),
                        (C.next = function (t, e, i) {
                            return q(
                                P(et(K(this, "nextElementSibling", e, i))),
                                t
                            );
                        }),
                        (C.nextAll = function (t) {
                            return this.next(t, !0);
                        }),
                        (C.nextUntil = function (t, e) {
                            return this.next(e, !0, t);
                        }),
                        (C.parents = function (t, e) {
                            return q(P(et(K(this, "parentElement", !0, e))), t);
                        }),
                        (C.parentsUntil = function (t, e) {
                            return this.parents(e, t);
                        }),
                        (C.prev = function (t, e, i) {
                            return q(
                                P(et(K(this, "previousElementSibling", e, i))),
                                t
                            );
                        }),
                        (C.prevAll = function (t) {
                            return this.prev(t, !0);
                        }),
                        (C.prevUntil = function (t, e) {
                            return this.prev(e, !0, t);
                        }),
                        (C.map = function (t) {
                            return P(
                                d.apply(
                                    [],
                                    g.call(this, function (e, i) {
                                        return t.call(e, i, e);
                                    })
                                )
                            );
                        }),
                        (C.clone = function () {
                            return this.map(function (t, e) {
                                return e.cloneNode(!0);
                            });
                        }),
                        (C.offsetParent = function () {
                            return this.map(function (t, e) {
                                for (
                                    var i = e.offsetParent;
                                    i && "static" === W(i, "position");

                                )
                                    i = i.offsetParent;
                                return i || a;
                            });
                        }),
                        (C.slice = function (t, e) {
                            return P(x.call(this, t, e));
                        });
                    var ot = /-([a-z])/g;
                    function lt(t) {
                        return t.replace(ot, function (t, e) {
                            return e.toUpperCase();
                        });
                    }
                    (C.ready = function (t) {
                        var i = function () {
                            return setTimeout(t, 0, P);
                        };
                        return (
                            "loading" !== e.readyState
                                ? i()
                                : e.addEventListener("DOMContentLoaded", i),
                            this
                        );
                    }),
                        (C.unwrap = function () {
                            return (
                                this.parent().each(function (t, e) {
                                    if ("BODY" !== e.tagName) {
                                        var i = P(e);
                                        i.replaceWith(i.children());
                                    }
                                }),
                                this
                            );
                        }),
                        (C.offset = function () {
                            var t = this[0];
                            if (t) {
                                var e = t.getBoundingClientRect();
                                return {
                                    top: e.top + i.pageYOffset,
                                    left: e.left + i.pageXOffset,
                                };
                            }
                        }),
                        (C.position = function () {
                            var t = this[0];
                            if (t) {
                                var e = "fixed" === W(t, "position"),
                                    i = e
                                        ? t.getBoundingClientRect()
                                        : this.offset();
                                if (!e) {
                                    for (
                                        var a = t.ownerDocument,
                                            r =
                                                t.offsetParent ||
                                                a.documentElement;
                                        (r === a.body ||
                                            r === a.documentElement) &&
                                        "static" === W(r, "position");

                                    )
                                        r = r.parentNode;
                                    if (r !== t && E(r)) {
                                        var s = P(r).offset();
                                        (i.top -=
                                            s.top + B(r, "borderTopWidth")),
                                            (i.left -=
                                                s.left +
                                                B(r, "borderLeftWidth"));
                                    }
                                }
                                return {
                                    top: i.top - B(t, "marginTop"),
                                    left: i.left - B(t, "marginLeft"),
                                };
                            }
                        });
                    var ct = {
                        class: "className",
                        contenteditable: "contentEditable",
                        for: "htmlFor",
                        readonly: "readOnly",
                        maxlength: "maxLength",
                        tabindex: "tabIndex",
                        colspan: "colSpan",
                        rowspan: "rowSpan",
                        usemap: "useMap",
                    };
                    (C.prop = function (t, e) {
                        if (t) {
                            if (O(t))
                                return (
                                    (t = ct[t] || t),
                                    arguments.length < 2
                                        ? this[0] && this[0][t]
                                        : this.each(function (i, a) {
                                              a[t] = e;
                                          })
                                );
                            for (var i in t) this.prop(i, t[i]);
                            return this;
                        }
                    }),
                        (C.removeProp = function (t) {
                            return this.each(function (e, i) {
                                delete i[ct[t] || t];
                            });
                        });
                    var ht = /^--/;
                    function dt(t) {
                        return ht.test(t);
                    }
                    var ut = {},
                        ft = s.style,
                        gt = ["webkit", "moz", "ms"];
                    var pt = {
                        animationIterationCount: !0,
                        columnCount: !0,
                        flexGrow: !0,
                        flexShrink: !0,
                        fontWeight: !0,
                        gridArea: !0,
                        gridColumn: !0,
                        gridColumnEnd: !0,
                        gridColumnStart: !0,
                        gridRow: !0,
                        gridRowEnd: !0,
                        gridRowStart: !0,
                        lineHeight: !0,
                        opacity: !0,
                        order: !0,
                        orphans: !0,
                        widows: !0,
                        zIndex: !0,
                    };
                    function xt(t, e, i) {
                        return (
                            void 0 === i && (i = dt(t)),
                            i || pt[t] || !D(e) ? e : "".concat(e, "px")
                        );
                    }
                    function mt(t, e) {
                        try {
                            return t(e);
                        } catch (t) {
                            return e;
                        }
                    }
                    C.css = function (t, e) {
                        if (O(t)) {
                            var i = dt(t);
                            return (
                                (t = (function (t, e) {
                                    if ((void 0 === e && (e = dt(t)), e))
                                        return t;
                                    if (!ut[t]) {
                                        var i = lt(t),
                                            a = ""
                                                .concat(i[0].toUpperCase())
                                                .concat(i.slice(1));
                                        X(
                                            ""
                                                .concat(i, " ")
                                                .concat(
                                                    gt.join("".concat(a, " "))
                                                )
                                                .concat(a)
                                                .split(" "),
                                            function (e, i) {
                                                if (i in ft)
                                                    return (ut[t] = i), !1;
                                            }
                                        );
                                    }
                                    return ut[t];
                                })(t, i)),
                                arguments.length < 2
                                    ? this[0] && W(this[0], t, i)
                                    : t
                                    ? ((e = xt(t, e, i)),
                                      this.each(function (a, r) {
                                          E(r) &&
                                              (i
                                                  ? r.style.setProperty(t, e)
                                                  : (r.style[t] = e));
                                      }))
                                    : this
                            );
                        }
                        for (var a in t) this.css(a, t[a]);
                        return this;
                    };
                    var bt = /^\s+|\s+$/;
                    function vt(t, e) {
                        var i = t.dataset[e] || t.dataset[lt(e)];
                        return bt.test(i) ? i : mt(JSON.parse, i);
                    }
                    function yt(t, e) {
                        var i = t.documentElement;
                        return Math.max(
                            t.body["scroll".concat(e)],
                            i["scroll".concat(e)],
                            t.body["offset".concat(e)],
                            i["offset".concat(e)],
                            i["client".concat(e)]
                        );
                    }
                    (C.data = function (t, e) {
                        if (!t) {
                            if (!this[0]) return;
                            var i = {};
                            for (var a in this[0].dataset)
                                i[a] = vt(this[0], a);
                            return i;
                        }
                        if (O(t))
                            return arguments.length < 2
                                ? this[0] && vt(this[0], t)
                                : z(e)
                                ? this
                                : this.each(function (i, a) {
                                      !(function (t, e, i) {
                                          (i = mt(JSON.stringify, i)),
                                              (t.dataset[lt(e)] = i);
                                      })(a, t, e);
                                  });
                        for (var a in t) this.data(a, t[a]);
                        return this;
                    }),
                        X([!0, !1], function (t, e) {
                            X(["Width", "Height"], function (t, i) {
                                var a = ""
                                    .concat(e ? "outer" : "inner")
                                    .concat(i);
                                C[a] = function (a) {
                                    if (this[0])
                                        return T(this[0])
                                            ? e
                                                ? this[0]["inner".concat(i)]
                                                : this[0].document
                                                      .documentElement[
                                                      "client".concat(i)
                                                  ]
                                            : M(this[0])
                                            ? yt(this[0], i)
                                            : this[0][
                                                  ""
                                                      .concat(
                                                          e
                                                              ? "offset"
                                                              : "client"
                                                      )
                                                      .concat(i)
                                              ] +
                                              (a && e
                                                  ? B(
                                                        this[0],
                                                        "margin".concat(
                                                            t ? "Top" : "Left"
                                                        )
                                                    ) +
                                                    B(
                                                        this[0],
                                                        "margin".concat(
                                                            t
                                                                ? "Bottom"
                                                                : "Right"
                                                        )
                                                    )
                                                  : 0);
                                };
                            });
                        }),
                        X(["Width", "Height"], function (t, e) {
                            var i = e.toLowerCase();
                            C[i] = function (a) {
                                if (!this[0]) return z(a) ? void 0 : this;
                                if (!arguments.length)
                                    return T(this[0])
                                        ? this[0].document.documentElement[
                                              "client".concat(e)
                                          ]
                                        : M(this[0])
                                        ? yt(this[0], e)
                                        : this[0].getBoundingClientRect()[i] -
                                          V(this[0], !t);
                                var r = parseInt(a, 10);
                                return this.each(function (e, a) {
                                    if (E(a)) {
                                        var s = W(a, "boxSizing");
                                        a.style[i] = xt(
                                            i,
                                            r +
                                                ("border-box" === s
                                                    ? V(a, !t)
                                                    : 0)
                                        );
                                    }
                                });
                            };
                        });
                    var wt = "___cd";
                    (C.toggle = function (t) {
                        return this.each(function (i, a) {
                            if (E(a)) {
                                var s = j(a);
                                (z(t) ? s : t)
                                    ? ((a.style.display = a[wt] || ""),
                                      j(a) &&
                                          (a.style.display = (function (t) {
                                              if (G[t]) return G[t];
                                              var i = r(t);
                                              e.body.insertBefore(i, null);
                                              var a = W(i, "display");
                                              return (
                                                  e.body.removeChild(i),
                                                  (G[t] =
                                                      "none" !== a
                                                          ? a
                                                          : "block")
                                              );
                                          })(a.tagName)))
                                    : s ||
                                      ((a[wt] = W(a, "display")),
                                      (a.style.display = "none"));
                            }
                        });
                    }),
                        (C.hide = function () {
                            return this.toggle(!1);
                        }),
                        (C.show = function () {
                            return this.toggle(!0);
                        });
                    var kt = "___ce",
                        At = ".",
                        St = { focus: "focusin", blur: "focusout" },
                        Ct = {
                            mouseenter: "mouseover",
                            mouseleave: "mouseout",
                        },
                        Pt =
                            /^(mouse|pointer|contextmenu|drag|drop|click|dblclick)/i;
                    function Lt(t) {
                        return Ct[t] || St[t] || t;
                    }
                    function Tt(t) {
                        var e = t.split(At);
                        return [e[0], e.slice(1).sort()];
                    }
                    function Mt(t) {
                        return (t[kt] = t[kt] || {});
                    }
                    function Et(t, e) {
                        return (
                            !e ||
                            !m.call(e, function (e) {
                                return t.indexOf(e) < 0;
                            })
                        );
                    }
                    function It(t, e, i, a, r) {
                        var s = Mt(t);
                        if (e)
                            s[e] &&
                                (s[e] = s[e].filter(function (s) {
                                    var n = s[0],
                                        o = s[1],
                                        l = s[2];
                                    if (
                                        (r && l.guid !== r.guid) ||
                                        !Et(n, i) ||
                                        (a && a !== o)
                                    )
                                        return !0;
                                    t.removeEventListener(e, l);
                                }));
                        else for (e in s) It(t, e, i, a, r);
                    }
                    (C.trigger = function (t, i) {
                        if (O(t)) {
                            var a = Tt(t),
                                r = a[0],
                                s = a[1],
                                n = Lt(r);
                            if (!n) return this;
                            var o = Pt.test(n) ? "MouseEvents" : "HTMLEvents";
                            (t = e.createEvent(o)).initEvent(n, !0, !0),
                                (t.namespace = s.join(At)),
                                (t.___ot = r);
                        }
                        t.___td = i;
                        var l = t.___ot in St;
                        return this.each(function (e, i) {
                            l &&
                                I(i[t.___ot]) &&
                                ((i["___i".concat(t.type)] = !0),
                                i[t.___ot](),
                                (i["___i".concat(t.type)] = !1)),
                                i.dispatchEvent(t);
                        });
                    }),
                        (C.off = function (t, e, i) {
                            var a = this;
                            if (z(t))
                                this.each(function (t, e) {
                                    (E(e) || M(e) || T(e)) && It(e);
                                });
                            else if (O(t))
                                I(e) && ((i = e), (e = "")),
                                    X(H(t), function (t, r) {
                                        var s = Tt(r),
                                            n = s[0],
                                            o = s[1],
                                            l = Lt(n);
                                        a.each(function (t, a) {
                                            (E(a) || M(a) || T(a)) &&
                                                It(a, l, o, e, i);
                                        });
                                    });
                            else for (var r in t) this.off(r, t[r]);
                            return this;
                        }),
                        (C.remove = function (t) {
                            return q(this, t).detach().off(), this;
                        }),
                        (C.replaceWith = function (t) {
                            return this.before(t).remove();
                        }),
                        (C.replaceAll = function (t) {
                            return P(t).replaceWith(this), this;
                        }),
                        (C.on = function (t, e, i, a, r) {
                            var s = this;
                            if (!O(t)) {
                                for (var n in t) this.on(n, e, i, t[n], r);
                                return this;
                            }
                            return (
                                O(e) ||
                                    (z(e) || F(e)
                                        ? (e = "")
                                        : z(i)
                                        ? ((i = e), (e = ""))
                                        : ((a = i), (i = e), (e = ""))),
                                I(a) || ((a = i), (i = void 0)),
                                a
                                    ? (X(H(t), function (t, n) {
                                          var o = Tt(n),
                                              l = o[0],
                                              c = o[1],
                                              h = Lt(l),
                                              d = l in Ct,
                                              u = l in St;
                                          h &&
                                              s.each(function (t, s) {
                                                  if (E(s) || M(s) || T(s)) {
                                                      var n = function (t) {
                                                          if (
                                                              t.target[
                                                                  "___i".concat(
                                                                      t.type
                                                                  )
                                                              ]
                                                          )
                                                              return t.stopImmediatePropagation();
                                                          if (
                                                              (!t.namespace ||
                                                                  Et(
                                                                      c,
                                                                      t.namespace.split(
                                                                          At
                                                                      )
                                                                  )) &&
                                                              (e ||
                                                                  !(
                                                                      (u &&
                                                                          (t.target !==
                                                                              s ||
                                                                              t.___ot ===
                                                                                  h)) ||
                                                                      (d &&
                                                                          t.relatedTarget &&
                                                                          s.contains(
                                                                              t.relatedTarget
                                                                          ))
                                                                  ))
                                                          ) {
                                                              var o = s;
                                                              if (e) {
                                                                  for (
                                                                      var l =
                                                                          t.target;
                                                                      !_(l, e);

                                                                  ) {
                                                                      if (
                                                                          l ===
                                                                          s
                                                                      )
                                                                          return;
                                                                      if (
                                                                          !(l =
                                                                              l.parentNode)
                                                                      )
                                                                          return;
                                                                  }
                                                                  o = l;
                                                              }
                                                              Object.defineProperty(
                                                                  t,
                                                                  "currentTarget",
                                                                  {
                                                                      configurable:
                                                                          !0,
                                                                      get: function () {
                                                                          return o;
                                                                      },
                                                                  }
                                                              ),
                                                                  Object.defineProperty(
                                                                      t,
                                                                      "delegateTarget",
                                                                      {
                                                                          configurable:
                                                                              !0,
                                                                          get: function () {
                                                                              return s;
                                                                          },
                                                                      }
                                                                  ),
                                                                  Object.defineProperty(
                                                                      t,
                                                                      "data",
                                                                      {
                                                                          configurable:
                                                                              !0,
                                                                          get: function () {
                                                                              return i;
                                                                          },
                                                                      }
                                                                  );
                                                              var f = a.call(
                                                                  o,
                                                                  t,
                                                                  t.___td
                                                              );
                                                              r &&
                                                                  It(
                                                                      s,
                                                                      h,
                                                                      c,
                                                                      e,
                                                                      n
                                                                  ),
                                                                  !1 === f &&
                                                                      (t.preventDefault(),
                                                                      t.stopPropagation());
                                                          }
                                                      };
                                                      (n.guid = a.guid =
                                                          a.guid || P.guid++),
                                                          (function (
                                                              t,
                                                              e,
                                                              i,
                                                              a,
                                                              r
                                                          ) {
                                                              var s = Mt(t);
                                                              (s[e] =
                                                                  s[e] || []),
                                                                  s[e].push([
                                                                      i,
                                                                      a,
                                                                      r,
                                                                  ]),
                                                                  t.addEventListener(
                                                                      e,
                                                                      r
                                                                  );
                                                          })(s, h, c, e, n);
                                                  }
                                              });
                                      }),
                                      this)
                                    : this
                            );
                        }),
                        (C.one = function (t, e, i, a) {
                            return this.on(t, e, i, a, !0);
                        });
                    var Ot = /\r?\n/g;
                    var zt = /file|reset|submit|button|image/i,
                        Ft = /radio|checkbox/i;
                    (C.serialize = function () {
                        var t = "";
                        return (
                            this.each(function (e, i) {
                                X(i.elements || [i], function (e, i) {
                                    if (
                                        !(
                                            i.disabled ||
                                            !i.name ||
                                            "FIELDSET" === i.tagName ||
                                            zt.test(i.type) ||
                                            (Ft.test(i.type) && !i.checked)
                                        )
                                    ) {
                                        var a = tt(i);
                                        if (!z(a))
                                            X(c(a) ? a : [a], function (e, a) {
                                                t += (function (t, e) {
                                                    return "&"
                                                        .concat(
                                                            encodeURIComponent(
                                                                t
                                                            ),
                                                            "="
                                                        )
                                                        .concat(
                                                            encodeURIComponent(
                                                                e.replace(
                                                                    Ot,
                                                                    "\r\n"
                                                                )
                                                            )
                                                        );
                                                })(i.name, a);
                                            });
                                    }
                                });
                            }),
                            t.slice(1)
                        );
                    }),
                        (t.exports = P);
                })();
            },
            484: function (t) {
                t.exports = (function () {
                    "use strict";
                    var t = 1e3,
                        e = 6e4,
                        i = 36e5,
                        a = "millisecond",
                        r = "second",
                        s = "minute",
                        n = "hour",
                        o = "day",
                        l = "week",
                        c = "month",
                        h = "quarter",
                        d = "year",
                        u = "date",
                        f = "Invalid Date",
                        g =
                            /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
                        p =
                            /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
                        x = {
                            name: "en",
                            weekdays:
                                "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
                                    "_"
                                ),
                            months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
                                "_"
                            ),
                            ordinal: function (t) {
                                var e = ["th", "st", "nd", "rd"],
                                    i = t % 100;
                                return (
                                    "[" +
                                    t +
                                    (e[(i - 20) % 10] || e[i] || e[0]) +
                                    "]"
                                );
                            },
                        },
                        m = function (t, e, i) {
                            var a = String(t);
                            return !a || a.length >= e
                                ? t
                                : "" + Array(e + 1 - a.length).join(i) + t;
                        },
                        b = {
                            s: m,
                            z: function (t) {
                                var e = -t.utcOffset(),
                                    i = Math.abs(e),
                                    a = Math.floor(i / 60),
                                    r = i % 60;
                                return (
                                    (e <= 0 ? "+" : "-") +
                                    m(a, 2, "0") +
                                    ":" +
                                    m(r, 2, "0")
                                );
                            },
                            m: function t(e, i) {
                                if (e.date() < i.date()) return -t(i, e);
                                var a =
                                        12 * (i.year() - e.year()) +
                                        (i.month() - e.month()),
                                    r = e.clone().add(a, c),
                                    s = i - r < 0,
                                    n = e.clone().add(a + (s ? -1 : 1), c);
                                return +(
                                    -(a + (i - r) / (s ? r - n : n - r)) || 0
                                );
                            },
                            a: function (t) {
                                return t < 0
                                    ? Math.ceil(t) || 0
                                    : Math.floor(t);
                            },
                            p: function (t) {
                                return (
                                    {
                                        M: c,
                                        y: d,
                                        w: l,
                                        d: o,
                                        D: u,
                                        h: n,
                                        m: s,
                                        s: r,
                                        ms: a,
                                        Q: h,
                                    }[t] ||
                                    String(t || "")
                                        .toLowerCase()
                                        .replace(/s$/, "")
                                );
                            },
                            u: function (t) {
                                return void 0 === t;
                            },
                        },
                        v = "en",
                        y = {};
                    y[v] = x;
                    var w = function (t) {
                            return t instanceof C;
                        },
                        k = function t(e, i, a) {
                            var r;
                            if (!e) return v;
                            if ("string" == typeof e) {
                                var s = e.toLowerCase();
                                y[s] && (r = s), i && ((y[s] = i), (r = s));
                                var n = e.split("-");
                                if (!r && n.length > 1) return t(n[0]);
                            } else {
                                var o = e.name;
                                (y[o] = e), (r = o);
                            }
                            return !a && r && (v = r), r || (!a && v);
                        },
                        A = function (t, e) {
                            if (w(t)) return t.clone();
                            var i = "object" == typeof e ? e : {};
                            return (i.date = t), (i.args = arguments), new C(i);
                        },
                        S = b;
                    (S.l = k),
                        (S.i = w),
                        (S.w = function (t, e) {
                            return A(t, {
                                locale: e.$L,
                                utc: e.$u,
                                x: e.$x,
                                $offset: e.$offset,
                            });
                        });
                    var C = (function () {
                            function x(t) {
                                (this.$L = k(t.locale, null, !0)),
                                    this.parse(t);
                            }
                            var m = x.prototype;
                            return (
                                (m.parse = function (t) {
                                    (this.$d = (function (t) {
                                        var e = t.date,
                                            i = t.utc;
                                        if (null === e) return new Date(NaN);
                                        if (S.u(e)) return new Date();
                                        if (e instanceof Date)
                                            return new Date(e);
                                        if (
                                            "string" == typeof e &&
                                            !/Z$/i.test(e)
                                        ) {
                                            var a = e.match(g);
                                            if (a) {
                                                var r = a[2] - 1 || 0,
                                                    s = (a[7] || "0").substring(
                                                        0,
                                                        3
                                                    );
                                                return i
                                                    ? new Date(
                                                          Date.UTC(
                                                              a[1],
                                                              r,
                                                              a[3] || 1,
                                                              a[4] || 0,
                                                              a[5] || 0,
                                                              a[6] || 0,
                                                              s
                                                          )
                                                      )
                                                    : new Date(
                                                          a[1],
                                                          r,
                                                          a[3] || 1,
                                                          a[4] || 0,
                                                          a[5] || 0,
                                                          a[6] || 0,
                                                          s
                                                      );
                                            }
                                        }
                                        return new Date(e);
                                    })(t)),
                                        (this.$x = t.x || {}),
                                        this.init();
                                }),
                                (m.init = function () {
                                    var t = this.$d;
                                    (this.$y = t.getFullYear()),
                                        (this.$M = t.getMonth()),
                                        (this.$D = t.getDate()),
                                        (this.$W = t.getDay()),
                                        (this.$H = t.getHours()),
                                        (this.$m = t.getMinutes()),
                                        (this.$s = t.getSeconds()),
                                        (this.$ms = t.getMilliseconds());
                                }),
                                (m.$utils = function () {
                                    return S;
                                }),
                                (m.isValid = function () {
                                    return !(this.$d.toString() === f);
                                }),
                                (m.isSame = function (t, e) {
                                    var i = A(t);
                                    return (
                                        this.startOf(e) <= i &&
                                        i <= this.endOf(e)
                                    );
                                }),
                                (m.isAfter = function (t, e) {
                                    return A(t) < this.startOf(e);
                                }),
                                (m.isBefore = function (t, e) {
                                    return this.endOf(e) < A(t);
                                }),
                                (m.$g = function (t, e, i) {
                                    return S.u(t) ? this[e] : this.set(i, t);
                                }),
                                (m.unix = function () {
                                    return Math.floor(this.valueOf() / 1e3);
                                }),
                                (m.valueOf = function () {
                                    return this.$d.getTime();
                                }),
                                (m.startOf = function (t, e) {
                                    var i = this,
                                        a = !!S.u(e) || e,
                                        h = S.p(t),
                                        f = function (t, e) {
                                            var r = S.w(
                                                i.$u
                                                    ? Date.UTC(i.$y, e, t)
                                                    : new Date(i.$y, e, t),
                                                i
                                            );
                                            return a ? r : r.endOf(o);
                                        },
                                        g = function (t, e) {
                                            return S.w(
                                                i
                                                    .toDate()
                                                    [t].apply(
                                                        i.toDate("s"),
                                                        (a
                                                            ? [0, 0, 0, 0]
                                                            : [23, 59, 59, 999]
                                                        ).slice(e)
                                                    ),
                                                i
                                            );
                                        },
                                        p = this.$W,
                                        x = this.$M,
                                        m = this.$D,
                                        b = "set" + (this.$u ? "UTC" : "");
                                    switch (h) {
                                        case d:
                                            return a ? f(1, 0) : f(31, 11);
                                        case c:
                                            return a ? f(1, x) : f(0, x + 1);
                                        case l:
                                            var v =
                                                    this.$locale().weekStart ||
                                                    0,
                                                y = (p < v ? p + 7 : p) - v;
                                            return f(
                                                a ? m - y : m + (6 - y),
                                                x
                                            );
                                        case o:
                                        case u:
                                            return g(b + "Hours", 0);
                                        case n:
                                            return g(b + "Minutes", 1);
                                        case s:
                                            return g(b + "Seconds", 2);
                                        case r:
                                            return g(b + "Milliseconds", 3);
                                        default:
                                            return this.clone();
                                    }
                                }),
                                (m.endOf = function (t) {
                                    return this.startOf(t, !1);
                                }),
                                (m.$set = function (t, e) {
                                    var i,
                                        l = S.p(t),
                                        h = "set" + (this.$u ? "UTC" : ""),
                                        f = ((i = {}),
                                        (i[o] = h + "Date"),
                                        (i[u] = h + "Date"),
                                        (i[c] = h + "Month"),
                                        (i[d] = h + "FullYear"),
                                        (i[n] = h + "Hours"),
                                        (i[s] = h + "Minutes"),
                                        (i[r] = h + "Seconds"),
                                        (i[a] = h + "Milliseconds"),
                                        i)[l],
                                        g =
                                            l === o
                                                ? this.$D + (e - this.$W)
                                                : e;
                                    if (l === c || l === d) {
                                        var p = this.clone().set(u, 1);
                                        p.$d[f](g),
                                            p.init(),
                                            (this.$d = p.set(
                                                u,
                                                Math.min(
                                                    this.$D,
                                                    p.daysInMonth()
                                                )
                                            ).$d);
                                    } else f && this.$d[f](g);
                                    return this.init(), this;
                                }),
                                (m.set = function (t, e) {
                                    return this.clone().$set(t, e);
                                }),
                                (m.get = function (t) {
                                    return this[S.p(t)]();
                                }),
                                (m.add = function (a, h) {
                                    var u,
                                        f = this;
                                    a = Number(a);
                                    var g = S.p(h),
                                        p = function (t) {
                                            var e = A(f);
                                            return S.w(
                                                e.date(
                                                    e.date() + Math.round(t * a)
                                                ),
                                                f
                                            );
                                        };
                                    if (g === c)
                                        return this.set(c, this.$M + a);
                                    if (g === d)
                                        return this.set(d, this.$y + a);
                                    if (g === o) return p(1);
                                    if (g === l) return p(7);
                                    var x =
                                            ((u = {}),
                                            (u[s] = e),
                                            (u[n] = i),
                                            (u[r] = t),
                                            u)[g] || 1,
                                        m = this.$d.getTime() + a * x;
                                    return S.w(m, this);
                                }),
                                (m.subtract = function (t, e) {
                                    return this.add(-1 * t, e);
                                }),
                                (m.format = function (t) {
                                    var e = this,
                                        i = this.$locale();
                                    if (!this.isValid())
                                        return i.invalidDate || f;
                                    var a = t || "YYYY-MM-DDTHH:mm:ssZ",
                                        r = S.z(this),
                                        s = this.$H,
                                        n = this.$m,
                                        o = this.$M,
                                        l = i.weekdays,
                                        c = i.months,
                                        h = function (t, i, r, s) {
                                            return (
                                                (t && (t[i] || t(e, a))) ||
                                                r[i].slice(0, s)
                                            );
                                        },
                                        d = function (t) {
                                            return S.s(s % 12 || 12, t, "0");
                                        },
                                        u =
                                            i.meridiem ||
                                            function (t, e, i) {
                                                var a = t < 12 ? "AM" : "PM";
                                                return i ? a.toLowerCase() : a;
                                            },
                                        g = {
                                            YY: String(this.$y).slice(-2),
                                            YYYY: S.s(this.$y, 4, "0"),
                                            M: o + 1,
                                            MM: S.s(o + 1, 2, "0"),
                                            MMM: h(i.monthsShort, o, c, 3),
                                            MMMM: h(c, o),
                                            D: this.$D,
                                            DD: S.s(this.$D, 2, "0"),
                                            d: String(this.$W),
                                            dd: h(i.weekdaysMin, this.$W, l, 2),
                                            ddd: h(
                                                i.weekdaysShort,
                                                this.$W,
                                                l,
                                                3
                                            ),
                                            dddd: l[this.$W],
                                            H: String(s),
                                            HH: S.s(s, 2, "0"),
                                            h: d(1),
                                            hh: d(2),
                                            a: u(s, n, !0),
                                            A: u(s, n, !1),
                                            m: String(n),
                                            mm: S.s(n, 2, "0"),
                                            s: String(this.$s),
                                            ss: S.s(this.$s, 2, "0"),
                                            SSS: S.s(this.$ms, 3, "0"),
                                            Z: r,
                                        };
                                    return a.replace(p, function (t, e) {
                                        return e || g[t] || r.replace(":", "");
                                    });
                                }),
                                (m.utcOffset = function () {
                                    return (
                                        15 *
                                        -Math.round(
                                            this.$d.getTimezoneOffset() / 15
                                        )
                                    );
                                }),
                                (m.diff = function (a, u, f) {
                                    var g,
                                        p = S.p(u),
                                        x = A(a),
                                        m =
                                            (x.utcOffset() - this.utcOffset()) *
                                            e,
                                        b = this - x,
                                        v = S.m(this, x);
                                    return (
                                        (v =
                                            ((g = {}),
                                            (g[d] = v / 12),
                                            (g[c] = v),
                                            (g[h] = v / 3),
                                            (g[l] = (b - m) / 6048e5),
                                            (g[o] = (b - m) / 864e5),
                                            (g[n] = b / i),
                                            (g[s] = b / e),
                                            (g[r] = b / t),
                                            g)[p] || b),
                                        f ? v : S.a(v)
                                    );
                                }),
                                (m.daysInMonth = function () {
                                    return this.endOf(c).$D;
                                }),
                                (m.$locale = function () {
                                    return y[this.$L];
                                }),
                                (m.locale = function (t, e) {
                                    if (!t) return this.$L;
                                    var i = this.clone(),
                                        a = k(t, e, !0);
                                    return a && (i.$L = a), i;
                                }),
                                (m.clone = function () {
                                    return S.w(this.$d, this);
                                }),
                                (m.toDate = function () {
                                    return new Date(this.valueOf());
                                }),
                                (m.toJSON = function () {
                                    return this.isValid()
                                        ? this.toISOString()
                                        : null;
                                }),
                                (m.toISOString = function () {
                                    return this.$d.toISOString();
                                }),
                                (m.toString = function () {
                                    return this.$d.toUTCString();
                                }),
                                x
                            );
                        })(),
                        P = C.prototype;
                    return (
                        (A.prototype = P),
                        [
                            ["$ms", a],
                            ["$s", r],
                            ["$m", s],
                            ["$H", n],
                            ["$W", o],
                            ["$M", c],
                            ["$y", d],
                            ["$D", u],
                        ].forEach(function (t) {
                            P[t[1]] = function (e) {
                                return this.$g(e, t[0], t[1]);
                            };
                        }),
                        (A.extend = function (t, e) {
                            return t.$i || (t(e, C, A), (t.$i = !0)), A;
                        }),
                        (A.locale = k),
                        (A.isDayjs = w),
                        (A.unix = function (t) {
                            return A(1e3 * t);
                        }),
                        (A.en = y[v]),
                        (A.Ls = y),
                        (A.p = {}),
                        A
                    );
                })();
            },
            580: () => {},
            155: (t) => {
                var e,
                    i,
                    a = (t.exports = {});
                function r() {
                    throw new Error("setTimeout has not been defined");
                }
                function s() {
                    throw new Error("clearTimeout has not been defined");
                }
                function n(t) {
                    if (e === setTimeout) return setTimeout(t, 0);
                    if ((e === r || !e) && setTimeout)
                        return (e = setTimeout), setTimeout(t, 0);
                    try {
                        return e(t, 0);
                    } catch (i) {
                        try {
                            return e.call(null, t, 0);
                        } catch (i) {
                            return e.call(this, t, 0);
                        }
                    }
                }
                !(function () {
                    try {
                        e = "function" == typeof setTimeout ? setTimeout : r;
                    } catch (t) {
                        e = r;
                    }
                    try {
                        i =
                            "function" == typeof clearTimeout
                                ? clearTimeout
                                : s;
                    } catch (t) {
                        i = s;
                    }
                })();
                var o,
                    l = [],
                    c = !1,
                    h = -1;
                function d() {
                    c &&
                        o &&
                        ((c = !1),
                        o.length ? (l = o.concat(l)) : (h = -1),
                        l.length && u());
                }
                function u() {
                    if (!c) {
                        var t = n(d);
                        c = !0;
                        for (var e = l.length; e; ) {
                            for (o = l, l = []; ++h < e; ) o && o[h].run();
                            (h = -1), (e = l.length);
                        }
                        (o = null),
                            (c = !1),
                            (function (t) {
                                if (i === clearTimeout) return clearTimeout(t);
                                if ((i === s || !i) && clearTimeout)
                                    return (i = clearTimeout), clearTimeout(t);
                                try {
                                    return i(t);
                                } catch (e) {
                                    try {
                                        return i.call(null, t);
                                    } catch (e) {
                                        return i.call(this, t);
                                    }
                                }
                            })(t);
                    }
                }
                function f(t, e) {
                    (this.fun = t), (this.array = e);
                }
                function g() {}
                (a.nextTick = function (t) {
                    var e = new Array(arguments.length - 1);
                    if (arguments.length > 1)
                        for (var i = 1; i < arguments.length; i++)
                            e[i - 1] = arguments[i];
                    l.push(new f(t, e)), 1 !== l.length || c || n(u);
                }),
                    (f.prototype.run = function () {
                        this.fun.apply(null, this.array);
                    }),
                    (a.title = "browser"),
                    (a.browser = !0),
                    (a.env = {}),
                    (a.argv = []),
                    (a.version = ""),
                    (a.versions = {}),
                    (a.on = g),
                    (a.addListener = g),
                    (a.once = g),
                    (a.off = g),
                    (a.removeListener = g),
                    (a.removeAllListeners = g),
                    (a.emit = g),
                    (a.prependListener = g),
                    (a.prependOnceListener = g),
                    (a.listeners = function (t) {
                        return [];
                    }),
                    (a.binding = function (t) {
                        throw new Error("process.binding is not supported");
                    }),
                    (a.cwd = function () {
                        return "/";
                    }),
                    (a.chdir = function (t) {
                        throw new Error("process.chdir is not supported");
                    }),
                    (a.umask = function () {
                        return 0;
                    });
            },
            641: (t, e, i) => {
                var a, r;
                !(function (t) {
                    "use strict";
                    if (!t.jQuery) {
                        var e = function (t, i) {
                            return new e.fn.init(t, i);
                        };
                        (e.isWindow = function (t) {
                            return t && t === t.window;
                        }),
                            (e.type = function (t) {
                                return t
                                    ? "object" == typeof t ||
                                      "function" == typeof t
                                        ? a[s.call(t)] || "object"
                                        : typeof t
                                    : t + "";
                            }),
                            (e.isArray =
                                Array.isArray ||
                                function (t) {
                                    return "array" === e.type(t);
                                }),
                            (e.isPlainObject = function (t) {
                                var i;
                                if (
                                    !t ||
                                    "object" !== e.type(t) ||
                                    t.nodeType ||
                                    e.isWindow(t)
                                )
                                    return !1;
                                try {
                                    if (
                                        t.constructor &&
                                        !r.call(t, "constructor") &&
                                        !r.call(
                                            t.constructor.prototype,
                                            "isPrototypeOf"
                                        )
                                    )
                                        return !1;
                                } catch (t) {
                                    return !1;
                                }
                                for (i in t);
                                return void 0 === i || r.call(t, i);
                            }),
                            (e.each = function (t, e, i) {
                                var a = 0,
                                    r = t.length,
                                    s = l(t);
                                if (i) {
                                    if (s)
                                        for (
                                            ;
                                            a < r && !1 !== e.apply(t[a], i);
                                            a++
                                        );
                                    else
                                        for (a in t)
                                            if (
                                                t.hasOwnProperty(a) &&
                                                !1 === e.apply(t[a], i)
                                            )
                                                break;
                                } else if (s)
                                    for (
                                        ;
                                        a < r && !1 !== e.call(t[a], a, t[a]);
                                        a++
                                    );
                                else
                                    for (a in t)
                                        if (
                                            t.hasOwnProperty(a) &&
                                            !1 === e.call(t[a], a, t[a])
                                        )
                                            break;
                                return t;
                            }),
                            (e.data = function (t, a, r) {
                                if (void 0 === r) {
                                    var s = t[e.expando],
                                        n = s && i[s];
                                    if (void 0 === a) return n;
                                    if (n && a in n) return n[a];
                                } else if (void 0 !== a) {
                                    var o =
                                        t[e.expando] ||
                                        (t[e.expando] = ++e.uuid);
                                    return (
                                        (i[o] = i[o] || {}), (i[o][a] = r), r
                                    );
                                }
                            }),
                            (e.removeData = function (t, a) {
                                var r = t[e.expando],
                                    s = r && i[r];
                                s &&
                                    (a
                                        ? e.each(a, function (t, e) {
                                              delete s[e];
                                          })
                                        : delete i[r]);
                            }),
                            (e.extend = function () {
                                var t,
                                    i,
                                    a,
                                    r,
                                    s,
                                    n,
                                    o = arguments[0] || {},
                                    l = 1,
                                    c = arguments.length,
                                    h = !1;
                                for (
                                    "boolean" == typeof o &&
                                        ((h = o),
                                        (o = arguments[l] || {}),
                                        l++),
                                        "object" != typeof o &&
                                            "function" !== e.type(o) &&
                                            (o = {}),
                                        l === c && ((o = this), l--);
                                    l < c;
                                    l++
                                )
                                    if ((s = arguments[l]))
                                        for (r in s)
                                            s.hasOwnProperty(r) &&
                                                ((t = o[r]),
                                                o !== (a = s[r]) &&
                                                    (h &&
                                                    a &&
                                                    (e.isPlainObject(a) ||
                                                        (i = e.isArray(a)))
                                                        ? (i
                                                              ? ((i = !1),
                                                                (n =
                                                                    t &&
                                                                    e.isArray(t)
                                                                        ? t
                                                                        : []))
                                                              : (n =
                                                                    t &&
                                                                    e.isPlainObject(
                                                                        t
                                                                    )
                                                                        ? t
                                                                        : {}),
                                                          (o[r] = e.extend(
                                                              h,
                                                              n,
                                                              a
                                                          )))
                                                        : void 0 !== a &&
                                                          (o[r] = a)));
                                return o;
                            }),
                            (e.queue = function (t, i, a) {
                                if (t) {
                                    i = (i || "fx") + "queue";
                                    var r,
                                        s,
                                        n,
                                        o = e.data(t, i);
                                    return a
                                        ? (!o || e.isArray(a)
                                              ? (o = e.data(
                                                    t,
                                                    i,
                                                    ((n = s || []),
                                                    (r = a) &&
                                                        (l(Object(r))
                                                            ? (function (t, e) {
                                                                  for (
                                                                      var i =
                                                                              +e.length,
                                                                          a = 0,
                                                                          r =
                                                                              t.length;
                                                                      a < i;

                                                                  )
                                                                      t[r++] =
                                                                          e[
                                                                              a++
                                                                          ];
                                                                  if (i != i)
                                                                      for (
                                                                          ;
                                                                          void 0 !==
                                                                          e[a];

                                                                      )
                                                                          t[
                                                                              r++
                                                                          ] =
                                                                              e[
                                                                                  a++
                                                                              ];
                                                                  t.length = r;
                                                              })(
                                                                  n,
                                                                  "string" ==
                                                                      typeof r
                                                                      ? [r]
                                                                      : r
                                                              )
                                                            : [].push.call(
                                                                  n,
                                                                  r
                                                              )),
                                                    n)
                                                ))
                                              : o.push(a),
                                          o)
                                        : o || [];
                                }
                            }),
                            (e.dequeue = function (t, i) {
                                e.each(t.nodeType ? [t] : t, function (t, a) {
                                    i = i || "fx";
                                    var r = e.queue(a, i),
                                        s = r.shift();
                                    "inprogress" === s && (s = r.shift()),
                                        s &&
                                            ("fx" === i &&
                                                r.unshift("inprogress"),
                                            s.call(a, function () {
                                                e.dequeue(a, i);
                                            }));
                                });
                            }),
                            (e.fn = e.prototype =
                                {
                                    init: function (t) {
                                        if (t.nodeType)
                                            return (this[0] = t), this;
                                        throw new Error("Not a DOM node.");
                                    },
                                    offset: function () {
                                        var e = this[0].getBoundingClientRect
                                            ? this[0].getBoundingClientRect()
                                            : { top: 0, left: 0 };
                                        return {
                                            top:
                                                e.top +
                                                (t.pageYOffset ||
                                                    document.scrollTop ||
                                                    0) -
                                                (document.clientTop || 0),
                                            left:
                                                e.left +
                                                (t.pageXOffset ||
                                                    document.scrollLeft ||
                                                    0) -
                                                (document.clientLeft || 0),
                                        };
                                    },
                                    position: function () {
                                        var t = this[0],
                                            i = (function (t) {
                                                for (
                                                    var e = t.offsetParent;
                                                    e &&
                                                    "html" !==
                                                        e.nodeName.toLowerCase() &&
                                                    e.style &&
                                                    "static" ===
                                                        e.style.position.toLowerCase();

                                                )
                                                    e = e.offsetParent;
                                                return e || document;
                                            })(t),
                                            a = this.offset(),
                                            r = /^(?:body|html)$/i.test(
                                                i.nodeName
                                            )
                                                ? { top: 0, left: 0 }
                                                : e(i).offset();
                                        return (
                                            (a.top -=
                                                parseFloat(t.style.marginTop) ||
                                                0),
                                            (a.left -=
                                                parseFloat(
                                                    t.style.marginLeft
                                                ) || 0),
                                            i.style &&
                                                ((r.top +=
                                                    parseFloat(
                                                        i.style.borderTopWidth
                                                    ) || 0),
                                                (r.left +=
                                                    parseFloat(
                                                        i.style.borderLeftWidth
                                                    ) || 0)),
                                            {
                                                top: a.top - r.top,
                                                left: a.left - r.left,
                                            }
                                        );
                                    },
                                });
                        var i = {};
                        (e.expando = "velocity" + new Date().getTime()),
                            (e.uuid = 0);
                        for (
                            var a = {},
                                r = a.hasOwnProperty,
                                s = a.toString,
                                n =
                                    "Boolean Number String Function Array Date RegExp Object Error".split(
                                        " "
                                    ),
                                o = 0;
                            o < n.length;
                            o++
                        )
                            a["[object " + n[o] + "]"] = n[o].toLowerCase();
                        (e.fn.init.prototype = e.fn),
                            (t.Velocity = { Utilities: e });
                    }
                    function l(t) {
                        var i = t.length,
                            a = e.type(t);
                        return (
                            "function" !== a &&
                            !e.isWindow(t) &&
                            (!(1 !== t.nodeType || !i) ||
                                "array" === a ||
                                0 === i ||
                                ("number" == typeof i && i > 0 && i - 1 in t))
                        );
                    }
                })(window),
                    (function (s) {
                        "use strict";
                        "object" == typeof t.exports
                            ? (t.exports = s())
                            : void 0 ===
                                  (r =
                                      "function" == typeof (a = s)
                                          ? a.call(e, i, e, t)
                                          : a) || (t.exports = r);
                    })(function () {
                        "use strict";
                        return (function (t, e, i, a) {
                            var r,
                                s = (function () {
                                    if (i.documentMode) return i.documentMode;
                                    for (var t = 7; t > 4; t--) {
                                        var e = i.createElement("div");
                                        if (
                                            ((e.innerHTML =
                                                "\x3c!--[if IE " +
                                                t +
                                                "]><span></span><![endif]--\x3e"),
                                            e.getElementsByTagName("span")
                                                .length)
                                        )
                                            return (e = null), t;
                                    }
                                    return a;
                                })(),
                                n =
                                    ((r = 0),
                                    e.webkitRequestAnimationFrame ||
                                        e.mozRequestAnimationFrame ||
                                        function (t) {
                                            var e,
                                                i = new Date().getTime();
                                            return (
                                                (e = Math.max(0, 16 - (i - r))),
                                                (r = i + e),
                                                setTimeout(function () {
                                                    t(i + e);
                                                }, e)
                                            );
                                        }),
                                o = (function () {
                                    var t = e.performance || {};
                                    if ("function" != typeof t.now) {
                                        var i =
                                            t.timing && t.timing.navigationStart
                                                ? t.timing.navigationStart
                                                : new Date().getTime();
                                        t.now = function () {
                                            return new Date().getTime() - i;
                                        };
                                    }
                                    return t;
                                })();
                            var l = (function () {
                                    var t = Array.prototype.slice;
                                    try {
                                        return t.call(i.documentElement), t;
                                    } catch (e) {
                                        return function (e, i) {
                                            var a = this.length;
                                            if (
                                                ("number" != typeof e &&
                                                    (e = 0),
                                                "number" != typeof i && (i = a),
                                                this.slice)
                                            )
                                                return t.call(this, e, i);
                                            var r,
                                                s = [],
                                                n =
                                                    e >= 0
                                                        ? e
                                                        : Math.max(0, a + e),
                                                o =
                                                    (i < 0
                                                        ? a + i
                                                        : Math.min(i, a)) - n;
                                            if (o > 0)
                                                if (
                                                    ((s = new Array(o)),
                                                    this.charAt)
                                                )
                                                    for (r = 0; r < o; r++)
                                                        s[r] = this.charAt(
                                                            n + r
                                                        );
                                                else
                                                    for (r = 0; r < o; r++)
                                                        s[r] = this[n + r];
                                            return s;
                                        };
                                    }
                                })(),
                                c = function () {
                                    return Array.prototype.includes
                                        ? function (t, e) {
                                              return t.includes(e);
                                          }
                                        : Array.prototype.indexOf
                                        ? function (t, e) {
                                              return t.indexOf(e) >= 0;
                                          }
                                        : function (t, e) {
                                              for (var i = 0; i < t.length; i++)
                                                  if (t[i] === e) return !0;
                                              return !1;
                                          };
                                };
                            function h(t) {
                                return (
                                    u.isWrapped(t)
                                        ? (t = l.call(t))
                                        : u.isNode(t) && (t = [t]),
                                    t
                                );
                            }
                            var d,
                                u = {
                                    isNumber: function (t) {
                                        return "number" == typeof t;
                                    },
                                    isString: function (t) {
                                        return "string" == typeof t;
                                    },
                                    isArray:
                                        Array.isArray ||
                                        function (t) {
                                            return (
                                                "[object Array]" ===
                                                Object.prototype.toString.call(
                                                    t
                                                )
                                            );
                                        },
                                    isFunction: function (t) {
                                        return (
                                            "[object Function]" ===
                                            Object.prototype.toString.call(t)
                                        );
                                    },
                                    isNode: function (t) {
                                        return t && t.nodeType;
                                    },
                                    isWrapped: function (t) {
                                        return (
                                            t &&
                                            t !== e &&
                                            u.isNumber(t.length) &&
                                            !u.isString(t) &&
                                            !u.isFunction(t) &&
                                            !u.isNode(t) &&
                                            (0 === t.length || u.isNode(t[0]))
                                        );
                                    },
                                    isSVG: function (t) {
                                        return (
                                            e.SVGElement &&
                                            t instanceof e.SVGElement
                                        );
                                    },
                                    isEmptyObject: function (t) {
                                        for (var e in t)
                                            if (t.hasOwnProperty(e)) return !1;
                                        return !0;
                                    },
                                },
                                f = !1;
                            if (
                                (t.fn && t.fn.jquery
                                    ? ((d = t), (f = !0))
                                    : (d = e.Velocity.Utilities),
                                s <= 8 && !f)
                            )
                                throw new Error(
                                    "Velocity: IE8 and below require jQuery to be loaded before Velocity."
                                );
                            if (!(s <= 7)) {
                                var g = "swing",
                                    p = {
                                        State: {
                                            isMobile:
                                                /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
                                                    e.navigator.userAgent
                                                ),
                                            isAndroid: /Android/i.test(
                                                e.navigator.userAgent
                                            ),
                                            isGingerbread:
                                                /Android 2\.3\.[3-7]/i.test(
                                                    e.navigator.userAgent
                                                ),
                                            isChrome: e.chrome,
                                            isFirefox: /Firefox/i.test(
                                                e.navigator.userAgent
                                            ),
                                            prefixElement:
                                                i.createElement("div"),
                                            prefixMatches: {},
                                            scrollAnchor: null,
                                            scrollPropertyLeft: null,
                                            scrollPropertyTop: null,
                                            isTicking: !1,
                                            calls: [],
                                            delayedElements: { count: 0 },
                                        },
                                        CSS: {},
                                        Utilities: d,
                                        Redirects: {},
                                        Easings: {},
                                        Promise: e.Promise,
                                        defaults: {
                                            queue: "",
                                            duration: 400,
                                            easing: g,
                                            begin: a,
                                            complete: a,
                                            progress: a,
                                            display: a,
                                            visibility: a,
                                            loop: !1,
                                            delay: !1,
                                            mobileHA: !0,
                                            _cacheValues: !0,
                                            promiseRejectEmpty: !0,
                                        },
                                        init: function (t) {
                                            d.data(t, "velocity", {
                                                isSVG: u.isSVG(t),
                                                isAnimating: !1,
                                                computedStyle: null,
                                                tweensContainer: null,
                                                rootPropertyValueCache: {},
                                                transformCache: {},
                                            });
                                        },
                                        hook: null,
                                        mock: !1,
                                        version: {
                                            major: 1,
                                            minor: 5,
                                            patch: 2,
                                        },
                                        debug: !1,
                                        timestamp: !0,
                                        pauseAll: function (t) {
                                            var e = new Date().getTime();
                                            d.each(
                                                p.State.calls,
                                                function (e, i) {
                                                    if (i) {
                                                        if (
                                                            t !== a &&
                                                            (i[2].queue !== t ||
                                                                !1 ===
                                                                    i[2].queue)
                                                        )
                                                            return !0;
                                                        i[5] = { resume: !1 };
                                                    }
                                                }
                                            ),
                                                d.each(
                                                    p.State.delayedElements,
                                                    function (t, i) {
                                                        i && k(i, e);
                                                    }
                                                );
                                        },
                                        resumeAll: function (t) {
                                            var e = new Date().getTime();
                                            d.each(
                                                p.State.calls,
                                                function (e, i) {
                                                    if (i) {
                                                        if (
                                                            t !== a &&
                                                            (i[2].queue !== t ||
                                                                !1 ===
                                                                    i[2].queue)
                                                        )
                                                            return !0;
                                                        i[5] &&
                                                            (i[5].resume = !0);
                                                    }
                                                }
                                            ),
                                                d.each(
                                                    p.State.delayedElements,
                                                    function (t, i) {
                                                        i && A(i, e);
                                                    }
                                                );
                                        },
                                    };
                                e.pageYOffset !== a
                                    ? ((p.State.scrollAnchor = e),
                                      (p.State.scrollPropertyLeft =
                                          "pageXOffset"),
                                      (p.State.scrollPropertyTop =
                                          "pageYOffset"))
                                    : ((p.State.scrollAnchor =
                                          i.documentElement ||
                                          i.body.parentNode ||
                                          i.body),
                                      (p.State.scrollPropertyLeft =
                                          "scrollLeft"),
                                      (p.State.scrollPropertyTop =
                                          "scrollTop"));
                                var x = (function () {
                                    function t(t) {
                                        return (
                                            -t.tension * t.x - t.friction * t.v
                                        );
                                    }
                                    function e(e, i, a) {
                                        var r = {
                                            x: e.x + a.dx * i,
                                            v: e.v + a.dv * i,
                                            tension: e.tension,
                                            friction: e.friction,
                                        };
                                        return { dx: r.v, dv: t(r) };
                                    }
                                    function i(i, a) {
                                        var r = { dx: i.v, dv: t(i) },
                                            s = e(i, 0.5 * a, r),
                                            n = e(i, 0.5 * a, s),
                                            o = e(i, a, n),
                                            l =
                                                (1 / 6) *
                                                (r.dx +
                                                    2 * (s.dx + n.dx) +
                                                    o.dx),
                                            c =
                                                (1 / 6) *
                                                (r.dv +
                                                    2 * (s.dv + n.dv) +
                                                    o.dv);
                                        return (
                                            (i.x = i.x + l * a),
                                            (i.v = i.v + c * a),
                                            i
                                        );
                                    }
                                    return function t(e, a, r) {
                                        var s,
                                            n,
                                            o,
                                            l = {
                                                x: -1,
                                                v: 0,
                                                tension: null,
                                                friction: null,
                                            },
                                            c = [0],
                                            h = 0,
                                            d = 1e-4;
                                        for (
                                            e = parseFloat(e) || 500,
                                                a = parseFloat(a) || 20,
                                                r = r || null,
                                                l.tension = e,
                                                l.friction = a,
                                                n = (s = null !== r)
                                                    ? ((h = t(e, a)) / r) *
                                                      0.016
                                                    : 0.016;
                                            (o = i(o || l, n)),
                                                c.push(1 + o.x),
                                                (h += 16),
                                                Math.abs(o.x) > d &&
                                                    Math.abs(o.v) > d;

                                        );
                                        return s
                                            ? function (t) {
                                                  return c[
                                                      (t * (c.length - 1)) | 0
                                                  ];
                                              }
                                            : h;
                                    };
                                })();
                                (p.Easings = {
                                    linear: function (t) {
                                        return t;
                                    },
                                    swing: function (t) {
                                        return 0.5 - Math.cos(t * Math.PI) / 2;
                                    },
                                    spring: function (t) {
                                        return (
                                            1 -
                                            Math.cos(4.5 * t * Math.PI) *
                                                Math.exp(6 * -t)
                                        );
                                    },
                                }),
                                    d.each(
                                        [
                                            ["ease", [0.25, 0.1, 0.25, 1]],
                                            ["ease-in", [0.42, 0, 1, 1]],
                                            ["ease-out", [0, 0, 0.58, 1]],
                                            ["ease-in-out", [0.42, 0, 0.58, 1]],
                                            [
                                                "easeInSine",
                                                [0.47, 0, 0.745, 0.715],
                                            ],
                                            [
                                                "easeOutSine",
                                                [0.39, 0.575, 0.565, 1],
                                            ],
                                            [
                                                "easeInOutSine",
                                                [0.445, 0.05, 0.55, 0.95],
                                            ],
                                            [
                                                "easeInQuad",
                                                [0.55, 0.085, 0.68, 0.53],
                                            ],
                                            [
                                                "easeOutQuad",
                                                [0.25, 0.46, 0.45, 0.94],
                                            ],
                                            [
                                                "easeInOutQuad",
                                                [0.455, 0.03, 0.515, 0.955],
                                            ],
                                            [
                                                "easeInCubic",
                                                [0.55, 0.055, 0.675, 0.19],
                                            ],
                                            [
                                                "easeOutCubic",
                                                [0.215, 0.61, 0.355, 1],
                                            ],
                                            [
                                                "easeInOutCubic",
                                                [0.645, 0.045, 0.355, 1],
                                            ],
                                            [
                                                "easeInQuart",
                                                [0.895, 0.03, 0.685, 0.22],
                                            ],
                                            [
                                                "easeOutQuart",
                                                [0.165, 0.84, 0.44, 1],
                                            ],
                                            [
                                                "easeInOutQuart",
                                                [0.77, 0, 0.175, 1],
                                            ],
                                            [
                                                "easeInQuint",
                                                [0.755, 0.05, 0.855, 0.06],
                                            ],
                                            [
                                                "easeOutQuint",
                                                [0.23, 1, 0.32, 1],
                                            ],
                                            [
                                                "easeInOutQuint",
                                                [0.86, 0, 0.07, 1],
                                            ],
                                            [
                                                "easeInExpo",
                                                [0.95, 0.05, 0.795, 0.035],
                                            ],
                                            ["easeOutExpo", [0.19, 1, 0.22, 1]],
                                            ["easeInOutExpo", [1, 0, 0, 1]],
                                            [
                                                "easeInCirc",
                                                [0.6, 0.04, 0.98, 0.335],
                                            ],
                                            [
                                                "easeOutCirc",
                                                [0.075, 0.82, 0.165, 1],
                                            ],
                                            [
                                                "easeInOutCirc",
                                                [0.785, 0.135, 0.15, 0.86],
                                            ],
                                        ],
                                        function (t, e) {
                                            p.Easings[e[0]] = C.apply(
                                                null,
                                                e[1]
                                            );
                                        }
                                    );
                                var m = (p.CSS = {
                                    RegEx: {
                                        isHex: /^#([A-f\d]{3}){1,2}$/i,
                                        valueUnwrap: /^[A-z]+\((.*)\)$/i,
                                        wrappedValueAlreadyExtracted:
                                            /[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,
                                        valueSplit:
                                            /([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi,
                                    },
                                    Lists: {
                                        colors: [
                                            "fill",
                                            "stroke",
                                            "stopColor",
                                            "color",
                                            "backgroundColor",
                                            "borderColor",
                                            "borderTopColor",
                                            "borderRightColor",
                                            "borderBottomColor",
                                            "borderLeftColor",
                                            "outlineColor",
                                        ],
                                        transformsBase: [
                                            "translateX",
                                            "translateY",
                                            "scale",
                                            "scaleX",
                                            "scaleY",
                                            "skewX",
                                            "skewY",
                                            "rotateZ",
                                        ],
                                        transforms3D: [
                                            "transformPerspective",
                                            "translateZ",
                                            "scaleZ",
                                            "rotateX",
                                            "rotateY",
                                        ],
                                        units: [
                                            "%",
                                            "em",
                                            "ex",
                                            "ch",
                                            "rem",
                                            "vw",
                                            "vh",
                                            "vmin",
                                            "vmax",
                                            "cm",
                                            "mm",
                                            "Q",
                                            "in",
                                            "pc",
                                            "pt",
                                            "px",
                                            "deg",
                                            "grad",
                                            "rad",
                                            "turn",
                                            "s",
                                            "ms",
                                        ],
                                        colorNames: {
                                            aliceblue: "240,248,255",
                                            antiquewhite: "250,235,215",
                                            aquamarine: "127,255,212",
                                            aqua: "0,255,255",
                                            azure: "240,255,255",
                                            beige: "245,245,220",
                                            bisque: "255,228,196",
                                            black: "0,0,0",
                                            blanchedalmond: "255,235,205",
                                            blueviolet: "138,43,226",
                                            blue: "0,0,255",
                                            brown: "165,42,42",
                                            burlywood: "222,184,135",
                                            cadetblue: "95,158,160",
                                            chartreuse: "127,255,0",
                                            chocolate: "210,105,30",
                                            coral: "255,127,80",
                                            cornflowerblue: "100,149,237",
                                            cornsilk: "255,248,220",
                                            crimson: "220,20,60",
                                            cyan: "0,255,255",
                                            darkblue: "0,0,139",
                                            darkcyan: "0,139,139",
                                            darkgoldenrod: "184,134,11",
                                            darkgray: "169,169,169",
                                            darkgrey: "169,169,169",
                                            darkgreen: "0,100,0",
                                            darkkhaki: "189,183,107",
                                            darkmagenta: "139,0,139",
                                            darkolivegreen: "85,107,47",
                                            darkorange: "255,140,0",
                                            darkorchid: "153,50,204",
                                            darkred: "139,0,0",
                                            darksalmon: "233,150,122",
                                            darkseagreen: "143,188,143",
                                            darkslateblue: "72,61,139",
                                            darkslategray: "47,79,79",
                                            darkturquoise: "0,206,209",
                                            darkviolet: "148,0,211",
                                            deeppink: "255,20,147",
                                            deepskyblue: "0,191,255",
                                            dimgray: "105,105,105",
                                            dimgrey: "105,105,105",
                                            dodgerblue: "30,144,255",
                                            firebrick: "178,34,34",
                                            floralwhite: "255,250,240",
                                            forestgreen: "34,139,34",
                                            fuchsia: "255,0,255",
                                            gainsboro: "220,220,220",
                                            ghostwhite: "248,248,255",
                                            gold: "255,215,0",
                                            goldenrod: "218,165,32",
                                            gray: "128,128,128",
                                            grey: "128,128,128",
                                            greenyellow: "173,255,47",
                                            green: "0,128,0",
                                            honeydew: "240,255,240",
                                            hotpink: "255,105,180",
                                            indianred: "205,92,92",
                                            indigo: "75,0,130",
                                            ivory: "255,255,240",
                                            khaki: "240,230,140",
                                            lavenderblush: "255,240,245",
                                            lavender: "230,230,250",
                                            lawngreen: "124,252,0",
                                            lemonchiffon: "255,250,205",
                                            lightblue: "173,216,230",
                                            lightcoral: "240,128,128",
                                            lightcyan: "224,255,255",
                                            lightgoldenrodyellow: "250,250,210",
                                            lightgray: "211,211,211",
                                            lightgrey: "211,211,211",
                                            lightgreen: "144,238,144",
                                            lightpink: "255,182,193",
                                            lightsalmon: "255,160,122",
                                            lightseagreen: "32,178,170",
                                            lightskyblue: "135,206,250",
                                            lightslategray: "119,136,153",
                                            lightsteelblue: "176,196,222",
                                            lightyellow: "255,255,224",
                                            limegreen: "50,205,50",
                                            lime: "0,255,0",
                                            linen: "250,240,230",
                                            magenta: "255,0,255",
                                            maroon: "128,0,0",
                                            mediumaquamarine: "102,205,170",
                                            mediumblue: "0,0,205",
                                            mediumorchid: "186,85,211",
                                            mediumpurple: "147,112,219",
                                            mediumseagreen: "60,179,113",
                                            mediumslateblue: "123,104,238",
                                            mediumspringgreen: "0,250,154",
                                            mediumturquoise: "72,209,204",
                                            mediumvioletred: "199,21,133",
                                            midnightblue: "25,25,112",
                                            mintcream: "245,255,250",
                                            mistyrose: "255,228,225",
                                            moccasin: "255,228,181",
                                            navajowhite: "255,222,173",
                                            navy: "0,0,128",
                                            oldlace: "253,245,230",
                                            olivedrab: "107,142,35",
                                            olive: "128,128,0",
                                            orangered: "255,69,0",
                                            orange: "255,165,0",
                                            orchid: "218,112,214",
                                            palegoldenrod: "238,232,170",
                                            palegreen: "152,251,152",
                                            paleturquoise: "175,238,238",
                                            palevioletred: "219,112,147",
                                            papayawhip: "255,239,213",
                                            peachpuff: "255,218,185",
                                            peru: "205,133,63",
                                            pink: "255,192,203",
                                            plum: "221,160,221",
                                            powderblue: "176,224,230",
                                            purple: "128,0,128",
                                            red: "255,0,0",
                                            rosybrown: "188,143,143",
                                            royalblue: "65,105,225",
                                            saddlebrown: "139,69,19",
                                            salmon: "250,128,114",
                                            sandybrown: "244,164,96",
                                            seagreen: "46,139,87",
                                            seashell: "255,245,238",
                                            sienna: "160,82,45",
                                            silver: "192,192,192",
                                            skyblue: "135,206,235",
                                            slateblue: "106,90,205",
                                            slategray: "112,128,144",
                                            snow: "255,250,250",
                                            springgreen: "0,255,127",
                                            steelblue: "70,130,180",
                                            tan: "210,180,140",
                                            teal: "0,128,128",
                                            thistle: "216,191,216",
                                            tomato: "255,99,71",
                                            turquoise: "64,224,208",
                                            violet: "238,130,238",
                                            wheat: "245,222,179",
                                            whitesmoke: "245,245,245",
                                            white: "255,255,255",
                                            yellowgreen: "154,205,50",
                                            yellow: "255,255,0",
                                        },
                                    },
                                    Hooks: {
                                        templates: {
                                            textShadow: [
                                                "Color X Y Blur",
                                                "black 0px 0px 0px",
                                            ],
                                            boxShadow: [
                                                "Color X Y Blur Spread",
                                                "black 0px 0px 0px 0px",
                                            ],
                                            clip: [
                                                "Top Right Bottom Left",
                                                "0px 0px 0px 0px",
                                            ],
                                            backgroundPosition: [
                                                "X Y",
                                                "0% 0%",
                                            ],
                                            transformOrigin: [
                                                "X Y Z",
                                                "50% 50% 0px",
                                            ],
                                            perspectiveOrigin: [
                                                "X Y",
                                                "50% 50%",
                                            ],
                                        },
                                        registered: {},
                                        register: function () {
                                            for (
                                                var t = 0;
                                                t < m.Lists.colors.length;
                                                t++
                                            ) {
                                                var e =
                                                    "color" ===
                                                    m.Lists.colors[t]
                                                        ? "0 0 0 1"
                                                        : "255 255 255 1";
                                                m.Hooks.templates[
                                                    m.Lists.colors[t]
                                                ] = ["Red Green Blue Alpha", e];
                                            }
                                            var i, a, r;
                                            if (s)
                                                for (i in m.Hooks.templates)
                                                    if (
                                                        m.Hooks.templates.hasOwnProperty(
                                                            i
                                                        )
                                                    ) {
                                                        r = (a =
                                                            m.Hooks.templates[
                                                                i
                                                            ])[0].split(" ");
                                                        var n = a[1].match(
                                                            m.RegEx.valueSplit
                                                        );
                                                        "Color" === r[0] &&
                                                            (r.push(r.shift()),
                                                            n.push(n.shift()),
                                                            (m.Hooks.templates[
                                                                i
                                                            ] = [
                                                                r.join(" "),
                                                                n.join(" "),
                                                            ]));
                                                    }
                                            for (i in m.Hooks.templates)
                                                if (
                                                    m.Hooks.templates.hasOwnProperty(
                                                        i
                                                    )
                                                )
                                                    for (var o in (r = (a =
                                                        m.Hooks.templates[
                                                            i
                                                        ])[0].split(" ")))
                                                        if (
                                                            r.hasOwnProperty(o)
                                                        ) {
                                                            var l = i + r[o],
                                                                c = o;
                                                            m.Hooks.registered[
                                                                l
                                                            ] = [i, c];
                                                        }
                                        },
                                        getRoot: function (t) {
                                            var e = m.Hooks.registered[t];
                                            return e ? e[0] : t;
                                        },
                                        getUnit: function (t, e) {
                                            var i =
                                                (t
                                                    .substr(e || 0, 5)
                                                    .match(/^[a-z%]+/) ||
                                                    [])[0] || "";
                                            return i && c(m.Lists.units)
                                                ? i
                                                : "";
                                        },
                                        fixColors: function (t) {
                                            return t.replace(
                                                /(rgba?\(\s*)?(\b[a-z]+\b)/g,
                                                function (t, e, i) {
                                                    return m.Lists.colorNames.hasOwnProperty(
                                                        i
                                                    )
                                                        ? (e || "rgba(") +
                                                              m.Lists
                                                                  .colorNames[
                                                                  i
                                                              ] +
                                                              (e ? "" : ",1)")
                                                        : e + i;
                                                }
                                            );
                                        },
                                        cleanRootPropertyValue: function (
                                            t,
                                            e
                                        ) {
                                            return (
                                                m.RegEx.valueUnwrap.test(e) &&
                                                    (e = e.match(
                                                        m.RegEx.valueUnwrap
                                                    )[1]),
                                                m.Values.isCSSNullValue(e) &&
                                                    (e =
                                                        m.Hooks.templates[
                                                            t
                                                        ][1]),
                                                e
                                            );
                                        },
                                        extractValue: function (t, e) {
                                            var i = m.Hooks.registered[t];
                                            if (i) {
                                                var a = i[0],
                                                    r = i[1];
                                                return (e =
                                                    m.Hooks.cleanRootPropertyValue(
                                                        a,
                                                        e
                                                    ))
                                                    .toString()
                                                    .match(m.RegEx.valueSplit)[
                                                    r
                                                ];
                                            }
                                            return e;
                                        },
                                        injectValue: function (t, e, i) {
                                            var a = m.Hooks.registered[t];
                                            if (a) {
                                                var r,
                                                    s = a[0],
                                                    n = a[1];
                                                return (
                                                    ((r = (i =
                                                        m.Hooks.cleanRootPropertyValue(
                                                            s,
                                                            i
                                                        ))
                                                        .toString()
                                                        .match(
                                                            m.RegEx.valueSplit
                                                        ))[n] = e),
                                                    r.join(" ")
                                                );
                                            }
                                            return i;
                                        },
                                    },
                                    Normalizations: {
                                        registered: {
                                            clip: function (t, e, i) {
                                                switch (t) {
                                                    case "name":
                                                        return "clip";
                                                    case "extract":
                                                        var a;
                                                        return (a =
                                                            m.RegEx.wrappedValueAlreadyExtracted.test(
                                                                i
                                                            )
                                                                ? i
                                                                : (a = i
                                                                      .toString()
                                                                      .match(
                                                                          m
                                                                              .RegEx
                                                                              .valueUnwrap
                                                                      ))
                                                                ? a[1].replace(
                                                                      /,(\s+)?/g,
                                                                      " "
                                                                  )
                                                                : i);
                                                    case "inject":
                                                        return (
                                                            "rect(" + i + ")"
                                                        );
                                                }
                                            },
                                            blur: function (t, e, i) {
                                                switch (t) {
                                                    case "name":
                                                        return p.State.isFirefox
                                                            ? "filter"
                                                            : "-webkit-filter";
                                                    case "extract":
                                                        var a = parseFloat(i);
                                                        if (!a && 0 !== a) {
                                                            var r = i
                                                                .toString()
                                                                .match(
                                                                    /blur\(([0-9]+[A-z]+)\)/i
                                                                );
                                                            a = r ? r[1] : 0;
                                                        }
                                                        return a;
                                                    case "inject":
                                                        return parseFloat(i)
                                                            ? "blur(" + i + ")"
                                                            : "none";
                                                }
                                            },
                                            opacity: function (t, e, i) {
                                                if (s <= 8)
                                                    switch (t) {
                                                        case "name":
                                                            return "filter";
                                                        case "extract":
                                                            var a = i
                                                                .toString()
                                                                .match(
                                                                    /alpha\(opacity=(.*)\)/i
                                                                );
                                                            return (i = a
                                                                ? a[1] / 100
                                                                : 1);
                                                        case "inject":
                                                            return (
                                                                (e.style.zoom = 1),
                                                                parseFloat(i) >=
                                                                1
                                                                    ? ""
                                                                    : "alpha(opacity=" +
                                                                      parseInt(
                                                                          100 *
                                                                              parseFloat(
                                                                                  i
                                                                              ),
                                                                          10
                                                                      ) +
                                                                      ")"
                                                            );
                                                    }
                                                else
                                                    switch (t) {
                                                        case "name":
                                                            return "opacity";
                                                        case "extract":
                                                        case "inject":
                                                            return i;
                                                    }
                                            },
                                        },
                                        register: function () {
                                            (s && !(s > 9)) ||
                                                p.State.isGingerbread ||
                                                (m.Lists.transformsBase =
                                                    m.Lists.transformsBase.concat(
                                                        m.Lists.transforms3D
                                                    ));
                                            for (
                                                var t = 0;
                                                t <
                                                m.Lists.transformsBase.length;
                                                t++
                                            )
                                                !(function () {
                                                    var e =
                                                        m.Lists.transformsBase[
                                                            t
                                                        ];
                                                    m.Normalizations.registered[
                                                        e
                                                    ] = function (t, i, r) {
                                                        switch (t) {
                                                            case "name":
                                                                return "transform";
                                                            case "extract":
                                                                return w(i) ===
                                                                    a ||
                                                                    w(i)
                                                                        .transformCache[
                                                                        e
                                                                    ] === a
                                                                    ? /^scale/i.test(
                                                                          e
                                                                      )
                                                                        ? 1
                                                                        : 0
                                                                    : w(
                                                                          i
                                                                      ).transformCache[
                                                                          e
                                                                      ].replace(
                                                                          /[()]/g,
                                                                          ""
                                                                      );
                                                            case "inject":
                                                                var s = !1;
                                                                switch (
                                                                    e.substr(
                                                                        0,
                                                                        e.length -
                                                                            1
                                                                    )
                                                                ) {
                                                                    case "translate":
                                                                        s =
                                                                            !/(%|px|em|rem|vw|vh|\d)$/i.test(
                                                                                r
                                                                            );
                                                                        break;
                                                                    case "scal":
                                                                    case "scale":
                                                                        p.State
                                                                            .isAndroid &&
                                                                            w(i)
                                                                                .transformCache[
                                                                                e
                                                                            ] ===
                                                                                a &&
                                                                            r <
                                                                                1 &&
                                                                            (r = 1),
                                                                            (s =
                                                                                !/(\d)$/i.test(
                                                                                    r
                                                                                ));
                                                                        break;
                                                                    case "skew":
                                                                    case "rotate":
                                                                        s =
                                                                            !/(deg|\d)$/i.test(
                                                                                r
                                                                            );
                                                                }
                                                                return (
                                                                    s ||
                                                                        (w(
                                                                            i
                                                                        ).transformCache[
                                                                            e
                                                                        ] =
                                                                            "(" +
                                                                            r +
                                                                            ")"),
                                                                    w(i)
                                                                        .transformCache[
                                                                        e
                                                                    ]
                                                                );
                                                        }
                                                    };
                                                })();
                                            for (
                                                var e = 0;
                                                e < m.Lists.colors.length;
                                                e++
                                            )
                                                !(function () {
                                                    var t = m.Lists.colors[e];
                                                    m.Normalizations.registered[
                                                        t
                                                    ] = function (e, i, r) {
                                                        switch (e) {
                                                            case "name":
                                                                return t;
                                                            case "extract":
                                                                var n;
                                                                if (
                                                                    m.RegEx.wrappedValueAlreadyExtracted.test(
                                                                        r
                                                                    )
                                                                )
                                                                    n = r;
                                                                else {
                                                                    var o,
                                                                        l = {
                                                                            black: "rgb(0, 0, 0)",
                                                                            blue: "rgb(0, 0, 255)",
                                                                            gray: "rgb(128, 128, 128)",
                                                                            green: "rgb(0, 128, 0)",
                                                                            red: "rgb(255, 0, 0)",
                                                                            white: "rgb(255, 255, 255)",
                                                                        };
                                                                    /^[A-z]+$/i.test(
                                                                        r
                                                                    )
                                                                        ? (o =
                                                                              l[
                                                                                  r
                                                                              ] !==
                                                                              a
                                                                                  ? l[
                                                                                        r
                                                                                    ]
                                                                                  : l.black)
                                                                        : m.RegEx.isHex.test(
                                                                              r
                                                                          )
                                                                        ? (o =
                                                                              "rgb(" +
                                                                              m.Values.hexToRgb(
                                                                                  r
                                                                              ).join(
                                                                                  " "
                                                                              ) +
                                                                              ")")
                                                                        : /^rgba?\(/i.test(
                                                                              r
                                                                          ) ||
                                                                          (o =
                                                                              l.black),
                                                                        (n = (
                                                                            o ||
                                                                            r
                                                                        )
                                                                            .toString()
                                                                            .match(
                                                                                m
                                                                                    .RegEx
                                                                                    .valueUnwrap
                                                                            )[1]
                                                                            .replace(
                                                                                /,(\s+)?/g,
                                                                                " "
                                                                            ));
                                                                }
                                                                return (
                                                                    (!s ||
                                                                        s >
                                                                            8) &&
                                                                        3 ===
                                                                            n.split(
                                                                                " "
                                                                            )
                                                                                .length &&
                                                                        (n +=
                                                                            " 1"),
                                                                    n
                                                                );
                                                            case "inject":
                                                                return /^rgb/.test(
                                                                    r
                                                                )
                                                                    ? r
                                                                    : (s <= 8
                                                                          ? 4 ===
                                                                                r.split(
                                                                                    " "
                                                                                )
                                                                                    .length &&
                                                                            (r =
                                                                                r
                                                                                    .split(
                                                                                        /\s+/
                                                                                    )
                                                                                    .slice(
                                                                                        0,
                                                                                        3
                                                                                    )
                                                                                    .join(
                                                                                        " "
                                                                                    ))
                                                                          : 3 ===
                                                                                r.split(
                                                                                    " "
                                                                                )
                                                                                    .length &&
                                                                            (r +=
                                                                                " 1"),
                                                                      (s <= 8
                                                                          ? "rgb"
                                                                          : "rgba") +
                                                                          "(" +
                                                                          r
                                                                              .replace(
                                                                                  /\s+/g,
                                                                                  ","
                                                                              )
                                                                              .replace(
                                                                                  /\.(\d)+(?=,)/g,
                                                                                  ""
                                                                              ) +
                                                                          ")");
                                                        }
                                                    };
                                                })();
                                            function i(t, e, i) {
                                                if (
                                                    ("border-box" ===
                                                        m
                                                            .getPropertyValue(
                                                                e,
                                                                "boxSizing"
                                                            )
                                                            .toString()
                                                            .toLowerCase()) ===
                                                    (i || !1)
                                                ) {
                                                    var a,
                                                        r,
                                                        s = 0,
                                                        n =
                                                            "width" === t
                                                                ? [
                                                                      "Left",
                                                                      "Right",
                                                                  ]
                                                                : [
                                                                      "Top",
                                                                      "Bottom",
                                                                  ],
                                                        o = [
                                                            "padding" + n[0],
                                                            "padding" + n[1],
                                                            "border" +
                                                                n[0] +
                                                                "Width",
                                                            "border" +
                                                                n[1] +
                                                                "Width",
                                                        ];
                                                    for (
                                                        a = 0;
                                                        a < o.length;
                                                        a++
                                                    )
                                                        (r = parseFloat(
                                                            m.getPropertyValue(
                                                                e,
                                                                o[a]
                                                            )
                                                        )),
                                                            isNaN(r) ||
                                                                (s += r);
                                                    return i ? -s : s;
                                                }
                                                return 0;
                                            }
                                            function r(t, e) {
                                                return function (a, r, s) {
                                                    switch (a) {
                                                        case "name":
                                                            return t;
                                                        case "extract":
                                                            return (
                                                                parseFloat(s) +
                                                                i(t, r, e)
                                                            );
                                                        case "inject":
                                                            return (
                                                                parseFloat(s) -
                                                                i(t, r, e) +
                                                                "px"
                                                            );
                                                    }
                                                };
                                            }
                                            (m.Normalizations.registered.innerWidth =
                                                r("width", !0)),
                                                (m.Normalizations.registered.innerHeight =
                                                    r("height", !0)),
                                                (m.Normalizations.registered.outerWidth =
                                                    r("width")),
                                                (m.Normalizations.registered.outerHeight =
                                                    r("height"));
                                        },
                                    },
                                    Names: {
                                        camelCase: function (t) {
                                            return t.replace(
                                                /-(\w)/g,
                                                function (t, e) {
                                                    return e.toUpperCase();
                                                }
                                            );
                                        },
                                        SVGAttribute: function (t) {
                                            var e =
                                                "width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";
                                            return (
                                                (s ||
                                                    (p.State.isAndroid &&
                                                        !p.State.isChrome)) &&
                                                    (e += "|transform"),
                                                new RegExp(
                                                    "^(" + e + ")$",
                                                    "i"
                                                ).test(t)
                                            );
                                        },
                                        prefixCheck: function (t) {
                                            if (p.State.prefixMatches[t])
                                                return [
                                                    p.State.prefixMatches[t],
                                                    !0,
                                                ];
                                            for (
                                                var e = [
                                                        "",
                                                        "Webkit",
                                                        "Moz",
                                                        "ms",
                                                        "O",
                                                    ],
                                                    i = 0,
                                                    a = e.length;
                                                i < a;
                                                i++
                                            ) {
                                                var r;
                                                if (
                                                    ((r =
                                                        0 === i
                                                            ? t
                                                            : e[i] +
                                                              t.replace(
                                                                  /^\w/,
                                                                  function (t) {
                                                                      return t.toUpperCase();
                                                                  }
                                                              )),
                                                    u.isString(
                                                        p.State.prefixElement
                                                            .style[r]
                                                    ))
                                                )
                                                    return (
                                                        (p.State.prefixMatches[
                                                            t
                                                        ] = r),
                                                        [r, !0]
                                                    );
                                            }
                                            return [t, !1];
                                        },
                                    },
                                    Values: {
                                        hexToRgb: function (t) {
                                            var e;
                                            return (
                                                (t = t.replace(
                                                    /^#?([a-f\d])([a-f\d])([a-f\d])$/i,
                                                    function (t, e, i, a) {
                                                        return (
                                                            e +
                                                            e +
                                                            i +
                                                            i +
                                                            a +
                                                            a
                                                        );
                                                    }
                                                )),
                                                (e =
                                                    /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(
                                                        t
                                                    ))
                                                    ? [
                                                          parseInt(e[1], 16),
                                                          parseInt(e[2], 16),
                                                          parseInt(e[3], 16),
                                                      ]
                                                    : [0, 0, 0]
                                            );
                                        },
                                        isCSSNullValue: function (t) {
                                            return (
                                                !t ||
                                                /^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(
                                                    t
                                                )
                                            );
                                        },
                                        getUnitType: function (t) {
                                            return /^(rotate|skew)/i.test(t)
                                                ? "deg"
                                                : /(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(
                                                      t
                                                  )
                                                ? ""
                                                : "px";
                                        },
                                        getDisplayType: function (t) {
                                            var e =
                                                t &&
                                                t.tagName
                                                    .toString()
                                                    .toLowerCase();
                                            return /^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(
                                                e
                                            )
                                                ? "inline"
                                                : /^(li)$/i.test(e)
                                                ? "list-item"
                                                : /^(tr)$/i.test(e)
                                                ? "table-row"
                                                : /^(table)$/i.test(e)
                                                ? "table"
                                                : /^(tbody)$/i.test(e)
                                                ? "table-row-group"
                                                : "block";
                                        },
                                        addClass: function (t, e) {
                                            if (t)
                                                if (t.classList)
                                                    t.classList.add(e);
                                                else if (
                                                    u.isString(t.className)
                                                )
                                                    t.className +=
                                                        (t.className.length
                                                            ? " "
                                                            : "") + e;
                                                else {
                                                    var i =
                                                        t.getAttribute(
                                                            s <= 7
                                                                ? "className"
                                                                : "class"
                                                        ) || "";
                                                    t.setAttribute(
                                                        "class",
                                                        i + (i ? " " : "") + e
                                                    );
                                                }
                                        },
                                        removeClass: function (t, e) {
                                            if (t)
                                                if (t.classList)
                                                    t.classList.remove(e);
                                                else if (
                                                    u.isString(t.className)
                                                )
                                                    t.className = t.className
                                                        .toString()
                                                        .replace(
                                                            new RegExp(
                                                                "(^|\\s)" +
                                                                    e
                                                                        .split(
                                                                            " "
                                                                        )
                                                                        .join(
                                                                            "|"
                                                                        ) +
                                                                    "(\\s|$)",
                                                                "gi"
                                                            ),
                                                            " "
                                                        );
                                                else {
                                                    var i =
                                                        t.getAttribute(
                                                            s <= 7
                                                                ? "className"
                                                                : "class"
                                                        ) || "";
                                                    t.setAttribute(
                                                        "class",
                                                        i.replace(
                                                            new RegExp(
                                                                "(^|s)" +
                                                                    e
                                                                        .split(
                                                                            " "
                                                                        )
                                                                        .join(
                                                                            "|"
                                                                        ) +
                                                                    "(s|$)",
                                                                "gi"
                                                            ),
                                                            " "
                                                        )
                                                    );
                                                }
                                        },
                                    },
                                    getPropertyValue: function (t, i, r, n) {
                                        function o(t, i) {
                                            var r = 0;
                                            if (s <= 8) r = d.css(t, i);
                                            else {
                                                var l = !1;
                                                /^(width|height)$/.test(i) &&
                                                    0 ===
                                                        m.getPropertyValue(
                                                            t,
                                                            "display"
                                                        ) &&
                                                    ((l = !0),
                                                    m.setPropertyValue(
                                                        t,
                                                        "display",
                                                        m.Values.getDisplayType(
                                                            t
                                                        )
                                                    ));
                                                var c,
                                                    h = function () {
                                                        l &&
                                                            m.setPropertyValue(
                                                                t,
                                                                "display",
                                                                "none"
                                                            );
                                                    };
                                                if (!n) {
                                                    if (
                                                        "height" === i &&
                                                        "border-box" !==
                                                            m
                                                                .getPropertyValue(
                                                                    t,
                                                                    "boxSizing"
                                                                )
                                                                .toString()
                                                                .toLowerCase()
                                                    ) {
                                                        var u =
                                                            t.offsetHeight -
                                                            (parseFloat(
                                                                m.getPropertyValue(
                                                                    t,
                                                                    "borderTopWidth"
                                                                )
                                                            ) || 0) -
                                                            (parseFloat(
                                                                m.getPropertyValue(
                                                                    t,
                                                                    "borderBottomWidth"
                                                                )
                                                            ) || 0) -
                                                            (parseFloat(
                                                                m.getPropertyValue(
                                                                    t,
                                                                    "paddingTop"
                                                                )
                                                            ) || 0) -
                                                            (parseFloat(
                                                                m.getPropertyValue(
                                                                    t,
                                                                    "paddingBottom"
                                                                )
                                                            ) || 0);
                                                        return h(), u;
                                                    }
                                                    if (
                                                        "width" === i &&
                                                        "border-box" !==
                                                            m
                                                                .getPropertyValue(
                                                                    t,
                                                                    "boxSizing"
                                                                )
                                                                .toString()
                                                                .toLowerCase()
                                                    ) {
                                                        var f =
                                                            t.offsetWidth -
                                                            (parseFloat(
                                                                m.getPropertyValue(
                                                                    t,
                                                                    "borderLeftWidth"
                                                                )
                                                            ) || 0) -
                                                            (parseFloat(
                                                                m.getPropertyValue(
                                                                    t,
                                                                    "borderRightWidth"
                                                                )
                                                            ) || 0) -
                                                            (parseFloat(
                                                                m.getPropertyValue(
                                                                    t,
                                                                    "paddingLeft"
                                                                )
                                                            ) || 0) -
                                                            (parseFloat(
                                                                m.getPropertyValue(
                                                                    t,
                                                                    "paddingRight"
                                                                )
                                                            ) || 0);
                                                        return h(), f;
                                                    }
                                                }
                                                (c =
                                                    w(t) === a
                                                        ? e.getComputedStyle(
                                                              t,
                                                              null
                                                          )
                                                        : w(t).computedStyle
                                                        ? w(t).computedStyle
                                                        : (w(t).computedStyle =
                                                              e.getComputedStyle(
                                                                  t,
                                                                  null
                                                              ))),
                                                    "borderColor" === i &&
                                                        (i = "borderTopColor"),
                                                    ("" !==
                                                        (r =
                                                            9 === s &&
                                                            "filter" === i
                                                                ? c.getPropertyValue(
                                                                      i
                                                                  )
                                                                : c[i]) &&
                                                        null !== r) ||
                                                        (r = t.style[i]),
                                                    h();
                                            }
                                            if (
                                                "auto" === r &&
                                                /^(top|right|bottom|left)$/i.test(
                                                    i
                                                )
                                            ) {
                                                var g = o(t, "position");
                                                ("fixed" === g ||
                                                    ("absolute" === g &&
                                                        /top|left/i.test(i))) &&
                                                    (r =
                                                        d(t).position()[i] +
                                                        "px");
                                            }
                                            return r;
                                        }
                                        var l;
                                        if (m.Hooks.registered[i]) {
                                            var c = i,
                                                h = m.Hooks.getRoot(c);
                                            r === a &&
                                                (r = m.getPropertyValue(
                                                    t,
                                                    m.Names.prefixCheck(h)[0]
                                                )),
                                                m.Normalizations.registered[
                                                    h
                                                ] &&
                                                    (r =
                                                        m.Normalizations.registered[
                                                            h
                                                        ]("extract", t, r)),
                                                (l = m.Hooks.extractValue(
                                                    c,
                                                    r
                                                ));
                                        } else if (
                                            m.Normalizations.registered[i]
                                        ) {
                                            var u, f;
                                            "transform" !==
                                                (u =
                                                    m.Normalizations.registered[
                                                        i
                                                    ]("name", t)) &&
                                                ((f = o(
                                                    t,
                                                    m.Names.prefixCheck(u)[0]
                                                )),
                                                m.Values.isCSSNullValue(f) &&
                                                    m.Hooks.templates[i] &&
                                                    (f =
                                                        m.Hooks.templates[
                                                            i
                                                        ][1])),
                                                (l =
                                                    m.Normalizations.registered[
                                                        i
                                                    ]("extract", t, f));
                                        }
                                        if (!/^[\d-]/.test(l)) {
                                            var g = w(t);
                                            if (
                                                g &&
                                                g.isSVG &&
                                                m.Names.SVGAttribute(i)
                                            )
                                                if (/^(height|width)$/i.test(i))
                                                    try {
                                                        l = t.getBBox()[i];
                                                    } catch (t) {
                                                        l = 0;
                                                    }
                                                else l = t.getAttribute(i);
                                            else
                                                l = o(
                                                    t,
                                                    m.Names.prefixCheck(i)[0]
                                                );
                                        }
                                        return (
                                            m.Values.isCSSNullValue(l) &&
                                                (l = 0),
                                            p.debug >= 2 &&
                                                console.log(
                                                    "Get " + i + ": " + l
                                                ),
                                            l
                                        );
                                    },
                                    setPropertyValue: function (t, i, a, r, n) {
                                        var o = i;
                                        if ("scroll" === i)
                                            n.container
                                                ? (n.container[
                                                      "scroll" + n.direction
                                                  ] = a)
                                                : "Left" === n.direction
                                                ? e.scrollTo(
                                                      a,
                                                      n.alternateValue
                                                  )
                                                : e.scrollTo(
                                                      n.alternateValue,
                                                      a
                                                  );
                                        else if (
                                            m.Normalizations.registered[i] &&
                                            "transform" ===
                                                m.Normalizations.registered[i](
                                                    "name",
                                                    t
                                                )
                                        )
                                            m.Normalizations.registered[i](
                                                "inject",
                                                t,
                                                a
                                            ),
                                                (o = "transform"),
                                                (a = w(t).transformCache[i]);
                                        else {
                                            if (m.Hooks.registered[i]) {
                                                var l = i,
                                                    c = m.Hooks.getRoot(i);
                                                (r =
                                                    r ||
                                                    m.getPropertyValue(t, c)),
                                                    (a = m.Hooks.injectValue(
                                                        l,
                                                        a,
                                                        r
                                                    )),
                                                    (i = c);
                                            }
                                            if (
                                                (m.Normalizations.registered[
                                                    i
                                                ] &&
                                                    ((a =
                                                        m.Normalizations.registered[
                                                            i
                                                        ]("inject", t, a)),
                                                    (i =
                                                        m.Normalizations.registered[
                                                            i
                                                        ]("name", t))),
                                                (o = m.Names.prefixCheck(i)[0]),
                                                s <= 8)
                                            )
                                                try {
                                                    t.style[o] = a;
                                                } catch (t) {
                                                    p.debug &&
                                                        console.log(
                                                            "Browser does not support [" +
                                                                a +
                                                                "] for [" +
                                                                o +
                                                                "]"
                                                        );
                                                }
                                            else {
                                                var h = w(t);
                                                h &&
                                                h.isSVG &&
                                                m.Names.SVGAttribute(i)
                                                    ? t.setAttribute(i, a)
                                                    : (t.style[o] = a);
                                            }
                                            p.debug >= 2 &&
                                                console.log(
                                                    "Set " +
                                                        i +
                                                        " (" +
                                                        o +
                                                        "): " +
                                                        a
                                                );
                                        }
                                        return [o, a];
                                    },
                                    flushTransformCache: function (t) {
                                        var e = "",
                                            i = w(t);
                                        if (
                                            (s ||
                                                (p.State.isAndroid &&
                                                    !p.State.isChrome)) &&
                                            i &&
                                            i.isSVG
                                        ) {
                                            var a = function (e) {
                                                    return parseFloat(
                                                        m.getPropertyValue(t, e)
                                                    );
                                                },
                                                r = {
                                                    translate: [
                                                        a("translateX"),
                                                        a("translateY"),
                                                    ],
                                                    skewX: [a("skewX")],
                                                    skewY: [a("skewY")],
                                                    scale:
                                                        1 !== a("scale")
                                                            ? [
                                                                  a("scale"),
                                                                  a("scale"),
                                                              ]
                                                            : [
                                                                  a("scaleX"),
                                                                  a("scaleY"),
                                                              ],
                                                    rotate: [
                                                        a("rotateZ"),
                                                        0,
                                                        0,
                                                    ],
                                                };
                                            d.each(
                                                w(t).transformCache,
                                                function (t) {
                                                    /^translate/i.test(t)
                                                        ? (t = "translate")
                                                        : /^scale/i.test(t)
                                                        ? (t = "scale")
                                                        : /^rotate/i.test(t) &&
                                                          (t = "rotate"),
                                                        r[t] &&
                                                            ((e +=
                                                                t +
                                                                "(" +
                                                                r[t].join(" ") +
                                                                ") "),
                                                            delete r[t]);
                                                }
                                            );
                                        } else {
                                            var n, o;
                                            d.each(
                                                w(t).transformCache,
                                                function (i) {
                                                    if (
                                                        ((n =
                                                            w(t).transformCache[
                                                                i
                                                            ]),
                                                        "transformPerspective" ===
                                                            i)
                                                    )
                                                        return (o = n), !0;
                                                    9 === s &&
                                                        "rotateZ" === i &&
                                                        (i = "rotate"),
                                                        (e += i + n + " ");
                                                }
                                            ),
                                                o &&
                                                    (e =
                                                        "perspective" +
                                                        o +
                                                        " " +
                                                        e);
                                        }
                                        m.setPropertyValue(t, "transform", e);
                                    },
                                });
                                m.Hooks.register(),
                                    m.Normalizations.register(),
                                    (p.hook = function (t, e, i) {
                                        var r;
                                        return (
                                            (t = h(t)),
                                            d.each(t, function (t, s) {
                                                if (
                                                    (w(s) === a && p.init(s),
                                                    i === a)
                                                )
                                                    r === a &&
                                                        (r = m.getPropertyValue(
                                                            s,
                                                            e
                                                        ));
                                                else {
                                                    var n = m.setPropertyValue(
                                                        s,
                                                        e,
                                                        i
                                                    );
                                                    "transform" === n[0] &&
                                                        p.CSS.flushTransformCache(
                                                            s
                                                        ),
                                                        (r = n);
                                                }
                                            }),
                                            r
                                        );
                                    });
                                var b = function () {
                                    var t;
                                    function r() {
                                        return s ? v.promise || null : n;
                                    }
                                    var s,
                                        n,
                                        o,
                                        l,
                                        f,
                                        g,
                                        x =
                                            arguments[0] &&
                                            (arguments[0].p ||
                                                (d.isPlainObject(
                                                    arguments[0].properties
                                                ) &&
                                                    !arguments[0].properties
                                                        .names) ||
                                                u.isString(
                                                    arguments[0].properties
                                                ));
                                    u.isWrapped(this)
                                        ? ((s = !1),
                                          (o = 0),
                                          (l = this),
                                          (n = this))
                                        : ((s = !0),
                                          (o = 1),
                                          (l = x
                                              ? arguments[0].elements ||
                                                arguments[0].e
                                              : arguments[0]));
                                    var v = {
                                        promise: null,
                                        resolver: null,
                                        rejecter: null,
                                    };
                                    if (
                                        (s &&
                                            p.Promise &&
                                            (v.promise = new p.Promise(
                                                function (t, e) {
                                                    (v.resolver = t),
                                                        (v.rejecter = e);
                                                }
                                            )),
                                        x
                                            ? ((f =
                                                  arguments[0].properties ||
                                                  arguments[0].p),
                                              (g =
                                                  arguments[0].options ||
                                                  arguments[0].o))
                                            : ((f = arguments[o]),
                                              (g = arguments[o + 1])),
                                        (l = h(l)))
                                    ) {
                                        var y,
                                            S = l.length,
                                            C = 0;
                                        if (
                                            !/^(stop|finish|finishAll|pause|resume)$/i.test(
                                                f
                                            ) &&
                                            !d.isPlainObject(g)
                                        ) {
                                            g = {};
                                            for (
                                                var M = o + 1;
                                                M < arguments.length;
                                                M++
                                            )
                                                u.isArray(arguments[M]) ||
                                                (!/^(fast|normal|slow)$/i.test(
                                                    arguments[M]
                                                ) &&
                                                    !/^\d/.test(arguments[M]))
                                                    ? u.isString(
                                                          arguments[M]
                                                      ) ||
                                                      u.isArray(arguments[M])
                                                        ? (g.easing =
                                                              arguments[M])
                                                        : u.isFunction(
                                                              arguments[M]
                                                          ) &&
                                                          (g.complete =
                                                              arguments[M])
                                                    : (g.duration =
                                                          arguments[M]);
                                        }
                                        switch (f) {
                                            case "scroll":
                                                y = "scroll";
                                                break;
                                            case "reverse":
                                                y = "reverse";
                                                break;
                                            case "pause":
                                                var E = new Date().getTime();
                                                return (
                                                    d.each(l, function (t, e) {
                                                        k(e, E);
                                                    }),
                                                    d.each(
                                                        p.State.calls,
                                                        function (t, e) {
                                                            var i = !1;
                                                            e &&
                                                                d.each(
                                                                    e[1],
                                                                    function (
                                                                        t,
                                                                        r
                                                                    ) {
                                                                        var s =
                                                                            g ===
                                                                            a
                                                                                ? ""
                                                                                : g;
                                                                        return (
                                                                            (!0 !==
                                                                                s &&
                                                                                e[2]
                                                                                    .queue !==
                                                                                    s &&
                                                                                (g !==
                                                                                    a ||
                                                                                    !1 !==
                                                                                        e[2]
                                                                                            .queue)) ||
                                                                            (d.each(
                                                                                l,
                                                                                function (
                                                                                    t,
                                                                                    a
                                                                                ) {
                                                                                    if (
                                                                                        a ===
                                                                                        r
                                                                                    )
                                                                                        return (
                                                                                            (e[5] =
                                                                                                {
                                                                                                    resume: !1,
                                                                                                }),
                                                                                            (i =
                                                                                                !0),
                                                                                            !1
                                                                                        );
                                                                                }
                                                                            ),
                                                                            !i &&
                                                                                void 0)
                                                                        );
                                                                    }
                                                                );
                                                        }
                                                    ),
                                                    r()
                                                );
                                            case "resume":
                                                return (
                                                    d.each(l, function (t, e) {
                                                        A(e);
                                                    }),
                                                    d.each(
                                                        p.State.calls,
                                                        function (t, e) {
                                                            var i = !1;
                                                            e &&
                                                                d.each(
                                                                    e[1],
                                                                    function (
                                                                        t,
                                                                        r
                                                                    ) {
                                                                        var s =
                                                                            g ===
                                                                            a
                                                                                ? ""
                                                                                : g;
                                                                        return (
                                                                            (!0 !==
                                                                                s &&
                                                                                e[2]
                                                                                    .queue !==
                                                                                    s &&
                                                                                (g !==
                                                                                    a ||
                                                                                    !1 !==
                                                                                        e[2]
                                                                                            .queue)) ||
                                                                            !e[5] ||
                                                                            (d.each(
                                                                                l,
                                                                                function (
                                                                                    t,
                                                                                    a
                                                                                ) {
                                                                                    if (
                                                                                        a ===
                                                                                        r
                                                                                    )
                                                                                        return (
                                                                                            (e[5].resume =
                                                                                                !0),
                                                                                            (i =
                                                                                                !0),
                                                                                            !1
                                                                                        );
                                                                                }
                                                                            ),
                                                                            !i &&
                                                                                void 0)
                                                                        );
                                                                    }
                                                                );
                                                        }
                                                    ),
                                                    r()
                                                );
                                            case "finish":
                                            case "finishAll":
                                            case "stop":
                                                d.each(l, function (t, e) {
                                                    w(e) &&
                                                        w(e).delayTimer &&
                                                        (clearTimeout(
                                                            w(e).delayTimer
                                                                .setTimeout
                                                        ),
                                                        w(e).delayTimer.next &&
                                                            w(
                                                                e
                                                            ).delayTimer.next(),
                                                        delete w(e).delayTimer),
                                                        "finishAll" !== f ||
                                                            (!0 !== g &&
                                                                !u.isString(
                                                                    g
                                                                )) ||
                                                            (d.each(
                                                                d.queue(
                                                                    e,
                                                                    u.isString(
                                                                        g
                                                                    )
                                                                        ? g
                                                                        : ""
                                                                ),
                                                                function (
                                                                    t,
                                                                    e
                                                                ) {
                                                                    u.isFunction(
                                                                        e
                                                                    ) && e();
                                                                }
                                                            ),
                                                            d.queue(
                                                                e,
                                                                u.isString(g)
                                                                    ? g
                                                                    : "",
                                                                []
                                                            ));
                                                });
                                                var I = [];
                                                return (
                                                    d.each(
                                                        p.State.calls,
                                                        function (t, e) {
                                                            e &&
                                                                d.each(
                                                                    e[1],
                                                                    function (
                                                                        i,
                                                                        r
                                                                    ) {
                                                                        var s =
                                                                            g ===
                                                                            a
                                                                                ? ""
                                                                                : g;
                                                                        if (
                                                                            !0 !==
                                                                                s &&
                                                                            e[2]
                                                                                .queue !==
                                                                                s &&
                                                                            (g !==
                                                                                a ||
                                                                                !1 !==
                                                                                    e[2]
                                                                                        .queue)
                                                                        )
                                                                            return !0;
                                                                        d.each(
                                                                            l,
                                                                            function (
                                                                                i,
                                                                                a
                                                                            ) {
                                                                                if (
                                                                                    a ===
                                                                                    r
                                                                                )
                                                                                    if (
                                                                                        ((!0 ===
                                                                                            g ||
                                                                                            u.isString(
                                                                                                g
                                                                                            )) &&
                                                                                            (d.each(
                                                                                                d.queue(
                                                                                                    a,
                                                                                                    u.isString(
                                                                                                        g
                                                                                                    )
                                                                                                        ? g
                                                                                                        : ""
                                                                                                ),
                                                                                                function (
                                                                                                    t,
                                                                                                    e
                                                                                                ) {
                                                                                                    u.isFunction(
                                                                                                        e
                                                                                                    ) &&
                                                                                                        e(
                                                                                                            null,
                                                                                                            !0
                                                                                                        );
                                                                                                }
                                                                                            ),
                                                                                            d.queue(
                                                                                                a,
                                                                                                u.isString(
                                                                                                    g
                                                                                                )
                                                                                                    ? g
                                                                                                    : "",
                                                                                                []
                                                                                            )),
                                                                                        "stop" ===
                                                                                            f)
                                                                                    ) {
                                                                                        var n =
                                                                                            w(
                                                                                                a
                                                                                            );
                                                                                        n &&
                                                                                            n.tweensContainer &&
                                                                                            (!0 ===
                                                                                                s ||
                                                                                                "" ===
                                                                                                    s) &&
                                                                                            d.each(
                                                                                                n.tweensContainer,
                                                                                                function (
                                                                                                    t,
                                                                                                    e
                                                                                                ) {
                                                                                                    e.endValue =
                                                                                                        e.currentValue;
                                                                                                }
                                                                                            ),
                                                                                            I.push(
                                                                                                t
                                                                                            );
                                                                                    } else
                                                                                        ("finish" !==
                                                                                            f &&
                                                                                            "finishAll" !==
                                                                                                f) ||
                                                                                            (e[2].duration = 1);
                                                                            }
                                                                        );
                                                                    }
                                                                );
                                                        }
                                                    ),
                                                    "stop" === f &&
                                                        (d.each(
                                                            I,
                                                            function (t, e) {
                                                                T(e, !0);
                                                            }
                                                        ),
                                                        v.promise &&
                                                            v.resolver(l)),
                                                    r()
                                                );
                                            default:
                                                if (
                                                    !d.isPlainObject(f) ||
                                                    u.isEmptyObject(f)
                                                ) {
                                                    if (
                                                        u.isString(f) &&
                                                        p.Redirects[f]
                                                    ) {
                                                        var O = (t = d.extend(
                                                                {},
                                                                g
                                                            )).duration,
                                                            z = t.delay || 0;
                                                        return (
                                                            !0 ===
                                                                t.backwards &&
                                                                (l = d
                                                                    .extend(
                                                                        !0,
                                                                        [],
                                                                        l
                                                                    )
                                                                    .reverse()),
                                                            d.each(
                                                                l,
                                                                function (
                                                                    e,
                                                                    i
                                                                ) {
                                                                    parseFloat(
                                                                        t.stagger
                                                                    )
                                                                        ? (t.delay =
                                                                              z +
                                                                              parseFloat(
                                                                                  t.stagger
                                                                              ) *
                                                                                  e)
                                                                        : u.isFunction(
                                                                              t.stagger
                                                                          ) &&
                                                                          (t.delay =
                                                                              z +
                                                                              t.stagger.call(
                                                                                  i,
                                                                                  e,
                                                                                  S
                                                                              )),
                                                                        t.drag &&
                                                                            ((t.duration =
                                                                                parseFloat(
                                                                                    O
                                                                                ) ||
                                                                                (/^(callout|transition)/.test(
                                                                                    f
                                                                                )
                                                                                    ? 1e3
                                                                                    : 400)),
                                                                            (t.duration =
                                                                                Math.max(
                                                                                    t.duration *
                                                                                        (t.backwards
                                                                                            ? 1 -
                                                                                              e /
                                                                                                  S
                                                                                            : (e +
                                                                                                  1) /
                                                                                              S),
                                                                                    0.75 *
                                                                                        t.duration,
                                                                                    200
                                                                                ))),
                                                                        p.Redirects[
                                                                            f
                                                                        ].call(
                                                                            i,
                                                                            i,
                                                                            t ||
                                                                                {},
                                                                            e,
                                                                            S,
                                                                            l,
                                                                            v.promise
                                                                                ? v
                                                                                : a
                                                                        );
                                                                }
                                                            ),
                                                            r()
                                                        );
                                                    }
                                                    var F =
                                                        "Velocity: First argument (" +
                                                        f +
                                                        ") was not a property map, a known action, or a registered redirect. Aborting.";
                                                    return (
                                                        v.promise
                                                            ? v.rejecter(
                                                                  new Error(F)
                                                              )
                                                            : e.console &&
                                                              console.log(F),
                                                        r()
                                                    );
                                                }
                                                y = "start";
                                        }
                                        var D = {
                                                lastParent: null,
                                                lastPosition: null,
                                                lastFontSize: null,
                                                lastPercentToPxWidth: null,
                                                lastPercentToPxHeight: null,
                                                lastEmToPx: null,
                                                remToPx: null,
                                                vwToPx: null,
                                                vhToPx: null,
                                            },
                                            N = [];
                                        d.each(l, function (t, r) {
                                            u.isNode(r) &&
                                                (function (t, r) {
                                                    var s,
                                                        n,
                                                        o = d.extend(
                                                            {},
                                                            p.defaults,
                                                            g
                                                        ),
                                                        h = {};
                                                    switch (
                                                        (w(t) === a &&
                                                            p.init(t),
                                                        parseFloat(o.delay) &&
                                                            !1 !== o.queue &&
                                                            d.queue(
                                                                t,
                                                                o.queue,
                                                                function (
                                                                    e,
                                                                    i
                                                                ) {
                                                                    if (
                                                                        !0 === i
                                                                    )
                                                                        return !0;
                                                                    p.velocityQueueEntryFlag =
                                                                        !0;
                                                                    var a = p
                                                                        .State
                                                                        .delayedElements
                                                                        .count++;
                                                                    p.State.delayedElements[
                                                                        a
                                                                    ] = t;
                                                                    var r,
                                                                        s =
                                                                            ((r =
                                                                                a),
                                                                            function () {
                                                                                (p.State.delayedElements[
                                                                                    r
                                                                                ] =
                                                                                    !1),
                                                                                    e();
                                                                            });
                                                                    (w(
                                                                        t
                                                                    ).delayBegin =
                                                                        new Date().getTime()),
                                                                        (w(
                                                                            t
                                                                        ).delay =
                                                                            parseFloat(
                                                                                o.delay
                                                                            )),
                                                                        (w(
                                                                            t
                                                                        ).delayTimer =
                                                                            {
                                                                                setTimeout:
                                                                                    setTimeout(
                                                                                        e,
                                                                                        parseFloat(
                                                                                            o.delay
                                                                                        )
                                                                                    ),
                                                                                next: s,
                                                                            });
                                                                }
                                                            ),
                                                        o.duration
                                                            .toString()
                                                            .toLowerCase())
                                                    ) {
                                                        case "fast":
                                                            o.duration = 200;
                                                            break;
                                                        case "normal":
                                                            o.duration = 400;
                                                            break;
                                                        case "slow":
                                                            o.duration = 600;
                                                            break;
                                                        default:
                                                            o.duration =
                                                                parseFloat(
                                                                    o.duration
                                                                ) || 1;
                                                    }
                                                    function x(n) {
                                                        var x, b;
                                                        if (o.begin && 0 === C)
                                                            try {
                                                                o.begin.call(
                                                                    l,
                                                                    l
                                                                );
                                                            } catch (t) {
                                                                setTimeout(
                                                                    function () {
                                                                        throw t;
                                                                    },
                                                                    1
                                                                );
                                                            }
                                                        if ("scroll" === y) {
                                                            var k,
                                                                A,
                                                                T,
                                                                M = /^x$/i.test(
                                                                    o.axis
                                                                )
                                                                    ? "Left"
                                                                    : "Top",
                                                                E =
                                                                    parseFloat(
                                                                        o.offset
                                                                    ) || 0;
                                                            o.container
                                                                ? u.isWrapped(
                                                                      o.container
                                                                  ) ||
                                                                  u.isNode(
                                                                      o.container
                                                                  )
                                                                    ? ((o.container =
                                                                          o
                                                                              .container[0] ||
                                                                          o.container),
                                                                      (T =
                                                                          (k =
                                                                              o
                                                                                  .container[
                                                                                  "scroll" +
                                                                                      M
                                                                              ]) +
                                                                          d(
                                                                              t
                                                                          ).position()[
                                                                              M.toLowerCase()
                                                                          ] +
                                                                          E))
                                                                    : (o.container =
                                                                          null)
                                                                : ((k =
                                                                      p.State
                                                                          .scrollAnchor[
                                                                          p
                                                                              .State[
                                                                              "scrollProperty" +
                                                                                  M
                                                                          ]
                                                                      ]),
                                                                  (A =
                                                                      p.State
                                                                          .scrollAnchor[
                                                                          p
                                                                              .State[
                                                                              "scrollProperty" +
                                                                                  ("Left" ===
                                                                                  M
                                                                                      ? "Top"
                                                                                      : "Left")
                                                                          ]
                                                                      ]),
                                                                  (T =
                                                                      d(
                                                                          t
                                                                      ).offset()[
                                                                          M.toLowerCase()
                                                                      ] + E)),
                                                                (h = {
                                                                    scroll: {
                                                                        rootPropertyValue:
                                                                            !1,
                                                                        startValue:
                                                                            k,
                                                                        currentValue:
                                                                            k,
                                                                        endValue:
                                                                            T,
                                                                        unitType:
                                                                            "",
                                                                        easing: o.easing,
                                                                        scrollData:
                                                                            {
                                                                                container:
                                                                                    o.container,
                                                                                direction:
                                                                                    M,
                                                                                alternateValue:
                                                                                    A,
                                                                            },
                                                                    },
                                                                    element: t,
                                                                }),
                                                                p.debug &&
                                                                    console.log(
                                                                        "tweensContainer (scroll): ",
                                                                        h.scroll,
                                                                        t
                                                                    );
                                                        } else if (
                                                            "reverse" === y
                                                        ) {
                                                            if (!(x = w(t)))
                                                                return;
                                                            if (
                                                                !x.tweensContainer
                                                            )
                                                                return void d.dequeue(
                                                                    t,
                                                                    o.queue
                                                                );
                                                            for (var I in ("none" ===
                                                                x.opts
                                                                    .display &&
                                                                (x.opts.display =
                                                                    "auto"),
                                                            "hidden" ===
                                                                x.opts
                                                                    .visibility &&
                                                                (x.opts.visibility =
                                                                    "visible"),
                                                            (x.opts.loop = !1),
                                                            (x.opts.begin =
                                                                null),
                                                            (x.opts.complete =
                                                                null),
                                                            g.easing ||
                                                                delete o.easing,
                                                            g.duration ||
                                                                delete o.duration,
                                                            (o = d.extend(
                                                                {},
                                                                x.opts,
                                                                o
                                                            )),
                                                            (b = d.extend(
                                                                !0,
                                                                {},
                                                                x
                                                                    ? x.tweensContainer
                                                                    : null
                                                            ))))
                                                                if (
                                                                    b.hasOwnProperty(
                                                                        I
                                                                    ) &&
                                                                    "element" !==
                                                                        I
                                                                ) {
                                                                    var O =
                                                                        b[I]
                                                                            .startValue;
                                                                    (b[
                                                                        I
                                                                    ].startValue =
                                                                        b[
                                                                            I
                                                                        ].currentValue =
                                                                            b[
                                                                                I
                                                                            ].endValue),
                                                                        (b[
                                                                            I
                                                                        ].endValue =
                                                                            O),
                                                                        u.isEmptyObject(
                                                                            g
                                                                        ) ||
                                                                            (b[
                                                                                I
                                                                            ].easing =
                                                                                o.easing),
                                                                        p.debug &&
                                                                            console.log(
                                                                                "reverse tweensContainer (" +
                                                                                    I +
                                                                                    "): " +
                                                                                    JSON.stringify(
                                                                                        b[
                                                                                            I
                                                                                        ]
                                                                                    ),
                                                                                t
                                                                            );
                                                                }
                                                            h = b;
                                                        } else if (
                                                            "start" === y
                                                        ) {
                                                            (x = w(t)) &&
                                                                x.tweensContainer &&
                                                                !0 ===
                                                                    x.isAnimating &&
                                                                (b =
                                                                    x.tweensContainer);
                                                            var z = function (
                                                                    e,
                                                                    i
                                                                ) {
                                                                    var a, s, n;
                                                                    return (
                                                                        u.isFunction(
                                                                            e
                                                                        ) &&
                                                                            (e =
                                                                                e.call(
                                                                                    t,
                                                                                    r,
                                                                                    S
                                                                                )),
                                                                        u.isArray(
                                                                            e
                                                                        )
                                                                            ? ((a =
                                                                                  e[0]),
                                                                              (!u.isArray(
                                                                                  e[1]
                                                                              ) &&
                                                                                  /^[\d-]/.test(
                                                                                      e[1]
                                                                                  )) ||
                                                                              u.isFunction(
                                                                                  e[1]
                                                                              ) ||
                                                                              m.RegEx.isHex.test(
                                                                                  e[1]
                                                                              )
                                                                                  ? (n =
                                                                                        e[1])
                                                                                  : (u.isString(
                                                                                        e[1]
                                                                                    ) &&
                                                                                        !m.RegEx.isHex.test(
                                                                                            e[1]
                                                                                        ) &&
                                                                                        p
                                                                                            .Easings[
                                                                                            e[1]
                                                                                        ]) ||
                                                                                    u.isArray(
                                                                                        e[1]
                                                                                    )
                                                                                  ? ((s =
                                                                                        i
                                                                                            ? e[1]
                                                                                            : P(
                                                                                                  e[1],
                                                                                                  o.duration
                                                                                              )),
                                                                                    (n =
                                                                                        e[2]))
                                                                                  : (n =
                                                                                        e[1] ||
                                                                                        e[2]))
                                                                            : (a =
                                                                                  e),
                                                                        i ||
                                                                            (s =
                                                                                s ||
                                                                                o.easing),
                                                                        u.isFunction(
                                                                            a
                                                                        ) &&
                                                                            (a =
                                                                                a.call(
                                                                                    t,
                                                                                    r,
                                                                                    S
                                                                                )),
                                                                        u.isFunction(
                                                                            n
                                                                        ) &&
                                                                            (n =
                                                                                n.call(
                                                                                    t,
                                                                                    r,
                                                                                    S
                                                                                )),
                                                                        [
                                                                            a ||
                                                                                0,
                                                                            s,
                                                                            n,
                                                                        ]
                                                                    );
                                                                },
                                                                F = function (
                                                                    r,
                                                                    n
                                                                ) {
                                                                    var l,
                                                                        c =
                                                                            m.Hooks.getRoot(
                                                                                r
                                                                            ),
                                                                        f = !1,
                                                                        g =
                                                                            n[0],
                                                                        v =
                                                                            n[1],
                                                                        y =
                                                                            n[2];
                                                                    if (
                                                                        (x &&
                                                                            x.isSVG) ||
                                                                        "tween" ===
                                                                            c ||
                                                                        !1 !==
                                                                            m.Names.prefixCheck(
                                                                                c
                                                                            )[1] ||
                                                                        m
                                                                            .Normalizations
                                                                            .registered[
                                                                            c
                                                                        ] !== a
                                                                    ) {
                                                                        ((o.display !==
                                                                            a &&
                                                                            null !==
                                                                                o.display &&
                                                                            "none" !==
                                                                                o.display) ||
                                                                            (o.visibility !==
                                                                                a &&
                                                                                "hidden" !==
                                                                                    o.visibility)) &&
                                                                            /opacity|filter/.test(
                                                                                r
                                                                            ) &&
                                                                            !y &&
                                                                            0 !==
                                                                                g &&
                                                                            (y = 0),
                                                                            o._cacheValues &&
                                                                            b &&
                                                                            b[r]
                                                                                ? (y ===
                                                                                      a &&
                                                                                      (y =
                                                                                          b[
                                                                                              r
                                                                                          ]
                                                                                              .endValue +
                                                                                          b[
                                                                                              r
                                                                                          ]
                                                                                              .unitType),
                                                                                  (f =
                                                                                      x
                                                                                          .rootPropertyValueCache[
                                                                                          c
                                                                                      ]))
                                                                                : m
                                                                                      .Hooks
                                                                                      .registered[
                                                                                      r
                                                                                  ]
                                                                                ? y ===
                                                                                  a
                                                                                    ? ((f =
                                                                                          m.getPropertyValue(
                                                                                              t,
                                                                                              c
                                                                                          )),
                                                                                      (y =
                                                                                          m.getPropertyValue(
                                                                                              t,
                                                                                              r,
                                                                                              f
                                                                                          )))
                                                                                    : (f =
                                                                                          m
                                                                                              .Hooks
                                                                                              .templates[
                                                                                              c
                                                                                          ][1])
                                                                                : y ===
                                                                                      a &&
                                                                                  (y =
                                                                                      m.getPropertyValue(
                                                                                          t,
                                                                                          r
                                                                                      ));
                                                                        var w,
                                                                            k,
                                                                            A,
                                                                            S =
                                                                                !1,
                                                                            C =
                                                                                function (
                                                                                    t,
                                                                                    e
                                                                                ) {
                                                                                    var i,
                                                                                        a;
                                                                                    return (
                                                                                        (a =
                                                                                            (
                                                                                                e ||
                                                                                                "0"
                                                                                            )
                                                                                                .toString()
                                                                                                .toLowerCase()
                                                                                                .replace(
                                                                                                    /[%A-z]+$/,
                                                                                                    function (
                                                                                                        t
                                                                                                    ) {
                                                                                                        return (
                                                                                                            (i =
                                                                                                                t),
                                                                                                            ""
                                                                                                        );
                                                                                                    }
                                                                                                )),
                                                                                        i ||
                                                                                            (i =
                                                                                                m.Values.getUnitType(
                                                                                                    t
                                                                                                )),
                                                                                        [
                                                                                            a,
                                                                                            i,
                                                                                        ]
                                                                                    );
                                                                                };
                                                                        if (
                                                                            y !==
                                                                                g &&
                                                                            u.isString(
                                                                                y
                                                                            ) &&
                                                                            u.isString(
                                                                                g
                                                                            )
                                                                        ) {
                                                                            l =
                                                                                "";
                                                                            var P = 0,
                                                                                L = 0,
                                                                                T =
                                                                                    [],
                                                                                M =
                                                                                    [],
                                                                                E = 0,
                                                                                I = 0,
                                                                                O = 0;
                                                                            for (
                                                                                y =
                                                                                    m.Hooks.fixColors(
                                                                                        y
                                                                                    ),
                                                                                    g =
                                                                                        m.Hooks.fixColors(
                                                                                            g
                                                                                        );
                                                                                P <
                                                                                    y.length &&
                                                                                L <
                                                                                    g.length;

                                                                            ) {
                                                                                var z =
                                                                                        y[
                                                                                            P
                                                                                        ],
                                                                                    F =
                                                                                        g[
                                                                                            L
                                                                                        ];
                                                                                if (
                                                                                    /[\d\.-]/.test(
                                                                                        z
                                                                                    ) &&
                                                                                    /[\d\.-]/.test(
                                                                                        F
                                                                                    )
                                                                                ) {
                                                                                    for (
                                                                                        var N =
                                                                                                z,
                                                                                            X =
                                                                                                F,
                                                                                            R =
                                                                                                ".",
                                                                                            Y =
                                                                                                ".";
                                                                                        ++P <
                                                                                        y.length;

                                                                                    ) {
                                                                                        if (
                                                                                            (z =
                                                                                                y[
                                                                                                    P
                                                                                                ]) ===
                                                                                            R
                                                                                        )
                                                                                            R =
                                                                                                "..";
                                                                                        else if (
                                                                                            !/\d/.test(
                                                                                                z
                                                                                            )
                                                                                        )
                                                                                            break;
                                                                                        N +=
                                                                                            z;
                                                                                    }
                                                                                    for (
                                                                                        ;
                                                                                        ++L <
                                                                                        g.length;

                                                                                    ) {
                                                                                        if (
                                                                                            (F =
                                                                                                g[
                                                                                                    L
                                                                                                ]) ===
                                                                                            Y
                                                                                        )
                                                                                            Y =
                                                                                                "..";
                                                                                        else if (
                                                                                            !/\d/.test(
                                                                                                F
                                                                                            )
                                                                                        )
                                                                                            break;
                                                                                        X +=
                                                                                            F;
                                                                                    }
                                                                                    var H =
                                                                                            m.Hooks.getUnit(
                                                                                                y,
                                                                                                P
                                                                                            ),
                                                                                        W =
                                                                                            m.Hooks.getUnit(
                                                                                                g,
                                                                                                L
                                                                                            );
                                                                                    if (
                                                                                        ((P +=
                                                                                            H.length),
                                                                                        (L +=
                                                                                            W.length),
                                                                                        H ===
                                                                                            W)
                                                                                    )
                                                                                        N ===
                                                                                        X
                                                                                            ? (l +=
                                                                                                  N +
                                                                                                  H)
                                                                                            : ((l +=
                                                                                                  "{" +
                                                                                                  T.length +
                                                                                                  (I
                                                                                                      ? "!"
                                                                                                      : "") +
                                                                                                  "}" +
                                                                                                  H),
                                                                                              T.push(
                                                                                                  parseFloat(
                                                                                                      N
                                                                                                  )
                                                                                              ),
                                                                                              M.push(
                                                                                                  parseFloat(
                                                                                                      X
                                                                                                  )
                                                                                              ));
                                                                                    else {
                                                                                        var B =
                                                                                                parseFloat(
                                                                                                    N
                                                                                                ),
                                                                                            V =
                                                                                                parseFloat(
                                                                                                    X
                                                                                                );
                                                                                        (l +=
                                                                                            (E <
                                                                                            5
                                                                                                ? "calc"
                                                                                                : "") +
                                                                                            "(" +
                                                                                            (B
                                                                                                ? "{" +
                                                                                                  T.length +
                                                                                                  (I
                                                                                                      ? "!"
                                                                                                      : "") +
                                                                                                  "}"
                                                                                                : "0") +
                                                                                            H +
                                                                                            " + " +
                                                                                            (V
                                                                                                ? "{" +
                                                                                                  (T.length +
                                                                                                      (B
                                                                                                          ? 1
                                                                                                          : 0)) +
                                                                                                  (I
                                                                                                      ? "!"
                                                                                                      : "") +
                                                                                                  "}"
                                                                                                : "0") +
                                                                                            W +
                                                                                            ")"),
                                                                                            B &&
                                                                                                (T.push(
                                                                                                    B
                                                                                                ),
                                                                                                M.push(
                                                                                                    0
                                                                                                )),
                                                                                            V &&
                                                                                                (T.push(
                                                                                                    0
                                                                                                ),
                                                                                                M.push(
                                                                                                    V
                                                                                                ));
                                                                                    }
                                                                                } else {
                                                                                    if (
                                                                                        z !==
                                                                                        F
                                                                                    ) {
                                                                                        E = 0;
                                                                                        break;
                                                                                    }
                                                                                    (l +=
                                                                                        z),
                                                                                        P++,
                                                                                        L++,
                                                                                        (0 ===
                                                                                            E &&
                                                                                            "c" ===
                                                                                                z) ||
                                                                                        (1 ===
                                                                                            E &&
                                                                                            "a" ===
                                                                                                z) ||
                                                                                        (2 ===
                                                                                            E &&
                                                                                            "l" ===
                                                                                                z) ||
                                                                                        (3 ===
                                                                                            E &&
                                                                                            "c" ===
                                                                                                z) ||
                                                                                        (E >=
                                                                                            4 &&
                                                                                            "(" ===
                                                                                                z)
                                                                                            ? E++
                                                                                            : ((E &&
                                                                                                  E <
                                                                                                      5) ||
                                                                                                  (E >=
                                                                                                      4 &&
                                                                                                      ")" ===
                                                                                                          z &&
                                                                                                      --E <
                                                                                                          5)) &&
                                                                                              (E = 0),
                                                                                        (0 ===
                                                                                            I &&
                                                                                            "r" ===
                                                                                                z) ||
                                                                                        (1 ===
                                                                                            I &&
                                                                                            "g" ===
                                                                                                z) ||
                                                                                        (2 ===
                                                                                            I &&
                                                                                            "b" ===
                                                                                                z) ||
                                                                                        (3 ===
                                                                                            I &&
                                                                                            "a" ===
                                                                                                z) ||
                                                                                        (I >=
                                                                                            3 &&
                                                                                            "(" ===
                                                                                                z)
                                                                                            ? (3 ===
                                                                                                  I &&
                                                                                                  "a" ===
                                                                                                      z &&
                                                                                                  (O = 1),
                                                                                              I++)
                                                                                            : O &&
                                                                                              "," ===
                                                                                                  z
                                                                                            ? ++O >
                                                                                                  3 &&
                                                                                              (I =
                                                                                                  O =
                                                                                                      0)
                                                                                            : ((O &&
                                                                                                  I <
                                                                                                      (O
                                                                                                          ? 5
                                                                                                          : 4)) ||
                                                                                                  (I >=
                                                                                                      (O
                                                                                                          ? 4
                                                                                                          : 3) &&
                                                                                                      ")" ===
                                                                                                          z &&
                                                                                                      --I <
                                                                                                          (O
                                                                                                              ? 5
                                                                                                              : 4))) &&
                                                                                              (I =
                                                                                                  O =
                                                                                                      0);
                                                                                }
                                                                            }
                                                                            (P ===
                                                                                y.length &&
                                                                                L ===
                                                                                    g.length) ||
                                                                                (p.debug &&
                                                                                    console.error(
                                                                                        'Trying to pattern match mis-matched strings ["' +
                                                                                            g +
                                                                                            '", "' +
                                                                                            y +
                                                                                            '"]'
                                                                                    ),
                                                                                (l =
                                                                                    a)),
                                                                                l &&
                                                                                    (T.length
                                                                                        ? (p.debug &&
                                                                                              console.log(
                                                                                                  'Pattern found "' +
                                                                                                      l +
                                                                                                      '" -> ',
                                                                                                  T,
                                                                                                  M,
                                                                                                  "[" +
                                                                                                      y +
                                                                                                      "," +
                                                                                                      g +
                                                                                                      "]"
                                                                                              ),
                                                                                          (y =
                                                                                              T),
                                                                                          (g =
                                                                                              M),
                                                                                          (k =
                                                                                              A =
                                                                                                  ""))
                                                                                        : (l =
                                                                                              a));
                                                                        }
                                                                        if (
                                                                            (l ||
                                                                                ((y =
                                                                                    (w =
                                                                                        C(
                                                                                            r,
                                                                                            y
                                                                                        ))[0]),
                                                                                (A =
                                                                                    w[1]),
                                                                                (g =
                                                                                    (w =
                                                                                        C(
                                                                                            r,
                                                                                            g
                                                                                        ))[0].replace(
                                                                                        /^([+-\/*])=/,
                                                                                        function (
                                                                                            t,
                                                                                            e
                                                                                        ) {
                                                                                            return (
                                                                                                (S =
                                                                                                    e),
                                                                                                ""
                                                                                            );
                                                                                        }
                                                                                    )),
                                                                                (k =
                                                                                    w[1]),
                                                                                (y =
                                                                                    parseFloat(
                                                                                        y
                                                                                    ) ||
                                                                                    0),
                                                                                (g =
                                                                                    parseFloat(
                                                                                        g
                                                                                    ) ||
                                                                                    0),
                                                                                "%" ===
                                                                                    k &&
                                                                                    (/^(fontSize|lineHeight)$/.test(
                                                                                        r
                                                                                    )
                                                                                        ? ((g /= 100),
                                                                                          (k =
                                                                                              "em"))
                                                                                        : /^scale/.test(
                                                                                              r
                                                                                          )
                                                                                        ? ((g /= 100),
                                                                                          (k =
                                                                                              ""))
                                                                                        : /(Red|Green|Blue)$/i.test(
                                                                                              r
                                                                                          ) &&
                                                                                          ((g =
                                                                                              (g /
                                                                                                  100) *
                                                                                              255),
                                                                                          (k =
                                                                                              "")))),
                                                                            /[\/*]/.test(
                                                                                S
                                                                            ))
                                                                        )
                                                                            k =
                                                                                A;
                                                                        else if (
                                                                            A !==
                                                                                k &&
                                                                            0 !==
                                                                                y
                                                                        )
                                                                            if (
                                                                                0 ===
                                                                                g
                                                                            )
                                                                                k =
                                                                                    A;
                                                                            else {
                                                                                s =
                                                                                    s ||
                                                                                    (function () {
                                                                                        var a =
                                                                                                {
                                                                                                    myParent:
                                                                                                        t.parentNode ||
                                                                                                        i.body,
                                                                                                    position:
                                                                                                        m.getPropertyValue(
                                                                                                            t,
                                                                                                            "position"
                                                                                                        ),
                                                                                                    fontSize:
                                                                                                        m.getPropertyValue(
                                                                                                            t,
                                                                                                            "fontSize"
                                                                                                        ),
                                                                                                },
                                                                                            r =
                                                                                                a.position ===
                                                                                                    D.lastPosition &&
                                                                                                a.myParent ===
                                                                                                    D.lastParent,
                                                                                            s =
                                                                                                a.fontSize ===
                                                                                                D.lastFontSize;
                                                                                        (D.lastParent =
                                                                                            a.myParent),
                                                                                            (D.lastPosition =
                                                                                                a.position),
                                                                                            (D.lastFontSize =
                                                                                                a.fontSize);
                                                                                        var n = 100,
                                                                                            o =
                                                                                                {};
                                                                                        if (
                                                                                            s &&
                                                                                            r
                                                                                        )
                                                                                            (o.emToPx =
                                                                                                D.lastEmToPx),
                                                                                                (o.percentToPxWidth =
                                                                                                    D.lastPercentToPxWidth),
                                                                                                (o.percentToPxHeight =
                                                                                                    D.lastPercentToPxHeight);
                                                                                        else {
                                                                                            var l =
                                                                                                x &&
                                                                                                x.isSVG
                                                                                                    ? i.createElementNS(
                                                                                                          "http://www.w3.org/2000/svg",
                                                                                                          "rect"
                                                                                                      )
                                                                                                    : i.createElement(
                                                                                                          "div"
                                                                                                      );
                                                                                            p.init(
                                                                                                l
                                                                                            ),
                                                                                                a.myParent.appendChild(
                                                                                                    l
                                                                                                ),
                                                                                                d.each(
                                                                                                    [
                                                                                                        "overflow",
                                                                                                        "overflowX",
                                                                                                        "overflowY",
                                                                                                    ],
                                                                                                    function (
                                                                                                        t,
                                                                                                        e
                                                                                                    ) {
                                                                                                        p.CSS.setPropertyValue(
                                                                                                            l,
                                                                                                            e,
                                                                                                            "hidden"
                                                                                                        );
                                                                                                    }
                                                                                                ),
                                                                                                p.CSS.setPropertyValue(
                                                                                                    l,
                                                                                                    "position",
                                                                                                    a.position
                                                                                                ),
                                                                                                p.CSS.setPropertyValue(
                                                                                                    l,
                                                                                                    "fontSize",
                                                                                                    a.fontSize
                                                                                                ),
                                                                                                p.CSS.setPropertyValue(
                                                                                                    l,
                                                                                                    "boxSizing",
                                                                                                    "content-box"
                                                                                                ),
                                                                                                d.each(
                                                                                                    [
                                                                                                        "minWidth",
                                                                                                        "maxWidth",
                                                                                                        "width",
                                                                                                        "minHeight",
                                                                                                        "maxHeight",
                                                                                                        "height",
                                                                                                    ],
                                                                                                    function (
                                                                                                        t,
                                                                                                        e
                                                                                                    ) {
                                                                                                        p.CSS.setPropertyValue(
                                                                                                            l,
                                                                                                            e,
                                                                                                            n +
                                                                                                                "%"
                                                                                                        );
                                                                                                    }
                                                                                                ),
                                                                                                p.CSS.setPropertyValue(
                                                                                                    l,
                                                                                                    "paddingLeft",
                                                                                                    n +
                                                                                                        "em"
                                                                                                ),
                                                                                                (o.percentToPxWidth =
                                                                                                    D.lastPercentToPxWidth =
                                                                                                        (parseFloat(
                                                                                                            m.getPropertyValue(
                                                                                                                l,
                                                                                                                "width",
                                                                                                                null,
                                                                                                                !0
                                                                                                            )
                                                                                                        ) ||
                                                                                                            1) /
                                                                                                        n),
                                                                                                (o.percentToPxHeight =
                                                                                                    D.lastPercentToPxHeight =
                                                                                                        (parseFloat(
                                                                                                            m.getPropertyValue(
                                                                                                                l,
                                                                                                                "height",
                                                                                                                null,
                                                                                                                !0
                                                                                                            )
                                                                                                        ) ||
                                                                                                            1) /
                                                                                                        n),
                                                                                                (o.emToPx =
                                                                                                    D.lastEmToPx =
                                                                                                        (parseFloat(
                                                                                                            m.getPropertyValue(
                                                                                                                l,
                                                                                                                "paddingLeft"
                                                                                                            )
                                                                                                        ) ||
                                                                                                            1) /
                                                                                                        n),
                                                                                                a.myParent.removeChild(
                                                                                                    l
                                                                                                );
                                                                                        }
                                                                                        return (
                                                                                            null ===
                                                                                                D.remToPx &&
                                                                                                (D.remToPx =
                                                                                                    parseFloat(
                                                                                                        m.getPropertyValue(
                                                                                                            i.body,
                                                                                                            "fontSize"
                                                                                                        )
                                                                                                    ) ||
                                                                                                    16),
                                                                                            null ===
                                                                                                D.vwToPx &&
                                                                                                ((D.vwToPx =
                                                                                                    parseFloat(
                                                                                                        e.innerWidth
                                                                                                    ) /
                                                                                                    100),
                                                                                                (D.vhToPx =
                                                                                                    parseFloat(
                                                                                                        e.innerHeight
                                                                                                    ) /
                                                                                                    100)),
                                                                                            (o.remToPx =
                                                                                                D.remToPx),
                                                                                            (o.vwToPx =
                                                                                                D.vwToPx),
                                                                                            (o.vhToPx =
                                                                                                D.vhToPx),
                                                                                            p.debug >=
                                                                                                1 &&
                                                                                                console.log(
                                                                                                    "Unit ratios: " +
                                                                                                        JSON.stringify(
                                                                                                            o
                                                                                                        ),
                                                                                                    t
                                                                                                ),
                                                                                            o
                                                                                        );
                                                                                    })();
                                                                                var G =
                                                                                    /margin|padding|left|right|width|text|word|letter/i.test(
                                                                                        r
                                                                                    ) ||
                                                                                    /X$/.test(
                                                                                        r
                                                                                    ) ||
                                                                                    "x" ===
                                                                                        r
                                                                                        ? "x"
                                                                                        : "y";
                                                                                switch (
                                                                                    A
                                                                                ) {
                                                                                    case "%":
                                                                                        y *=
                                                                                            "x" ===
                                                                                            G
                                                                                                ? s.percentToPxWidth
                                                                                                : s.percentToPxHeight;
                                                                                        break;
                                                                                    case "px":
                                                                                        break;
                                                                                    default:
                                                                                        y *=
                                                                                            s[
                                                                                                A +
                                                                                                    "ToPx"
                                                                                            ];
                                                                                }
                                                                                switch (
                                                                                    k
                                                                                ) {
                                                                                    case "%":
                                                                                        y *=
                                                                                            1 /
                                                                                            ("x" ===
                                                                                            G
                                                                                                ? s.percentToPxWidth
                                                                                                : s.percentToPxHeight);
                                                                                        break;
                                                                                    case "px":
                                                                                        break;
                                                                                    default:
                                                                                        y *=
                                                                                            1 /
                                                                                            s[
                                                                                                k +
                                                                                                    "ToPx"
                                                                                            ];
                                                                                }
                                                                            }
                                                                        switch (
                                                                            S
                                                                        ) {
                                                                            case "+":
                                                                                g =
                                                                                    y +
                                                                                    g;
                                                                                break;
                                                                            case "-":
                                                                                g =
                                                                                    y -
                                                                                    g;
                                                                                break;
                                                                            case "*":
                                                                                g *=
                                                                                    y;
                                                                                break;
                                                                            case "/":
                                                                                g =
                                                                                    y /
                                                                                    g;
                                                                        }
                                                                        (h[r] =
                                                                            {
                                                                                rootPropertyValue:
                                                                                    f,
                                                                                startValue:
                                                                                    y,
                                                                                currentValue:
                                                                                    y,
                                                                                endValue:
                                                                                    g,
                                                                                unitType:
                                                                                    k,
                                                                                easing: v,
                                                                            }),
                                                                            l &&
                                                                                (h[
                                                                                    r
                                                                                ].pattern =
                                                                                    l),
                                                                            p.debug &&
                                                                                console.log(
                                                                                    "tweensContainer (" +
                                                                                        r +
                                                                                        "): " +
                                                                                        JSON.stringify(
                                                                                            h[
                                                                                                r
                                                                                            ]
                                                                                        ),
                                                                                    t
                                                                                );
                                                                    } else
                                                                        p.debug &&
                                                                            console.log(
                                                                                "Skipping [" +
                                                                                    c +
                                                                                    "] due to a lack of browser support."
                                                                            );
                                                                };
                                                            for (var X in f)
                                                                if (
                                                                    f.hasOwnProperty(
                                                                        X
                                                                    )
                                                                ) {
                                                                    var R =
                                                                            m.Names.camelCase(
                                                                                X
                                                                            ),
                                                                        Y = z(
                                                                            f[X]
                                                                        );
                                                                    if (
                                                                        c(
                                                                            m
                                                                                .Lists
                                                                                .colors
                                                                        )
                                                                    ) {
                                                                        var H =
                                                                                Y[0],
                                                                            W =
                                                                                Y[1],
                                                                            B =
                                                                                Y[2];
                                                                        if (
                                                                            m.RegEx.isHex.test(
                                                                                H
                                                                            )
                                                                        ) {
                                                                            for (
                                                                                var V =
                                                                                        [
                                                                                            "Red",
                                                                                            "Green",
                                                                                            "Blue",
                                                                                        ],
                                                                                    G =
                                                                                        m.Values.hexToRgb(
                                                                                            H
                                                                                        ),
                                                                                    j =
                                                                                        B
                                                                                            ? m.Values.hexToRgb(
                                                                                                  B
                                                                                              )
                                                                                            : a,
                                                                                    _ = 0;
                                                                                _ <
                                                                                V.length;
                                                                                _++
                                                                            ) {
                                                                                var U =
                                                                                    [
                                                                                        G[
                                                                                            _
                                                                                        ],
                                                                                    ];
                                                                                W &&
                                                                                    U.push(
                                                                                        W
                                                                                    ),
                                                                                    j !==
                                                                                        a &&
                                                                                        U.push(
                                                                                            j[
                                                                                                _
                                                                                            ]
                                                                                        ),
                                                                                    F(
                                                                                        R +
                                                                                            V[
                                                                                                _
                                                                                            ],
                                                                                        U
                                                                                    );
                                                                            }
                                                                            continue;
                                                                        }
                                                                    }
                                                                    F(R, Y);
                                                                }
                                                            h.element = t;
                                                        }
                                                        h.element &&
                                                            (m.Values.addClass(
                                                                t,
                                                                "velocity-animating"
                                                            ),
                                                            N.push(h),
                                                            (x = w(t)) &&
                                                                ("" ===
                                                                    o.queue &&
                                                                    ((x.tweensContainer =
                                                                        h),
                                                                    (x.opts =
                                                                        o)),
                                                                (x.isAnimating =
                                                                    !0)),
                                                            C === S - 1
                                                                ? (p.State.calls.push(
                                                                      [
                                                                          N,
                                                                          l,
                                                                          o,
                                                                          null,
                                                                          v.resolver,
                                                                          null,
                                                                          0,
                                                                      ]
                                                                  ),
                                                                  !1 ===
                                                                      p.State
                                                                          .isTicking &&
                                                                      ((p.State.isTicking =
                                                                          !0),
                                                                      L()))
                                                                : C++);
                                                    }
                                                    if (
                                                        (!1 !== p.mock &&
                                                            (!0 === p.mock
                                                                ? (o.duration =
                                                                      o.delay =
                                                                          1)
                                                                : ((o.duration *=
                                                                      parseFloat(
                                                                          p.mock
                                                                      ) || 1),
                                                                  (o.delay *=
                                                                      parseFloat(
                                                                          p.mock
                                                                      ) || 1))),
                                                        (o.easing = P(
                                                            o.easing,
                                                            o.duration
                                                        )),
                                                        o.begin &&
                                                            !u.isFunction(
                                                                o.begin
                                                            ) &&
                                                            (o.begin = null),
                                                        o.progress &&
                                                            !u.isFunction(
                                                                o.progress
                                                            ) &&
                                                            (o.progress = null),
                                                        o.complete &&
                                                            !u.isFunction(
                                                                o.complete
                                                            ) &&
                                                            (o.complete = null),
                                                        o.display !== a &&
                                                            null !==
                                                                o.display &&
                                                            ((o.display =
                                                                o.display
                                                                    .toString()
                                                                    .toLowerCase()),
                                                            "auto" ===
                                                                o.display &&
                                                                (o.display =
                                                                    p.CSS.Values.getDisplayType(
                                                                        t
                                                                    ))),
                                                        o.visibility !== a &&
                                                            null !==
                                                                o.visibility &&
                                                            (o.visibility =
                                                                o.visibility
                                                                    .toString()
                                                                    .toLowerCase()),
                                                        (o.mobileHA =
                                                            o.mobileHA &&
                                                            p.State.isMobile &&
                                                            !p.State
                                                                .isGingerbread),
                                                        !1 === o.queue)
                                                    )
                                                        if (o.delay) {
                                                            var b = p.State
                                                                .delayedElements
                                                                .count++;
                                                            p.State.delayedElements[
                                                                b
                                                            ] = t;
                                                            var k =
                                                                ((n = b),
                                                                function () {
                                                                    (p.State.delayedElements[
                                                                        n
                                                                    ] = !1),
                                                                        x();
                                                                });
                                                            (w(t).delayBegin =
                                                                new Date().getTime()),
                                                                (w(t).delay =
                                                                    parseFloat(
                                                                        o.delay
                                                                    )),
                                                                (w(
                                                                    t
                                                                ).delayTimer = {
                                                                    setTimeout:
                                                                        setTimeout(
                                                                            x,
                                                                            parseFloat(
                                                                                o.delay
                                                                            )
                                                                        ),
                                                                    next: k,
                                                                });
                                                        } else x();
                                                    else
                                                        d.queue(
                                                            t,
                                                            o.queue,
                                                            function (t, e) {
                                                                if (!0 === e)
                                                                    return (
                                                                        v.promise &&
                                                                            v.resolver(
                                                                                l
                                                                            ),
                                                                        !0
                                                                    );
                                                                (p.velocityQueueEntryFlag =
                                                                    !0),
                                                                    x();
                                                            }
                                                        );
                                                    ("" !== o.queue &&
                                                        "fx" !== o.queue) ||
                                                        "inprogress" ===
                                                            d.queue(t)[0] ||
                                                        d.dequeue(t);
                                                })(r, t);
                                        }),
                                            ((t = d.extend(
                                                {},
                                                p.defaults,
                                                g
                                            )).loop = parseInt(t.loop, 10));
                                        var X = 2 * t.loop - 1;
                                        if (t.loop)
                                            for (var R = 0; R < X; R++) {
                                                var Y = {
                                                    delay: t.delay,
                                                    progress: t.progress,
                                                };
                                                R === X - 1 &&
                                                    ((Y.display = t.display),
                                                    (Y.visibility =
                                                        t.visibility),
                                                    (Y.complete = t.complete)),
                                                    b(l, "reverse", Y);
                                            }
                                        return r();
                                    }
                                    v.promise &&
                                        (f && g && !1 === g.promiseRejectEmpty
                                            ? v.resolver()
                                            : v.rejecter());
                                };
                                (p = d.extend(b, p)).animate = b;
                                var v = e.requestAnimationFrame || n;
                                if (!p.State.isMobile && i.hidden !== a) {
                                    var y = function () {
                                        i.hidden
                                            ? ((v = function (t) {
                                                  return setTimeout(
                                                      function () {
                                                          t(!0);
                                                      },
                                                      16
                                                  );
                                              }),
                                              L())
                                            : (v =
                                                  e.requestAnimationFrame || n);
                                    };
                                    y(),
                                        i.addEventListener(
                                            "visibilitychange",
                                            y
                                        );
                                }
                                return (
                                    (t.Velocity = p),
                                    t !== e &&
                                        ((t.fn.velocity = b),
                                        (t.fn.velocity.defaults = p.defaults)),
                                    d.each(["Down", "Up"], function (t, e) {
                                        p.Redirects["slide" + e] = function (
                                            t,
                                            i,
                                            r,
                                            s,
                                            n,
                                            o
                                        ) {
                                            var l = d.extend({}, i),
                                                c = l.begin,
                                                h = l.complete,
                                                u = {},
                                                f = {
                                                    height: "",
                                                    marginTop: "",
                                                    marginBottom: "",
                                                    paddingTop: "",
                                                    paddingBottom: "",
                                                };
                                            l.display === a &&
                                                (l.display =
                                                    "Down" === e
                                                        ? "inline" ===
                                                          p.CSS.Values.getDisplayType(
                                                              t
                                                          )
                                                            ? "inline-block"
                                                            : "block"
                                                        : "none"),
                                                (l.begin = function () {
                                                    for (var i in (0 === r &&
                                                        c &&
                                                        c.call(n, n),
                                                    f))
                                                        if (
                                                            f.hasOwnProperty(i)
                                                        ) {
                                                            u[i] = t.style[i];
                                                            var a =
                                                                m.getPropertyValue(
                                                                    t,
                                                                    i
                                                                );
                                                            f[i] =
                                                                "Down" === e
                                                                    ? [a, 0]
                                                                    : [0, a];
                                                        }
                                                    (u.overflow =
                                                        t.style.overflow),
                                                        (t.style.overflow =
                                                            "hidden");
                                                }),
                                                (l.complete = function () {
                                                    for (var e in u)
                                                        u.hasOwnProperty(e) &&
                                                            (t.style[e] = u[e]);
                                                    r === s - 1 &&
                                                        (h && h.call(n, n),
                                                        o && o.resolver(n));
                                                }),
                                                p(t, f, l);
                                        };
                                    }),
                                    d.each(["In", "Out"], function (t, e) {
                                        p.Redirects["fade" + e] = function (
                                            t,
                                            i,
                                            r,
                                            s,
                                            n,
                                            o
                                        ) {
                                            var l = d.extend({}, i),
                                                c = l.complete,
                                                h = {
                                                    opacity: "In" === e ? 1 : 0,
                                                };
                                            0 !== r && (l.begin = null),
                                                (l.complete =
                                                    r !== s - 1
                                                        ? null
                                                        : function () {
                                                              c && c.call(n, n),
                                                                  o &&
                                                                      o.resolver(
                                                                          n
                                                                      );
                                                          }),
                                                l.display === a &&
                                                    (l.display =
                                                        "In" === e
                                                            ? "auto"
                                                            : "none"),
                                                p(this, h, l);
                                        };
                                    }),
                                    p
                                );
                            }
                            function w(t) {
                                var e = d.data(t, "velocity");
                                return null === e ? a : e;
                            }
                            function k(t, e) {
                                var i = w(t);
                                i &&
                                    i.delayTimer &&
                                    !i.delayPaused &&
                                    ((i.delayRemaining =
                                        i.delay - e + i.delayBegin),
                                    (i.delayPaused = !0),
                                    clearTimeout(i.delayTimer.setTimeout));
                            }
                            function A(t, e) {
                                var i = w(t);
                                i &&
                                    i.delayTimer &&
                                    i.delayPaused &&
                                    ((i.delayPaused = !1),
                                    (i.delayTimer.setTimeout = setTimeout(
                                        i.delayTimer.next,
                                        i.delayRemaining
                                    )));
                            }
                            function S(t) {
                                return function (e) {
                                    return Math.round(e * t) * (1 / t);
                                };
                            }
                            function C(t, i, a, r) {
                                var s = 4,
                                    n = 1e-7,
                                    o = 10,
                                    l = 11,
                                    c = 1 / (l - 1),
                                    h = "Float32Array" in e;
                                if (4 !== arguments.length) return !1;
                                for (var d = 0; d < 4; ++d)
                                    if (
                                        "number" != typeof arguments[d] ||
                                        isNaN(arguments[d]) ||
                                        !isFinite(arguments[d])
                                    )
                                        return !1;
                                (t = Math.min(t, 1)),
                                    (a = Math.min(a, 1)),
                                    (t = Math.max(t, 0)),
                                    (a = Math.max(a, 0));
                                var u = h ? new Float32Array(l) : new Array(l);
                                function f(t, e) {
                                    return 1 - 3 * e + 3 * t;
                                }
                                function g(t, e) {
                                    return 3 * e - 6 * t;
                                }
                                function p(t) {
                                    return 3 * t;
                                }
                                function x(t, e, i) {
                                    return (
                                        ((f(e, i) * t + g(e, i)) * t + p(e)) * t
                                    );
                                }
                                function m(t, e, i) {
                                    return (
                                        3 * f(e, i) * t * t +
                                        2 * g(e, i) * t +
                                        p(e)
                                    );
                                }
                                function b(e) {
                                    for (
                                        var i = 0, r = 1, h = l - 1;
                                        r !== h && u[r] <= e;
                                        ++r
                                    )
                                        i += c;
                                    --r;
                                    var d =
                                            i +
                                            ((e - u[r]) / (u[r + 1] - u[r])) *
                                                c,
                                        f = m(d, t, a);
                                    return f >= 0.001
                                        ? (function (e, i) {
                                              for (var r = 0; r < s; ++r) {
                                                  var n = m(i, t, a);
                                                  if (0 === n) return i;
                                                  i -= (x(i, t, a) - e) / n;
                                              }
                                              return i;
                                          })(e, d)
                                        : 0 === f
                                        ? d
                                        : (function (e, i, r) {
                                              var s,
                                                  l,
                                                  c = 0;
                                              do {
                                                  (s =
                                                      x(
                                                          (l = i + (r - i) / 2),
                                                          t,
                                                          a
                                                      ) - e) > 0
                                                      ? (r = l)
                                                      : (i = l);
                                              } while (
                                                  Math.abs(s) > n &&
                                                  ++c < o
                                              );
                                              return l;
                                          })(e, i, i + c);
                                }
                                var v = !1;
                                function y() {
                                    (v = !0),
                                        (t === i && a === r) ||
                                            (function () {
                                                for (var e = 0; e < l; ++e)
                                                    u[e] = x(e * c, t, a);
                                            })();
                                }
                                var w = function (e) {
                                    return (
                                        v || y(),
                                        t === i && a === r
                                            ? e
                                            : 0 === e
                                            ? 0
                                            : 1 === e
                                            ? 1
                                            : x(b(e), i, r)
                                    );
                                };
                                w.getControlPoints = function () {
                                    return [
                                        { x: t, y: i },
                                        { x: a, y: r },
                                    ];
                                };
                                var k = "generateBezier(" + [t, i, a, r] + ")";
                                return (
                                    (w.toString = function () {
                                        return k;
                                    }),
                                    w
                                );
                            }
                            function P(t, e) {
                                var i = t;
                                return (
                                    u.isString(t)
                                        ? p.Easings[t] || (i = !1)
                                        : (i =
                                              u.isArray(t) && 1 === t.length
                                                  ? S.apply(null, t)
                                                  : u.isArray(t) &&
                                                    2 === t.length
                                                  ? x.apply(null, t.concat([e]))
                                                  : !(
                                                        !u.isArray(t) ||
                                                        4 !== t.length
                                                    ) && C.apply(null, t)),
                                    !1 === i &&
                                        (i = p.Easings[p.defaults.easing]
                                            ? p.defaults.easing
                                            : g),
                                    i
                                );
                            }
                            function L(t) {
                                if (t) {
                                    var e =
                                            p.timestamp && !0 !== t
                                                ? t
                                                : o.now(),
                                        i = p.State.calls.length;
                                    i > 1e4 &&
                                        ((p.State.calls = (function (t) {
                                            for (
                                                var e = -1,
                                                    i = t ? t.length : 0,
                                                    a = [];
                                                ++e < i;

                                            ) {
                                                var r = t[e];
                                                r && a.push(r);
                                            }
                                            return a;
                                        })(p.State.calls)),
                                        (i = p.State.calls.length));
                                    for (var r = 0; r < i; r++)
                                        if (p.State.calls[r]) {
                                            var n = p.State.calls[r],
                                                l = n[0],
                                                c = n[2],
                                                h = n[3],
                                                f = !h,
                                                g = null,
                                                x = n[5],
                                                b = n[6];
                                            if (
                                                (h ||
                                                    (h = p.State.calls[r][3] =
                                                        e - 16),
                                                x)
                                            ) {
                                                if (!0 !== x.resume) continue;
                                                (h = n[3] =
                                                    Math.round(e - b - 16)),
                                                    (n[5] = null);
                                            }
                                            b = n[6] = e - h;
                                            for (
                                                var y = Math.min(
                                                        b / c.duration,
                                                        1
                                                    ),
                                                    k = 0,
                                                    A = l.length;
                                                k < A;
                                                k++
                                            ) {
                                                var S = l[k],
                                                    C = S.element;
                                                if (w(C)) {
                                                    var P = !1;
                                                    if (
                                                        c.display !== a &&
                                                        null !== c.display &&
                                                        "none" !== c.display
                                                    ) {
                                                        if (
                                                            "flex" === c.display
                                                        ) {
                                                            d.each(
                                                                [
                                                                    "-webkit-box",
                                                                    "-moz-box",
                                                                    "-ms-flexbox",
                                                                    "-webkit-flex",
                                                                ],
                                                                function (
                                                                    t,
                                                                    e
                                                                ) {
                                                                    m.setPropertyValue(
                                                                        C,
                                                                        "display",
                                                                        e
                                                                    );
                                                                }
                                                            );
                                                        }
                                                        m.setPropertyValue(
                                                            C,
                                                            "display",
                                                            c.display
                                                        );
                                                    }
                                                    for (var M in (c.visibility !==
                                                        a &&
                                                        "hidden" !==
                                                            c.visibility &&
                                                        m.setPropertyValue(
                                                            C,
                                                            "visibility",
                                                            c.visibility
                                                        ),
                                                    S))
                                                        if (
                                                            S.hasOwnProperty(
                                                                M
                                                            ) &&
                                                            "element" !== M
                                                        ) {
                                                            var E,
                                                                I = S[M],
                                                                O = u.isString(
                                                                    I.easing
                                                                )
                                                                    ? p.Easings[
                                                                          I
                                                                              .easing
                                                                      ]
                                                                    : I.easing;
                                                            if (
                                                                u.isString(
                                                                    I.pattern
                                                                )
                                                            ) {
                                                                var z =
                                                                    1 === y
                                                                        ? function (
                                                                              t,
                                                                              e,
                                                                              i
                                                                          ) {
                                                                              var a =
                                                                                  I
                                                                                      .endValue[
                                                                                      e
                                                                                  ];
                                                                              return i
                                                                                  ? Math.round(
                                                                                        a
                                                                                    )
                                                                                  : a;
                                                                          }
                                                                        : function (
                                                                              t,
                                                                              e,
                                                                              i
                                                                          ) {
                                                                              var a =
                                                                                      I
                                                                                          .startValue[
                                                                                          e
                                                                                      ],
                                                                                  r =
                                                                                      I
                                                                                          .endValue[
                                                                                          e
                                                                                      ] -
                                                                                      a,
                                                                                  s =
                                                                                      a +
                                                                                      r *
                                                                                          O(
                                                                                              y,
                                                                                              c,
                                                                                              r
                                                                                          );
                                                                              return i
                                                                                  ? Math.round(
                                                                                        s
                                                                                    )
                                                                                  : s;
                                                                          };
                                                                E =
                                                                    I.pattern.replace(
                                                                        /{(\d+)(!)?}/g,
                                                                        z
                                                                    );
                                                            } else if (1 === y)
                                                                E = I.endValue;
                                                            else {
                                                                var F =
                                                                    I.endValue -
                                                                    I.startValue;
                                                                E =
                                                                    I.startValue +
                                                                    F *
                                                                        O(
                                                                            y,
                                                                            c,
                                                                            F
                                                                        );
                                                            }
                                                            if (
                                                                !f &&
                                                                E ===
                                                                    I.currentValue
                                                            )
                                                                continue;
                                                            if (
                                                                ((I.currentValue =
                                                                    E),
                                                                "tween" === M)
                                                            )
                                                                g = E;
                                                            else {
                                                                var D;
                                                                if (
                                                                    m.Hooks
                                                                        .registered[
                                                                        M
                                                                    ]
                                                                ) {
                                                                    D =
                                                                        m.Hooks.getRoot(
                                                                            M
                                                                        );
                                                                    var N =
                                                                        w(C)
                                                                            .rootPropertyValueCache[
                                                                            D
                                                                        ];
                                                                    N &&
                                                                        (I.rootPropertyValue =
                                                                            N);
                                                                }
                                                                var X =
                                                                    m.setPropertyValue(
                                                                        C,
                                                                        M,
                                                                        I.currentValue +
                                                                            (s <
                                                                                9 &&
                                                                            0 ===
                                                                                parseFloat(
                                                                                    E
                                                                                )
                                                                                ? ""
                                                                                : I.unitType),
                                                                        I.rootPropertyValue,
                                                                        I.scrollData
                                                                    );
                                                                m.Hooks
                                                                    .registered[
                                                                    M
                                                                ] &&
                                                                    (m
                                                                        .Normalizations
                                                                        .registered[
                                                                        D
                                                                    ]
                                                                        ? (w(
                                                                              C
                                                                          ).rootPropertyValueCache[
                                                                              D
                                                                          ] =
                                                                              m.Normalizations.registered[
                                                                                  D
                                                                              ](
                                                                                  "extract",
                                                                                  null,
                                                                                  X[1]
                                                                              ))
                                                                        : (w(
                                                                              C
                                                                          ).rootPropertyValueCache[
                                                                              D
                                                                          ] =
                                                                              X[1])),
                                                                    "transform" ===
                                                                        X[0] &&
                                                                        (P =
                                                                            !0);
                                                            }
                                                        }
                                                    c.mobileHA &&
                                                        w(C).transformCache
                                                            .translate3d ===
                                                            a &&
                                                        ((w(
                                                            C
                                                        ).transformCache.translate3d =
                                                            "(0px, 0px, 0px)"),
                                                        (P = !0)),
                                                        P &&
                                                            m.flushTransformCache(
                                                                C
                                                            );
                                                }
                                            }
                                            c.display !== a &&
                                                "none" !== c.display &&
                                                (p.State.calls[r][2].display =
                                                    !1),
                                                c.visibility !== a &&
                                                    "hidden" !== c.visibility &&
                                                    (p.State.calls[
                                                        r
                                                    ][2].visibility = !1),
                                                c.progress &&
                                                    c.progress.call(
                                                        n[1],
                                                        n[1],
                                                        y,
                                                        Math.max(
                                                            0,
                                                            h + c.duration - e
                                                        ),
                                                        h,
                                                        g
                                                    ),
                                                1 === y && T(r);
                                        }
                                }
                                p.State.isTicking && v(L);
                            }
                            function T(t, e) {
                                if (!p.State.calls[t]) return !1;
                                for (
                                    var i = p.State.calls[t][0],
                                        r = p.State.calls[t][1],
                                        s = p.State.calls[t][2],
                                        n = p.State.calls[t][4],
                                        o = !1,
                                        l = 0,
                                        c = i.length;
                                    l < c;
                                    l++
                                ) {
                                    var h = i[l].element;
                                    e ||
                                        s.loop ||
                                        ("none" === s.display &&
                                            m.setPropertyValue(
                                                h,
                                                "display",
                                                s.display
                                            ),
                                        "hidden" === s.visibility &&
                                            m.setPropertyValue(
                                                h,
                                                "visibility",
                                                s.visibility
                                            ));
                                    var u = w(h);
                                    if (
                                        !0 !== s.loop &&
                                        (d.queue(h)[1] === a ||
                                            !/\.velocityQueueEntryFlag/i.test(
                                                d.queue(h)[1]
                                            )) &&
                                        u
                                    ) {
                                        (u.isAnimating = !1),
                                            (u.rootPropertyValueCache = {});
                                        var f = !1;
                                        d.each(
                                            m.Lists.transforms3D,
                                            function (t, e) {
                                                var i = /^scale/.test(e)
                                                        ? 1
                                                        : 0,
                                                    r = u.transformCache[e];
                                                u.transformCache[e] !== a &&
                                                    new RegExp(
                                                        "^\\(" + i + "[^.]"
                                                    ).test(r) &&
                                                    ((f = !0),
                                                    delete u.transformCache[e]);
                                            }
                                        ),
                                            s.mobileHA &&
                                                ((f = !0),
                                                delete u.transformCache
                                                    .translate3d),
                                            f && m.flushTransformCache(h),
                                            m.Values.removeClass(
                                                h,
                                                "velocity-animating"
                                            );
                                    }
                                    if (
                                        !e &&
                                        s.complete &&
                                        !s.loop &&
                                        l === c - 1
                                    )
                                        try {
                                            s.complete.call(r, r);
                                        } catch (t) {
                                            setTimeout(function () {
                                                throw t;
                                            }, 1);
                                        }
                                    n && !0 !== s.loop && n(r),
                                        u &&
                                            !0 === s.loop &&
                                            !e &&
                                            (d.each(
                                                u.tweensContainer,
                                                function (t, e) {
                                                    if (
                                                        /^rotate/.test(t) &&
                                                        (parseFloat(
                                                            e.startValue
                                                        ) -
                                                            parseFloat(
                                                                e.endValue
                                                            )) %
                                                            360 ==
                                                            0
                                                    ) {
                                                        var i = e.startValue;
                                                        (e.startValue =
                                                            e.endValue),
                                                            (e.endValue = i);
                                                    }
                                                    /^backgroundPosition/.test(
                                                        t
                                                    ) &&
                                                        100 ===
                                                            parseFloat(
                                                                e.endValue
                                                            ) &&
                                                        "%" === e.unitType &&
                                                        ((e.endValue = 0),
                                                        (e.startValue = 100));
                                                }
                                            ),
                                            p(h, "reverse", {
                                                loop: !0,
                                                delay: s.delay,
                                            })),
                                        !1 !== s.queue && d.dequeue(h, s.queue);
                                }
                                p.State.calls[t] = !1;
                                for (
                                    var g = 0, x = p.State.calls.length;
                                    g < x;
                                    g++
                                )
                                    if (!1 !== p.State.calls[g]) {
                                        o = !0;
                                        break;
                                    }
                                !1 === o &&
                                    ((p.State.isTicking = !1),
                                    delete p.State.calls,
                                    (p.State.calls = []));
                            }
                            jQuery.fn.velocity = jQuery.fn.animate;
                        })(
                            window.jQuery || window.Zepto || window,
                            window,
                            window ? window.document : void 0
                        );
                    });
            },
            593: (t) => {
                "use strict";
                t.exports = JSON.parse(
                    '{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}'
                );
            },
        },
        i = {};
    function a(t) {
        var r = i[t];
        if (void 0 !== r) return r.exports;
        var s = (i[t] = { exports: {} });
        return e[t].call(s.exports, s, s.exports, a), s.exports;
    }
    (a.m = e),
        (t = []),
        (a.O = (e, i, r, s) => {
            if (!i) {
                var n = 1 / 0;
                for (h = 0; h < t.length; h++) {
                    for (var [i, r, s] = t[h], o = !0, l = 0; l < i.length; l++)
                        (!1 & s || n >= s) &&
                        Object.keys(a.O).every((t) => a.O[t](i[l]))
                            ? i.splice(l--, 1)
                            : ((o = !1), s < n && (n = s));
                    if (o) {
                        t.splice(h--, 1);
                        var c = r();
                        void 0 !== c && (e = c);
                    }
                }
                return e;
            }
            s = s || 0;
            for (var h = t.length; h > 0 && t[h - 1][2] > s; h--)
                t[h] = t[h - 1];
            t[h] = [i, r, s];
        }),
        (a.n = (t) => {
            var e = t && t.__esModule ? () => t.default : () => t;
            return a.d(e, { a: e }), e;
        }),
        (a.d = (t, e) => {
            for (var i in e)
                a.o(e, i) &&
                    !a.o(t, i) &&
                    Object.defineProperty(t, i, { enumerable: !0, get: e[i] });
        }),
        (a.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e)),
        (a.r = (t) => {
            "undefined" != typeof Symbol &&
                Symbol.toStringTag &&
                Object.defineProperty(t, Symbol.toStringTag, {
                    value: "Module",
                }),
                Object.defineProperty(t, "__esModule", { value: !0 });
        }),
        (() => {
            var t = { 449: 0, 464: 0 };
            a.O.j = (e) => 0 === t[e];
            var e = (e, i) => {
                    var r,
                        s,
                        [n, o, l] = i,
                        c = 0;
                    if (n.some((e) => 0 !== t[e])) {
                        for (r in o) a.o(o, r) && (a.m[r] = o[r]);
                        if (l) var h = l(a);
                    }
                    for (e && e(i); c < n.length; c++)
                        (s = n[c]), a.o(t, s) && t[s] && t[s][0](), (t[s] = 0);
                    return a.O(h);
                },
                i = (self.webpackChunkdashboard_pajak =
                    self.webpackChunkdashboard_pajak || []);
            i.forEach(e.bind(null, 0)), (i.push = e.bind(null, i.push.bind(i)));
        })(),
        a.O(void 0, [464], () => a(211));
    var r = a.O(void 0, [464], () => a(580));
    r = a.O(r);
})();
